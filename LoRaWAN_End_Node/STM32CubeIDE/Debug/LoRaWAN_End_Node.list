
LoRaWAN_End_Node.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013e58  08000138  08000138  00010138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f90  08013f90  08013f90  00023f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014f20  08014f20  0003e5d8  2**0
                  CONTENTS
  4 .ARM          00000008  08014f20  08014f20  00024f20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014f28  08014f28  0003e5d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014f28  08014f28  00024f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08014f30  08014f30  00024f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .USER_embedded_Keys 000000d8  0803e500  0803e500  0003e500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .data         00000110  20000000  08014f38  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 LW_NVM_RAM    00000b98  20008000  20008000  00048000  2**2
                  ALLOC
 11 .bss          00001730  20000110  20000110  00040110  2**2
                  ALLOC
 12 RAM1_region   00000000  20001840  20001840  0003e5d8  2**0
                  CONTENTS
 13 RAM2_region   00000000  20009000  20009000  0003e5d8  2**0
                  CONTENTS
 14 ._user_heap_stack 00000a00  20001840  20001840  00040110  2**0
                  ALLOC
 15 .ARM.attributes 0000002a  00000000  00000000  0003e5d8  2**0
                  CONTENTS, READONLY
 16 .debug_info   00068385  00000000  00000000  0003e602  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_abbrev 0000d1bf  00000000  00000000  000a6987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    0002cc74  00000000  00000000  000b3b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_aranges 00003370  00000000  00000000  000e07c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_ranges 000034a8  00000000  00000000  000e3b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_macro  0002eca1  00000000  00000000  000e6fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line   0005c0de  00000000  00000000  00115c79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_str    000e94d7  00000000  00000000  00171d57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .comment      00000050  00000000  00000000  0025b22e  2**0
                  CONTENTS, READONLY
 25 .debug_frame  00009084  00000000  00000000  0025b280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000110 	.word	0x20000110
 8000154:	00000000 	.word	0x00000000
 8000158:	08013f78 	.word	0x08013f78

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000114 	.word	0x20000114
 8000174:	08013f78 	.word	0x08013f78

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	; 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	; 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80008ce:	2afd      	cmp	r2, #253	; 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	; 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	; 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	; 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14d      	bne.n	8000c84 <__udivmoddi4+0xac>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d968      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bee:	fab2 f282 	clz	r2, r2
 8000bf2:	b152      	cbz	r2, 8000c0a <__udivmoddi4+0x32>
 8000bf4:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf8:	f1c2 0120 	rsb	r1, r2, #32
 8000bfc:	fa20 f101 	lsr.w	r1, r0, r1
 8000c00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c04:	ea41 0803 	orr.w	r8, r1, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 451c 	mov.w	r5, ip, lsr #16
 8000c0e:	0c21      	lsrs	r1, r4, #16
 8000c10:	fbb8 fef5 	udiv	lr, r8, r5
 8000c14:	fa1f f78c 	uxth.w	r7, ip
 8000c18:	fb05 831e 	mls	r3, r5, lr, r8
 8000c1c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c20:	fb0e f107 	mul.w	r1, lr, r7
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d90b      	bls.n	8000c40 <__udivmoddi4+0x68>
 8000c28:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2c:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000c30:	f080 811e 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c34:	4299      	cmp	r1, r3
 8000c36:	f240 811b 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c3a:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c3e:	4463      	add	r3, ip
 8000c40:	1a5b      	subs	r3, r3, r1
 8000c42:	b2a4      	uxth	r4, r4
 8000c44:	fbb3 f0f5 	udiv	r0, r3, r5
 8000c48:	fb05 3310 	mls	r3, r5, r0, r3
 8000c4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c50:	fb00 f707 	mul.w	r7, r0, r7
 8000c54:	42a7      	cmp	r7, r4
 8000c56:	d90a      	bls.n	8000c6e <__udivmoddi4+0x96>
 8000c58:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c60:	f080 8108 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c64:	42a7      	cmp	r7, r4
 8000c66:	f240 8105 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c6a:	4464      	add	r4, ip
 8000c6c:	3802      	subs	r0, #2
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000c74:	2100      	movs	r1, #0
 8000c76:	b11e      	cbz	r6, 8000c80 <__udivmoddi4+0xa8>
 8000c78:	40d4      	lsrs	r4, r2
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c84:	428b      	cmp	r3, r1
 8000c86:	d908      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c88:	2e00      	cmp	r6, #0
 8000c8a:	f000 80ee 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8e:	2100      	movs	r1, #0
 8000c90:	e9c6 0500 	strd	r0, r5, [r6]
 8000c94:	4608      	mov	r0, r1
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f183 	clz	r1, r3
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	42ab      	cmp	r3, r5
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e2      	beq.n	8000c80 <__udivmoddi4+0xa8>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7df      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8091 	bne.w	8000df0 <__udivmoddi4+0x218>
 8000cce:	eba1 050c 	sub.w	r5, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2101      	movs	r1, #1
 8000cdc:	fbb5 f3f7 	udiv	r3, r5, r7
 8000ce0:	fb07 5013 	mls	r0, r7, r3, r5
 8000ce4:	0c25      	lsrs	r5, r4, #16
 8000ce6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	42a8      	cmp	r0, r5
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0505 	adds.w	r5, ip, r5
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	42a8      	cmp	r0, r5
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a2d      	subs	r5, r5, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0c:	fb07 5510 	mls	r5, r7, r0, r5
 8000d10:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4628      	mov	r0, r5
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79e      	b.n	8000c76 <__udivmoddi4+0x9e>
 8000d38:	f1c1 0720 	rsb	r7, r1, #32
 8000d3c:	408b      	lsls	r3, r1
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa05 f301 	lsl.w	r3, r5, r1
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40fd      	lsrs	r5, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f301 	lsl.w	r3, r0, r1
 8000d5a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 5518 	mls	r5, r9, r8, r5
 8000d68:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	42a8      	cmp	r0, r5
 8000d72:	fa02 f201 	lsl.w	r2, r2, r1
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0505 	adds.w	r5, ip, r5
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	42a8      	cmp	r0, r5
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4465      	add	r5, ip
 8000d90:	1a2d      	subs	r5, r5, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb5 f0f9 	udiv	r0, r5, r9
 8000d98:	fb09 5510 	mls	r5, r9, r0, r5
 8000d9c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	45ae      	cmp	lr, r5
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0505 	adds.w	r5, ip, r5
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	45ae      	cmp	lr, r5
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4465      	add	r5, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba5 050e 	sub.w	r5, r5, lr
 8000dc6:	42a5      	cmp	r5, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15e      	cbz	r6, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb65 050e 	sbc.w	r5, r5, lr
 8000dda:	fa05 f707 	lsl.w	r7, r5, r7
 8000dde:	fa22 f301 	lsr.w	r3, r2, r1
 8000de2:	40cd      	lsrs	r5, r1
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c6 7500 	strd	r7, r5, [r6]
 8000dea:	2100      	movs	r1, #0
 8000dec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df0:	f1c2 0320 	rsb	r3, r2, #32
 8000df4:	fa20 f103 	lsr.w	r1, r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa25 f303 	lsr.w	r3, r5, r3
 8000e00:	4095      	lsls	r5, r2
 8000e02:	430d      	orrs	r5, r1
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3011 	mls	r0, r7, r1, r3
 8000e14:	0c2b      	lsrs	r3, r5, #16
 8000e16:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8000e1a:	fb01 f00e 	mul.w	r0, r1, lr
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	4298      	cmp	r0, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3902      	subs	r1, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1a1b      	subs	r3, r3, r0
 8000e3a:	b2ad      	uxth	r5, r5
 8000e3c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e40:	fb07 3310 	mls	r3, r7, r0, r3
 8000e44:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e48:	fb00 f30e 	mul.w	r3, r0, lr
 8000e4c:	42ab      	cmp	r3, r5
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0505 	adds.w	r5, ip, r5
 8000e54:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	42ab      	cmp	r3, r5
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3802      	subs	r0, #2
 8000e60:	4465      	add	r5, ip
 8000e62:	1aed      	subs	r5, r5, r3
 8000e64:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	4631      	mov	r1, r6
 8000e6c:	4630      	mov	r0, r6
 8000e6e:	e707      	b.n	8000c80 <__udivmoddi4+0xa8>
 8000e70:	4686      	mov	lr, r0
 8000e72:	e6e5      	b.n	8000c40 <__udivmoddi4+0x68>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6fa      	b.n	8000c6e <__udivmoddi4+0x96>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4641      	mov	r1, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4465      	add	r5, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_ADC_Init>:
ADC_HandleTypeDef hadc;
DMA_HandleTypeDef hdma_adc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eac:	b500      	push	{lr}
 8000eae:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC_Init 0 */
  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000eb8:	481a      	ldr	r0, [pc, #104]	; (8000f24 <MX_ADC_Init+0x78>)
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <MX_ADC_Init+0x7c>)
 8000ebc:	6002      	str	r2, [r0, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8000ec2:	6042      	str	r2, [r0, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000ec4:	6083      	str	r3, [r0, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ec6:	60c3      	str	r3, [r0, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ec8:	6103      	str	r3, [r0, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000eca:	2204      	movs	r2, #4
 8000ecc:	6142      	str	r2, [r0, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000ece:	7603      	strb	r3, [r0, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000ed0:	7643      	strb	r3, [r0, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ed2:	7683      	strb	r3, [r0, #26]
  hadc.Init.NbrOfConversion = 1;
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	61c2      	str	r2, [r0, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ed8:	f880 3020 	strb.w	r3, [r0, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000edc:	6243      	str	r3, [r0, #36]	; 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ede:	6283      	str	r3, [r0, #40]	; 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000ee4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ee8:	6302      	str	r2, [r0, #48]	; 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000eea:	2206      	movs	r2, #6
 8000eec:	6342      	str	r2, [r0, #52]	; 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000eee:	6383      	str	r3, [r0, #56]	; 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000ef0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000ef4:	64c3      	str	r3, [r0, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000ef6:	f002 f8bb 	bl	8003070 <HAL_ADC_Init>
 8000efa:	b960      	cbnz	r0, 8000f16 <MX_ADC_Init+0x6a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_ADC_Init+0x80>)
 8000efe:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000f04:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f06:	a901      	add	r1, sp, #4
 8000f08:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_ADC_Init+0x78>)
 8000f0a:	f002 fae5 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8000f0e:	b928      	cbnz	r0, 8000f1c <MX_ADC_Init+0x70>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f10:	b005      	add	sp, #20
 8000f12:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8000f16:	f000 fc25 	bl	8001764 <Error_Handler>
 8000f1a:	e7ef      	b.n	8000efc <MX_ADC_Init+0x50>
    Error_Handler();
 8000f1c:	f000 fc22 	bl	8001764 <Error_Handler>
}
 8000f20:	e7f6      	b.n	8000f10 <MX_ADC_Init+0x64>
 8000f22:	bf00      	nop
 8000f24:	2000012c 	.word	0x2000012c
 8000f28:	40012400 	.word	0x40012400
 8000f2c:	10000010 	.word	0x10000010

08000f30 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f30:	b510      	push	{r4, lr}
 8000f32:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f34:	2300      	movs	r3, #0
 8000f36:	9303      	str	r3, [sp, #12]
 8000f38:	9304      	str	r3, [sp, #16]
 8000f3a:	9305      	str	r3, [sp, #20]
 8000f3c:	9306      	str	r3, [sp, #24]
 8000f3e:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC)
 8000f40:	6802      	ldr	r2, [r0, #0]
 8000f42:	4b28      	ldr	r3, [pc, #160]	; (8000fe4 <HAL_ADC_MspInit+0xb4>)
 8000f44:	429a      	cmp	r2, r3
 8000f46:	d001      	beq.n	8000f4c <HAL_ADC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000f48:	b008      	add	sp, #32
 8000f4a:	bd10      	pop	{r4, pc}
 8000f4c:	4604      	mov	r4, r0
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f58:	661a      	str	r2, [r3, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000f5a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f5c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f60:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8000f62:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000f64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f66:	f042 0202 	orr.w	r2, r2, #2
 8000f6a:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000f74:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f76:	2304      	movs	r3, #4
 8000f78:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f7a:	2303      	movs	r3, #3
 8000f7c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7e:	a903      	add	r1, sp, #12
 8000f80:	4819      	ldr	r0, [pc, #100]	; (8000fe8 <HAL_ADC_MspInit+0xb8>)
 8000f82:	f003 fc57 	bl	8004834 <HAL_GPIO_Init>
    hdma_adc.Instance = DMA1_Channel1;
 8000f86:	4819      	ldr	r0, [pc, #100]	; (8000fec <HAL_ADC_MspInit+0xbc>)
 8000f88:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_ADC_MspInit+0xc0>)
 8000f8a:	6003      	str	r3, [r0, #0]
    hdma_adc.Init.Request = DMA_REQUEST_ADC;
 8000f8c:	2305      	movs	r3, #5
 8000f8e:	6043      	str	r3, [r0, #4]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f90:	2300      	movs	r3, #0
 8000f92:	6083      	str	r3, [r0, #8]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f94:	60c3      	str	r3, [r0, #12]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	6103      	str	r3, [r0, #16]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f9a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f9e:	6143      	str	r3, [r0, #20]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fa0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fa4:	6183      	str	r3, [r0, #24]
    hdma_adc.Init.Mode = DMA_CIRCULAR;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	61c3      	str	r3, [r0, #28]
    hdma_adc.Init.Priority = DMA_PRIORITY_HIGH;
 8000faa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fae:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8000fb0:	f003 f8da 	bl	8004168 <HAL_DMA_Init>
 8000fb4:	b980      	cbnz	r0, 8000fd8 <HAL_ADC_MspInit+0xa8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_adc, DMA_CHANNEL_NPRIV) != HAL_OK)
 8000fb6:	2110      	movs	r1, #16
 8000fb8:	480c      	ldr	r0, [pc, #48]	; (8000fec <HAL_ADC_MspInit+0xbc>)
 8000fba:	f003 fada 	bl	8004572 <HAL_DMA_ConfigChannelAttributes>
 8000fbe:	b970      	cbnz	r0, 8000fde <HAL_ADC_MspInit+0xae>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc);
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <HAL_ADC_MspInit+0xbc>)
 8000fc2:	6523      	str	r3, [r4, #80]	; 0x50
 8000fc4:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2105      	movs	r1, #5
 8000fca:	2012      	movs	r0, #18
 8000fcc:	f002 ff26 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fd0:	2012      	movs	r0, #18
 8000fd2:	f002 ff5b 	bl	8003e8c <HAL_NVIC_EnableIRQ>
}
 8000fd6:	e7b7      	b.n	8000f48 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8000fd8:	f000 fbc4 	bl	8001764 <Error_Handler>
 8000fdc:	e7eb      	b.n	8000fb6 <HAL_ADC_MspInit+0x86>
      Error_Handler();
 8000fde:	f000 fbc1 	bl	8001764 <Error_Handler>
 8000fe2:	e7ed      	b.n	8000fc0 <HAL_ADC_MspInit+0x90>
 8000fe4:	40012400 	.word	0x40012400
 8000fe8:	48000400 	.word	0x48000400
 8000fec:	20000190 	.word	0x20000190
 8000ff0:	40020008 	.word	0x40020008

08000ff4 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{

  if(adcHandle->Instance==ADC)
 8000ff4:	6802      	ldr	r2, [r0, #0]
 8000ff6:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <HAL_ADC_MspDeInit+0x30>)
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d000      	beq.n	8000ffe <HAL_ADC_MspDeInit+0xa>
 8000ffc:	4770      	bx	lr
{
 8000ffe:	b510      	push	{r4, lr}
 8001000:	4604      	mov	r4, r0
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8001002:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001006:	6e13      	ldr	r3, [r2, #96]	; 0x60
 8001008:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800100c:	6613      	str	r3, [r2, #96]	; 0x60
    __HAL_RCC_ADC_CLK_DISABLE();

    /**ADC GPIO Configuration
    PB2     ------> ADC_IN4
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_2);
 800100e:	2104      	movs	r1, #4
 8001010:	4805      	ldr	r0, [pc, #20]	; (8001028 <HAL_ADC_MspDeInit+0x34>)
 8001012:	f003 fce1 	bl	80049d8 <HAL_GPIO_DeInit>

    /* ADC DMA DeInit */
    HAL_DMA_DeInit(adcHandle->DMA_Handle);
 8001016:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001018:	f003 f918 	bl	800424c <HAL_DMA_DeInit>

    /* ADC interrupt Deinit */
    HAL_NVIC_DisableIRQ(ADC_IRQn);
 800101c:	2012      	movs	r0, #18
 800101e:	f002 ff43 	bl	8003ea8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8001022:	bd10      	pop	{r4, pc}
 8001024:	40012400 	.word	0x40012400
 8001028:	48000400 	.word	0x48000400

0800102c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800102c:	b530      	push	{r4, r5, lr}
 800102e:	b085      	sub	sp, #20
 8001030:	4604      	mov	r4, r0
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
  ADC_ChannelConfTypeDef sConfig = {0};
 8001032:	2300      	movs	r3, #0
 8001034:	9301      	str	r3, [sp, #4]
 8001036:	9302      	str	r3, [sp, #8]
 8001038:	9303      	str	r3, [sp, #12]

  MX_ADC_Init();
 800103a:	f7ff ff37 	bl	8000eac <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <ADC_ReadChannels+0x6c>)
 8001040:	f002 fd0a 	bl	8003a58 <HAL_ADCEx_Calibration_Start>
 8001044:	b9f8      	cbnz	r0, 8001086 <ADC_ReadChannels+0x5a>
  {
    Error_Handler();
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001046:	9401      	str	r4, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001048:	2300      	movs	r3, #0
 800104a:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800104c:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800104e:	a901      	add	r1, sp, #4
 8001050:	4811      	ldr	r0, [pc, #68]	; (8001098 <ADC_ReadChannels+0x6c>)
 8001052:	f002 fa41 	bl	80034d8 <HAL_ADC_ConfigChannel>
 8001056:	b9c8      	cbnz	r0, 800108c <ADC_ReadChannels+0x60>
  {
    Error_Handler();
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 8001058:	480f      	ldr	r0, [pc, #60]	; (8001098 <ADC_ReadChannels+0x6c>)
 800105a:	f002 fc01 	bl	8003860 <HAL_ADC_Start>
 800105e:	b9c0      	cbnz	r0, 8001092 <ADC_ReadChannels+0x66>
  {
    /* Start Error */
    Error_Handler();
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 8001060:	4c0d      	ldr	r4, [pc, #52]	; (8001098 <ADC_ReadChannels+0x6c>)
 8001062:	f04f 31ff 	mov.w	r1, #4294967295
 8001066:	4620      	mov	r0, r4
 8001068:	f002 f91a 	bl	80032a0 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc) ;   /* it calls also ADC_Disable() */
 800106c:	4620      	mov	r0, r4
 800106e:	f002 fcd3 	bl	8003a18 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 8001072:	4620      	mov	r0, r4
 8001074:	f002 f973 	bl	800335e <HAL_ADC_GetValue>
 8001078:	4605      	mov	r5, r0

  HAL_ADC_DeInit(&hadc);
 800107a:	4620      	mov	r0, r4
 800107c:	f002 fc6c 	bl	8003958 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 8001080:	4628      	mov	r0, r5
 8001082:	b005      	add	sp, #20
 8001084:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 8001086:	f000 fb6d 	bl	8001764 <Error_Handler>
 800108a:	e7dc      	b.n	8001046 <ADC_ReadChannels+0x1a>
    Error_Handler();
 800108c:	f000 fb6a 	bl	8001764 <Error_Handler>
 8001090:	e7e2      	b.n	8001058 <ADC_ReadChannels+0x2c>
    Error_Handler();
 8001092:	f000 fb67 	bl	8001764 <Error_Handler>
 8001096:	e7e3      	b.n	8001060 <ADC_ReadChannels+0x34>
 8001098:	2000012c 	.word	0x2000012c

0800109c <SYS_InitMeasurement>:
  hadc.Instance = ADC;
 800109c:	4b01      	ldr	r3, [pc, #4]	; (80010a4 <SYS_InitMeasurement+0x8>)
 800109e:	4a02      	ldr	r2, [pc, #8]	; (80010a8 <SYS_InitMeasurement+0xc>)
 80010a0:	601a      	str	r2, [r3, #0]
}
 80010a2:	4770      	bx	lr
 80010a4:	2000012c 	.word	0x2000012c
 80010a8:	40012400 	.word	0x40012400

080010ac <SYS_GetBatteryLevel>:
{
 80010ac:	b508      	push	{r3, lr}
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <SYS_GetBatteryLevel+0x38>)
 80010b0:	f7ff ffbc 	bl	800102c <ADC_ReadChannels>
  if (measuredLevel == 0)
 80010b4:	b1a0      	cbz	r0, 80010e0 <SYS_GetBatteryLevel+0x34>
 80010b6:	4602      	mov	r2, r0
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 80010b8:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <SYS_GetBatteryLevel+0x3c>)
 80010ba:	f8b3 30aa 	ldrh.w	r3, [r3, #170]	; 0xaa
 80010be:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80010c2:	428b      	cmp	r3, r1
 80010c4:	d007      	beq.n	80010d6 <SYS_GetBatteryLevel+0x2a>
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 80010c6:	f640 40e4 	movw	r0, #3300	; 0xce4
 80010ca:	fb03 f000 	mul.w	r0, r3, r0
 80010ce:	fbb0 f0f2 	udiv	r0, r0, r2
 80010d2:	b280      	uxth	r0, r0
 80010d4:	e005      	b.n	80010e2 <SYS_GetBatteryLevel+0x36>
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 80010d6:	4805      	ldr	r0, [pc, #20]	; (80010ec <SYS_GetBatteryLevel+0x40>)
 80010d8:	fbb0 f0f2 	udiv	r0, r0, r2
 80010dc:	b280      	uxth	r0, r0
 80010de:	e000      	b.n	80010e2 <SYS_GetBatteryLevel+0x36>
    batteryLevelmV = 0;
 80010e0:	2000      	movs	r0, #0
}
 80010e2:	bd08      	pop	{r3, pc}
 80010e4:	b4002000 	.word	0xb4002000
 80010e8:	1fff7500 	.word	0x1fff7500
 80010ec:	004c08d8 	.word	0x004c08d8

080010f0 <SYS_GetTemperatureLevel>:
{
 80010f0:	b510      	push	{r4, lr}
 80010f2:	b082      	sub	sp, #8
  uint16_t batteryLevelmV = SYS_GetBatteryLevel();
 80010f4:	f7ff ffda 	bl	80010ac <SYS_GetBatteryLevel>
 80010f8:	4604      	mov	r4, r0
  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_TEMPSENSOR);
 80010fa:	481f      	ldr	r0, [pc, #124]	; (8001178 <SYS_GetTemperatureLevel+0x88>)
 80010fc:	f7ff ff96 	bl	800102c <ADC_ReadChannels>
  if (((int32_t)*TEMPSENSOR_CAL2_ADDR - (int32_t)*TEMPSENSOR_CAL1_ADDR) != 0)
 8001100:	4a1e      	ldr	r2, [pc, #120]	; (800117c <SYS_GetTemperatureLevel+0x8c>)
 8001102:	f8b2 30c8 	ldrh.w	r3, [r2, #200]	; 0xc8
 8001106:	f8b2 20a8 	ldrh.w	r2, [r2, #168]	; 0xa8
 800110a:	4293      	cmp	r3, r2
 800110c:	d01a      	beq.n	8001144 <SYS_GetTemperatureLevel+0x54>
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE(batteryLevelmV,
 800110e:	fb00 f404 	mul.w	r4, r0, r4
 8001112:	08a4      	lsrs	r4, r4, #2
 8001114:	491a      	ldr	r1, [pc, #104]	; (8001180 <SYS_GetTemperatureLevel+0x90>)
 8001116:	fba1 1404 	umull	r1, r4, r1, r4
 800111a:	ebc2 1454 	rsb	r4, r2, r4, lsr #5
 800111e:	2164      	movs	r1, #100	; 0x64
 8001120:	fb01 f404 	mul.w	r4, r1, r4
 8001124:	1a9b      	subs	r3, r3, r2
 8001126:	fb94 f4f3 	sdiv	r4, r4, r3
 800112a:	341e      	adds	r4, #30
 800112c:	b224      	sxth	r4, r4
  APP_LOG(TS_ON, VLEVEL_L, "temp= %d\n\r", temperatureDegreeC);
 800112e:	9400      	str	r4, [sp, #0]
 8001130:	4b14      	ldr	r3, [pc, #80]	; (8001184 <SYS_GetTemperatureLevel+0x94>)
 8001132:	2201      	movs	r2, #1
 8001134:	2100      	movs	r1, #0
 8001136:	4610      	mov	r0, r2
 8001138:	f012 f8be 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  temperatureDegreeC <<= 8;
 800113c:	0220      	lsls	r0, r4, #8
}
 800113e:	b200      	sxth	r0, r0
 8001140:	b002      	add	sp, #8
 8001142:	bd10      	pop	{r4, pc}
    temperatureDegreeC = __LL_ADC_CALC_TEMPERATURE_TYP_PARAMS(TEMPSENSOR_TYP_AVGSLOPE,
 8001144:	fb00 f404 	mul.w	r4, r0, r4
 8001148:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <SYS_GetTemperatureLevel+0x98>)
 800114a:	fba3 2304 	umull	r2, r3, r3, r4
 800114e:	1ae4      	subs	r4, r4, r3
 8001150:	eb03 0454 	add.w	r4, r3, r4, lsr #1
 8001154:	0ae4      	lsrs	r4, r4, #11
 8001156:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800115a:	fb03 f404 	mul.w	r4, r3, r4
 800115e:	f5a4 2439 	sub.w	r4, r4, #757760	; 0xb9000
 8001162:	f5a4 640c 	sub.w	r4, r4, #2240	; 0x8c0
 8001166:	4809      	ldr	r0, [pc, #36]	; (800118c <SYS_GetTemperatureLevel+0x9c>)
 8001168:	fb80 3004 	smull	r3, r0, r0, r4
 800116c:	17e4      	asrs	r4, r4, #31
 800116e:	ebc4 24a0 	rsb	r4, r4, r0, asr #10
 8001172:	341e      	adds	r4, #30
 8001174:	b224      	sxth	r4, r4
 8001176:	e7da      	b.n	800112e <SYS_GetTemperatureLevel+0x3e>
 8001178:	b0001000 	.word	0xb0001000
 800117c:	1fff7500 	.word	0x1fff7500
 8001180:	09ee009f 	.word	0x09ee009f
 8001184:	0801403c 	.word	0x0801403c
 8001188:	00100101 	.word	0x00100101
 800118c:	68db8bad 	.word	0x68db8bad

08001190 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8001190:	b508      	push	{r3, lr}
  /* USER CODE END COMP1_Init 0 */

  /* USER CODE BEGIN COMP1_Init 1 */

  /* USER CODE END COMP1_Init 1 */
  hcomp1.Instance = COMP1;
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <MX_COMP1_Init+0x34>)
 8001194:	4b0c      	ldr	r3, [pc, #48]	; (80011c8 <MX_COMP1_Init+0x38>)
 8001196:	6003      	str	r3, [r0, #0]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_DAC_CH1;
 8001198:	2340      	movs	r3, #64	; 0x40
 800119a:	6103      	str	r3, [r0, #16]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO2;
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	60c3      	str	r3, [r0, #12]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80011a0:	2300      	movs	r3, #0
 80011a2:	6183      	str	r3, [r0, #24]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80011a4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80011a8:	6142      	str	r2, [r0, #20]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80011aa:	61c3      	str	r3, [r0, #28]
  hcomp1.Init.Mode = COMP_POWERMODE_HIGHSPEED;
 80011ac:	6083      	str	r3, [r0, #8]
  hcomp1.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 80011ae:	6043      	str	r3, [r0, #4]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING;
 80011b0:	2311      	movs	r3, #17
 80011b2:	6203      	str	r3, [r0, #32]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80011b4:	f002 fcf4 	bl	8003ba0 <HAL_COMP_Init>
 80011b8:	b900      	cbnz	r0, 80011bc <MX_COMP1_Init+0x2c>
  }
  /* USER CODE BEGIN COMP1_Init 2 */

  /* USER CODE END COMP1_Init 2 */

}
 80011ba:	bd08      	pop	{r3, pc}
    Error_Handler();
 80011bc:	f000 fad2 	bl	8001764 <Error_Handler>
}
 80011c0:	e7fb      	b.n	80011ba <MX_COMP1_Init+0x2a>
 80011c2:	bf00      	nop
 80011c4:	200001f0 	.word	0x200001f0
 80011c8:	40010200 	.word	0x40010200

080011cc <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 80011cc:	b500      	push	{lr}
 80011ce:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	2300      	movs	r3, #0
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	9302      	str	r3, [sp, #8]
 80011d6:	9303      	str	r3, [sp, #12]
 80011d8:	9304      	str	r3, [sp, #16]
 80011da:	9305      	str	r3, [sp, #20]
  if(compHandle->Instance==COMP1)
 80011dc:	6802      	ldr	r2, [r0, #0]
 80011de:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80011e2:	f503 3381 	add.w	r3, r3, #66048	; 0x10200
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d002      	beq.n	80011f0 <HAL_COMP_MspInit+0x24>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 80011ea:	b007      	add	sp, #28
 80011ec:	f85d fb04 	ldr.w	pc, [sp], #4
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011f6:	f042 0202 	orr.w	r2, r2, #2
 80011fa:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80011fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8001204:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001206:	2304      	movs	r3, #4
 8001208:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800120a:	2303      	movs	r3, #3
 800120c:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120e:	a901      	add	r1, sp, #4
 8001210:	4805      	ldr	r0, [pc, #20]	; (8001228 <HAL_COMP_MspInit+0x5c>)
 8001212:	f003 fb0f 	bl	8004834 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(COMP_IRQn, 6, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2106      	movs	r1, #6
 800121a:	2015      	movs	r0, #21
 800121c:	f002 fdfe 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP_IRQn);
 8001220:	2015      	movs	r0, #21
 8001222:	f002 fe33 	bl	8003e8c <HAL_NVIC_EnableIRQ>
}
 8001226:	e7e0      	b.n	80011ea <HAL_COMP_MspInit+0x1e>
 8001228:	48000400 	.word	0x48000400

0800122c <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 800122c:	b500      	push	{lr}
 800122e:	b08b      	sub	sp, #44	; 0x2c

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001230:	2224      	movs	r2, #36	; 0x24
 8001232:	2100      	movs	r1, #0
 8001234:	a801      	add	r0, sp, #4
 8001236:	f012 fe17 	bl	8013e68 <memset>

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800123a:	480e      	ldr	r0, [pc, #56]	; (8001274 <MX_DAC_Init+0x48>)
 800123c:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_DAC_Init+0x4c>)
 800123e:	6003      	str	r3, [r0, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001240:	f002 fe58 	bl	8003ef4 <HAL_DAC_Init>
 8001244:	b978      	cbnz	r0, 8001266 <MX_DAC_Init+0x3a>
    Error_Handler();
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001246:	2200      	movs	r2, #0
 8001248:	9201      	str	r2, [sp, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800124a:	9202      	str	r2, [sp, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_DISABLE;
 800124c:	2302      	movs	r3, #2
 800124e:	9303      	str	r3, [sp, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8001250:	2301      	movs	r3, #1
 8001252:	9304      	str	r3, [sp, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001254:	9205      	str	r2, [sp, #20]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001256:	a901      	add	r1, sp, #4
 8001258:	4806      	ldr	r0, [pc, #24]	; (8001274 <MX_DAC_Init+0x48>)
 800125a:	f002 fe92 	bl	8003f82 <HAL_DAC_ConfigChannel>
 800125e:	b928      	cbnz	r0, 800126c <MX_DAC_Init+0x40>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001260:	b00b      	add	sp, #44	; 0x2c
 8001262:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 8001266:	f000 fa7d 	bl	8001764 <Error_Handler>
 800126a:	e7ec      	b.n	8001246 <MX_DAC_Init+0x1a>
    Error_Handler();
 800126c:	f000 fa7a 	bl	8001764 <Error_Handler>
}
 8001270:	e7f6      	b.n	8001260 <MX_DAC_Init+0x34>
 8001272:	bf00      	nop
 8001274:	2000021c 	.word	0x2000021c
 8001278:	40007400 	.word	0x40007400

0800127c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{

  if(dacHandle->Instance==DAC)
 800127c:	6802      	ldr	r2, [r0, #0]
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_DAC_MspInit+0x28>)
 8001280:	429a      	cmp	r2, r3
 8001282:	d000      	beq.n	8001286 <HAL_DAC_MspInit+0xa>
 8001284:	4770      	bx	lr
{
 8001286:	b082      	sub	sp, #8
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001288:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800128e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001292:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001296:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800129a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800129c:	9b01      	ldr	r3, [sp, #4]
    __HAL_RCC_DAC_CLK_ENABLE();
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800129e:	b002      	add	sp, #8
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40007400 	.word	0x40007400

080012a8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012a8:	b500      	push	{lr}
 80012aa:	b083      	sub	sp, #12
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012b2:	f042 0204 	orr.w	r2, r2, #4
 80012b6:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012ba:	f002 0204 	and.w	r2, r2, #4
 80012be:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 80012c0:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80012c4:	f042 0201 	orr.w	r2, r2, #1
 80012c8:	649a      	str	r2, [r3, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80012ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 80012d2:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
  __HAL_RCC_DMA1_CLK_ENABLE();

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80012d4:	2200      	movs	r2, #0
 80012d6:	2101      	movs	r1, #1
 80012d8:	200b      	movs	r0, #11
 80012da:	f002 fd9f 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80012de:	200b      	movs	r0, #11
 80012e0:	f002 fdd4 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 1, 0);
 80012e4:	2200      	movs	r2, #0
 80012e6:	2101      	movs	r1, #1
 80012e8:	200f      	movs	r0, #15
 80012ea:	f002 fd97 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80012ee:	200f      	movs	r0, #15
 80012f0:	f002 fdcc 	bl	8003e8c <HAL_NVIC_EnableIRQ>

}
 80012f4:	b003      	add	sp, #12
 80012f6:	f85d fb04 	ldr.w	pc, [sp], #4

080012fa <FLASH_IF_INT_IsEmpty>:
  int32_t status = FLASH_IF_MEM_EMPTY;
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_1 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_1 */
  uint32_t index;
  for (index = 0; index < uLength; index += 8)
 80012fa:	2300      	movs	r3, #0
 80012fc:	e001      	b.n	8001302 <FLASH_IF_INT_IsEmpty+0x8>
    if (*(uint64_t *)pStart != UINT64_MAX)
    {
      status = FLASH_IF_MEM_NOT_EMPTY;
      break;
    }
    pStart = (void *)((uint32_t)pStart + 8U);
 80012fe:	3008      	adds	r0, #8
  for (index = 0; index < uLength; index += 8)
 8001300:	3308      	adds	r3, #8
 8001302:	428b      	cmp	r3, r1
 8001304:	d20a      	bcs.n	800131c <FLASH_IF_INT_IsEmpty+0x22>
    if (*(uint64_t *)pStart != UINT64_MAX)
 8001306:	6842      	ldr	r2, [r0, #4]
 8001308:	f8d0 c000 	ldr.w	ip, [r0]
 800130c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8001310:	bf08      	it	eq
 8001312:	f1bc 3fff 	cmpeq.w	ip, #4294967295
 8001316:	d0f2      	beq.n	80012fe <FLASH_IF_INT_IsEmpty+0x4>
      status = FLASH_IF_MEM_NOT_EMPTY;
 8001318:	2001      	movs	r0, #1
  }
  /* USER CODE BEGIN FLASH_IF_INT_IsEmpty_2 */

  /* USER CODE END FLASH_IF_INT_IsEmpty_2 */
  return status;
}
 800131a:	4770      	bx	lr
  int32_t status = FLASH_IF_MEM_EMPTY;
 800131c:	2000      	movs	r0, #0
 800131e:	4770      	bx	lr

08001320 <FLASH_IF_INT_Read>:
  if ((pDestination == NULL) || (pSource == NULL))
 8001320:	b130      	cbz	r0, 8001330 <FLASH_IF_INT_Read+0x10>
{
 8001322:	b508      	push	{r3, lr}
  if ((pDestination == NULL) || (pSource == NULL))
 8001324:	b139      	cbz	r1, 8001336 <FLASH_IF_INT_Read+0x16>
  UTIL_MEM_cpy_8(pDestination, pSource, uLength);
 8001326:	b292      	uxth	r2, r2
 8001328:	f012 f8dc 	bl	80134e4 <UTIL_MEM_cpy_8>
  return ret_status;
 800132c:	2000      	movs	r0, #0
}
 800132e:	bd08      	pop	{r3, pc}
    return FLASH_IF_PARAM_ERROR;
 8001330:	f06f 0005 	mvn.w	r0, #5
}
 8001334:	4770      	bx	lr
    return FLASH_IF_PARAM_ERROR;
 8001336:	f06f 0005 	mvn.w	r0, #5
 800133a:	e7f8      	b.n	800132e <FLASH_IF_INT_Read+0xe>

0800133c <FLASH_IF_INT_Clear_Error>:

static FLASH_IF_StatusTypedef FLASH_IF_INT_Clear_Error(void)
{
 800133c:	b508      	push	{r3, lr}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_1 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_1 */
  /* Unlock the Program memory */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800133e:	f003 f955 	bl	80045ec <HAL_FLASH_Unlock>
 8001342:	b978      	cbnz	r0, 8001364 <FLASH_IF_INT_Clear_Error+0x28>
  {
    /* Clear all FLASH flags */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <FLASH_IF_INT_Clear_Error+0x30>)
 8001346:	699a      	ldr	r2, [r3, #24]
 8001348:	f042 4240 	orr.w	r2, r2, #3221225472	; 0xc0000000
 800134c:	619a      	str	r2, [r3, #24]
 800134e:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
 8001352:	611a      	str	r2, [r3, #16]
    /* Unlock the Program memory */
    if (HAL_FLASH_Lock() == HAL_OK)
 8001354:	f003 f962 	bl	800461c <HAL_FLASH_Lock>
 8001358:	b908      	cbnz	r0, 800135e <FLASH_IF_INT_Clear_Error+0x22>
    {
      ret_status = FLASH_IF_OK;
 800135a:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN FLASH_IF_INT_Clear_Error_2 */

  /* USER CODE END FLASH_IF_INT_Clear_Error_2 */
  return ret_status;
}
 800135c:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_LOCK_ERROR;
 800135e:	f06f 0004 	mvn.w	r0, #4
 8001362:	e7fb      	b.n	800135c <FLASH_IF_INT_Clear_Error+0x20>
 8001364:	f06f 0004 	mvn.w	r0, #4
 8001368:	e7f8      	b.n	800135c <FLASH_IF_INT_Clear_Error+0x20>
 800136a:	bf00      	nop
 800136c:	58004000 	.word	0x58004000

08001370 <FLASH_IF_INT_Erase>:
{
 8001370:	b570      	push	{r4, r5, r6, lr}
 8001372:	b084      	sub	sp, #16
  uint32_t page_error = 0U;
 8001374:	2300      	movs	r3, #0
 8001376:	9303      	str	r3, [sp, #12]
  if (pStart == NULL)
 8001378:	2800      	cmp	r0, #0
 800137a:	d039      	beq.n	80013f0 <FLASH_IF_INT_Erase+0x80>
 800137c:	460e      	mov	r6, r1
 800137e:	4604      	mov	r4, r0
  ret_status = FLASH_IF_INT_Clear_Error();
 8001380:	f7ff ffdc 	bl	800133c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001384:	4605      	mov	r5, r0
 8001386:	b110      	cbz	r0, 800138e <FLASH_IF_INT_Erase+0x1e>
}
 8001388:	4628      	mov	r0, r5
 800138a:	b004      	add	sp, #16
 800138c:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 800138e:	f003 f92d 	bl	80045ec <HAL_FLASH_Unlock>
 8001392:	bb80      	cbnz	r0, 80013f6 <FLASH_IF_INT_Erase+0x86>
      erase_init.TypeErase = FLASH_TYPEERASE_PAGES;
 8001394:	2302      	movs	r3, #2
 8001396:	9300      	str	r3, [sp, #0]
      erase_init.Page = PAGE_INDEX(uStart);
 8001398:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 800139c:	4817      	ldr	r0, [pc, #92]	; (80013fc <FLASH_IF_INT_Erase+0x8c>)
 800139e:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80013a2:	4a17      	ldr	r2, [pc, #92]	; (8001400 <FLASH_IF_INT_Erase+0x90>)
 80013a4:	ea02 2181 	and.w	r1, r2, r1, lsl #10
 80013a8:	fbb3 fcf1 	udiv	ip, r3, r1
 80013ac:	fb01 331c 	mls	r3, r1, ip, r3
 80013b0:	0adb      	lsrs	r3, r3, #11
 80013b2:	9301      	str	r3, [sp, #4]
      erase_init.NbPages = PAGE_INDEX(uStart + uLength - 1U) - erase_init.Page + 1U;
 80013b4:	4434      	add	r4, r6
 80013b6:	f104 4478 	add.w	r4, r4, #4160749568	; 0xf8000000
 80013ba:	3c01      	subs	r4, #1
 80013bc:	f8d0 15e0 	ldr.w	r1, [r0, #1504]	; 0x5e0
 80013c0:	ea02 2281 	and.w	r2, r2, r1, lsl #10
 80013c4:	fbb4 f1f2 	udiv	r1, r4, r2
 80013c8:	fb02 4411 	mls	r4, r2, r1, r4
 80013cc:	ebc3 24d4 	rsb	r4, r3, r4, lsr #11
 80013d0:	3401      	adds	r4, #1
 80013d2:	9402      	str	r4, [sp, #8]
      hal_status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 80013d4:	a903      	add	r1, sp, #12
 80013d6:	4668      	mov	r0, sp
 80013d8:	f003 f9ec 	bl	80047b4 <HAL_FLASHEx_Erase>
      if (hal_status != HAL_OK)
 80013dc:	b118      	cbz	r0, 80013e6 <FLASH_IF_INT_Erase+0x76>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80013de:	2802      	cmp	r0, #2
 80013e0:	d004      	beq.n	80013ec <FLASH_IF_INT_Erase+0x7c>
 80013e2:	f06f 0501 	mvn.w	r5, #1
      HAL_FLASH_Lock();
 80013e6:	f003 f919 	bl	800461c <HAL_FLASH_Lock>
 80013ea:	e7cd      	b.n	8001388 <FLASH_IF_INT_Erase+0x18>
        ret_status = (hal_status == HAL_BUSY) ? FLASH_IF_BUSY : FLASH_IF_ERASE_ERROR;
 80013ec:	2501      	movs	r5, #1
 80013ee:	e7fa      	b.n	80013e6 <FLASH_IF_INT_Erase+0x76>
    return FLASH_IF_PARAM_ERROR;
 80013f0:	f06f 0505 	mvn.w	r5, #5
 80013f4:	e7c8      	b.n	8001388 <FLASH_IF_INT_Erase+0x18>
      ret_status = FLASH_IF_LOCK_ERROR;
 80013f6:	f06f 0504 	mvn.w	r5, #4
 80013fa:	e7c5      	b.n	8001388 <FLASH_IF_INT_Erase+0x18>
 80013fc:	1fff7000 	.word	0x1fff7000
 8001400:	03fffc00 	.word	0x03fffc00

08001404 <FLASH_IF_INT_Write>:
{
 8001404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001408:	b089      	sub	sp, #36	; 0x24
 800140a:	9003      	str	r0, [sp, #12]
 800140c:	9204      	str	r2, [sp, #16]
  uint32_t uSource = (uint32_t)pSource;
 800140e:	9101      	str	r1, [sp, #4]
  if ((pDestination == NULL) || (pSource == NULL) || !IS_ADDR_ALIGNED_64BITS(uLength)
 8001410:	2800      	cmp	r0, #0
 8001412:	f000 80a9 	beq.w	8001568 <FLASH_IF_INT_Write+0x164>
 8001416:	4683      	mov	fp, r0
 8001418:	2900      	cmp	r1, #0
 800141a:	f000 80a9 	beq.w	8001570 <FLASH_IF_INT_Write+0x16c>
 800141e:	f012 0f07 	tst.w	r2, #7
 8001422:	f040 80a9 	bne.w	8001578 <FLASH_IF_INT_Write+0x174>
      || !IS_ADDR_ALIGNED_64BITS((uint32_t)pDestination))
 8001426:	f010 0307 	ands.w	r3, r0, #7
 800142a:	9305      	str	r3, [sp, #20]
 800142c:	f040 80a8 	bne.w	8001580 <FLASH_IF_INT_Write+0x17c>
  ret_status = FLASH_IF_INT_Clear_Error();
 8001430:	f7ff ff84 	bl	800133c <FLASH_IF_INT_Clear_Error>
  if (ret_status == FLASH_IF_OK)
 8001434:	9002      	str	r0, [sp, #8]
 8001436:	b118      	cbz	r0, 8001440 <FLASH_IF_INT_Write+0x3c>
}
 8001438:	9802      	ldr	r0, [sp, #8]
 800143a:	b009      	add	sp, #36	; 0x24
 800143c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (HAL_FLASH_Unlock() == HAL_OK)
 8001440:	f003 f8d4 	bl	80045ec <HAL_FLASH_Unlock>
 8001444:	2800      	cmp	r0, #0
 8001446:	f040 809f 	bne.w	8001588 <FLASH_IF_INT_Write+0x184>
      start_page_index = PAGE_INDEX(uDest);
 800144a:	9c03      	ldr	r4, [sp, #12]
 800144c:	f104 4378 	add.w	r3, r4, #4160749568	; 0xf8000000
 8001450:	4a4f      	ldr	r2, [pc, #316]	; (8001590 <FLASH_IF_INT_Write+0x18c>)
 8001452:	f8d2 25e0 	ldr.w	r2, [r2, #1504]	; 0x5e0
 8001456:	494f      	ldr	r1, [pc, #316]	; (8001594 <FLASH_IF_INT_Write+0x190>)
 8001458:	ea01 2182 	and.w	r1, r1, r2, lsl #10
 800145c:	fbb3 f2f1 	udiv	r2, r3, r1
 8001460:	fb01 3212 	mls	r2, r1, r2, r3
 8001464:	0ad3      	lsrs	r3, r2, #11
 8001466:	9306      	str	r3, [sp, #24]
      number_pages = PAGE_INDEX(uDest + uLength - 1U) - start_page_index + 1U;
 8001468:	9b04      	ldr	r3, [sp, #16]
 800146a:	18e3      	adds	r3, r4, r3
 800146c:	f103 4378 	add.w	r3, r3, #4160749568	; 0xf8000000
 8001470:	3b01      	subs	r3, #1
 8001472:	fbb3 f0f1 	udiv	r0, r3, r1
 8001476:	fb01 3310 	mls	r3, r1, r0, r3
 800147a:	0adb      	lsrs	r3, r3, #11
 800147c:	eba3 23d2 	sub.w	r3, r3, r2, lsr #11
 8001480:	3301      	adds	r3, #1
 8001482:	9307      	str	r3, [sp, #28]
      if (number_pages > 1)
 8001484:	2b01      	cmp	r3, #1
 8001486:	d906      	bls.n	8001496 <FLASH_IF_INT_Write+0x92>
        length = FLASH_PAGE_SIZE - (uDest % FLASH_PAGE_SIZE);
 8001488:	f3c4 090a 	ubfx	r9, r4, #0, #11
 800148c:	f5c9 6900 	rsb	r9, r9, #2048	; 0x800
              ret_status = FLASH_IF_WRITE_ERROR;
 8001490:	f8dd a018 	ldr.w	sl, [sp, #24]
 8001494:	e02f      	b.n	80014f6 <FLASH_IF_INT_Write+0xf2>
  uint32_t length = uLength;
 8001496:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800149a:	e7f9      	b.n	8001490 <FLASH_IF_INT_Write+0x8c>
          current_length = length;
 800149c:	46c8      	mov	r8, r9
          current_source = uSource;
 800149e:	9f01      	ldr	r7, [sp, #4]
          current_dest = uDest;
 80014a0:	465c      	mov	r4, fp
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80014a2:	9d05      	ldr	r5, [sp, #20]
 80014a4:	4545      	cmp	r5, r8
 80014a6:	d215      	bcs.n	80014d4 <FLASH_IF_INT_Write+0xd0>
                                *((uint64_t *)(current_source + address_offset))) == HAL_OK)
 80014a8:	19ee      	adds	r6, r5, r7
          if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, current_dest,
 80014aa:	e9d6 2300 	ldrd	r2, r3, [r6]
 80014ae:	4621      	mov	r1, r4
 80014b0:	2001      	movs	r0, #1
 80014b2:	f003 f8f7 	bl	80046a4 <HAL_FLASH_Program>
 80014b6:	b950      	cbnz	r0, 80014ce <FLASH_IF_INT_Write+0xca>
            if (*(uint64_t *)current_dest != *(uint64_t *)(current_source + address_offset))
 80014b8:	6820      	ldr	r0, [r4, #0]
 80014ba:	6862      	ldr	r2, [r4, #4]
 80014bc:	59e9      	ldr	r1, [r5, r7]
 80014be:	6873      	ldr	r3, [r6, #4]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	bf08      	it	eq
 80014c4:	4288      	cmpeq	r0, r1
 80014c6:	d141      	bne.n	800154c <FLASH_IF_INT_Write+0x148>
            current_dest = current_dest + 8U;
 80014c8:	3408      	adds	r4, #8
        for (address_offset = 0U; address_offset < current_length; address_offset += 8U)
 80014ca:	3508      	adds	r5, #8
 80014cc:	e7ea      	b.n	80014a4 <FLASH_IF_INT_Write+0xa0>
            ret_status = FLASH_IF_WRITE_ERROR;
 80014ce:	f06f 0303 	mvn.w	r3, #3
 80014d2:	9302      	str	r3, [sp, #8]
        if (ret_status != FLASH_IF_OK)
 80014d4:	9b02      	ldr	r3, [sp, #8]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d13f      	bne.n	800155a <FLASH_IF_INT_Write+0x156>
        uDest += length;
 80014da:	44cb      	add	fp, r9
        uSource += length;
 80014dc:	9b01      	ldr	r3, [sp, #4]
 80014de:	444b      	add	r3, r9
 80014e0:	9301      	str	r3, [sp, #4]
        length = ((uLength - length) > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : uLength - length;
 80014e2:	9b04      	ldr	r3, [sp, #16]
 80014e4:	eba3 0909 	sub.w	r9, r3, r9
 80014e8:	f5b9 6f00 	cmp.w	r9, #2048	; 0x800
 80014ec:	bf28      	it	cs
 80014ee:	f44f 6900 	movcs.w	r9, #2048	; 0x800
      for (page_index = start_page_index; page_index < (start_page_index + number_pages); page_index++)
 80014f2:	f10a 0a01 	add.w	sl, sl, #1
 80014f6:	9b06      	ldr	r3, [sp, #24]
 80014f8:	9a07      	ldr	r2, [sp, #28]
 80014fa:	4413      	add	r3, r2
 80014fc:	4553      	cmp	r3, sl
 80014fe:	d92c      	bls.n	800155a <FLASH_IF_INT_Write+0x156>
        page_address = page_index * FLASH_PAGE_SIZE + FLASH_BASE;
 8001500:	f50a 3480 	add.w	r4, sl, #65536	; 0x10000
 8001504:	02e4      	lsls	r4, r4, #11
        if (FLASH_IF_INT_IsEmpty(pDestination, length) != FLASH_IF_MEM_EMPTY)
 8001506:	4649      	mov	r1, r9
 8001508:	9803      	ldr	r0, [sp, #12]
 800150a:	f7ff fef6 	bl	80012fa <FLASH_IF_INT_IsEmpty>
 800150e:	2800      	cmp	r0, #0
 8001510:	d0c4      	beq.n	800149c <FLASH_IF_INT_Write+0x98>
          if (pAllocatedBuffer == NULL)
 8001512:	4b21      	ldr	r3, [pc, #132]	; (8001598 <FLASH_IF_INT_Write+0x194>)
 8001514:	6818      	ldr	r0, [r3, #0]
 8001516:	b1e8      	cbz	r0, 8001554 <FLASH_IF_INT_Write+0x150>
          FLASH_IF_INT_Read(pAllocatedBuffer, (const void *)page_address, FLASH_PAGE_SIZE);
 8001518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800151c:	4621      	mov	r1, r4
 800151e:	f7ff feff 	bl	8001320 <FLASH_IF_INT_Read>
          UTIL_MEM_cpy_8(&pAllocatedBuffer[uDest % FLASH_PAGE_SIZE], (const void *)uSource, length);
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <FLASH_IF_INT_Write+0x194>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	f3cb 030a 	ubfx	r3, fp, #0, #11
 800152a:	fa1f f289 	uxth.w	r2, r9
 800152e:	9901      	ldr	r1, [sp, #4]
 8001530:	4418      	add	r0, r3
 8001532:	f011 ffd7 	bl	80134e4 <UTIL_MEM_cpy_8>
          if (FLASH_IF_INT_Erase((void *)page_address, FLASH_PAGE_SIZE) != FLASH_IF_OK)
 8001536:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800153a:	4620      	mov	r0, r4
 800153c:	f7ff ff18 	bl	8001370 <FLASH_IF_INT_Erase>
 8001540:	b970      	cbnz	r0, 8001560 <FLASH_IF_INT_Write+0x15c>
          current_source = (uint32_t)pAllocatedBuffer;
 8001542:	4b15      	ldr	r3, [pc, #84]	; (8001598 <FLASH_IF_INT_Write+0x194>)
 8001544:	681f      	ldr	r7, [r3, #0]
          current_length = FLASH_PAGE_SIZE;
 8001546:	f44f 6800 	mov.w	r8, #2048	; 0x800
 800154a:	e7aa      	b.n	80014a2 <FLASH_IF_INT_Write+0x9e>
              ret_status = FLASH_IF_WRITE_ERROR;
 800154c:	f06f 0303 	mvn.w	r3, #3
 8001550:	9302      	str	r3, [sp, #8]
 8001552:	e7bf      	b.n	80014d4 <FLASH_IF_INT_Write+0xd0>
            ret_status = FLASH_IF_PARAM_ERROR;
 8001554:	f06f 0305 	mvn.w	r3, #5
 8001558:	9302      	str	r3, [sp, #8]
      HAL_FLASH_Lock();
 800155a:	f003 f85f 	bl	800461c <HAL_FLASH_Lock>
 800155e:	e76b      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
            ret_status = FLASH_IF_ERASE_ERROR;
 8001560:	f06f 0301 	mvn.w	r3, #1
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	e7f8      	b.n	800155a <FLASH_IF_INT_Write+0x156>
    return FLASH_IF_PARAM_ERROR;
 8001568:	f06f 0305 	mvn.w	r3, #5
 800156c:	9302      	str	r3, [sp, #8]
 800156e:	e763      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
 8001570:	f06f 0305 	mvn.w	r3, #5
 8001574:	9302      	str	r3, [sp, #8]
 8001576:	e75f      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
 8001578:	f06f 0305 	mvn.w	r3, #5
 800157c:	9302      	str	r3, [sp, #8]
 800157e:	e75b      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
 8001580:	f06f 0305 	mvn.w	r3, #5
 8001584:	9302      	str	r3, [sp, #8]
 8001586:	e757      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
      ret_status = FLASH_IF_LOCK_ERROR;
 8001588:	f06f 0304 	mvn.w	r3, #4
 800158c:	9302      	str	r3, [sp, #8]
 800158e:	e753      	b.n	8001438 <FLASH_IF_INT_Write+0x34>
 8001590:	1fff7000 	.word	0x1fff7000
 8001594:	03fffc00 	.word	0x03fffc00
 8001598:	20000230 	.word	0x20000230

0800159c <FLASH_IF_Init>:
  pAllocatedBuffer = (uint8_t *)pAllocRamBuffer;
 800159c:	4b01      	ldr	r3, [pc, #4]	; (80015a4 <FLASH_IF_Init+0x8>)
 800159e:	6018      	str	r0, [r3, #0]
}
 80015a0:	2000      	movs	r0, #0
 80015a2:	4770      	bx	lr
 80015a4:	20000230 	.word	0x20000230

080015a8 <FLASH_IF_Write>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80015a8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 80015ac:	d30e      	bcc.n	80015cc <FLASH_IF_Write+0x24>
{
 80015ae:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pDestination))
 80015b0:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <FLASH_IF_Write+0x30>)
 80015b2:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80015b6:	4b09      	ldr	r3, [pc, #36]	; (80015dc <FLASH_IF_Write+0x34>)
 80015b8:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80015bc:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015c0:	3b01      	subs	r3, #1
 80015c2:	4298      	cmp	r0, r3
 80015c4:	d805      	bhi.n	80015d2 <FLASH_IF_Write+0x2a>
    ret_status = FLASH_IF_INT_Write(pDestination, pSource, uLength);
 80015c6:	f7ff ff1d 	bl	8001404 <FLASH_IF_INT_Write>
}
 80015ca:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015cc:	f04f 30ff 	mov.w	r0, #4294967295
}
 80015d0:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 80015d2:	f04f 30ff 	mov.w	r0, #4294967295
 80015d6:	e7f8      	b.n	80015ca <FLASH_IF_Write+0x22>
 80015d8:	1fff7000 	.word	0x1fff7000
 80015dc:	03fffc00 	.word	0x03fffc00

080015e0 <FLASH_IF_Read>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80015e0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
 80015e4:	d30e      	bcc.n	8001604 <FLASH_IF_Read+0x24>
{
 80015e6:	b510      	push	{r4, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pSource))
 80015e8:	4b09      	ldr	r3, [pc, #36]	; (8001610 <FLASH_IF_Read+0x30>)
 80015ea:	f8d3 45e0 	ldr.w	r4, [r3, #1504]	; 0x5e0
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <FLASH_IF_Read+0x34>)
 80015f0:	ea03 2384 	and.w	r3, r3, r4, lsl #10
 80015f4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80015f8:	3b01      	subs	r3, #1
 80015fa:	4299      	cmp	r1, r3
 80015fc:	d805      	bhi.n	800160a <FLASH_IF_Read+0x2a>
    ret_status = FLASH_IF_INT_Read(pDestination, pSource, uLength);
 80015fe:	f7ff fe8f 	bl	8001320 <FLASH_IF_INT_Read>
}
 8001602:	bd10      	pop	{r4, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001604:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001608:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800160a:	f04f 30ff 	mov.w	r0, #4294967295
 800160e:	e7f8      	b.n	8001602 <FLASH_IF_Read+0x22>
 8001610:	1fff7000 	.word	0x1fff7000
 8001614:	03fffc00 	.word	0x03fffc00

08001618 <FLASH_IF_Erase>:
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001618:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
 800161c:	d30e      	bcc.n	800163c <FLASH_IF_Erase+0x24>
{
 800161e:	b508      	push	{r3, lr}
  if (IS_FLASH_MAIN_MEM_ADDRESS((uint32_t)pStart))
 8001620:	4b09      	ldr	r3, [pc, #36]	; (8001648 <FLASH_IF_Erase+0x30>)
 8001622:	f8d3 25e0 	ldr.w	r2, [r3, #1504]	; 0x5e0
 8001626:	4b09      	ldr	r3, [pc, #36]	; (800164c <FLASH_IF_Erase+0x34>)
 8001628:	ea03 2382 	and.w	r3, r3, r2, lsl #10
 800162c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8001630:	3b01      	subs	r3, #1
 8001632:	4298      	cmp	r0, r3
 8001634:	d805      	bhi.n	8001642 <FLASH_IF_Erase+0x2a>
    ret_status = FLASH_IF_INT_Erase(pStart, uLength);
 8001636:	f7ff fe9b 	bl	8001370 <FLASH_IF_INT_Erase>
}
 800163a:	bd08      	pop	{r3, pc}
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 800163c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001640:	4770      	bx	lr
  FLASH_IF_StatusTypedef ret_status = FLASH_IF_ERROR;
 8001642:	f04f 30ff 	mov.w	r0, #4294967295
 8001646:	e7f8      	b.n	800163a <FLASH_IF_Erase+0x22>
 8001648:	1fff7000 	.word	0x1fff7000
 800164c:	03fffc00 	.word	0x03fffc00

08001650 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001654:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001656:	2400      	movs	r4, #0
 8001658:	9403      	str	r4, [sp, #12]
 800165a:	9404      	str	r4, [sp, #16]
 800165c:	9405      	str	r4, [sp, #20]
 800165e:	9406      	str	r4, [sp, #24]
 8001660:	9407      	str	r4, [sp, #28]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001662:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001666:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001668:	f042 0201 	orr.w	r2, r2, #1
 800166c:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800166e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001670:	f002 0201 	and.w	r2, r2, #1
 8001674:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001676:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001678:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800167a:	f042 0202 	orr.w	r2, r2, #2
 800167e:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001680:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001682:	f002 0202 	and.w	r2, r2, #2
 8001686:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8001688:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800168a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800168c:	f042 0204 	orr.w	r2, r2, #4
 8001690:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001692:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001694:	f003 0304 	and.w	r3, r3, #4
 8001698:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 800169a:	9b00      	ldr	r3, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|PROB2_Pin|PROB1_Pin
 800169c:	4e2f      	ldr	r6, [pc, #188]	; (800175c <MX_GPIO_Init+0x10c>)
 800169e:	4622      	mov	r2, r4
 80016a0:	f44f 413a 	mov.w	r1, #47616	; 0xba00
 80016a4:	4630      	mov	r0, r6
 80016a6:	f003 fa15 	bl	8004ad4 <HAL_GPIO_WritePin>
                          |LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80016aa:	4622      	mov	r2, r4
 80016ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016b4:	f003 fa0e 	bl	8004ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80016b8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80016bc:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016be:	2501      	movs	r5, #1
 80016c0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c4:	2302      	movs	r3, #2
 80016c6:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	a903      	add	r1, sp, #12
 80016ca:	4630      	mov	r0, r6
 80016cc:	f003 f8b2 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BUT1_Pin|BUT2_Pin;
 80016d0:	f04f 0803 	mov.w	r8, #3
 80016d4:	f8cd 800c 	str.w	r8, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80016d8:	f44f 1704 	mov.w	r7, #2162688	; 0x210000
 80016dc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016de:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	a903      	add	r1, sp, #12
 80016e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e6:	f003 f8a5 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = PROB2_Pin|PROB1_Pin;
 80016ea:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80016ee:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016f0:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016f2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016f4:	f8cd 8018 	str.w	r8, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	a903      	add	r1, sp, #12
 80016fa:	4630      	mov	r0, r6
 80016fc:	f003 f89a 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001700:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001704:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	9504      	str	r5, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001708:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	a903      	add	r1, sp, #12
 800170e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001712:	f003 f88f 	bl	8004834 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT3_Pin;
 8001716:	2340      	movs	r3, #64	; 0x40
 8001718:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800171a:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800171c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(BUT3_GPIO_Port, &GPIO_InitStruct);
 800171e:	a903      	add	r1, sp, #12
 8001720:	480f      	ldr	r0, [pc, #60]	; (8001760 <MX_GPIO_Init+0x110>)
 8001722:	f003 f887 	bl	8004834 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001726:	4622      	mov	r2, r4
 8001728:	4621      	mov	r1, r4
 800172a:	2006      	movs	r0, #6
 800172c:	f002 fb76 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001730:	2006      	movs	r0, #6
 8001732:	f002 fbab 	bl	8003e8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8001736:	4622      	mov	r2, r4
 8001738:	4621      	mov	r1, r4
 800173a:	2007      	movs	r0, #7
 800173c:	f002 fb6e 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8001740:	2007      	movs	r0, #7
 8001742:	f002 fba3 	bl	8003e8c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001746:	4622      	mov	r2, r4
 8001748:	4621      	mov	r1, r4
 800174a:	2016      	movs	r0, #22
 800174c:	f002 fb66 	bl	8003e1c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001750:	2016      	movs	r0, #22
 8001752:	f002 fb9b 	bl	8003e8c <HAL_NVIC_EnableIRQ>

}
 8001756:	b008      	add	sp, #32
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800175c:	48000400 	.word	0x48000400
 8001760:	48000800 	.word	0x48000800

08001764 <Error_Handler>:
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001764:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001766:	e7fe      	b.n	8001766 <Error_Handler+0x2>

08001768 <SystemClock_Config>:
{
 8001768:	b510      	push	{r4, lr}
 800176a:	b09a      	sub	sp, #104	; 0x68
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800176c:	2248      	movs	r2, #72	; 0x48
 800176e:	2100      	movs	r1, #0
 8001770:	a808      	add	r0, sp, #32
 8001772:	f012 fb79 	bl	8013e68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001776:	2400      	movs	r4, #0
 8001778:	9401      	str	r4, [sp, #4]
 800177a:	9402      	str	r4, [sp, #8]
 800177c:	9403      	str	r4, [sp, #12]
 800177e:	9404      	str	r4, [sp, #16]
 8001780:	9405      	str	r4, [sp, #20]
 8001782:	9406      	str	r4, [sp, #24]
 8001784:	9407      	str	r4, [sp, #28]
  HAL_PWR_EnableBkUpAccess();
 8001786:	f003 fd19 	bl	80051bc <HAL_PWR_EnableBkUpAccess>
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800178a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800178e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8001792:	f023 0318 	bic.w	r3, r3, #24
 8001796:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800179a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800179e:	6813      	ldr	r3, [r2, #0]
 80017a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017a8:	6013      	str	r3, [r2, #0]
 80017aa:	6813      	ldr	r3, [r2, #0]
 80017ac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017b0:	9300      	str	r3, [sp, #0]
 80017b2:	9b00      	ldr	r3, [sp, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80017b4:	2324      	movs	r3, #36	; 0x24
 80017b6:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80017b8:	2381      	movs	r3, #129	; 0x81
 80017ba:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80017bc:	2301      	movs	r3, #1
 80017be:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80017c0:	9411      	str	r4, [sp, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 80017c2:	23b0      	movs	r3, #176	; 0xb0
 80017c4:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80017c6:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c8:	a808      	add	r0, sp, #32
 80017ca:	f003 fe91 	bl	80054f0 <HAL_RCC_OscConfig>
 80017ce:	b970      	cbnz	r0, 80017ee <SystemClock_Config+0x86>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80017d0:	234f      	movs	r3, #79	; 0x4f
 80017d2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80017d4:	2300      	movs	r3, #0
 80017d6:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017d8:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80017da:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017dc:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80017de:	9307      	str	r3, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017e0:	2102      	movs	r1, #2
 80017e2:	a801      	add	r0, sp, #4
 80017e4:	f004 f9b6 	bl	8005b54 <HAL_RCC_ClockConfig>
 80017e8:	b918      	cbnz	r0, 80017f2 <SystemClock_Config+0x8a>
}
 80017ea:	b01a      	add	sp, #104	; 0x68
 80017ec:	bd10      	pop	{r4, pc}
    Error_Handler();
 80017ee:	f7ff ffb9 	bl	8001764 <Error_Handler>
    Error_Handler();
 80017f2:	f7ff ffb7 	bl	8001764 <Error_Handler>
	...

080017f8 <main>:
{
 80017f8:	b508      	push	{r3, lr}
  HAL_Init();
 80017fa:	f001 fbdf 	bl	8002fbc <HAL_Init>
  SystemClock_Config();
 80017fe:	f7ff ffb3 	bl	8001768 <SystemClock_Config>
  MX_GPIO_Init();
 8001802:	f7ff ff25 	bl	8001650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001806:	f000 fbe1 	bl	8001fcc <MX_USART2_UART_Init>
  MX_LoRaWAN_Init();
 800180a:	f000 fe39 	bl	8002480 <MX_LoRaWAN_Init>
  MX_DAC_Init();
 800180e:	f7ff fd0d 	bl	800122c <MX_DAC_Init>
  MX_COMP1_Init();
 8001812:	f7ff fcbd 	bl	8001190 <MX_COMP1_Init>
  if (HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 128) != HAL_OK)
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	2200      	movs	r2, #0
 800181a:	4611      	mov	r1, r2
 800181c:	480a      	ldr	r0, [pc, #40]	; (8001848 <main+0x50>)
 800181e:	f002 fb9f 	bl	8003f60 <HAL_DAC_SetValue>
 8001822:	b108      	cbz	r0, 8001828 <main+0x30>
    Error_Handler();
 8001824:	f7ff ff9e 	bl	8001764 <Error_Handler>
  if (HAL_DAC_Start(&hdac, DAC_CHANNEL_1) != HAL_OK)
 8001828:	2100      	movs	r1, #0
 800182a:	4807      	ldr	r0, [pc, #28]	; (8001848 <main+0x50>)
 800182c:	f002 fb74 	bl	8003f18 <HAL_DAC_Start>
 8001830:	b108      	cbz	r0, 8001836 <main+0x3e>
    Error_Handler();
 8001832:	f7ff ff97 	bl	8001764 <Error_Handler>
  if(HAL_COMP_Start(&hcomp1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <main+0x54>)
 8001838:	f002 fa80 	bl	8003d3c <HAL_COMP_Start>
 800183c:	b910      	cbnz	r0, 8001844 <main+0x4c>
    MX_LoRaWAN_Process();
 800183e:	f000 fe25 	bl	800248c <MX_LoRaWAN_Process>
  while (1)
 8001842:	e7fc      	b.n	800183e <main+0x46>
    Error_Handler();
 8001844:	f7ff ff8e 	bl	8001764 <Error_Handler>
 8001848:	2000021c 	.word	0x2000021c
 800184c:	200001f0 	.word	0x200001f0

08001850 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001850:	b500      	push	{lr}
 8001852:	b08d      	sub	sp, #52	; 0x34

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 8001854:	222c      	movs	r2, #44	; 0x2c
 8001856:	2100      	movs	r1, #0
 8001858:	a801      	add	r0, sp, #4
 800185a:	f012 fb05 	bl	8013e68 <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800185e:	4819      	ldr	r0, [pc, #100]	; (80018c4 <MX_RTC_Init+0x74>)
 8001860:	4b19      	ldr	r3, [pc, #100]	; (80018c8 <MX_RTC_Init+0x78>)
 8001862:	6003      	str	r3, [r0, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 8001864:	231f      	movs	r3, #31
 8001866:	6083      	str	r3, [r0, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	6103      	str	r3, [r0, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800186c:	6143      	str	r3, [r0, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800186e:	6183      	str	r3, [r0, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001870:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001874:	61c2      	str	r2, [r0, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001876:	6203      	str	r3, [r0, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001878:	f44f 7380 	mov.w	r3, #256	; 0x100
 800187c:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800187e:	f004 fccf 	bl	8006220 <HAL_RTC_Init>
 8001882:	b9a8      	cbnz	r0, 80018b0 <MX_RTC_Init+0x60>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 8001884:	480f      	ldr	r0, [pc, #60]	; (80018c4 <MX_RTC_Init+0x74>)
 8001886:	f004 fe0d 	bl	80064a4 <HAL_RTCEx_SetSSRU_IT>
 800188a:	b9a0      	cbnz	r0, 80018b6 <MX_RTC_Init+0x66>
    Error_Handler();
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800188c:	2200      	movs	r2, #0
 800188e:	9208      	str	r2, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001890:	9202      	str	r2, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001892:	9206      	str	r2, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001894:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001898:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 800189a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800189e:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 80018a0:	a901      	add	r1, sp, #4
 80018a2:	4808      	ldr	r0, [pc, #32]	; (80018c4 <MX_RTC_Init+0x74>)
 80018a4:	f004 fd22 	bl	80062ec <HAL_RTC_SetAlarm_IT>
 80018a8:	b940      	cbnz	r0, 80018bc <MX_RTC_Init+0x6c>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80018aa:	b00d      	add	sp, #52	; 0x34
 80018ac:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80018b0:	f7ff ff58 	bl	8001764 <Error_Handler>
 80018b4:	e7e6      	b.n	8001884 <MX_RTC_Init+0x34>
    Error_Handler();
 80018b6:	f7ff ff55 	bl	8001764 <Error_Handler>
 80018ba:	e7e7      	b.n	800188c <MX_RTC_Init+0x3c>
    Error_Handler();
 80018bc:	f7ff ff52 	bl	8001764 <Error_Handler>
}
 80018c0:	e7f3      	b.n	80018aa <MX_RTC_Init+0x5a>
 80018c2:	bf00      	nop
 80018c4:	20000234 	.word	0x20000234
 80018c8:	40002800 	.word	0x40002800

080018cc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80018cc:	b510      	push	{r4, lr}
 80018ce:	b090      	sub	sp, #64	; 0x40
 80018d0:	4604      	mov	r4, r0

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018d2:	2238      	movs	r2, #56	; 0x38
 80018d4:	2100      	movs	r1, #0
 80018d6:	a802      	add	r0, sp, #8
 80018d8:	f012 fac6 	bl	8013e68 <memset>
  if(rtcHandle->Instance==RTC)
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_RTC_MspInit+0x7c>)
 80018e0:	429a      	cmp	r2, r3
 80018e2:	d001      	beq.n	80018e8 <HAL_RTC_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80018e4:	b010      	add	sp, #64	; 0x40
 80018e6:	bd10      	pop	{r4, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80018e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018ec:	9302      	str	r3, [sp, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80018ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018f2:	930f      	str	r3, [sp, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018f4:	a802      	add	r0, sp, #8
 80018f6:	f004 fa81 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 80018fa:	bb08      	cbnz	r0, 8001940 <HAL_RTC_MspInit+0x74>
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 80018fc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001900:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8001904:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001908:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->APB1ENR1, Periphs);
 800190c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800190e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001916:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800191a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800191c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 800191e:	2200      	movs	r2, #0
 8001920:	4611      	mov	r1, r2
 8001922:	2002      	movs	r0, #2
 8001924:	f002 fa7a 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 8001928:	2002      	movs	r0, #2
 800192a:	f002 faaf 	bl	8003e8c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 8, 0);
 800192e:	2200      	movs	r2, #0
 8001930:	2108      	movs	r1, #8
 8001932:	202a      	movs	r0, #42	; 0x2a
 8001934:	f002 fa72 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001938:	202a      	movs	r0, #42	; 0x2a
 800193a:	f002 faa7 	bl	8003e8c <HAL_NVIC_EnableIRQ>
}
 800193e:	e7d1      	b.n	80018e4 <HAL_RTC_MspInit+0x18>
      Error_Handler();
 8001940:	f7ff ff10 	bl	8001764 <Error_Handler>
 8001944:	e7da      	b.n	80018fc <HAL_RTC_MspInit+0x30>
 8001946:	bf00      	nop
 8001948:	40002800 	.word	0x40002800

0800194c <PWR_EnterOffMode>:
void PWR_EnterOffMode(void)
{
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 800194c:	4770      	bx	lr

0800194e <PWR_ExitOffMode>:
void PWR_ExitOffMode(void)
{
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800194e:	4770      	bx	lr

08001950 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001950:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001952:	f001 fb55 	bl	8003000 <HAL_SuspendTick>
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 8001956:	2001      	movs	r0, #1
 8001958:	4b02      	ldr	r3, [pc, #8]	; (8001964 <PWR_EnterStopMode+0x14>)
 800195a:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
  LL_PWR_ClearFlag_C1STOP_C1STB();

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 800195e:	f003 fc91 	bl	8005284 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001962:	bd08      	pop	{r3, pc}
 8001964:	58000400 	.word	0x58000400

08001968 <PWR_ExitSleepMode>:

  /* USER CODE END EnterSleepMode_3 */
}

void PWR_ExitSleepMode(void)
{
 8001968:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 800196a:	f001 fb50 	bl	800300e <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 800196e:	bd08      	pop	{r3, pc}

08001970 <PWR_ExitStopMode>:
{
 8001970:	b508      	push	{r3, lr}
  HAL_ResumeTick();
 8001972:	f001 fb4c 	bl	800300e <HAL_ResumeTick>
  vcom_Resume();
 8001976:	f000 fc4d 	bl	8002214 <vcom_Resume>
}
 800197a:	bd08      	pop	{r3, pc}

0800197c <PWR_EnterSleepMode>:
{
 800197c:	b508      	push	{r3, lr}
  HAL_SuspendTick();
 800197e:	f001 fb3f 	bl	8003000 <HAL_SuspendTick>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001982:	2101      	movs	r1, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f003 fc21 	bl	80051cc <HAL_PWR_EnterSLEEPMode>
}
 800198a:	bd08      	pop	{r3, pc}

0800198c <HAL_MspInit>:
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800198c:	4770      	bx	lr

0800198e <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800198e:	e7fe      	b.n	800198e <NMI_Handler>

08001990 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001990:	e7fe      	b.n	8001990 <HardFault_Handler>

08001992 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001992:	e7fe      	b.n	8001992 <MemManage_Handler>

08001994 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <BusFault_Handler>

08001996 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001996:	e7fe      	b.n	8001996 <UsageFault_Handler>

08001998 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001998:	4770      	bx	lr

0800199a <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800199a:	4770      	bx	lr

0800199c <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199c:	4770      	bx	lr

0800199e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800199e:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a0:	f001 fb22 	bl	8002fe8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a4:	bd08      	pop	{r3, pc}
	...

080019a8 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80019a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80019aa:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0xc>)
 80019ac:	f004 fda6 	bl	80064fc <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80019b0:	bd08      	pop	{r3, pc}
 80019b2:	bf00      	nop
 80019b4:	20000234 	.word	0x20000234

080019b8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI Line 0 Interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019b8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 80019ba:	2001      	movs	r0, #1
 80019bc:	f003 f89a 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80019c0:	bd08      	pop	{r3, pc}

080019c2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI Line 1 Interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80019c2:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT2_Pin);
 80019c4:	2002      	movs	r0, #2
 80019c6:	f003 f895 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80019ca:	bd08      	pop	{r3, pc}

080019cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019cc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80019ce:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Channel1_IRQHandler+0xc>)
 80019d0:	f002 fd58 	bl	8004484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d4:	bd08      	pop	{r3, pc}
 80019d6:	bf00      	nop
 80019d8:	20000190 	.word	0x20000190

080019dc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 5 Interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80019dc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80019de:	4802      	ldr	r0, [pc, #8]	; (80019e8 <DMA1_Channel5_IRQHandler+0xc>)
 80019e0:	f002 fd50 	bl	8004484 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80019e4:	bd08      	pop	{r3, pc}
 80019e6:	bf00      	nop
 80019e8:	200002d4 	.word	0x200002d4

080019ec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC Interrupt.
  */
void ADC_IRQHandler(void)
{
 80019ec:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80019ee:	4802      	ldr	r0, [pc, #8]	; (80019f8 <ADC_IRQHandler+0xc>)
 80019f0:	f001 fcbb 	bl	800336a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80019f4:	bd08      	pop	{r3, pc}
 80019f6:	bf00      	nop
 80019f8:	2000012c 	.word	0x2000012c

080019fc <COMP_IRQHandler>:

/**
  * @brief This function handles COMP1 and COMP2 Interrupts.
  */
void COMP_IRQHandler(void)
{
 80019fc:	b508      	push	{r3, lr}
  /* USER CODE BEGIN COMP_IRQn 0 */

  /* USER CODE END COMP_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 80019fe:	4802      	ldr	r0, [pc, #8]	; (8001a08 <COMP_IRQHandler+0xc>)
 8001a00:	f002 f9d4 	bl	8003dac <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP_IRQn 1 */

  /* USER CODE END COMP_IRQn 1 */
}
 8001a04:	bd08      	pop	{r3, pc}
 8001a06:	bf00      	nop
 8001a08:	200001f0 	.word	0x200001f0

08001a0c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [9:5] Interrupt.
  */
void EXTI9_5_IRQHandler(void)
{
 8001a0c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT3_Pin);
 8001a0e:	2040      	movs	r0, #64	; 0x40
 8001a10:	f003 f870 	bl	8004af4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001a14:	bd08      	pop	{r3, pc}
	...

08001a18 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 Event Interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001a18:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001a1a:	4802      	ldr	r0, [pc, #8]	; (8001a24 <I2C2_EV_IRQHandler+0xc>)
 8001a1c:	f003 f8c1 	bl	8004ba2 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001a20:	bd08      	pop	{r3, pc}
 8001a22:	bf00      	nop
 8001a24:	2000026c 	.word	0x2000026c

08001a28 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 Error Interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001a28:	b508      	push	{r3, lr}
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001a2a:	4802      	ldr	r0, [pc, #8]	; (8001a34 <I2C2_ER_IRQHandler+0xc>)
 8001a2c:	f003 fb83 	bl	8005136 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001a30:	bd08      	pop	{r3, pc}
 8001a32:	bf00      	nop
 8001a34:	2000026c 	.word	0x2000026c

08001a38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8001a38:	b508      	push	{r3, lr}
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a3a:	4802      	ldr	r0, [pc, #8]	; (8001a44 <USART2_IRQHandler+0xc>)
 8001a3c:	f005 fa1c 	bl	8006e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a40:	bd08      	pop	{r3, pc}
 8001a42:	bf00      	nop
 8001a44:	20000334 	.word	0x20000334

08001a48 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001a48:	b508      	push	{r3, lr}
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001a4a:	4802      	ldr	r0, [pc, #8]	; (8001a54 <RTC_Alarm_IRQHandler+0xc>)
 8001a4c:	f004 fb60 	bl	8006110 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001a50:	bd08      	pop	{r3, pc}
 8001a52:	bf00      	nop
 8001a54:	20000234 	.word	0x20000234

08001a58 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001a58:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001a5a:	4802      	ldr	r0, [pc, #8]	; (8001a64 <SUBGHZ_Radio_IRQHandler+0xc>)
 8001a5c:	f005 f802 	bl	8006a64 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 8001a60:	bd08      	pop	{r3, pc}
 8001a62:	bf00      	nop
 8001a64:	200002c0 	.word	0x200002c0

08001a68 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001a68:	b508      	push	{r3, lr}
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001a6a:	4805      	ldr	r0, [pc, #20]	; (8001a80 <MX_SUBGHZ_Init+0x18>)
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	6003      	str	r3, [r0, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 8001a70:	f004 fd7a 	bl	8006568 <HAL_SUBGHZ_Init>
 8001a74:	b900      	cbnz	r0, 8001a78 <MX_SUBGHZ_Init+0x10>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 8001a76:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001a78:	f7ff fe74 	bl	8001764 <Error_Handler>
}
 8001a7c:	e7fb      	b.n	8001a76 <MX_SUBGHZ_Init+0xe>
 8001a7e:	bf00      	nop
 8001a80:	200002c0 	.word	0x200002c0

08001a84 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001a84:	b500      	push	{lr}
 8001a86:	b083      	sub	sp, #12
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001a8e:	f042 0201 	orr.w	r2, r2, #1
 8001a92:	665a      	str	r2, [r3, #100]	; 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001a94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001a96:	f003 0301 	and.w	r3, r3, #1
 8001a9a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001a9c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 10, 0);
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	210a      	movs	r1, #10
 8001aa2:	2032      	movs	r0, #50	; 0x32
 8001aa4:	f002 f9ba 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 8001aa8:	2032      	movs	r0, #50	; 0x32
 8001aaa:	f002 f9ef 	bl	8003e8c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 8001aae:	b003      	add	sp, #12
 8001ab0:	f85d fb04 	ldr.w	pc, [sp], #4

08001ab4 <tiny_snprintf_like>:

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ab4:	b40c      	push	{r2, r3}
 8001ab6:	b500      	push	{lr}
 8001ab8:	b083      	sub	sp, #12
 8001aba:	ab04      	add	r3, sp, #16
 8001abc:	f853 2b04 	ldr.w	r2, [r3], #4
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001ac0:	9301      	str	r3, [sp, #4]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001ac2:	f012 f8e9 	bl	8013c98 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001ac6:	b003      	add	sp, #12
 8001ac8:	f85d eb04 	ldr.w	lr, [sp], #4
 8001acc:	b002      	add	sp, #8
 8001ace:	4770      	bx	lr

08001ad0 <TimestampNow>:
{
 8001ad0:	b530      	push	{r4, r5, lr}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	4604      	mov	r4, r0
 8001ad6:	460d      	mov	r5, r1
  SysTime_t curtime = SysTimeGet();
 8001ad8:	a802      	add	r0, sp, #8
 8001ada:	f011 fe53 	bl	8013784 <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001ade:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	9b02      	ldr	r3, [sp, #8]
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <TimestampNow+0x2c>)
 8001ae8:	2110      	movs	r1, #16
 8001aea:	4620      	mov	r0, r4
 8001aec:	f7ff ffe2 	bl	8001ab4 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001af0:	4620      	mov	r0, r4
 8001af2:	f7fe fb41 	bl	8000178 <strlen>
 8001af6:	8028      	strh	r0, [r5, #0]
}
 8001af8:	b005      	add	sp, #20
 8001afa:	bd30      	pop	{r4, r5, pc}
 8001afc:	08014060 	.word	0x08014060

08001b00 <SystemApp_Init>:
{
 8001b00:	b510      	push	{r4, lr}
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 8001b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b06:	6893      	ldr	r3, [r2, #8]
 8001b08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001b0c:	6093      	str	r3, [r2, #8]
  UTIL_TIMER_Init();
 8001b0e:	f011 febd 	bl	801388c <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001b12:	2401      	movs	r4, #1
 8001b14:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <SystemApp_Init+0x4c>)
 8001b16:	701c      	strb	r4, [r3, #0]
  DBG_Init();
 8001b18:	f000 f8ba 	bl	8001c90 <DBG_Init>
  UTIL_ADV_TRACE_Init();
 8001b1c:	f011 fb58 	bl	80131d0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001b20:	480b      	ldr	r0, [pc, #44]	; (8001b50 <SystemApp_Init+0x50>)
 8001b22:	f011 fb6f 	bl	8013204 <UTIL_ADV_TRACE_RegisterTimeStampFunction>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <SystemApp_Init+0x54>)
 8001b28:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b2c:	611a      	str	r2, [r3, #16]
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f011 fb6e 	bl	8013210 <UTIL_ADV_TRACE_SetVerboseLevel>
  SYS_InitMeasurement();
 8001b34:	f7ff fab2 	bl	800109c <SYS_InitMeasurement>
  EnvSensors_Init();
 8001b38:	f000 f90a 	bl	8001d50 <EnvSensors_Init>
  UTIL_LPM_Init();
 8001b3c:	f011 fc78 	bl	8013430 <UTIL_LPM_Init>
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001b40:	4621      	mov	r1, r4
 8001b42:	4620      	mov	r0, r4
 8001b44:	f011 fc94 	bl	8013470 <UTIL_LPM_SetOffMode>
}
 8001b48:	bd10      	pop	{r4, pc}
 8001b4a:	bf00      	nop
 8001b4c:	200002cc 	.word	0x200002cc
 8001b50:	08001ad1 	.word	0x08001ad1
 8001b54:	58004000 	.word	0x58004000

08001b58 <UTIL_SEQ_Idle>:
{
 8001b58:	b508      	push	{r3, lr}
  UTIL_LPM_EnterLowPower();
 8001b5a:	f011 fc9f 	bl	801349c <UTIL_LPM_EnterLowPower>
}
 8001b5e:	bd08      	pop	{r3, pc}

08001b60 <GetBatteryLevel>:
{
 8001b60:	b508      	push	{r3, lr}
  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001b62:	f7ff faa3 	bl	80010ac <SYS_GetBatteryLevel>
  if (batteryLevelmV > VDD_BAT)
 8001b66:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001b6a:	4298      	cmp	r0, r3
 8001b6c:	d80d      	bhi.n	8001b8a <GetBatteryLevel+0x2a>
  else if (batteryLevelmV < VDD_MIN)
 8001b6e:	f5b0 6fe1 	cmp.w	r0, #1800	; 0x708
 8001b72:	d30c      	bcc.n	8001b8e <GetBatteryLevel+0x2e>
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001b74:	f5a0 60e1 	sub.w	r0, r0, #1800	; 0x708
 8001b78:	ebc0 10c0 	rsb	r0, r0, r0, lsl #7
 8001b7c:	0040      	lsls	r0, r0, #1
 8001b7e:	4b05      	ldr	r3, [pc, #20]	; (8001b94 <GetBatteryLevel+0x34>)
 8001b80:	fba3 3000 	umull	r3, r0, r3, r0
 8001b84:	f3c0 10c7 	ubfx	r0, r0, #7, #8
 8001b88:	e000      	b.n	8001b8c <GetBatteryLevel+0x2c>
    batteryLevel = LORAWAN_MAX_BAT;
 8001b8a:	20fe      	movs	r0, #254	; 0xfe
}
 8001b8c:	bd08      	pop	{r3, pc}
    batteryLevel = 0;
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e7fc      	b.n	8001b8c <GetBatteryLevel+0x2c>
 8001b92:	bf00      	nop
 8001b94:	1b4e81b5 	.word	0x1b4e81b5

08001b98 <GetTemperatureLevel>:
{
 8001b98:	b500      	push	{lr}
 8001b9a:	b087      	sub	sp, #28
  EnvSensors_Read(&sensor_data);
 8001b9c:	4668      	mov	r0, sp
 8001b9e:	f000 f8bb 	bl	8001d18 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001ba2:	9801      	ldr	r0, [sp, #4]
 8001ba4:	f7fe ffba 	bl	8000b1c <__aeabi_f2iz>
}
 8001ba8:	b200      	sxth	r0, r0
 8001baa:	b007      	add	sp, #28
 8001bac:	f85d fb04 	ldr.w	pc, [sp], #4

08001bb0 <GetUniqueId>:
{
 8001bb0:	b538      	push	{r3, r4, r5, lr}
 8001bb2:	4604      	mov	r4, r0
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001bb4:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <GetUniqueId+0x68>)
 8001bb6:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bbe:	d013      	beq.n	8001be8 <GetUniqueId+0x38>
    id[7] = val & 0xFF;
 8001bc0:	71c3      	strb	r3, [r0, #7]
    id[6] = (val >> 8) & 0xFF;
 8001bc2:	0a1a      	lsrs	r2, r3, #8
 8001bc4:	7182      	strb	r2, [r0, #6]
    id[5] = (val >> 16) & 0xFF;
 8001bc6:	0c1a      	lsrs	r2, r3, #16
 8001bc8:	7142      	strb	r2, [r0, #5]
    id[4] = (val >> 24) & 0xFF;
 8001bca:	0e1b      	lsrs	r3, r3, #24
 8001bcc:	7103      	strb	r3, [r0, #4]
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 8001bce:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <GetUniqueId+0x68>)
 8001bd0:	f8d3 2584 	ldr.w	r2, [r3, #1412]	; 0x584
    id[3] = val & 0xFF;
 8001bd4:	70c2      	strb	r2, [r0, #3]
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001bd6:	f8d3 3584 	ldr.w	r3, [r3, #1412]	; 0x584
 8001bda:	0a1a      	lsrs	r2, r3, #8
    id[2] = val & 0xFF;
 8001bdc:	7082      	strb	r2, [r0, #2]
    id[1] = (val >> 8) & 0xFF;
 8001bde:	0c1a      	lsrs	r2, r3, #16
 8001be0:	7042      	strb	r2, [r0, #1]
    id[0] = (val >> 16) & 0xFF;
 8001be2:	0e1b      	lsrs	r3, r3, #24
 8001be4:	7003      	strb	r3, [r0, #0]
}
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001be8:	f001 fa18 	bl	800301c <HAL_GetUIDw0>
 8001bec:	4605      	mov	r5, r0
 8001bee:	f001 fa21 	bl	8003034 <HAL_GetUIDw2>
 8001bf2:	4405      	add	r5, r0
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001bf4:	f001 fa18 	bl	8003028 <HAL_GetUIDw1>
    id[7] = (ID_1_3_val) >> 24;
 8001bf8:	0e2b      	lsrs	r3, r5, #24
 8001bfa:	71e3      	strb	r3, [r4, #7]
    id[6] = (ID_1_3_val) >> 16;
 8001bfc:	0c2b      	lsrs	r3, r5, #16
 8001bfe:	71a3      	strb	r3, [r4, #6]
    id[5] = (ID_1_3_val) >> 8;
 8001c00:	0a2b      	lsrs	r3, r5, #8
 8001c02:	7163      	strb	r3, [r4, #5]
    id[4] = (ID_1_3_val);
 8001c04:	7125      	strb	r5, [r4, #4]
    id[3] = (ID_2_val) >> 24;
 8001c06:	0e03      	lsrs	r3, r0, #24
 8001c08:	70e3      	strb	r3, [r4, #3]
    id[2] = (ID_2_val) >> 16;
 8001c0a:	0c03      	lsrs	r3, r0, #16
 8001c0c:	70a3      	strb	r3, [r4, #2]
    id[1] = (ID_2_val) >> 8;
 8001c0e:	0a03      	lsrs	r3, r0, #8
 8001c10:	7063      	strb	r3, [r4, #1]
    id[0] = (ID_2_val);
 8001c12:	7020      	strb	r0, [r4, #0]
 8001c14:	e7e7      	b.n	8001be6 <GetUniqueId+0x36>
 8001c16:	bf00      	nop
 8001c18:	1fff7000 	.word	0x1fff7000

08001c1c <GetDevAddr>:
{
 8001c1c:	b538      	push	{r3, r4, r5, lr}
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <GetDevAddr+0x2c>)
 8001c20:	f8d3 3580 	ldr.w	r3, [r3, #1408]	; 0x580
  *devAddr = LL_FLASH_GetUDN();
 8001c24:	6003      	str	r3, [r0, #0]
  if (*devAddr == 0xFFFFFFFF)
 8001c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c2a:	d000      	beq.n	8001c2e <GetDevAddr+0x12>
}
 8001c2c:	bd38      	pop	{r3, r4, r5, pc}
 8001c2e:	4604      	mov	r4, r0
    *devAddr = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c30:	f001 f9f4 	bl	800301c <HAL_GetUIDw0>
 8001c34:	4605      	mov	r5, r0
 8001c36:	f001 f9f7 	bl	8003028 <HAL_GetUIDw1>
 8001c3a:	4045      	eors	r5, r0
 8001c3c:	f001 f9fa 	bl	8003034 <HAL_GetUIDw2>
 8001c40:	4045      	eors	r5, r0
 8001c42:	6025      	str	r5, [r4, #0]
}
 8001c44:	e7f2      	b.n	8001c2c <GetDevAddr+0x10>
 8001c46:	bf00      	nop
 8001c48:	1fff7000 	.word	0x1fff7000

08001c4c <UTIL_ADV_TRACE_PreSendHook>:
{
 8001c4c:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c4e:	2101      	movs	r1, #1
 8001c50:	2002      	movs	r0, #2
 8001c52:	f011 fbf7 	bl	8013444 <UTIL_LPM_SetStopMode>
}
 8001c56:	bd08      	pop	{r3, pc}

08001c58 <UTIL_ADV_TRACE_PostSendHook>:
{
 8001c58:	b508      	push	{r3, lr}
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	2002      	movs	r0, #2
 8001c5e:	f011 fbf1 	bl	8013444 <UTIL_LPM_SetStopMode>
}
 8001c62:	bd08      	pop	{r3, pc}

08001c64 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001c64:	b508      	push	{r3, lr}
  uint32_t ret = 0;
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001c66:	4b04      	ldr	r3, [pc, #16]	; (8001c78 <HAL_GetTick+0x14>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	b90b      	cbnz	r3, 8001c70 <HAL_GetTick+0xc>
  uint32_t ret = 0;
 8001c6c:	2000      	movs	r0, #0
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
}
 8001c6e:	bd08      	pop	{r3, pc}
    ret = TIMER_IF_GetTimerValue();
 8001c70:	f000 f89a 	bl	8001da8 <TIMER_IF_GetTimerValue>
 8001c74:	e7fb      	b.n	8001c6e <HAL_GetTick+0xa>
 8001c76:	bf00      	nop
 8001c78:	200002cc 	.word	0x200002cc

08001c7c <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001c7c:	b500      	push	{lr}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	9001      	str	r0, [sp, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001c82:	9801      	ldr	r0, [sp, #4]
 8001c84:	f000 f976 	bl	8001f74 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001c88:	b003      	add	sp, #12
 8001c8a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001c90 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c92:	b089      	sub	sp, #36	; 0x24

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001c94:	f001 f9d4 	bl	8003040 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001c98:	f001 f9da 	bl	8003050 <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001c9c:	f001 f9e0 	bl	8003060 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	9403      	str	r4, [sp, #12]
 8001ca4:	9404      	str	r4, [sp, #16]
 8001ca6:	9405      	str	r4, [sp, #20]
 8001ca8:	9406      	str	r4, [sp, #24]
 8001caa:	9407      	str	r4, [sp, #28]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001cac:	2301      	movs	r3, #1
 8001cae:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	9306      	str	r3, [sp, #24]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cba:	f042 0202 	orr.w	r2, r2, #2
 8001cbe:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cc0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001cc2:	f002 0202 	and.w	r2, r2, #2
 8001cc6:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8001cc8:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001cca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001ccc:	f042 0202 	orr.w	r2, r2, #2
 8001cd0:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001cd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cd4:	f003 0302 	and.w	r3, r3, #2
 8001cd8:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8001cda:	9b01      	ldr	r3, [sp, #4]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
  PROBE_LINE2_CLK_ENABLE();

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001cdc:	f44f 5780 	mov.w	r7, #4096	; 0x1000
 8001ce0:	9703      	str	r7, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001ce2:	4d0c      	ldr	r5, [pc, #48]	; (8001d14 <DBG_Init+0x84>)
 8001ce4:	a903      	add	r1, sp, #12
 8001ce6:	4628      	mov	r0, r5
 8001ce8:	f002 fda4 	bl	8004834 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001cec:	f44f 5600 	mov.w	r6, #8192	; 0x2000
 8001cf0:	9603      	str	r6, [sp, #12]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001cf2:	a903      	add	r1, sp, #12
 8001cf4:	4628      	mov	r0, r5
 8001cf6:	f002 fd9d 	bl	8004834 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001cfa:	4622      	mov	r2, r4
 8001cfc:	4639      	mov	r1, r7
 8001cfe:	4628      	mov	r0, r5
 8001d00:	f002 fee8 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001d04:	4622      	mov	r2, r4
 8001d06:	4631      	mov	r1, r6
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f002 fee3 	bl	8004ad4 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001d0e:	b009      	add	sp, #36	; 0x24
 8001d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d12:	bf00      	nop
 8001d14:	48000400 	.word	0x48000400

08001d18 <EnvSensors_Read>:
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001d18:	b510      	push	{r4, lr}
 8001d1a:	4604      	mov	r4, r0
#if (USE_IKS01A3_ENV_SENSOR_LPS22HH_0 == 1)
  IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_PRESSURE, &PRESSURE_Value);
  //IKS01A3_ENV_SENSOR_GetValue(IKS01A3_LPS22HH_0, ENV_TEMPERATURE, &TEMPERATURE_Value);
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#else
  TEMPERATURE_Value = (SYS_GetTemperatureLevel() >> 8);
 8001d1c:	f7ff f9e8 	bl	80010f0 <SYS_GetTemperatureLevel>
 8001d20:	f340 200f 	sbfx	r0, r0, #8, #16
 8001d24:	f7fe fd56 	bl	80007d4 <__aeabi_i2f>
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001d28:	4b05      	ldr	r3, [pc, #20]	; (8001d40 <EnvSensors_Read+0x28>)
 8001d2a:	60a3      	str	r3, [r4, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001d2c:	6060      	str	r0, [r4, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <EnvSensors_Read+0x2c>)
 8001d30:	6023      	str	r3, [r4, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001d32:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <EnvSensors_Read+0x30>)
 8001d34:	60e3      	str	r3, [r4, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001d36:	4b05      	ldr	r3, [pc, #20]	; (8001d4c <EnvSensors_Read+0x34>)
 8001d38:	6123      	str	r3, [r4, #16]

  return 0;
  /* USER CODE END EnvSensors_Read */
}
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	bd10      	pop	{r4, pc}
 8001d3e:	bf00      	nop
 8001d40:	42480000 	.word	0x42480000
 8001d44:	447a0000 	.word	0x447a0000
 8001d48:	003e090d 	.word	0x003e090d
 8001d4c:	000503ab 	.word	0x000503ab

08001d50 <EnvSensors_Init>:
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001d50:	2000      	movs	r0, #0
 8001d52:	4770      	bx	lr

08001d54 <TIMER_IF_SetTimerContext>:
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <TIMER_IF_SetTimerContext+0x1c>)
 8001d56:	6898      	ldr	r0, [r3, #8]
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d58:	e001      	b.n	8001d5e <TIMER_IF_SetTimerContext+0xa>
 8001d5a:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <TIMER_IF_SetTimerContext+0x1c>)
 8001d5c:	6898      	ldr	r0, [r3, #8]
 8001d5e:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <TIMER_IF_SetTimerContext+0x1c>)
 8001d60:	689b      	ldr	r3, [r3, #8]
 8001d62:	4283      	cmp	r3, r0
 8001d64:	d1f9      	bne.n	8001d5a <TIMER_IF_SetTimerContext+0x6>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
  }
  return UINT32_MAX - ssr;
 8001d66:	43c0      	mvns	r0, r0
  RtcTimerContext = GetTimerTicks();
 8001d68:	4b02      	ldr	r3, [pc, #8]	; (8001d74 <TIMER_IF_SetTimerContext+0x20>)
 8001d6a:	6018      	str	r0, [r3, #0]
}
 8001d6c:	4770      	bx	lr
 8001d6e:	bf00      	nop
 8001d70:	40002800 	.word	0x40002800
 8001d74:	200002d0 	.word	0x200002d0

08001d78 <TIMER_IF_GetTimerContext>:
}
 8001d78:	4b01      	ldr	r3, [pc, #4]	; (8001d80 <TIMER_IF_GetTimerContext+0x8>)
 8001d7a:	6818      	ldr	r0, [r3, #0]
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200002d0 	.word	0x200002d0

08001d84 <TIMER_IF_GetTimerElapsedTime>:
 8001d84:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d86:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001d88:	e001      	b.n	8001d8e <TIMER_IF_GetTimerElapsedTime+0xa>
 8001d8a:	4b05      	ldr	r3, [pc, #20]	; (8001da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d8c:	6898      	ldr	r0, [r3, #8]
 8001d8e:	4b04      	ldr	r3, [pc, #16]	; (8001da0 <TIMER_IF_GetTimerElapsedTime+0x1c>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	4283      	cmp	r3, r0
 8001d94:	d1f9      	bne.n	8001d8a <TIMER_IF_GetTimerElapsedTime+0x6>
  return UINT32_MAX - ssr;
 8001d96:	43c0      	mvns	r0, r0
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001d98:	4b02      	ldr	r3, [pc, #8]	; (8001da4 <TIMER_IF_GetTimerElapsedTime+0x20>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
}
 8001d9c:	1ac0      	subs	r0, r0, r3
 8001d9e:	4770      	bx	lr
 8001da0:	40002800 	.word	0x40002800
 8001da4:	200002d0 	.word	0x200002d0

08001da8 <TIMER_IF_GetTimerValue>:
  if (RTC_Initialized == true)
 8001da8:	4b07      	ldr	r3, [pc, #28]	; (8001dc8 <TIMER_IF_GetTimerValue+0x20>)
 8001daa:	781b      	ldrb	r3, [r3, #0]
 8001dac:	b153      	cbz	r3, 8001dc4 <TIMER_IF_GetTimerValue+0x1c>
 8001dae:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <TIMER_IF_GetTimerValue+0x24>)
 8001db0:	6898      	ldr	r0, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001db2:	e001      	b.n	8001db8 <TIMER_IF_GetTimerValue+0x10>
 8001db4:	4b05      	ldr	r3, [pc, #20]	; (8001dcc <TIMER_IF_GetTimerValue+0x24>)
 8001db6:	6898      	ldr	r0, [r3, #8]
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <TIMER_IF_GetTimerValue+0x24>)
 8001dba:	689b      	ldr	r3, [r3, #8]
 8001dbc:	4283      	cmp	r3, r0
 8001dbe:	d1f9      	bne.n	8001db4 <TIMER_IF_GetTimerValue+0xc>
  return UINT32_MAX - ssr;
 8001dc0:	43c0      	mvns	r0, r0
 8001dc2:	4770      	bx	lr
  uint32_t ret = 0;
 8001dc4:	2000      	movs	r0, #0
}
 8001dc6:	4770      	bx	lr
 8001dc8:	200002cd 	.word	0x200002cd
 8001dcc:	40002800 	.word	0x40002800

08001dd0 <TIMER_IF_GetMinimumTimeout>:
}
 8001dd0:	2003      	movs	r0, #3
 8001dd2:	4770      	bx	lr

08001dd4 <TIMER_IF_Convert_ms2Tick>:
{
 8001dd4:	b508      	push	{r3, lr}
 8001dd6:	4601      	mov	r1, r0
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8001dd8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ddc:	2300      	movs	r3, #0
 8001dde:	0280      	lsls	r0, r0, #10
 8001de0:	0d89      	lsrs	r1, r1, #22
 8001de2:	f7fe fee1 	bl	8000ba8 <__aeabi_uldivmod>
}
 8001de6:	bd08      	pop	{r3, pc}

08001de8 <TIMER_IF_Convert_Tick2ms>:
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 8001de8:	0ec2      	lsrs	r2, r0, #27
 8001dea:	0143      	lsls	r3, r0, #5
 8001dec:	1a1b      	subs	r3, r3, r0
 8001dee:	f162 0200 	sbc.w	r2, r2, #0
 8001df2:	0092      	lsls	r2, r2, #2
 8001df4:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	181b      	adds	r3, r3, r0
 8001dfc:	f142 0000 	adc.w	r0, r2, #0
 8001e00:	00c0      	lsls	r0, r0, #3
 8001e02:	ea40 7053 	orr.w	r0, r0, r3, lsr #29
 8001e06:	f3c3 13d5 	ubfx	r3, r3, #7, #22
}
 8001e0a:	ea43 5080 	orr.w	r0, r3, r0, lsl #22
 8001e0e:	4770      	bx	lr

08001e10 <TIMER_IF_StopTimer>:
{
 8001e10:	b510      	push	{r4, lr}
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001e12:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <TIMER_IF_StopTimer+0x20>)
 8001e14:	2201      	movs	r2, #1
 8001e16:	65da      	str	r2, [r3, #92]	; 0x5c
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e18:	4c06      	ldr	r4, [pc, #24]	; (8001e34 <TIMER_IF_StopTimer+0x24>)
 8001e1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e1e:	4620      	mov	r0, r4
 8001e20:	f004 f936 	bl	8006090 <HAL_RTC_DeactivateAlarm>
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e24:	f04f 33ff 	mov.w	r3, #4294967295
 8001e28:	6323      	str	r3, [r4, #48]	; 0x30
}
 8001e2a:	2000      	movs	r0, #0
 8001e2c:	bd10      	pop	{r4, pc}
 8001e2e:	bf00      	nop
 8001e30:	40002800 	.word	0x40002800
 8001e34:	20000234 	.word	0x20000234

08001e38 <TIMER_IF_BkUp_Write_MSBticks>:
{
 8001e38:	b508      	push	{r3, lr}
 8001e3a:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8001e3c:	2102      	movs	r1, #2
 8001e3e:	4802      	ldr	r0, [pc, #8]	; (8001e48 <TIMER_IF_BkUp_Write_MSBticks+0x10>)
 8001e40:	f004 fb71 	bl	8006526 <HAL_RTCEx_BKUPWrite>
}
 8001e44:	bd08      	pop	{r3, pc}
 8001e46:	bf00      	nop
 8001e48:	20000234 	.word	0x20000234

08001e4c <TIMER_IF_Init>:
{
 8001e4c:	b538      	push	{r3, r4, r5, lr}
  if (RTC_Initialized == false)
 8001e4e:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <TIMER_IF_Init+0x40>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	b10b      	cbz	r3, 8001e58 <TIMER_IF_Init+0xc>
}
 8001e54:	2000      	movs	r0, #0
 8001e56:	bd38      	pop	{r3, r4, r5, pc}
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e58:	4c0d      	ldr	r4, [pc, #52]	; (8001e90 <TIMER_IF_Init+0x44>)
 8001e5a:	f04f 35ff 	mov.w	r5, #4294967295
 8001e5e:	6325      	str	r5, [r4, #48]	; 0x30
    MX_RTC_Init();
 8001e60:	f7ff fcf6 	bl	8001850 <MX_RTC_Init>
    TIMER_IF_StopTimer();
 8001e64:	f7ff ffd4 	bl	8001e10 <TIMER_IF_StopTimer>
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6c:	4620      	mov	r0, r4
 8001e6e:	f004 f90f 	bl	8006090 <HAL_RTC_DeactivateAlarm>
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001e72:	6325      	str	r5, [r4, #48]	; 0x30
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001e74:	4620      	mov	r0, r4
 8001e76:	f004 faf5 	bl	8006464 <HAL_RTCEx_EnableBypassShadow>
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001e7a:	2000      	movs	r0, #0
 8001e7c:	f7ff ffdc 	bl	8001e38 <TIMER_IF_BkUp_Write_MSBticks>
    TIMER_IF_SetTimerContext();
 8001e80:	f7ff ff68 	bl	8001d54 <TIMER_IF_SetTimerContext>
    RTC_Initialized = true;
 8001e84:	4b01      	ldr	r3, [pc, #4]	; (8001e8c <TIMER_IF_Init+0x40>)
 8001e86:	2201      	movs	r2, #1
 8001e88:	701a      	strb	r2, [r3, #0]
 8001e8a:	e7e3      	b.n	8001e54 <TIMER_IF_Init+0x8>
 8001e8c:	200002cd 	.word	0x200002cd
 8001e90:	20000234 	.word	0x20000234

08001e94 <TIMER_IF_BkUp_Write_Seconds>:
{
 8001e94:	b508      	push	{r3, lr}
 8001e96:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8001e98:	2100      	movs	r1, #0
 8001e9a:	4802      	ldr	r0, [pc, #8]	; (8001ea4 <TIMER_IF_BkUp_Write_Seconds+0x10>)
 8001e9c:	f004 fb43 	bl	8006526 <HAL_RTCEx_BKUPWrite>
}
 8001ea0:	bd08      	pop	{r3, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000234 	.word	0x20000234

08001ea8 <TIMER_IF_BkUp_Write_SubSeconds>:
{
 8001ea8:	b508      	push	{r3, lr}
 8001eaa:	4602      	mov	r2, r0
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8001eac:	2101      	movs	r1, #1
 8001eae:	4802      	ldr	r0, [pc, #8]	; (8001eb8 <TIMER_IF_BkUp_Write_SubSeconds+0x10>)
 8001eb0:	f004 fb39 	bl	8006526 <HAL_RTCEx_BKUPWrite>
}
 8001eb4:	bd08      	pop	{r3, pc}
 8001eb6:	bf00      	nop
 8001eb8:	20000234 	.word	0x20000234

08001ebc <TIMER_IF_StartTimer>:
{
 8001ebc:	b510      	push	{r4, lr}
 8001ebe:	b08c      	sub	sp, #48	; 0x30
 8001ec0:	4604      	mov	r4, r0
  RTC_AlarmTypeDef sAlarm = {0};
 8001ec2:	222c      	movs	r2, #44	; 0x2c
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	a801      	add	r0, sp, #4
 8001ec8:	f011 ffce 	bl	8013e68 <memset>
  TIMER_IF_StopTimer();
 8001ecc:	f7ff ffa0 	bl	8001e10 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001ed0:	4b0c      	ldr	r3, [pc, #48]	; (8001f04 <TIMER_IF_StartTimer+0x48>)
 8001ed2:	6818      	ldr	r0, [r3, #0]
 8001ed4:	4404      	add	r4, r0
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9308      	str	r3, [sp, #32]
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001eda:	43e4      	mvns	r4, r4
 8001edc:	9402      	str	r4, [sp, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001ede:	9306      	str	r3, [sp, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001ee0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001ee4:	9307      	str	r3, [sp, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001ee6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001eea:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001eec:	2201      	movs	r2, #1
 8001eee:	a901      	add	r1, sp, #4
 8001ef0:	4805      	ldr	r0, [pc, #20]	; (8001f08 <TIMER_IF_StartTimer+0x4c>)
 8001ef2:	f004 f9fb 	bl	80062ec <HAL_RTC_SetAlarm_IT>
 8001ef6:	b910      	cbnz	r0, 8001efe <TIMER_IF_StartTimer+0x42>
}
 8001ef8:	2000      	movs	r0, #0
 8001efa:	b00c      	add	sp, #48	; 0x30
 8001efc:	bd10      	pop	{r4, pc}
    Error_Handler();
 8001efe:	f7ff fc31 	bl	8001764 <Error_Handler>
 8001f02:	e7f9      	b.n	8001ef8 <TIMER_IF_StartTimer+0x3c>
 8001f04:	200002d0 	.word	0x200002d0
 8001f08:	20000234 	.word	0x20000234

08001f0c <TIMER_IF_BkUp_Read_MSBticks>:
{
 8001f0c:	b508      	push	{r3, lr}
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 8001f0e:	2102      	movs	r1, #2
 8001f10:	4801      	ldr	r0, [pc, #4]	; (8001f18 <TIMER_IF_BkUp_Read_MSBticks+0xc>)
 8001f12:	f004 fb0f 	bl	8006534 <HAL_RTCEx_BKUPRead>
}
 8001f16:	bd08      	pop	{r3, pc}
 8001f18:	20000234 	.word	0x20000234

08001f1c <TIMER_IF_GetTime>:
{
 8001f1c:	b538      	push	{r3, r4, r5, lr}
 8001f1e:	4605      	mov	r5, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <TIMER_IF_GetTime+0x34>)
 8001f22:	689c      	ldr	r4, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f24:	e001      	b.n	8001f2a <TIMER_IF_GetTime+0xe>
 8001f26:	4b0a      	ldr	r3, [pc, #40]	; (8001f50 <TIMER_IF_GetTime+0x34>)
 8001f28:	689c      	ldr	r4, [r3, #8]
 8001f2a:	4a09      	ldr	r2, [pc, #36]	; (8001f50 <TIMER_IF_GetTime+0x34>)
 8001f2c:	6892      	ldr	r2, [r2, #8]
 8001f2e:	42a2      	cmp	r2, r4
 8001f30:	d1f9      	bne.n	8001f26 <TIMER_IF_GetTime+0xa>
  return UINT32_MAX - ssr;
 8001f32:	43e4      	mvns	r4, r4
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 8001f34:	f7ff ffea 	bl	8001f0c <TIMER_IF_BkUp_Read_MSBticks>
  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8001f38:	4623      	mov	r3, r4
  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 8001f3a:	0aa4      	lsrs	r4, r4, #10
 8001f3c:	ea44 5480 	orr.w	r4, r4, r0, lsl #22
  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 8001f40:	f3c3 0009 	ubfx	r0, r3, #0, #10
 8001f44:	f7ff ff50 	bl	8001de8 <TIMER_IF_Convert_Tick2ms>
 8001f48:	8028      	strh	r0, [r5, #0]
}
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	bd38      	pop	{r3, r4, r5, pc}
 8001f4e:	bf00      	nop
 8001f50:	40002800 	.word	0x40002800

08001f54 <TIMER_IF_BkUp_Read_Seconds>:
{
 8001f54:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8001f56:	2100      	movs	r1, #0
 8001f58:	4801      	ldr	r0, [pc, #4]	; (8001f60 <TIMER_IF_BkUp_Read_Seconds+0xc>)
 8001f5a:	f004 faeb 	bl	8006534 <HAL_RTCEx_BKUPRead>
}
 8001f5e:	bd08      	pop	{r3, pc}
 8001f60:	20000234 	.word	0x20000234

08001f64 <TIMER_IF_BkUp_Read_SubSeconds>:
{
 8001f64:	b508      	push	{r3, lr}
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8001f66:	2101      	movs	r1, #1
 8001f68:	4801      	ldr	r0, [pc, #4]	; (8001f70 <TIMER_IF_BkUp_Read_SubSeconds+0xc>)
 8001f6a:	f004 fae3 	bl	8006534 <HAL_RTCEx_BKUPRead>
}
 8001f6e:	bd08      	pop	{r3, pc}
 8001f70:	20000234 	.word	0x20000234

08001f74 <TIMER_IF_DelayMs>:
{
 8001f74:	b508      	push	{r3, lr}
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 8001f76:	f7ff ff2d 	bl	8001dd4 <TIMER_IF_Convert_ms2Tick>
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001f7c:	6899      	ldr	r1, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f7e:	e001      	b.n	8001f84 <TIMER_IF_DelayMs+0x10>
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001f82:	6899      	ldr	r1, [r3, #8]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001f86:	6892      	ldr	r2, [r2, #8]
 8001f88:	428a      	cmp	r2, r1
 8001f8a:	d1f9      	bne.n	8001f80 <TIMER_IF_DelayMs+0xc>
  return UINT32_MAX - ssr;
 8001f8c:	43c9      	mvns	r1, r1
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f8e:	e00a      	b.n	8001fa6 <TIMER_IF_DelayMs+0x32>
 8001f90:	4b07      	ldr	r3, [pc, #28]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	4a06      	ldr	r2, [pc, #24]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001f96:	6892      	ldr	r2, [r2, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	d1f9      	bne.n	8001f90 <TIMER_IF_DelayMs+0x1c>
  return UINT32_MAX - ssr;
 8001f9c:	43db      	mvns	r3, r3
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8001f9e:	1a5b      	subs	r3, r3, r1
 8001fa0:	4283      	cmp	r3, r0
 8001fa2:	d203      	bcs.n	8001fac <TIMER_IF_DelayMs+0x38>
    __NOP();
 8001fa4:	bf00      	nop
 8001fa6:	4b02      	ldr	r3, [pc, #8]	; (8001fb0 <TIMER_IF_DelayMs+0x3c>)
 8001fa8:	689b      	ldr	r3, [r3, #8]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 8001faa:	e7f3      	b.n	8001f94 <TIMER_IF_DelayMs+0x20>
}
 8001fac:	bd08      	pop	{r3, pc}
 8001fae:	bf00      	nop
 8001fb0:	40002800 	.word	0x40002800

08001fb4 <HAL_RTC_AlarmAEventCallback>:
{
 8001fb4:	b508      	push	{r3, lr}
  UTIL_TIMER_IRQ_MAP_PROCESS();
 8001fb6:	f011 fd8d 	bl	8013ad4 <UTIL_TIMER_IRQ_Handler>
}
 8001fba:	bd08      	pop	{r3, pc}

08001fbc <HAL_RTCEx_SSRUEventCallback>:
{
 8001fbc:	b508      	push	{r3, lr}
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8001fbe:	f7ff ffa5 	bl	8001f0c <TIMER_IF_BkUp_Read_MSBticks>
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8001fc2:	3001      	adds	r0, #1
 8001fc4:	f7ff ff38 	bl	8001e38 <TIMER_IF_BkUp_Write_MSBticks>
}
 8001fc8:	bd08      	pop	{r3, pc}
	...

08001fcc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fcc:	b508      	push	{r3, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fce:	4817      	ldr	r0, [pc, #92]	; (800202c <MX_USART2_UART_Init+0x60>)
 8001fd0:	4b17      	ldr	r3, [pc, #92]	; (8002030 <MX_USART2_UART_Init+0x64>)
 8001fd2:	6003      	str	r3, [r0, #0]
  huart2.Init.BaudRate = 115200;
 8001fd4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8001fd8:	6043      	str	r3, [r0, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fde:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fe0:	6103      	str	r3, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fe2:	220c      	movs	r2, #12
 8001fe4:	6142      	str	r2, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fe6:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fe8:	61c3      	str	r3, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fea:	6203      	str	r3, [r0, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fec:	6243      	str	r3, [r0, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fee:	6283      	str	r3, [r0, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001ff0:	f005 fdfe 	bl	8007bf0 <HAL_UART_Init>
 8001ff4:	b970      	cbnz	r0, 8002014 <MX_USART2_UART_Init+0x48>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	480c      	ldr	r0, [pc, #48]	; (800202c <MX_USART2_UART_Init+0x60>)
 8001ffa:	f005 ffae 	bl	8007f5a <HAL_UARTEx_SetTxFifoThreshold>
 8001ffe:	b960      	cbnz	r0, 800201a <MX_USART2_UART_Init+0x4e>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002000:	2100      	movs	r1, #0
 8002002:	480a      	ldr	r0, [pc, #40]	; (800202c <MX_USART2_UART_Init+0x60>)
 8002004:	f005 ffce 	bl	8007fa4 <HAL_UARTEx_SetRxFifoThreshold>
 8002008:	b950      	cbnz	r0, 8002020 <MX_USART2_UART_Init+0x54>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_EnableFifoMode(&huart2) != HAL_OK)
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <MX_USART2_UART_Init+0x60>)
 800200c:	f005 ff81 	bl	8007f12 <HAL_UARTEx_EnableFifoMode>
 8002010:	b948      	cbnz	r0, 8002026 <MX_USART2_UART_Init+0x5a>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002012:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002014:	f7ff fba6 	bl	8001764 <Error_Handler>
 8002018:	e7ed      	b.n	8001ff6 <MX_USART2_UART_Init+0x2a>
    Error_Handler();
 800201a:	f7ff fba3 	bl	8001764 <Error_Handler>
 800201e:	e7ef      	b.n	8002000 <MX_USART2_UART_Init+0x34>
    Error_Handler();
 8002020:	f7ff fba0 	bl	8001764 <Error_Handler>
 8002024:	e7f1      	b.n	800200a <MX_USART2_UART_Init+0x3e>
    Error_Handler();
 8002026:	f7ff fb9d 	bl	8001764 <Error_Handler>
}
 800202a:	e7f2      	b.n	8002012 <MX_USART2_UART_Init+0x46>
 800202c:	20000334 	.word	0x20000334
 8002030:	40004400 	.word	0x40004400

08002034 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002034:	b530      	push	{r4, r5, lr}
 8002036:	b097      	sub	sp, #92	; 0x5c
 8002038:	4604      	mov	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800203a:	2100      	movs	r1, #0
 800203c:	9111      	str	r1, [sp, #68]	; 0x44
 800203e:	9112      	str	r1, [sp, #72]	; 0x48
 8002040:	9113      	str	r1, [sp, #76]	; 0x4c
 8002042:	9114      	str	r1, [sp, #80]	; 0x50
 8002044:	9115      	str	r1, [sp, #84]	; 0x54
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002046:	2238      	movs	r2, #56	; 0x38
 8002048:	a803      	add	r0, sp, #12
 800204a:	f011 ff0d 	bl	8013e68 <memset>
  if(uartHandle->Instance==USART2)
 800204e:	6822      	ldr	r2, [r4, #0]
 8002050:	4b2d      	ldr	r3, [pc, #180]	; (8002108 <HAL_UART_MspInit+0xd4>)
 8002052:	429a      	cmp	r2, r3
 8002054:	d001      	beq.n	800205a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002056:	b017      	add	sp, #92	; 0x5c
 8002058:	bd30      	pop	{r4, r5, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800205a:	2302      	movs	r3, #2
 800205c:	9303      	str	r3, [sp, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_SYSCLK;
 800205e:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_UART_MspInit+0xd8>)
 8002060:	9305      	str	r3, [sp, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002062:	a803      	add	r0, sp, #12
 8002064:	f003 feca 	bl	8005dfc <HAL_RCCEx_PeriphCLKConfig>
 8002068:	2800      	cmp	r0, #0
 800206a:	d144      	bne.n	80020f6 <HAL_UART_MspInit+0xc2>
  SET_BIT(RCC->APB1ENR1, Periphs);
 800206c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002070:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002072:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002076:	659a      	str	r2, [r3, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002078:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800207a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800207e:	9202      	str	r2, [sp, #8]
  (void)tmpreg;
 8002080:	9a02      	ldr	r2, [sp, #8]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002082:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002084:	f042 0201 	orr.w	r2, r2, #1
 8002088:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	f003 0301 	and.w	r3, r3, #1
 8002090:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8002092:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002094:	230c      	movs	r3, #12
 8002096:	9311      	str	r3, [sp, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002098:	2302      	movs	r3, #2
 800209a:	9312      	str	r3, [sp, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800209c:	2500      	movs	r5, #0
 800209e:	9513      	str	r5, [sp, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020a0:	2303      	movs	r3, #3
 80020a2:	9314      	str	r3, [sp, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020a4:	2307      	movs	r3, #7
 80020a6:	9315      	str	r3, [sp, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	a911      	add	r1, sp, #68	; 0x44
 80020aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ae:	f002 fbc1 	bl	8004834 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Channel5;
 80020b2:	4817      	ldr	r0, [pc, #92]	; (8002110 <HAL_UART_MspInit+0xdc>)
 80020b4:	4b17      	ldr	r3, [pc, #92]	; (8002114 <HAL_UART_MspInit+0xe0>)
 80020b6:	6003      	str	r3, [r0, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80020b8:	2314      	movs	r3, #20
 80020ba:	6043      	str	r3, [r0, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80020bc:	2310      	movs	r3, #16
 80020be:	6083      	str	r3, [r0, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020c0:	60c5      	str	r5, [r0, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80020c2:	2380      	movs	r3, #128	; 0x80
 80020c4:	6103      	str	r3, [r0, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020c6:	6145      	str	r5, [r0, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020c8:	6185      	str	r5, [r0, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80020ca:	61c5      	str	r5, [r0, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80020cc:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80020ce:	f002 f84b 	bl	8004168 <HAL_DMA_Init>
 80020d2:	b998      	cbnz	r0, 80020fc <HAL_UART_MspInit+0xc8>
    if (HAL_DMA_ConfigChannelAttributes(&hdma_usart2_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 80020d4:	2110      	movs	r1, #16
 80020d6:	480e      	ldr	r0, [pc, #56]	; (8002110 <HAL_UART_MspInit+0xdc>)
 80020d8:	f002 fa4b 	bl	8004572 <HAL_DMA_ConfigChannelAttributes>
 80020dc:	b988      	cbnz	r0, 8002102 <HAL_UART_MspInit+0xce>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80020de:	4b0c      	ldr	r3, [pc, #48]	; (8002110 <HAL_UART_MspInit+0xdc>)
 80020e0:	67e3      	str	r3, [r4, #124]	; 0x7c
 80020e2:	629c      	str	r4, [r3, #40]	; 0x28
    HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 80020e4:	2200      	movs	r2, #0
 80020e6:	2102      	movs	r1, #2
 80020e8:	2025      	movs	r0, #37	; 0x25
 80020ea:	f001 fe97 	bl	8003e1c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020ee:	2025      	movs	r0, #37	; 0x25
 80020f0:	f001 fecc 	bl	8003e8c <HAL_NVIC_EnableIRQ>
}
 80020f4:	e7af      	b.n	8002056 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80020f6:	f7ff fb35 	bl	8001764 <Error_Handler>
 80020fa:	e7b7      	b.n	800206c <HAL_UART_MspInit+0x38>
      Error_Handler();
 80020fc:	f7ff fb32 	bl	8001764 <Error_Handler>
 8002100:	e7e8      	b.n	80020d4 <HAL_UART_MspInit+0xa0>
      Error_Handler();
 8002102:	f7ff fb2f 	bl	8001764 <Error_Handler>
 8002106:	e7ea      	b.n	80020de <HAL_UART_MspInit+0xaa>
 8002108:	40004400 	.word	0x40004400
 800210c:	000c0004 	.word	0x000c0004
 8002110:	200002d4 	.word	0x200002d4
 8002114:	40020058 	.word	0x40020058

08002118 <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{

  if(uartHandle->Instance==USART2)
 8002118:	6802      	ldr	r2, [r0, #0]
 800211a:	4b0c      	ldr	r3, [pc, #48]	; (800214c <HAL_UART_MspDeInit+0x34>)
 800211c:	429a      	cmp	r2, r3
 800211e:	d000      	beq.n	8002122 <HAL_UART_MspDeInit+0xa>
 8002120:	4770      	bx	lr
{
 8002122:	b510      	push	{r4, lr}
 8002124:	4604      	mov	r4, r0
  CLEAR_BIT(RCC->APB1ENR1, Periphs);
 8002126:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800212a:	6d93      	ldr	r3, [r2, #88]	; 0x58
 800212c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58

    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    HAL_GPIO_DeInit(GPIOA, USARTx_RX_Pin|USARTx_TX_Pin);
 8002132:	210c      	movs	r1, #12
 8002134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002138:	f002 fc4e 	bl	80049d8 <HAL_GPIO_DeInit>

    /* USART2 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800213c:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 800213e:	f002 f885 	bl	800424c <HAL_DMA_DeInit>

    /* USART2 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8002142:	2025      	movs	r0, #37	; 0x25
 8002144:	f001 feb0 	bl	8003ea8 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }
}
 8002148:	bd10      	pop	{r4, pc}
 800214a:	bf00      	nop
 800214c:	40004400 	.word	0x40004400

08002150 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 8002150:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 8002152:	4b07      	ldr	r3, [pc, #28]	; (8002170 <vcom_Init+0x20>)
 8002154:	6018      	str	r0, [r3, #0]
  MX_DMA_Init();
 8002156:	f7ff f8a7 	bl	80012a8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800215a:	f7ff ff37 	bl	8001fcc <MX_USART2_UART_Init>
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 800215e:	4a05      	ldr	r2, [pc, #20]	; (8002174 <vcom_Init+0x24>)
 8002160:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 8002164:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_27);
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 800216c:	2000      	movs	r0, #0
 800216e:	bd08      	pop	{r3, pc}
 8002170:	200003cc 	.word	0x200003cc
 8002174:	58000800 	.word	0x58000800

08002178 <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 8002178:	b508      	push	{r3, lr}
  SET_BIT(RCC->APB1RSTR1, Periphs);
 800217a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002180:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002184:	639a      	str	r2, [r3, #56]	; 0x38
  CLEAR_BIT(RCC->APB1RSTR1, Periphs);
 8002186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002188:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800218c:	639a      	str	r2, [r3, #56]	; 0x38
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART2_FORCE_RESET();
  __HAL_RCC_USART2_RELEASE_RESET();

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart2);
 800218e:	4804      	ldr	r0, [pc, #16]	; (80021a0 <vcom_DeInit+0x28>)
 8002190:	f7ff ffc2 	bl	8002118 <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002194:	200f      	movs	r0, #15
 8002196:	f001 fe87 	bl	8003ea8 <HAL_NVIC_DisableIRQ>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800219a:	2000      	movs	r0, #0
 800219c:	bd08      	pop	{r3, pc}
 800219e:	bf00      	nop
 80021a0:	20000334 	.word	0x20000334

080021a4 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 80021a4:	b508      	push	{r3, lr}
 80021a6:	460a      	mov	r2, r1
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart2, p_data, size);
 80021a8:	4601      	mov	r1, r0
 80021aa:	4802      	ldr	r0, [pc, #8]	; (80021b4 <vcom_Trace_DMA+0x10>)
 80021ac:	f004 fda0 	bl	8006cf0 <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 80021b0:	2000      	movs	r0, #0
 80021b2:	bd08      	pop	{r3, pc}
 80021b4:	20000334 	.word	0x20000334

080021b8 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 80021b8:	b510      	push	{r4, lr}
 80021ba:	b082      	sub	sp, #8

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <vcom_ReceiveInit+0x50>)
 80021be:	6018      	str	r0, [r3, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 80021c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80021c4:	9300      	str	r3, [sp, #0]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart2, WakeUpSelection);
 80021c6:	ab02      	add	r3, sp, #8
 80021c8:	e913 0006 	ldmdb	r3, {r1, r2}
 80021cc:	480f      	ldr	r0, [pc, #60]	; (800220c <vcom_ReceiveInit+0x54>)
 80021ce:	f005 fe48 	bl	8007e62 <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_BUSY) == SET);
 80021d2:	4b0e      	ldr	r3, [pc, #56]	; (800220c <vcom_ReceiveInit+0x54>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 80021dc:	d1f9      	bne.n	80021d2 <vcom_ReceiveInit+0x1a>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart2, USART_ISR_REACK) == RESET);
 80021de:	69da      	ldr	r2, [r3, #28]
 80021e0:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 80021e4:	d0fb      	beq.n	80021de <vcom_ReceiveInit+0x26>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart2, UART_IT_WUF);
 80021e6:	689a      	ldr	r2, [r3, #8]
 80021e8:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80021ec:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart2);
 80021ee:	4c07      	ldr	r4, [pc, #28]	; (800220c <vcom_ReceiveInit+0x54>)
 80021f0:	4620      	mov	r0, r4
 80021f2:	f005 fe77 	bl	8007ee4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart2, &charRx, 1);
 80021f6:	2201      	movs	r2, #1
 80021f8:	4905      	ldr	r1, [pc, #20]	; (8002210 <vcom_ReceiveInit+0x58>)
 80021fa:	4620      	mov	r0, r4
 80021fc:	f005 fdca 	bl	8007d94 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 8002200:	2000      	movs	r0, #0
 8002202:	b002      	add	sp, #8
 8002204:	bd10      	pop	{r4, pc}
 8002206:	bf00      	nop
 8002208:	200003c8 	.word	0x200003c8
 800220c:	20000334 	.word	0x20000334
 8002210:	200003d0 	.word	0x200003d0

08002214 <vcom_Resume>:

void vcom_Resume(void)
{
 8002214:	b508      	push	{r3, lr}
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002216:	4807      	ldr	r0, [pc, #28]	; (8002234 <vcom_Resume+0x20>)
 8002218:	f005 fcea 	bl	8007bf0 <HAL_UART_Init>
 800221c:	b920      	cbnz	r0, 8002228 <vcom_Resume+0x14>
  {
    Error_Handler();
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800221e:	4806      	ldr	r0, [pc, #24]	; (8002238 <vcom_Resume+0x24>)
 8002220:	f001 ffa2 	bl	8004168 <HAL_DMA_Init>
 8002224:	b918      	cbnz	r0, 800222e <vcom_Resume+0x1a>
    Error_Handler();
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 8002226:	bd08      	pop	{r3, pc}
    Error_Handler();
 8002228:	f7ff fa9c 	bl	8001764 <Error_Handler>
 800222c:	e7f7      	b.n	800221e <vcom_Resume+0xa>
    Error_Handler();
 800222e:	f7ff fa99 	bl	8001764 <Error_Handler>
}
 8002232:	e7f8      	b.n	8002226 <vcom_Resume+0x12>
 8002234:	20000334 	.word	0x20000334
 8002238:	200002d4 	.word	0x200002d4

0800223c <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800223c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART2)
 800223e:	6802      	ldr	r2, [r0, #0]
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <HAL_UART_TxCpltCallback+0x18>)
 8002242:	429a      	cmp	r2, r3
 8002244:	d000      	beq.n	8002248 <HAL_UART_TxCpltCallback+0xc>
    TxCpltCallback(NULL);
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002246:	bd08      	pop	{r3, pc}
    TxCpltCallback(NULL);
 8002248:	4b03      	ldr	r3, [pc, #12]	; (8002258 <HAL_UART_TxCpltCallback+0x1c>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2000      	movs	r0, #0
 800224e:	4798      	blx	r3
}
 8002250:	e7f9      	b.n	8002246 <HAL_UART_TxCpltCallback+0xa>
 8002252:	bf00      	nop
 8002254:	40004400 	.word	0x40004400
 8002258:	200003cc 	.word	0x200003cc

0800225c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART2)
 800225c:	6802      	ldr	r2, [r0, #0]
 800225e:	4b0a      	ldr	r3, [pc, #40]	; (8002288 <HAL_UART_RxCpltCallback+0x2c>)
 8002260:	429a      	cmp	r2, r3
 8002262:	d000      	beq.n	8002266 <HAL_UART_RxCpltCallback+0xa>
 8002264:	4770      	bx	lr
{
 8002266:	b510      	push	{r4, lr}
 8002268:	4604      	mov	r4, r0
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800226a:	4b08      	ldr	r3, [pc, #32]	; (800228c <HAL_UART_RxCpltCallback+0x30>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b12b      	cbz	r3, 800227c <HAL_UART_RxCpltCallback+0x20>
 8002270:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
 8002274:	b912      	cbnz	r2, 800227c <HAL_UART_RxCpltCallback+0x20>
    {
      RxCpltCallback(&charRx, 1, 0);
 8002276:	2101      	movs	r1, #1
 8002278:	4805      	ldr	r0, [pc, #20]	; (8002290 <HAL_UART_RxCpltCallback+0x34>)
 800227a:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 800227c:	2201      	movs	r2, #1
 800227e:	4904      	ldr	r1, [pc, #16]	; (8002290 <HAL_UART_RxCpltCallback+0x34>)
 8002280:	4620      	mov	r0, r4
 8002282:	f005 fd87 	bl	8007d94 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002286:	bd10      	pop	{r4, pc}
 8002288:	40004400 	.word	0x40004400
 800228c:	200003c8 	.word	0x200003c8
 8002290:	200003d0 	.word	0x200003d0

08002294 <CayenneLppReset>:
  /* USER CODE END CayenneLppCursor */
}

void CayenneLppReset(void)
{
  CayenneLppCursor = 0;
 8002294:	4b01      	ldr	r3, [pc, #4]	; (800229c <CayenneLppReset+0x8>)
 8002296:	2200      	movs	r2, #0
 8002298:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN CayenneLppReset */

  /* USER CODE END CayenneLppReset */
}
 800229a:	4770      	bx	lr
 800229c:	200004c6 	.word	0x200004c6

080022a0 <CayenneLppGetSize>:
{
  /* USER CODE BEGIN CayenneLppGetSize */

  /* USER CODE END CayenneLppGetSize */
  return CayenneLppCursor;
}
 80022a0:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <CayenneLppGetSize+0x8>)
 80022a2:	7818      	ldrb	r0, [r3, #0]
 80022a4:	4770      	bx	lr
 80022a6:	bf00      	nop
 80022a8:	200004c6 	.word	0x200004c6

080022ac <CayenneLppCopy>:
  /* USER CODE END CayenneLppGetBuffer */
  return CayenneLppBuffer;
}

uint8_t CayenneLppCopy(uint8_t *dst)
{
 80022ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN CayenneLppCopy_1 */

  /* USER CODE END CayenneLppCopy_1 */
  UTIL_MEM_cpy_8(dst, CayenneLppBuffer, CayenneLppCursor);
 80022ae:	4c03      	ldr	r4, [pc, #12]	; (80022bc <CayenneLppCopy+0x10>)
 80022b0:	7822      	ldrb	r2, [r4, #0]
 80022b2:	4903      	ldr	r1, [pc, #12]	; (80022c0 <CayenneLppCopy+0x14>)
 80022b4:	f011 f916 	bl	80134e4 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN CayenneLppCopy_2 */

  /* USER CODE END CayenneLppCopy_2 */
  return CayenneLppCursor;
}
 80022b8:	7820      	ldrb	r0, [r4, #0]
 80022ba:	bd10      	pop	{r4, pc}
 80022bc:	200004c6 	.word	0x200004c6
 80022c0:	200003d4 	.word	0x200003d4

080022c4 <CayenneLppAddDigitalInput>:
uint8_t CayenneLppAddDigitalInput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalInput_1 */

  /* USER CODE END CayenneLppAddDigitalInput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_INPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <CayenneLppAddDigitalInput+0x30>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	2bef      	cmp	r3, #239	; 0xef
 80022ca:	d811      	bhi.n	80022f0 <CayenneLppAddDigitalInput+0x2c>
{
 80022cc:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80022ce:	1c5a      	adds	r2, r3, #1
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	4d08      	ldr	r5, [pc, #32]	; (80022f4 <CayenneLppAddDigitalInput+0x30>)
 80022d4:	702a      	strb	r2, [r5, #0]
 80022d6:	4c08      	ldr	r4, [pc, #32]	; (80022f8 <CayenneLppAddDigitalInput+0x34>)
 80022d8:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_INPUT;
 80022da:	1c53      	adds	r3, r2, #1
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	702b      	strb	r3, [r5, #0]
 80022e0:	2000      	movs	r0, #0
 80022e2:	54a0      	strb	r0, [r4, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 80022e4:	1c58      	adds	r0, r3, #1
 80022e6:	b2c0      	uxtb	r0, r0
 80022e8:	7028      	strb	r0, [r5, #0]
 80022ea:	54e1      	strb	r1, [r4, r3]
  /* USER CODE BEGIN CayenneLppAddDigitalInput_2 */

  /* USER CODE END CayenneLppAddDigitalInput_2 */
  return CayenneLppCursor;
}
 80022ec:	bc30      	pop	{r4, r5}
 80022ee:	4770      	bx	lr
    return 0;
 80022f0:	2000      	movs	r0, #0
}
 80022f2:	4770      	bx	lr
 80022f4:	200004c6 	.word	0x200004c6
 80022f8:	200003d4 	.word	0x200003d4

080022fc <CayenneLppAddDigitalOutput>:
uint8_t CayenneLppAddDigitalOutput(uint8_t channel, uint8_t value)
{
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_1 */

  /* USER CODE END CayenneLppAddDigitalOutput_1 */
  if ((CayenneLppCursor + LPP_DIGITAL_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80022fc:	4b0b      	ldr	r3, [pc, #44]	; (800232c <CayenneLppAddDigitalOutput+0x30>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2bef      	cmp	r3, #239	; 0xef
 8002302:	d811      	bhi.n	8002328 <CayenneLppAddDigitalOutput+0x2c>
{
 8002304:	b430      	push	{r4, r5}
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002306:	1c5a      	adds	r2, r3, #1
 8002308:	b2d2      	uxtb	r2, r2
 800230a:	4d08      	ldr	r5, [pc, #32]	; (800232c <CayenneLppAddDigitalOutput+0x30>)
 800230c:	702a      	strb	r2, [r5, #0]
 800230e:	4c08      	ldr	r4, [pc, #32]	; (8002330 <CayenneLppAddDigitalOutput+0x34>)
 8002310:	54e0      	strb	r0, [r4, r3]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_DIGITAL_OUTPUT;
 8002312:	1c53      	adds	r3, r2, #1
 8002314:	b2db      	uxtb	r3, r3
 8002316:	702b      	strb	r3, [r5, #0]
 8002318:	2001      	movs	r0, #1
 800231a:	54a0      	strb	r0, [r4, r2]
  CayenneLppBuffer[CayenneLppCursor++] = value;
 800231c:	1818      	adds	r0, r3, r0
 800231e:	b2c0      	uxtb	r0, r0
 8002320:	7028      	strb	r0, [r5, #0]
 8002322:	54e1      	strb	r1, [r4, r3]
  /* USER CODE BEGIN CayenneLppAddDigitalOutput_2 */

  /* USER CODE END CayenneLppAddDigitalOutput_2 */
  return CayenneLppCursor;
}
 8002324:	bc30      	pop	{r4, r5}
 8002326:	4770      	bx	lr
    return 0;
 8002328:	2000      	movs	r0, #0
}
 800232a:	4770      	bx	lr
 800232c:	200004c6 	.word	0x200004c6
 8002330:	200003d4 	.word	0x200003d4

08002334 <CayenneLppAddAnalogOutput>:
  /* USER CODE END CayenneLppAddAnalogInput_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddAnalogOutput(uint8_t channel, float value)
{
 8002334:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddAnalogOutput_1 */

  /* USER CODE END CayenneLppAddAnalogOutput_1 */
  if ((CayenneLppCursor + LPP_ANALOG_OUTPUT_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 8002336:	4b12      	ldr	r3, [pc, #72]	; (8002380 <CayenneLppAddAnalogOutput+0x4c>)
 8002338:	781d      	ldrb	r5, [r3, #0]
 800233a:	2dee      	cmp	r5, #238	; 0xee
 800233c:	d81e      	bhi.n	800237c <CayenneLppAddAnalogOutput+0x48>
 800233e:	4604      	mov	r4, r0
 8002340:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(value * 100);
 8002342:	4910      	ldr	r1, [pc, #64]	; (8002384 <CayenneLppAddAnalogOutput+0x50>)
 8002344:	f7fe fa9a 	bl	800087c <__aeabi_fmul>
 8002348:	f7fe fbe8 	bl	8000b1c <__aeabi_f2iz>
 800234c:	4684      	mov	ip, r0
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 800234e:	1c6a      	adds	r2, r5, #1
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	4e0b      	ldr	r6, [pc, #44]	; (8002380 <CayenneLppAddAnalogOutput+0x4c>)
 8002354:	7032      	strb	r2, [r6, #0]
 8002356:	490c      	ldr	r1, [pc, #48]	; (8002388 <CayenneLppAddAnalogOutput+0x54>)
 8002358:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_ANALOG_OUTPUT;
 800235a:	1c53      	adds	r3, r2, #1
 800235c:	b2db      	uxtb	r3, r3
 800235e:	7033      	strb	r3, [r6, #0]
 8002360:	2003      	movs	r0, #3
 8002362:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	b2d2      	uxtb	r2, r2
 8002368:	7032      	strb	r2, [r6, #0]
 800236a:	f34c 2007 	sbfx	r0, ip, #8, #8
 800236e:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002370:	1c53      	adds	r3, r2, #1
 8002372:	b2d8      	uxtb	r0, r3
 8002374:	7030      	strb	r0, [r6, #0]
 8002376:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddAnalogOutput_2 */

  /* USER CODE END CayenneLppAddAnalogOutput_2 */
  return CayenneLppCursor;
}
 800237a:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 800237c:	2000      	movs	r0, #0
 800237e:	e7fc      	b.n	800237a <CayenneLppAddAnalogOutput+0x46>
 8002380:	200004c6 	.word	0x200004c6
 8002384:	42c80000 	.word	0x42c80000
 8002388:	200003d4 	.word	0x200003d4

0800238c <CayenneLppAddTemperature>:
  /* USER CODE END CayenneLppAddPresence_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddTemperature(uint8_t channel, float celsius)
{
 800238c:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddTemperature_1 */

  /* USER CODE END CayenneLppAddTemperature_1 */
  if ((CayenneLppCursor + LPP_TEMPERATURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800238e:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <CayenneLppAddTemperature+0x4c>)
 8002390:	781d      	ldrb	r5, [r3, #0]
 8002392:	2dee      	cmp	r5, #238	; 0xee
 8002394:	d81e      	bhi.n	80023d4 <CayenneLppAddTemperature+0x48>
 8002396:	4604      	mov	r4, r0
 8002398:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(celsius * 10);
 800239a:	4910      	ldr	r1, [pc, #64]	; (80023dc <CayenneLppAddTemperature+0x50>)
 800239c:	f7fe fa6e 	bl	800087c <__aeabi_fmul>
 80023a0:	f7fe fbbc 	bl	8000b1c <__aeabi_f2iz>
 80023a4:	4684      	mov	ip, r0
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80023a6:	1c6a      	adds	r2, r5, #1
 80023a8:	b2d2      	uxtb	r2, r2
 80023aa:	4e0b      	ldr	r6, [pc, #44]	; (80023d8 <CayenneLppAddTemperature+0x4c>)
 80023ac:	7032      	strb	r2, [r6, #0]
 80023ae:	490c      	ldr	r1, [pc, #48]	; (80023e0 <CayenneLppAddTemperature+0x54>)
 80023b0:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_TEMPERATURE;
 80023b2:	1c53      	adds	r3, r2, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	7033      	strb	r3, [r6, #0]
 80023b8:	2067      	movs	r0, #103	; 0x67
 80023ba:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	b2d2      	uxtb	r2, r2
 80023c0:	7032      	strb	r2, [r6, #0]
 80023c2:	f34c 2007 	sbfx	r0, ip, #8, #8
 80023c6:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 80023c8:	1c53      	adds	r3, r2, #1
 80023ca:	b2d8      	uxtb	r0, r3
 80023cc:	7030      	strb	r0, [r6, #0]
 80023ce:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddTemperature_2 */

  /* USER CODE END CayenneLppAddTemperature_2 */
  return CayenneLppCursor;
}
 80023d2:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 80023d4:	2000      	movs	r0, #0
 80023d6:	e7fc      	b.n	80023d2 <CayenneLppAddTemperature+0x46>
 80023d8:	200004c6 	.word	0x200004c6
 80023dc:	41200000 	.word	0x41200000
 80023e0:	200003d4 	.word	0x200003d4

080023e4 <CayenneLppAddRelativeHumidity>:

uint8_t CayenneLppAddRelativeHumidity(uint8_t channel, float rh)
{
 80023e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_1 */

  /* USER CODE END CayenneLppAddRelativeHumidity_1 */
  if ((CayenneLppCursor + LPP_RELATIVE_HUMIDITY_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 80023e6:	4b0e      	ldr	r3, [pc, #56]	; (8002420 <CayenneLppAddRelativeHumidity+0x3c>)
 80023e8:	781a      	ldrb	r2, [r3, #0]
 80023ea:	2aef      	cmp	r2, #239	; 0xef
 80023ec:	d815      	bhi.n	800241a <CayenneLppAddRelativeHumidity+0x36>
  {
    return 0;
  }
  CayenneLppBuffer[CayenneLppCursor++] = channel;
 80023ee:	1c53      	adds	r3, r2, #1
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4f0b      	ldr	r7, [pc, #44]	; (8002420 <CayenneLppAddRelativeHumidity+0x3c>)
 80023f4:	703b      	strb	r3, [r7, #0]
 80023f6:	4e0b      	ldr	r6, [pc, #44]	; (8002424 <CayenneLppAddRelativeHumidity+0x40>)
 80023f8:	54b0      	strb	r0, [r6, r2]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_RELATIVE_HUMIDITY;
 80023fa:	1c5d      	adds	r5, r3, #1
 80023fc:	b2ed      	uxtb	r5, r5
 80023fe:	703d      	strb	r5, [r7, #0]
 8002400:	2268      	movs	r2, #104	; 0x68
 8002402:	54f2      	strb	r2, [r6, r3]
  CayenneLppBuffer[CayenneLppCursor++] = (uint8_t)(rh * 2);
 8002404:	4608      	mov	r0, r1
 8002406:	f7fe f931 	bl	800066c <__addsf3>
 800240a:	1c6c      	adds	r4, r5, #1
 800240c:	b2e4      	uxtb	r4, r4
 800240e:	703c      	strb	r4, [r7, #0]
 8002410:	f7fe fbaa 	bl	8000b68 <__aeabi_f2uiz>
 8002414:	5570      	strb	r0, [r6, r5]
  /* USER CODE BEGIN CayenneLppAddRelativeHumidity_2 */

  /* USER CODE END CayenneLppAddRelativeHumidity_2 */
  return CayenneLppCursor;
}
 8002416:	4620      	mov	r0, r4
 8002418:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return 0;
 800241a:	2400      	movs	r4, #0
 800241c:	e7fb      	b.n	8002416 <CayenneLppAddRelativeHumidity+0x32>
 800241e:	bf00      	nop
 8002420:	200004c6 	.word	0x200004c6
 8002424:	200003d4 	.word	0x200003d4

08002428 <CayenneLppAddBarometricPressure>:
  /* USER CODE END CayenneLppAddAccelerometer_2 */
  return CayenneLppCursor;
}

uint8_t CayenneLppAddBarometricPressure(uint8_t channel, float hpa)
{
 8002428:	b570      	push	{r4, r5, r6, lr}
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_1 */

  /* USER CODE END CayenneLppAddBarometricPressure_1 */
  if ((CayenneLppCursor + LPP_BAROMETRIC_PRESSURE_SIZE) > CAYENNE_LPP_MAXBUFFER_SIZE)
 800242a:	4b12      	ldr	r3, [pc, #72]	; (8002474 <CayenneLppAddBarometricPressure+0x4c>)
 800242c:	781d      	ldrb	r5, [r3, #0]
 800242e:	2dee      	cmp	r5, #238	; 0xee
 8002430:	d81e      	bhi.n	8002470 <CayenneLppAddBarometricPressure+0x48>
 8002432:	4604      	mov	r4, r0
 8002434:	4608      	mov	r0, r1
  {
    return 0;
  }
  int16_t val = (int16_t)(hpa * 10);
 8002436:	4910      	ldr	r1, [pc, #64]	; (8002478 <CayenneLppAddBarometricPressure+0x50>)
 8002438:	f7fe fa20 	bl	800087c <__aeabi_fmul>
 800243c:	f7fe fb6e 	bl	8000b1c <__aeabi_f2iz>
 8002440:	4684      	mov	ip, r0

  CayenneLppBuffer[CayenneLppCursor++] = channel;
 8002442:	1c6a      	adds	r2, r5, #1
 8002444:	b2d2      	uxtb	r2, r2
 8002446:	4e0b      	ldr	r6, [pc, #44]	; (8002474 <CayenneLppAddBarometricPressure+0x4c>)
 8002448:	7032      	strb	r2, [r6, #0]
 800244a:	490c      	ldr	r1, [pc, #48]	; (800247c <CayenneLppAddBarometricPressure+0x54>)
 800244c:	554c      	strb	r4, [r1, r5]
  CayenneLppBuffer[CayenneLppCursor++] = LPP_BAROMETRIC_PRESSURE;
 800244e:	1c53      	adds	r3, r2, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	7033      	strb	r3, [r6, #0]
 8002454:	2073      	movs	r0, #115	; 0x73
 8002456:	5488      	strb	r0, [r1, r2]
  CayenneLppBuffer[CayenneLppCursor++] = val >> 8;
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	b2d2      	uxtb	r2, r2
 800245c:	7032      	strb	r2, [r6, #0]
 800245e:	f34c 2007 	sbfx	r0, ip, #8, #8
 8002462:	54c8      	strb	r0, [r1, r3]
  CayenneLppBuffer[CayenneLppCursor++] = val;
 8002464:	1c53      	adds	r3, r2, #1
 8002466:	b2d8      	uxtb	r0, r3
 8002468:	7030      	strb	r0, [r6, #0]
 800246a:	f801 c002 	strb.w	ip, [r1, r2]
  /* USER CODE BEGIN CayenneLppAddBarometricPressure_2 */

  /* USER CODE END CayenneLppAddBarometricPressure_2 */
  return CayenneLppCursor;
}
 800246e:	bd70      	pop	{r4, r5, r6, pc}
    return 0;
 8002470:	2000      	movs	r0, #0
 8002472:	e7fc      	b.n	800246e <CayenneLppAddBarometricPressure+0x46>
 8002474:	200004c6 	.word	0x200004c6
 8002478:	41200000 	.word	0x41200000
 800247c:	200003d4 	.word	0x200003d4

08002480 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8002480:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8002482:	f7ff fb3d 	bl	8001b00 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 8002486:	f000 fb75 	bl	8002b74 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 800248a:	bd08      	pop	{r3, pc}

0800248c <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 800248c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 800248e:	f04f 30ff 	mov.w	r0, #4294967295
 8002492:	f011 f86f 	bl	8013574 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8002496:	bd08      	pop	{r3, pc}

08002498 <OnSysTimeUpdate>:
static void OnSysTimeUpdate(void)
{
  /* USER CODE BEGIN OnSysTimeUpdate_1 */

  /* USER CODE END OnSysTimeUpdate_1 */
}
 8002498:	4770      	bx	lr
	...

0800249c <OnTxFrameCtrlChanged>:
static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800249c:	4b01      	ldr	r3, [pc, #4]	; (80024a4 <OnTxFrameCtrlChanged+0x8>)
 800249e:	70d8      	strb	r0, [r3, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 80024a0:	4770      	bx	lr
 80024a2:	bf00      	nop
 80024a4:	20000058 	.word	0x20000058

080024a8 <OnPingSlotPeriodicityChanged>:
static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 80024a8:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <OnPingSlotPeriodicityChanged+0x8>)
 80024aa:	7418      	strb	r0, [r3, #16]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 80024ac:	4770      	bx	lr
 80024ae:	bf00      	nop
 80024b0:	20000058 	.word	0x20000058

080024b4 <OnBeaconStatusChange>:
  if (params != NULL)
 80024b4:	2800      	cmp	r0, #0
 80024b6:	d03f      	beq.n	8002538 <OnBeaconStatusChange+0x84>
{
 80024b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80024bc:	b08c      	sub	sp, #48	; 0x30
 80024be:	4603      	mov	r3, r0
    switch (params->State)
 80024c0:	7842      	ldrb	r2, [r0, #1]
 80024c2:	2a02      	cmp	r2, #2
 80024c4:	d00a      	beq.n	80024dc <OnBeaconStatusChange+0x28>
 80024c6:	2a03      	cmp	r2, #3
 80024c8:	d02f      	beq.n	800252a <OnBeaconStatusChange+0x76>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 80024ca:	4b1c      	ldr	r3, [pc, #112]	; (800253c <OnBeaconStatusChange+0x88>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	4611      	mov	r1, r2
 80024d0:	2002      	movs	r0, #2
 80024d2:	f010 fef1 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80024d6:	b00c      	add	sp, #48	; 0x30
 80024d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        APP_LOG(TS_OFF, VLEVEL_M,
 80024dc:	7c02      	ldrb	r2, [r0, #16]
 80024de:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
 80024e2:	f990 0014 	ldrsb.w	r0, [r0, #20]
 80024e6:	7d9c      	ldrb	r4, [r3, #22]
 80024e8:	7ddd      	ldrb	r5, [r3, #23]
 80024ea:	7e1e      	ldrb	r6, [r3, #24]
 80024ec:	7e5f      	ldrb	r7, [r3, #25]
 80024ee:	f893 c01a 	ldrb.w	ip, [r3, #26]
 80024f2:	f893 e01b 	ldrb.w	lr, [r3, #27]
 80024f6:	f893 801c 	ldrb.w	r8, [r3, #28]
 80024fa:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 80024fe:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8002502:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002506:	9708      	str	r7, [sp, #32]
 8002508:	9607      	str	r6, [sp, #28]
 800250a:	9506      	str	r5, [sp, #24]
 800250c:	9405      	str	r4, [sp, #20]
 800250e:	685c      	ldr	r4, [r3, #4]
 8002510:	9404      	str	r4, [sp, #16]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	9303      	str	r3, [sp, #12]
 8002516:	9002      	str	r0, [sp, #8]
 8002518:	9101      	str	r1, [sp, #4]
 800251a:	9200      	str	r2, [sp, #0]
 800251c:	4b08      	ldr	r3, [pc, #32]	; (8002540 <OnBeaconStatusChange+0x8c>)
 800251e:	2200      	movs	r2, #0
 8002520:	4611      	mov	r1, r2
 8002522:	2002      	movs	r0, #2
 8002524:	f010 fec8 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        break;
 8002528:	e7d5      	b.n	80024d6 <OnBeaconStatusChange+0x22>
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800252a:	4b06      	ldr	r3, [pc, #24]	; (8002544 <OnBeaconStatusChange+0x90>)
 800252c:	2200      	movs	r2, #0
 800252e:	4611      	mov	r1, r2
 8002530:	2002      	movs	r0, #2
 8002532:	f010 fec1 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002536:	e7ce      	b.n	80024d6 <OnBeaconStatusChange+0x22>
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	080140bc 	.word	0x080140bc
 8002540:	080140d4 	.word	0x080140d4
 8002544:	08014148 	.word	0x08014148

08002548 <OnClassChange>:
{
 8002548:	b500      	push	{lr}
 800254a:	b083      	sub	sp, #12
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <OnClassChange+0x1c>)
 800254e:	5c1b      	ldrb	r3, [r3, r0]
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	4b05      	ldr	r3, [pc, #20]	; (8002568 <OnClassChange+0x20>)
 8002554:	2200      	movs	r2, #0
 8002556:	4611      	mov	r1, r2
 8002558:	2002      	movs	r0, #2
 800255a:	f010 fead 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800255e:	b003      	add	sp, #12
 8002560:	f85d fb04 	ldr.w	pc, [sp], #4
 8002564:	08014184 	.word	0x08014184
 8002568:	08014168 	.word	0x08014168

0800256c <OnNvmDataChange>:

  /* USER CODE END StoreContext_Last */
}

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800256c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800256e:	2801      	cmp	r0, #1
 8002570:	d006      	beq.n	8002580 <OnNvmDataChange+0x14>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 8002572:	4b07      	ldr	r3, [pc, #28]	; (8002590 <OnNvmDataChange+0x24>)
 8002574:	2200      	movs	r2, #0
 8002576:	4611      	mov	r1, r2
 8002578:	2002      	movs	r0, #2
 800257a:	f010 fe9d 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800257e:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 8002580:	4b04      	ldr	r3, [pc, #16]	; (8002594 <OnNvmDataChange+0x28>)
 8002582:	2200      	movs	r2, #0
 8002584:	4611      	mov	r1, r2
 8002586:	2002      	movs	r0, #2
 8002588:	f010 fe96 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 800258c:	e7f7      	b.n	800257e <OnNvmDataChange+0x12>
 800258e:	bf00      	nop
 8002590:	0801419c 	.word	0x0801419c
 8002594:	08014188 	.word	0x08014188

08002598 <OnTxTimerEvent>:
{
 8002598:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800259a:	2100      	movs	r1, #0
 800259c:	2002      	movs	r0, #2
 800259e:	f010 ffb5 	bl	801350c <UTIL_SEQ_SetTask>
  UTIL_TIMER_Start(&TxTimer);
 80025a2:	4802      	ldr	r0, [pc, #8]	; (80025ac <OnTxTimerEvent+0x14>)
 80025a4:	f011 fa36 	bl	8013a14 <UTIL_TIMER_Start>
}
 80025a8:	bd08      	pop	{r3, pc}
 80025aa:	bf00      	nop
 80025ac:	2000061c 	.word	0x2000061c

080025b0 <OnMacProcessNotify>:
{
 80025b0:	b508      	push	{r3, lr}
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 80025b2:	2100      	movs	r1, #0
 80025b4:	2001      	movs	r0, #1
 80025b6:	f010 ffa9 	bl	801350c <UTIL_SEQ_SetTask>
}
 80025ba:	bd08      	pop	{r3, pc}

080025bc <OnSystemReset>:
{
 80025bc:	b508      	push	{r3, lr}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80025be:	f006 f9cf 	bl	8008960 <LmHandlerHalt>
 80025c2:	b100      	cbz	r0, 80025c6 <OnSystemReset+0xa>
}
 80025c4:	bd08      	pop	{r3, pc}
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80025c6:	f005 fe89 	bl	80082dc <LmHandlerJoinStatus>
 80025ca:	2801      	cmp	r0, #1
 80025cc:	d1fa      	bne.n	80025c4 <OnSystemReset+0x8>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80025ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80025d2:	4905      	ldr	r1, [pc, #20]	; (80025e8 <OnSystemReset+0x2c>)
 80025d4:	68ca      	ldr	r2, [r1, #12]
 80025d6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80025da:	4b04      	ldr	r3, [pc, #16]	; (80025ec <OnSystemReset+0x30>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	60cb      	str	r3, [r1, #12]
 80025e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80025e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
 80025e6:	e7fd      	b.n	80025e4 <OnSystemReset+0x28>
 80025e8:	e000ed00 	.word	0xe000ed00
 80025ec:	05fa0004 	.word	0x05fa0004

080025f0 <OnTxPeriodicityChanged>:
{
 80025f0:	b510      	push	{r4, lr}
  TxPeriodicity = periodicity;
 80025f2:	4b09      	ldr	r3, [pc, #36]	; (8002618 <OnTxPeriodicityChanged+0x28>)
 80025f4:	6018      	str	r0, [r3, #0]
  if (TxPeriodicity == 0)
 80025f6:	b910      	cbnz	r0, 80025fe <OnTxPeriodicityChanged+0xe>
    TxPeriodicity = APP_TX_DUTYCYCLE;
 80025f8:	f64e 2260 	movw	r2, #60000	; 0xea60
 80025fc:	601a      	str	r2, [r3, #0]
  UTIL_TIMER_Stop(&TxTimer);
 80025fe:	4c07      	ldr	r4, [pc, #28]	; (800261c <OnTxPeriodicityChanged+0x2c>)
 8002600:	4620      	mov	r0, r4
 8002602:	f011 f9ad 	bl	8013960 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 8002606:	4b04      	ldr	r3, [pc, #16]	; (8002618 <OnTxPeriodicityChanged+0x28>)
 8002608:	6819      	ldr	r1, [r3, #0]
 800260a:	4620      	mov	r0, r4
 800260c:	f011 fa48 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 8002610:	4620      	mov	r0, r4
 8002612:	f011 f9ff 	bl	8013a14 <UTIL_TIMER_Start>
}
 8002616:	bd10      	pop	{r4, pc}
 8002618:	20000074 	.word	0x20000074
 800261c:	2000061c 	.word	0x2000061c

08002620 <OnTxData>:
  if ((params != NULL))
 8002620:	2800      	cmp	r0, #0
 8002622:	d042      	beq.n	80026aa <OnTxData+0x8a>
{
 8002624:	b510      	push	{r4, lr}
 8002626:	b084      	sub	sp, #16
 8002628:	4604      	mov	r4, r0
    if (params->IsMcpsConfirm != 0)
 800262a:	7803      	ldrb	r3, [r0, #0]
 800262c:	b90b      	cbnz	r3, 8002632 <OnTxData+0x12>
}
 800262e:	b004      	add	sp, #16
 8002630:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002632:	2201      	movs	r2, #1
 8002634:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002638:	481c      	ldr	r0, [pc, #112]	; (80026ac <OnTxData+0x8c>)
 800263a:	f002 fa4b 	bl	8004ad4 <HAL_GPIO_WritePin>
      UTIL_TIMER_Start(&TxLedTimer);
 800263e:	481c      	ldr	r0, [pc, #112]	; (80026b0 <OnTxData+0x90>)
 8002640:	f011 f9e8 	bl	8013a14 <UTIL_TIMER_Start>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 8002644:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <OnTxData+0x94>)
 8002646:	2200      	movs	r2, #0
 8002648:	4611      	mov	r1, r2
 800264a:	2002      	movs	r0, #2
 800264c:	f010 fe34 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 8002650:	7c23      	ldrb	r3, [r4, #16]
 8002652:	f994 200a 	ldrsb.w	r2, [r4, #10]
 8002656:	f994 1018 	ldrsb.w	r1, [r4, #24]
 800265a:	9103      	str	r1, [sp, #12]
 800265c:	9202      	str	r2, [sp, #8]
 800265e:	9301      	str	r3, [sp, #4]
 8002660:	68e3      	ldr	r3, [r4, #12]
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	4b14      	ldr	r3, [pc, #80]	; (80026b8 <OnTxData+0x98>)
 8002666:	2200      	movs	r2, #0
 8002668:	4611      	mov	r1, r2
 800266a:	2003      	movs	r0, #3
 800266c:	f010 fe24 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 8002670:	4b12      	ldr	r3, [pc, #72]	; (80026bc <OnTxData+0x9c>)
 8002672:	2200      	movs	r2, #0
 8002674:	4611      	mov	r1, r2
 8002676:	2003      	movs	r0, #3
 8002678:	f010 fe1e 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800267c:	7a23      	ldrb	r3, [r4, #8]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d10c      	bne.n	800269c <OnTxData+0x7c>
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 8002682:	7a63      	ldrb	r3, [r4, #9]
 8002684:	b143      	cbz	r3, 8002698 <OnTxData+0x78>
 8002686:	4b0e      	ldr	r3, [pc, #56]	; (80026c0 <OnTxData+0xa0>)
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	4b0e      	ldr	r3, [pc, #56]	; (80026c4 <OnTxData+0xa4>)
 800268c:	2200      	movs	r2, #0
 800268e:	4611      	mov	r1, r2
 8002690:	2003      	movs	r0, #3
 8002692:	f010 fe11 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 8002696:	e7ca      	b.n	800262e <OnTxData+0xe>
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <OnTxData+0xa8>)
 800269a:	e7f5      	b.n	8002688 <OnTxData+0x68>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800269c:	4b0b      	ldr	r3, [pc, #44]	; (80026cc <OnTxData+0xac>)
 800269e:	2200      	movs	r2, #0
 80026a0:	4611      	mov	r1, r2
 80026a2:	2003      	movs	r0, #3
 80026a4:	f010 fe08 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80026a8:	e7c1      	b.n	800262e <OnTxData+0xe>
 80026aa:	4770      	bx	lr
 80026ac:	48000400 	.word	0x48000400
 80026b0:	20000604 	.word	0x20000604
 80026b4:	080141bc 	.word	0x080141bc
 80026b8:	080141f0 	.word	0x080141f0
 80026bc:	08014224 	.word	0x08014224
 80026c0:	080141b8 	.word	0x080141b8
 80026c4:	08014234 	.word	0x08014234
 80026c8:	080141b0 	.word	0x080141b0
 80026cc:	08014248 	.word	0x08014248

080026d0 <OnJoinRequest>:
  if (joinParams != NULL)
 80026d0:	2800      	cmp	r0, #0
 80026d2:	d039      	beq.n	8002748 <OnJoinRequest+0x78>
{
 80026d4:	b510      	push	{r4, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	4604      	mov	r4, r0
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 80026da:	f990 3006 	ldrsb.w	r3, [r0, #6]
 80026de:	b9fb      	cbnz	r3, 8002720 <OnJoinRequest+0x50>
      UTIL_TIMER_Stop(&JoinLedTimer);
 80026e0:	481a      	ldr	r0, [pc, #104]	; (800274c <OnJoinRequest+0x7c>)
 80026e2:	f011 f93d 	bl	8013960 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 80026e6:	2200      	movs	r2, #0
 80026e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80026ec:	4818      	ldr	r0, [pc, #96]	; (8002750 <OnJoinRequest+0x80>)
 80026ee:	f002 f9f1 	bl	8004ad4 <HAL_GPIO_WritePin>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 80026f2:	4b18      	ldr	r3, [pc, #96]	; (8002754 <OnJoinRequest+0x84>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	4611      	mov	r1, r2
 80026f8:	2002      	movs	r0, #2
 80026fa:	f010 fddd 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 80026fe:	79e3      	ldrb	r3, [r4, #7]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d006      	beq.n	8002712 <OnJoinRequest+0x42>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 8002704:	4b14      	ldr	r3, [pc, #80]	; (8002758 <OnJoinRequest+0x88>)
 8002706:	2200      	movs	r2, #0
 8002708:	4611      	mov	r1, r2
 800270a:	2002      	movs	r0, #2
 800270c:	f010 fdd4 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 8002710:	e00c      	b.n	800272c <OnJoinRequest+0x5c>
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <OnJoinRequest+0x8c>)
 8002714:	2200      	movs	r2, #0
 8002716:	4611      	mov	r1, r2
 8002718:	2002      	movs	r0, #2
 800271a:	f010 fdcd 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 800271e:	e005      	b.n	800272c <OnJoinRequest+0x5c>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 8002720:	4b0f      	ldr	r3, [pc, #60]	; (8002760 <OnJoinRequest+0x90>)
 8002722:	2200      	movs	r2, #0
 8002724:	4611      	mov	r1, r2
 8002726:	2002      	movs	r0, #2
 8002728:	f010 fdc6 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:JOIN | DR:%d | PWR:%d\r\n", joinParams->Datarate, joinParams->TxPower);
 800272c:	f994 3004 	ldrsb.w	r3, [r4, #4]
 8002730:	f994 2005 	ldrsb.w	r2, [r4, #5]
 8002734:	9201      	str	r2, [sp, #4]
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	4b0a      	ldr	r3, [pc, #40]	; (8002764 <OnJoinRequest+0x94>)
 800273a:	2200      	movs	r2, #0
 800273c:	4611      	mov	r1, r2
 800273e:	2003      	movs	r0, #3
 8002740:	f010 fdba 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8002744:	b002      	add	sp, #8
 8002746:	bd10      	pop	{r4, pc}
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	200005bc 	.word	0x200005bc
 8002750:	48000400 	.word	0x48000400
 8002754:	08014258 	.word	0x08014258
 8002758:	08014290 	.word	0x08014290
 800275c:	08014270 	.word	0x08014270
 8002760:	080142b0 	.word	0x080142b0
 8002764:	080142cc 	.word	0x080142cc

08002768 <OnStopJoinTimerEvent>:
{
 8002768:	b510      	push	{r4, lr}
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800276a:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <OnStopJoinTimerEvent+0x3c>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d013      	beq.n	800279a <OnStopJoinTimerEvent+0x32>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 8002772:	4c0d      	ldr	r4, [pc, #52]	; (80027a8 <OnStopJoinTimerEvent+0x40>)
 8002774:	2200      	movs	r2, #0
 8002776:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800277a:	4620      	mov	r0, r4
 800277c:	f002 f9aa 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 8002780:	2200      	movs	r2, #0
 8002782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002786:	4620      	mov	r0, r4
 8002788:	f002 f9a4 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 800278c:	2200      	movs	r2, #0
 800278e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002792:	4620      	mov	r0, r4
 8002794:	f002 f99e 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 8002798:	bd10      	pop	{r4, pc}
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800279a:	2100      	movs	r1, #0
 800279c:	2008      	movs	r0, #8
 800279e:	f010 feb5 	bl	801350c <UTIL_SEQ_SetTask>
 80027a2:	e7e6      	b.n	8002772 <OnStopJoinTimerEvent+0xa>
 80027a4:	20000000 	.word	0x20000000
 80027a8:	48000400 	.word	0x48000400

080027ac <OnRxTimerLedEvent>:
{
 80027ac:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
 80027ae:	2200      	movs	r2, #0
 80027b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027b4:	4801      	ldr	r0, [pc, #4]	; (80027bc <OnRxTimerLedEvent+0x10>)
 80027b6:	f002 f98d 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 80027ba:	bd08      	pop	{r3, pc}
 80027bc:	48000400 	.word	0x48000400

080027c0 <OnTxTimerLedEvent>:
{
 80027c0:	b508      	push	{r3, lr}
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
 80027c2:	2200      	movs	r2, #0
 80027c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027c8:	4801      	ldr	r0, [pc, #4]	; (80027d0 <OnTxTimerLedEvent+0x10>)
 80027ca:	f002 f983 	bl	8004ad4 <HAL_GPIO_WritePin>
}
 80027ce:	bd08      	pop	{r3, pc}
 80027d0:	48000400 	.word	0x48000400

080027d4 <OnRxData>:
  if (params != NULL)
 80027d4:	2900      	cmp	r1, #0
 80027d6:	d06e      	beq.n	80028b6 <OnRxData+0xe2>
{
 80027d8:	b570      	push	{r4, r5, r6, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	4604      	mov	r4, r0
 80027de:	460d      	mov	r5, r1
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 80027e0:	2201      	movs	r2, #1
 80027e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80027e6:	4834      	ldr	r0, [pc, #208]	; (80028b8 <OnRxData+0xe4>)
 80027e8:	f002 f974 	bl	8004ad4 <HAL_GPIO_WritePin>
    UTIL_TIMER_Start(&RxLedTimer);
 80027ec:	4833      	ldr	r0, [pc, #204]	; (80028bc <OnRxData+0xe8>)
 80027ee:	f011 f911 	bl	8013a14 <UTIL_TIMER_Start>
    if (params->IsMcpsIndication)
 80027f2:	782e      	ldrb	r6, [r5, #0]
 80027f4:	2e00      	cmp	r6, #0
 80027f6:	d042      	beq.n	800287e <OnRxData+0xaa>
      if (appData != NULL)
 80027f8:	2c00      	cmp	r4, #0
 80027fa:	d03f      	beq.n	800287c <OnRxData+0xa8>
        RxPort = appData->Port;
 80027fc:	7826      	ldrb	r6, [r4, #0]
        if (appData->Buffer != NULL)
 80027fe:	6863      	ldr	r3, [r4, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d03c      	beq.n	800287e <OnRxData+0xaa>
          switch (appData->Port)
 8002804:	2e02      	cmp	r6, #2
 8002806:	d016      	beq.n	8002836 <OnRxData+0x62>
 8002808:	2e03      	cmp	r6, #3
 800280a:	d138      	bne.n	800287e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 800280c:	7862      	ldrb	r2, [r4, #1]
 800280e:	2a01      	cmp	r2, #1
 8002810:	d135      	bne.n	800287e <OnRxData+0xaa>
                switch (appData->Buffer[0])
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	2b01      	cmp	r3, #1
 8002816:	d006      	beq.n	8002826 <OnRxData+0x52>
 8002818:	2b02      	cmp	r3, #2
 800281a:	d008      	beq.n	800282e <OnRxData+0x5a>
 800281c:	bb7b      	cbnz	r3, 800287e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_A);
 800281e:	2000      	movs	r0, #0
 8002820:	f005 fe2e 	bl	8008480 <LmHandlerRequestClass>
                    break;
 8002824:	e02b      	b.n	800287e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_B);
 8002826:	2001      	movs	r0, #1
 8002828:	f005 fe2a 	bl	8008480 <LmHandlerRequestClass>
                    break;
 800282c:	e027      	b.n	800287e <OnRxData+0xaa>
                    LmHandlerRequestClass(CLASS_C);
 800282e:	2002      	movs	r0, #2
 8002830:	f005 fe26 	bl	8008480 <LmHandlerRequestClass>
                    break;
 8002834:	e023      	b.n	800287e <OnRxData+0xaa>
              if (appData->BufferSize == 1)
 8002836:	7862      	ldrb	r2, [r4, #1]
 8002838:	2a01      	cmp	r2, #1
 800283a:	d120      	bne.n	800287e <OnRxData+0xaa>
                AppLedStateOn = appData->Buffer[0] & 0x01;
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <OnRxData+0xec>)
 8002844:	7013      	strb	r3, [r2, #0]
                if (AppLedStateOn == RESET)
 8002846:	b963      	cbnz	r3, 8002862 <OnRxData+0x8e>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8002848:	4b1e      	ldr	r3, [pc, #120]	; (80028c4 <OnRxData+0xf0>)
 800284a:	2200      	movs	r2, #0
 800284c:	4611      	mov	r1, r2
 800284e:	2003      	movs	r0, #3
 8002850:	f010 fd32 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002854:	2200      	movs	r2, #0
 8002856:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800285a:	4817      	ldr	r0, [pc, #92]	; (80028b8 <OnRxData+0xe4>)
 800285c:	f002 f93a 	bl	8004ad4 <HAL_GPIO_WritePin>
 8002860:	e00d      	b.n	800287e <OnRxData+0xaa>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8002862:	4b19      	ldr	r3, [pc, #100]	; (80028c8 <OnRxData+0xf4>)
 8002864:	2200      	movs	r2, #0
 8002866:	4611      	mov	r1, r2
 8002868:	2003      	movs	r0, #3
 800286a:	f010 fd25 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 800286e:	2201      	movs	r2, #1
 8002870:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002874:	4810      	ldr	r0, [pc, #64]	; (80028b8 <OnRxData+0xe4>)
 8002876:	f002 f92d 	bl	8004ad4 <HAL_GPIO_WritePin>
 800287a:	e000      	b.n	800287e <OnRxData+0xaa>
  uint8_t RxPort = 0;
 800287c:	2600      	movs	r6, #0
    if (params->RxSlot < RX_SLOT_NONE)
 800287e:	7c2b      	ldrb	r3, [r5, #16]
 8002880:	2b05      	cmp	r3, #5
 8002882:	d901      	bls.n	8002888 <OnRxData+0xb4>
}
 8002884:	b006      	add	sp, #24
 8002886:	bd70      	pop	{r4, r5, r6, pc}
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8002888:	f995 2008 	ldrsb.w	r2, [r5, #8]
 800288c:	f995 1009 	ldrsb.w	r1, [r5, #9]
 8002890:	f995 000a 	ldrsb.w	r0, [r5, #10]
 8002894:	9005      	str	r0, [sp, #20]
 8002896:	9104      	str	r1, [sp, #16]
 8002898:	490c      	ldr	r1, [pc, #48]	; (80028cc <OnRxData+0xf8>)
 800289a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800289e:	9303      	str	r3, [sp, #12]
 80028a0:	9202      	str	r2, [sp, #8]
 80028a2:	9601      	str	r6, [sp, #4]
 80028a4:	68eb      	ldr	r3, [r5, #12]
 80028a6:	9300      	str	r3, [sp, #0]
 80028a8:	4b09      	ldr	r3, [pc, #36]	; (80028d0 <OnRxData+0xfc>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	4611      	mov	r1, r2
 80028ae:	2003      	movs	r0, #3
 80028b0:	f010 fd02 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80028b4:	e7e6      	b.n	8002884 <OnRxData+0xb0>
 80028b6:	4770      	bx	lr
 80028b8:	48000400 	.word	0x48000400
 80028bc:	200005d4 	.word	0x200005d4
 80028c0:	200005ba 	.word	0x200005ba
 80028c4:	080142f8 	.word	0x080142f8
 80028c8:	08014304 	.word	0x08014304
 80028cc:	080144ec 	.word	0x080144ec
 80028d0:	08014310 	.word	0x08014310

080028d4 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80028d4:	b538      	push	{r3, r4, r5, lr}
 80028d6:	4604      	mov	r4, r0
 80028d8:	460d      	mov	r5, r1
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (FLASH_IF_Erase(LORAWAN_NVM_BASE_ADDRESS, FLASH_PAGE_SIZE) == FLASH_IF_OK)
 80028da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80028de:	4805      	ldr	r0, [pc, #20]	; (80028f4 <OnStoreContextRequest+0x20>)
 80028e0:	f7fe fe9a 	bl	8001618 <FLASH_IF_Erase>
 80028e4:	b100      	cbz	r0, 80028e8 <OnStoreContextRequest+0x14>
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 80028e6:	bd38      	pop	{r3, r4, r5, pc}
    FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (const void *)nvm, nvm_size);
 80028e8:	462a      	mov	r2, r5
 80028ea:	4621      	mov	r1, r4
 80028ec:	4801      	ldr	r0, [pc, #4]	; (80028f4 <OnStoreContextRequest+0x20>)
 80028ee:	f7fe fe5b 	bl	80015a8 <FLASH_IF_Write>
}
 80028f2:	e7f8      	b.n	80028e6 <OnStoreContextRequest+0x12>
 80028f4:	0803f000 	.word	0x0803f000

080028f8 <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 80028f8:	b508      	push	{r3, lr}
 80028fa:	460a      	mov	r2, r1
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  FLASH_IF_Read(nvm, LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 80028fc:	4901      	ldr	r1, [pc, #4]	; (8002904 <OnRestoreContextRequest+0xc>)
 80028fe:	f7fe fe6f 	bl	80015e0 <FLASH_IF_Read>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 8002902:	bd08      	pop	{r3, pc}
 8002904:	0803f000 	.word	0x0803f000

08002908 <StopJoin>:
{
 8002908:	b538      	push	{r3, r4, r5, lr}
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
 800290a:	4c1e      	ldr	r4, [pc, #120]	; (8002984 <StopJoin+0x7c>)
 800290c:	2201      	movs	r2, #1
 800290e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002912:	4620      	mov	r0, r4
 8002914:	f002 f8de 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
 8002918:	2201      	movs	r2, #1
 800291a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800291e:	4620      	mov	r0, r4
 8002920:	f002 f8d8 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_SET); /* LED_RED */
 8002924:	2201      	movs	r2, #1
 8002926:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800292a:	4620      	mov	r0, r4
 800292c:	f002 f8d2 	bl	8004ad4 <HAL_GPIO_WritePin>
  UTIL_TIMER_Stop(&TxTimer);
 8002930:	4815      	ldr	r0, [pc, #84]	; (8002988 <StopJoin+0x80>)
 8002932:	f011 f815 	bl	8013960 <UTIL_TIMER_Stop>
  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 8002936:	f006 f80b 	bl	8008950 <LmHandlerStop>
 800293a:	b148      	cbz	r0, 8002950 <StopJoin+0x48>
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800293c:	4b13      	ldr	r3, [pc, #76]	; (800298c <StopJoin+0x84>)
 800293e:	2200      	movs	r2, #0
 8002940:	4611      	mov	r1, r2
 8002942:	2002      	movs	r0, #2
 8002944:	f010 fcb8 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Start(&StopJoinTimer);
 8002948:	4811      	ldr	r0, [pc, #68]	; (8002990 <StopJoin+0x88>)
 800294a:	f011 f863 	bl	8013a14 <UTIL_TIMER_Start>
}
 800294e:	bd38      	pop	{r3, r4, r5, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 8002950:	4b10      	ldr	r3, [pc, #64]	; (8002994 <StopJoin+0x8c>)
 8002952:	2200      	movs	r2, #0
 8002954:	4611      	mov	r1, r2
 8002956:	2002      	movs	r0, #2
 8002958:	f010 fcae 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_ABP;
 800295c:	4c0e      	ldr	r4, [pc, #56]	; (8002998 <StopJoin+0x90>)
 800295e:	2501      	movs	r5, #1
 8002960:	7025      	strb	r5, [r4, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 8002962:	4b0e      	ldr	r3, [pc, #56]	; (800299c <StopJoin+0x94>)
 8002964:	2200      	movs	r2, #0
 8002966:	4611      	mov	r1, r2
 8002968:	2002      	movs	r0, #2
 800296a:	f010 fca5 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
    LmHandlerConfigure(&LmHandlerParams);
 800296e:	480c      	ldr	r0, [pc, #48]	; (80029a0 <StopJoin+0x98>)
 8002970:	f005 fe66 	bl	8008640 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 8002974:	4629      	mov	r1, r5
 8002976:	7820      	ldrb	r0, [r4, #0]
 8002978:	f005 fc1e 	bl	80081b8 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800297c:	4802      	ldr	r0, [pc, #8]	; (8002988 <StopJoin+0x80>)
 800297e:	f011 f849 	bl	8013a14 <UTIL_TIMER_Start>
 8002982:	e7e1      	b.n	8002948 <StopJoin+0x40>
 8002984:	48000400 	.word	0x48000400
 8002988:	2000061c 	.word	0x2000061c
 800298c:	08014358 	.word	0x08014358
 8002990:	200005ec 	.word	0x200005ec
 8002994:	08014378 	.word	0x08014378
 8002998:	20000000 	.word	0x20000000
 800299c:	0801438c 	.word	0x0801438c
 80029a0:	20000058 	.word	0x20000058

080029a4 <StoreContext>:
{
 80029a4:	b508      	push	{r3, lr}
  status = LmHandlerNvmDataStore();
 80029a6:	f006 f865 	bl	8008a74 <LmHandlerNvmDataStore>
  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 80029aa:	f110 0f08 	cmn.w	r0, #8
 80029ae:	d003      	beq.n	80029b8 <StoreContext+0x14>
  else if (status == LORAMAC_HANDLER_ERROR)
 80029b0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80029b4:	d007      	beq.n	80029c6 <StoreContext+0x22>
}
 80029b6:	bd08      	pop	{r3, pc}
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 80029b8:	4b06      	ldr	r3, [pc, #24]	; (80029d4 <StoreContext+0x30>)
 80029ba:	2200      	movs	r2, #0
 80029bc:	4611      	mov	r1, r2
 80029be:	2002      	movs	r0, #2
 80029c0:	f010 fc7a 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 80029c4:	e7f7      	b.n	80029b6 <StoreContext+0x12>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 80029c6:	4b04      	ldr	r3, [pc, #16]	; (80029d8 <StoreContext+0x34>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	4611      	mov	r1, r2
 80029cc:	2002      	movs	r0, #2
 80029ce:	f010 fc73 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 80029d2:	e7f0      	b.n	80029b6 <StoreContext+0x12>
 80029d4:	080143ac 	.word	0x080143ac
 80029d8:	080143c4 	.word	0x080143c4

080029dc <SendTxData>:
{
 80029dc:	b530      	push	{r4, r5, lr}
 80029de:	b089      	sub	sp, #36	; 0x24
  if (LmHandlerIsBusy() == false)
 80029e0:	f005 fc8e 	bl	8008300 <LmHandlerIsBusy>
 80029e4:	2800      	cmp	r0, #0
 80029e6:	f040 808d 	bne.w	8002b04 <SendTxData+0x128>
	if(Sensor_read_data)
 80029ea:	4b4f      	ldr	r3, [pc, #316]	; (8002b28 <SendTxData+0x14c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	b983      	cbnz	r3, 8002a12 <SendTxData+0x36>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 80029f0:	4b4e      	ldr	r3, [pc, #312]	; (8002b2c <SendTxData+0x150>)
 80029f2:	7a5b      	ldrb	r3, [r3, #9]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d158      	bne.n	8002aaa <SendTxData+0xce>
    status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 80029f8:	2200      	movs	r2, #0
 80029fa:	4b4d      	ldr	r3, [pc, #308]	; (8002b30 <SendTxData+0x154>)
 80029fc:	78d9      	ldrb	r1, [r3, #3]
 80029fe:	484d      	ldr	r0, [pc, #308]	; (8002b34 <SendTxData+0x158>)
 8002a00:	f005 fc94 	bl	800832c <LmHandlerSend>
    if (LORAMAC_HANDLER_SUCCESS == status)
 8002a04:	2800      	cmp	r0, #0
 8002a06:	d05e      	beq.n	8002ac6 <SendTxData+0xea>
    else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8002a08:	f110 0f06 	cmn.w	r0, #6
 8002a0c:	d06a      	beq.n	8002ae4 <SendTxData+0x108>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002a0e:	2500      	movs	r5, #0
 8002a10:	e079      	b.n	8002b06 <SendTxData+0x12a>
		EnvSensors_Read(&sensor_data);
 8002a12:	a802      	add	r0, sp, #8
 8002a14:	f7ff f980 	bl	8001d18 <EnvSensors_Read>
		APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8002a18:	9803      	ldr	r0, [sp, #12]
 8002a1a:	f7fe f87f 	bl	8000b1c <__aeabi_f2iz>
 8002a1e:	b200      	sxth	r0, r0
 8002a20:	9000      	str	r0, [sp, #0]
 8002a22:	4b45      	ldr	r3, [pc, #276]	; (8002b38 <SendTxData+0x15c>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	2100      	movs	r1, #0
 8002a28:	2002      	movs	r0, #2
 8002a2a:	f010 fc45 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
		AppData.Port = LORAWAN_USER_APP_PORT;
 8002a2e:	2402      	movs	r4, #2
 8002a30:	4b40      	ldr	r3, [pc, #256]	; (8002b34 <SendTxData+0x158>)
 8002a32:	701c      	strb	r4, [r3, #0]
		CayenneLppReset();
 8002a34:	f7ff fc2e 	bl	8002294 <CayenneLppReset>
		CayenneLppAddBarometricPressure(channel++, sensor_data.pressure);
 8002a38:	9902      	ldr	r1, [sp, #8]
 8002a3a:	2000      	movs	r0, #0
 8002a3c:	f7ff fcf4 	bl	8002428 <CayenneLppAddBarometricPressure>
		CayenneLppAddTemperature(channel++, sensor_data.temperature);
 8002a40:	9903      	ldr	r1, [sp, #12]
 8002a42:	2001      	movs	r0, #1
 8002a44:	f7ff fca2 	bl	800238c <CayenneLppAddTemperature>
		CayenneLppAddRelativeHumidity(channel++, (uint16_t)(sensor_data.humidity));
 8002a48:	9804      	ldr	r0, [sp, #16]
 8002a4a:	f7fe f88d 	bl	8000b68 <__aeabi_f2uiz>
 8002a4e:	b280      	uxth	r0, r0
 8002a50:	f7fd febc 	bl	80007cc <__aeabi_ui2f>
 8002a54:	4601      	mov	r1, r0
 8002a56:	4620      	mov	r0, r4
 8002a58:	f7ff fcc4 	bl	80023e4 <CayenneLppAddRelativeHumidity>
		CayenneLppAddAnalogOutput(channel++, (uint16_t)(muon1));
 8002a5c:	4b37      	ldr	r3, [pc, #220]	; (8002b3c <SendTxData+0x160>)
 8002a5e:	6818      	ldr	r0, [r3, #0]
 8002a60:	b280      	uxth	r0, r0
 8002a62:	f7fd feb3 	bl	80007cc <__aeabi_ui2f>
 8002a66:	4601      	mov	r1, r0
 8002a68:	2003      	movs	r0, #3
 8002a6a:	f7ff fc63 	bl	8002334 <CayenneLppAddAnalogOutput>
		if ((LmHandlerParams.ActiveRegion != LORAMAC_REGION_US915) && (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AU915)
 8002a6e:	4b30      	ldr	r3, [pc, #192]	; (8002b30 <SendTxData+0x154>)
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b08      	cmp	r3, #8
 8002a74:	d002      	beq.n	8002a7c <SendTxData+0xa0>
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d000      	beq.n	8002a7c <SendTxData+0xa0>
			&& (LmHandlerParams.ActiveRegion != LORAMAC_REGION_AS923))
 8002a7a:	b953      	cbnz	r3, 8002a92 <SendTxData+0xb6>
		CayenneLppCopy(AppData.Buffer);
 8002a7c:	4c2d      	ldr	r4, [pc, #180]	; (8002b34 <SendTxData+0x158>)
 8002a7e:	6860      	ldr	r0, [r4, #4]
 8002a80:	f7ff fc14 	bl	80022ac <CayenneLppCopy>
		AppData.BufferSize = CayenneLppGetSize();
 8002a84:	f7ff fc0c 	bl	80022a0 <CayenneLppGetSize>
 8002a88:	7060      	strb	r0, [r4, #1]
	Sensor_read_data = 0;
 8002a8a:	4b27      	ldr	r3, [pc, #156]	; (8002b28 <SendTxData+0x14c>)
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	e7ae      	b.n	80029f0 <SendTxData+0x14>
		  CayenneLppAddDigitalInput(channel++, GetBatteryLevel());
 8002a92:	f7ff f865 	bl	8001b60 <GetBatteryLevel>
 8002a96:	4601      	mov	r1, r0
 8002a98:	2004      	movs	r0, #4
 8002a9a:	f7ff fc13 	bl	80022c4 <CayenneLppAddDigitalInput>
		  CayenneLppAddDigitalOutput(channel++, AppLedStateOn);
 8002a9e:	4b28      	ldr	r3, [pc, #160]	; (8002b40 <SendTxData+0x164>)
 8002aa0:	7819      	ldrb	r1, [r3, #0]
 8002aa2:	2005      	movs	r0, #5
 8002aa4:	f7ff fc2a 	bl	80022fc <CayenneLppAddDigitalOutput>
 8002aa8:	e7e8      	b.n	8002a7c <SendTxData+0xa0>
    if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8002aaa:	f005 fc17 	bl	80082dc <LmHandlerJoinStatus>
 8002aae:	2801      	cmp	r0, #1
 8002ab0:	d1a2      	bne.n	80029f8 <SendTxData+0x1c>
      UTIL_TIMER_Stop(&JoinLedTimer);
 8002ab2:	481e      	ldr	r0, [pc, #120]	; (8002b2c <SendTxData+0x150>)
 8002ab4:	f010 ff54 	bl	8013960 <UTIL_TIMER_Stop>
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002abe:	4821      	ldr	r0, [pc, #132]	; (8002b44 <SendTxData+0x168>)
 8002ac0:	f002 f808 	bl	8004ad4 <HAL_GPIO_WritePin>
 8002ac4:	e798      	b.n	80029f8 <SendTxData+0x1c>
      APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8002ac6:	4b20      	ldr	r3, [pc, #128]	; (8002b48 <SendTxData+0x16c>)
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2100      	movs	r1, #0
 8002acc:	4610      	mov	r0, r2
 8002ace:	f010 fbf3 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
      Sensor_read_data = 1;
 8002ad2:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <SendTxData+0x14c>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	601a      	str	r2, [r3, #0]
      muon1 = 0;
 8002ad8:	2500      	movs	r5, #0
 8002ada:	4b18      	ldr	r3, [pc, #96]	; (8002b3c <SendTxData+0x160>)
 8002adc:	601d      	str	r5, [r3, #0]
      z = 0;
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <SendTxData+0x170>)
 8002ae0:	601d      	str	r5, [r3, #0]
 8002ae2:	e010      	b.n	8002b06 <SendTxData+0x12a>
      nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8002ae4:	f005 fbf4 	bl	80082d0 <LmHandlerGetDutyCycleWaitTime>
      if (nextTxIn > 0)
 8002ae8:	4605      	mov	r5, r0
 8002aea:	b160      	cbz	r0, 8002b06 <SendTxData+0x12a>
        APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8002aec:	4b18      	ldr	r3, [pc, #96]	; (8002b50 <SendTxData+0x174>)
 8002aee:	fba3 2300 	umull	r2, r3, r3, r0
 8002af2:	099b      	lsrs	r3, r3, #6
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	4b17      	ldr	r3, [pc, #92]	; (8002b54 <SendTxData+0x178>)
 8002af8:	2201      	movs	r2, #1
 8002afa:	2100      	movs	r1, #0
 8002afc:	4610      	mov	r0, r2
 8002afe:	f010 fbdb 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 8002b02:	e000      	b.n	8002b06 <SendTxData+0x12a>
  UTIL_TIMER_Time_t nextTxIn = 0;
 8002b04:	2500      	movs	r5, #0
    UTIL_TIMER_Stop(&TxTimer);
 8002b06:	4c14      	ldr	r4, [pc, #80]	; (8002b58 <SendTxData+0x17c>)
 8002b08:	4620      	mov	r0, r4
 8002b0a:	f010 ff29 	bl	8013960 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <SendTxData+0x180>)
 8002b10:	6819      	ldr	r1, [r3, #0]
 8002b12:	42a9      	cmp	r1, r5
 8002b14:	bf38      	it	cc
 8002b16:	4629      	movcc	r1, r5
 8002b18:	4620      	mov	r0, r4
 8002b1a:	f010 ffc1 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8002b1e:	4620      	mov	r0, r4
 8002b20:	f010 ff78 	bl	8013a14 <UTIL_TIMER_Start>
}
 8002b24:	b009      	add	sp, #36	; 0x24
 8002b26:	bd30      	pop	{r4, r5, pc}
 8002b28:	20000070 	.word	0x20000070
 8002b2c:	200005bc 	.word	0x200005bc
 8002b30:	20000058 	.word	0x20000058
 8002b34:	20000004 	.word	0x20000004
 8002b38:	080143dc 	.word	0x080143dc
 8002b3c:	20000634 	.word	0x20000634
 8002b40:	200005ba 	.word	0x200005ba
 8002b44:	48000400 	.word	0x48000400
 8002b48:	080143e8 	.word	0x080143e8
 8002b4c:	20000638 	.word	0x20000638
 8002b50:	10624dd3 	.word	0x10624dd3
 8002b54:	080143f8 	.word	0x080143f8
 8002b58:	2000061c 	.word	0x2000061c
 8002b5c:	20000074 	.word	0x20000074

08002b60 <OnJoinTimerLedEvent>:
{
 8002b60:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
 8002b62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002b66:	4802      	ldr	r0, [pc, #8]	; (8002b70 <OnJoinTimerLedEvent+0x10>)
 8002b68:	f001 ffb9 	bl	8004ade <HAL_GPIO_TogglePin>
}
 8002b6c:	bd08      	pop	{r3, pc}
 8002b6e:	bf00      	nop
 8002b70:	48000400 	.word	0x48000400

08002b74 <LoRaWAN_Init>:
{
 8002b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b76:	b087      	sub	sp, #28
  uint32_t feature_version = 0UL;
 8002b78:	2400      	movs	r4, #0
 8002b7a:	9405      	str	r4, [sp, #20]
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 8002b7c:	9402      	str	r4, [sp, #8]
 8002b7e:	2703      	movs	r7, #3
 8002b80:	9701      	str	r7, [sp, #4]
 8002b82:	2601      	movs	r6, #1
 8002b84:	9600      	str	r6, [sp, #0]
 8002b86:	4b4f      	ldr	r3, [pc, #316]	; (8002cc4 <LoRaWAN_Init+0x150>)
 8002b88:	4622      	mov	r2, r4
 8002b8a:	4621      	mov	r1, r4
 8002b8c:	2002      	movs	r0, #2
 8002b8e:	f010 fb93 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 8002b92:	9402      	str	r4, [sp, #8]
 8002b94:	2305      	movs	r3, #5
 8002b96:	9301      	str	r3, [sp, #4]
 8002b98:	2502      	movs	r5, #2
 8002b9a:	9500      	str	r5, [sp, #0]
 8002b9c:	4b4a      	ldr	r3, [pc, #296]	; (8002cc8 <LoRaWAN_Init+0x154>)
 8002b9e:	4622      	mov	r2, r4
 8002ba0:	4621      	mov	r1, r4
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f010 fb88 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 8002ba8:	9402      	str	r4, [sp, #8]
 8002baa:	9701      	str	r7, [sp, #4]
 8002bac:	9600      	str	r6, [sp, #0]
 8002bae:	4b47      	ldr	r3, [pc, #284]	; (8002ccc <LoRaWAN_Init+0x158>)
 8002bb0:	4622      	mov	r2, r4
 8002bb2:	4621      	mov	r1, r4
 8002bb4:	4628      	mov	r0, r5
 8002bb6:	f010 fb7f 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8002bba:	a905      	add	r1, sp, #20
 8002bbc:	4620      	mov	r0, r4
 8002bbe:	f005 feb1 	bl	8008924 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8002bc2:	9b05      	ldr	r3, [sp, #20]
 8002bc4:	0e1a      	lsrs	r2, r3, #24
 8002bc6:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bca:	9102      	str	r1, [sp, #8]
 8002bcc:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bd0:	9301      	str	r3, [sp, #4]
 8002bd2:	9200      	str	r2, [sp, #0]
 8002bd4:	4b3e      	ldr	r3, [pc, #248]	; (8002cd0 <LoRaWAN_Init+0x15c>)
 8002bd6:	4622      	mov	r2, r4
 8002bd8:	4621      	mov	r1, r4
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f010 fb6c 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8002be0:	a905      	add	r1, sp, #20
 8002be2:	4630      	mov	r0, r6
 8002be4:	f005 fe9e 	bl	8008924 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8002be8:	9b05      	ldr	r3, [sp, #20]
 8002bea:	0e1a      	lsrs	r2, r3, #24
 8002bec:	b2d9      	uxtb	r1, r3
 8002bee:	9103      	str	r1, [sp, #12]
 8002bf0:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8002bf4:	9102      	str	r1, [sp, #8]
 8002bf6:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002bfa:	9301      	str	r3, [sp, #4]
 8002bfc:	9200      	str	r2, [sp, #0]
 8002bfe:	4b35      	ldr	r3, [pc, #212]	; (8002cd4 <LoRaWAN_Init+0x160>)
 8002c00:	4622      	mov	r2, r4
 8002c02:	4621      	mov	r1, r4
 8002c04:	4628      	mov	r0, r5
 8002c06:	f010 fb57 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8002c0a:	9400      	str	r4, [sp, #0]
 8002c0c:	4b32      	ldr	r3, [pc, #200]	; (8002cd8 <LoRaWAN_Init+0x164>)
 8002c0e:	4622      	mov	r2, r4
 8002c10:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c14:	4831      	ldr	r0, [pc, #196]	; (8002cdc <LoRaWAN_Init+0x168>)
 8002c16:	f010 fe45 	bl	80138a4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8002c1a:	9400      	str	r4, [sp, #0]
 8002c1c:	4b30      	ldr	r3, [pc, #192]	; (8002ce0 <LoRaWAN_Init+0x16c>)
 8002c1e:	4622      	mov	r2, r4
 8002c20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c24:	482f      	ldr	r0, [pc, #188]	; (8002ce4 <LoRaWAN_Init+0x170>)
 8002c26:	f010 fe3d 	bl	80138a4 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8002c2a:	9400      	str	r4, [sp, #0]
 8002c2c:	4b2e      	ldr	r3, [pc, #184]	; (8002ce8 <LoRaWAN_Init+0x174>)
 8002c2e:	4632      	mov	r2, r6
 8002c30:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002c34:	482d      	ldr	r0, [pc, #180]	; (8002cec <LoRaWAN_Init+0x178>)
 8002c36:	f010 fe35 	bl	80138a4 <UTIL_TIMER_Create>
  if (FLASH_IF_Init(NULL) != FLASH_IF_OK)
 8002c3a:	4620      	mov	r0, r4
 8002c3c:	f7fe fcae 	bl	800159c <FLASH_IF_Init>
 8002c40:	2800      	cmp	r0, #0
 8002c42:	d13b      	bne.n	8002cbc <LoRaWAN_Init+0x148>
  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8002c44:	2400      	movs	r4, #0
 8002c46:	9400      	str	r4, [sp, #0]
 8002c48:	4b29      	ldr	r3, [pc, #164]	; (8002cf0 <LoRaWAN_Init+0x17c>)
 8002c4a:	4622      	mov	r2, r4
 8002c4c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8002c50:	4828      	ldr	r0, [pc, #160]	; (8002cf4 <LoRaWAN_Init+0x180>)
 8002c52:	f010 fe27 	bl	80138a4 <UTIL_TIMER_Create>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8002c56:	4a28      	ldr	r2, [pc, #160]	; (8002cf8 <LoRaWAN_Init+0x184>)
 8002c58:	4621      	mov	r1, r4
 8002c5a:	2001      	movs	r0, #1
 8002c5c:	f010 fd22 	bl	80136a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8002c60:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <LoRaWAN_Init+0x188>)
 8002c62:	4621      	mov	r1, r4
 8002c64:	2002      	movs	r0, #2
 8002c66:	f010 fd1d 	bl	80136a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8002c6a:	4a25      	ldr	r2, [pc, #148]	; (8002d00 <LoRaWAN_Init+0x18c>)
 8002c6c:	4621      	mov	r1, r4
 8002c6e:	2004      	movs	r0, #4
 8002c70:	f010 fd18 	bl	80136a4 <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8002c74:	4a23      	ldr	r2, [pc, #140]	; (8002d04 <LoRaWAN_Init+0x190>)
 8002c76:	4621      	mov	r1, r4
 8002c78:	2008      	movs	r0, #8
 8002c7a:	f010 fd13 	bl	80136a4 <UTIL_SEQ_RegTask>
  LoraInfo_Init();
 8002c7e:	f000 f871 	bl	8002d64 <LoraInfo_Init>
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8002c82:	4921      	ldr	r1, [pc, #132]	; (8002d08 <LoRaWAN_Init+0x194>)
 8002c84:	4821      	ldr	r0, [pc, #132]	; (8002d0c <LoRaWAN_Init+0x198>)
 8002c86:	f005 fe01 	bl	800888c <LmHandlerInit>
  LmHandlerConfigure(&LmHandlerParams);
 8002c8a:	4821      	ldr	r0, [pc, #132]	; (8002d10 <LoRaWAN_Init+0x19c>)
 8002c8c:	f005 fcd8 	bl	8008640 <LmHandlerConfigure>
  UTIL_TIMER_Start(&JoinLedTimer);
 8002c90:	4816      	ldr	r0, [pc, #88]	; (8002cec <LoRaWAN_Init+0x178>)
 8002c92:	f010 febf 	bl	8013a14 <UTIL_TIMER_Start>
  LmHandlerJoin(ActivationType, ForceRejoin);
 8002c96:	4621      	mov	r1, r4
 8002c98:	4b1e      	ldr	r3, [pc, #120]	; (8002d14 <LoRaWAN_Init+0x1a0>)
 8002c9a:	7818      	ldrb	r0, [r3, #0]
 8002c9c:	f005 fa8c 	bl	80081b8 <LmHandlerJoin>
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8002ca0:	4d1d      	ldr	r5, [pc, #116]	; (8002d18 <LoRaWAN_Init+0x1a4>)
 8002ca2:	9400      	str	r4, [sp, #0]
 8002ca4:	4b1d      	ldr	r3, [pc, #116]	; (8002d1c <LoRaWAN_Init+0x1a8>)
 8002ca6:	4622      	mov	r2, r4
 8002ca8:	491d      	ldr	r1, [pc, #116]	; (8002d20 <LoRaWAN_Init+0x1ac>)
 8002caa:	6809      	ldr	r1, [r1, #0]
 8002cac:	4628      	mov	r0, r5
 8002cae:	f010 fdf9 	bl	80138a4 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8002cb2:	4628      	mov	r0, r5
 8002cb4:	f010 feae 	bl	8013a14 <UTIL_TIMER_Start>
}
 8002cb8:	b007      	add	sp, #28
 8002cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Error_Handler();
 8002cbc:	f7fe fd52 	bl	8001764 <Error_Handler>
 8002cc0:	e7c0      	b.n	8002c44 <LoRaWAN_Init+0xd0>
 8002cc2:	bf00      	nop
 8002cc4:	08014418 	.word	0x08014418
 8002cc8:	0801443c 	.word	0x0801443c
 8002ccc:	08014460 	.word	0x08014460
 8002cd0:	08014484 	.word	0x08014484
 8002cd4:	080144a8 	.word	0x080144a8
 8002cd8:	080027c1 	.word	0x080027c1
 8002cdc:	20000604 	.word	0x20000604
 8002ce0:	080027ad 	.word	0x080027ad
 8002ce4:	200005d4 	.word	0x200005d4
 8002ce8:	08002b61 	.word	0x08002b61
 8002cec:	200005bc 	.word	0x200005bc
 8002cf0:	08002769 	.word	0x08002769
 8002cf4:	200005ec 	.word	0x200005ec
 8002cf8:	08008439 	.word	0x08008439
 8002cfc:	080029dd 	.word	0x080029dd
 8002d00:	080029a5 	.word	0x080029a5
 8002d04:	08002909 	.word	0x08002909
 8002d08:	01030000 	.word	0x01030000
 8002d0c:	2000000c 	.word	0x2000000c
 8002d10:	20000058 	.word	0x20000058
 8002d14:	20000000 	.word	0x20000000
 8002d18:	2000061c 	.word	0x2000061c
 8002d1c:	08002599 	.word	0x08002599
 8002d20:	20000074 	.word	0x20000074

08002d24 <HAL_COMP_TriggerCallback>:
{
 8002d24:	b500      	push	{lr}
 8002d26:	b083      	sub	sp, #12
  __IO uint32_t COMP1OutputLevel = HAL_COMP_GetOutputLevel(&hcomp1);
 8002d28:	480c      	ldr	r0, [pc, #48]	; (8002d5c <HAL_COMP_TriggerCallback+0x38>)
 8002d2a:	f001 f839 	bl	8003da0 <HAL_COMP_GetOutputLevel>
 8002d2e:	9001      	str	r0, [sp, #4]
  if (LmHandlerIsBusy() == false){
 8002d30:	f005 fae6 	bl	8008300 <LmHandlerIsBusy>
 8002d34:	b908      	cbnz	r0, 8002d3a <HAL_COMP_TriggerCallback+0x16>
  if (COMP1OutputLevel>=COMP_OUTPUT_LEVEL_HIGH)
 8002d36:	9b01      	ldr	r3, [sp, #4]
 8002d38:	b913      	cbnz	r3, 8002d40 <HAL_COMP_TriggerCallback+0x1c>
}
 8002d3a:	b003      	add	sp, #12
 8002d3c:	f85d fb04 	ldr.w	pc, [sp], #4
	  BSP_LED_Toggle(LED2);
 8002d40:	2001      	movs	r0, #1
 8002d42:	f000 f867 	bl	8002e14 <BSP_LED_Toggle>
	  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
 8002d46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d4a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002d4e:	f001 fec6 	bl	8004ade <HAL_GPIO_TogglePin>
	  muon1++;
 8002d52:	4a03      	ldr	r2, [pc, #12]	; (8002d60 <HAL_COMP_TriggerCallback+0x3c>)
 8002d54:	6813      	ldr	r3, [r2, #0]
 8002d56:	3301      	adds	r3, #1
 8002d58:	6013      	str	r3, [r2, #0]
}
 8002d5a:	e7ee      	b.n	8002d3a <HAL_COMP_TriggerCallback+0x16>
 8002d5c:	200001f0 	.word	0x200001f0
 8002d60:	20000634 	.word	0x20000634

08002d64 <LoraInfo_Init>:
/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
  loraInfo.ContextManagement = 0;
 8002d64:	4b07      	ldr	r3, [pc, #28]	; (8002d84 <LoraInfo_Init+0x20>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 8002d6a:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 8002d6c:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 8002d6e:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN470 */
#ifdef  REGION_CN779
  loraInfo.Region |= (1 << LORAMAC_REGION_CN779);
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
 8002d70:	2210      	movs	r2, #16
 8002d72:	605a      	str	r2, [r3, #4]
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 8002d74:	2230      	movs	r2, #48	; 0x30
 8002d76:	605a      	str	r2, [r3, #4]
#endif /* REGION_KR920 */
#ifdef  REGION_IN865
  loraInfo.Region |= (1 << LORAMAC_REGION_IN865);
#endif /* REGION_IN865 */
#ifdef  REGION_US915
  loraInfo.Region |= (1 << LORAMAC_REGION_US915);
 8002d78:	f44f 7298 	mov.w	r2, #304	; 0x130
 8002d7c:	605a      	str	r2, [r3, #4]
#endif /* LORAWAN_KMS */

#if (!defined (CONTEXT_MANAGEMENT_ENABLED) || (CONTEXT_MANAGEMENT_ENABLED == 0))
  loraInfo.ContextManagement = 0;
#else /* CONTEXT_MANAGEMENT_ENABLED == 1 */
  loraInfo.ContextManagement = 1;
 8002d7e:	2201      	movs	r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED */

  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 8002d82:	4770      	bx	lr
 8002d84:	2000063c 	.word	0x2000063c

08002d88 <LoraInfo_GetPtr>:
{
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
}
 8002d88:	4800      	ldr	r0, [pc, #0]	; (8002d8c <LoraInfo_GetPtr+0x4>)
 8002d8a:	4770      	bx	lr
 8002d8c:	2000063c 	.word	0x2000063c

08002d90 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 8002d90:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 8002d92:	f000 f84f 	bl	8002e34 <BSP_RADIO_Init>
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002d96:	bd08      	pop	{r3, pc}

08002d98 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 8002d98:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 8002d9a:	f000 f88d 	bl	8002eb8 <BSP_RADIO_ConfigRFSwitch>
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002d9e:	bd08      	pop	{r3, pc}

08002da0 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 8002da0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 8002da2:	f000 f8d7 	bl	8002f54 <BSP_RADIO_GetTxConfig>
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 8002da6:	bd08      	pop	{r3, pc}

08002da8 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 8002da8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 8002daa:	f000 f8d5 	bl	8002f58 <BSP_RADIO_IsTCXO>
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002dae:	bd08      	pop	{r3, pc}

08002db0 <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 8002db0:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 8002db2:	f000 f8d3 	bl	8002f5c <BSP_RADIO_IsDCDC>
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 8002db6:	bd08      	pop	{r3, pc}

08002db8 <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 8002db8:	b508      	push	{r3, lr}
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 8002dba:	f000 f8d1 	bl	8002f60 <BSP_RADIO_GetRFOMaxPowerConfig>
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 8002dbe:	bd08      	pop	{r3, pc}

08002dc0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002dc0:	480d      	ldr	r0, [pc, #52]	; (8002df8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002dc2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dc4:	f000 f8d1 	bl	8002f6a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002dc8:	480c      	ldr	r0, [pc, #48]	; (8002dfc <LoopForever+0x6>)
  ldr r1, =_edata
 8002dca:	490d      	ldr	r1, [pc, #52]	; (8002e00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002dcc:	4a0d      	ldr	r2, [pc, #52]	; (8002e04 <LoopForever+0xe>)
  movs r3, #0
 8002dce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002dd0:	e002      	b.n	8002dd8 <LoopCopyDataInit>

08002dd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002dd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002dd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dd6:	3304      	adds	r3, #4

08002dd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ddc:	d3f9      	bcc.n	8002dd2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002de0:	4c0a      	ldr	r4, [pc, #40]	; (8002e0c <LoopForever+0x16>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002de4:	e001      	b.n	8002dea <LoopFillZerobss>

08002de6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002de6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002de8:	3204      	adds	r2, #4

08002dea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002dec:	d3fb      	bcc.n	8002de6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002dee:	f011 f817 	bl	8013e20 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002df2:	f7fe fd01 	bl	80017f8 <main>

08002df6 <LoopForever>:

LoopForever:
    b LoopForever
 8002df6:	e7fe      	b.n	8002df6 <LoopForever>
  ldr   r0, =_estack
 8002df8:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e00:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8002e04:	08014f38 	.word	0x08014f38
  ldr r2, =_sbss
 8002e08:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8002e0c:	20001840 	.word	0x20001840

08002e10 <AES_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002e10:	e7fe      	b.n	8002e10 <AES_IRQHandler>
	...

08002e14 <BSP_LED_Toggle>:
  *            @arg LED2
  *            @arg LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 8002e14:	b508      	push	{r3, lr}
  HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 8002e16:	4b05      	ldr	r3, [pc, #20]	; (8002e2c <BSP_LED_Toggle+0x18>)
 8002e18:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8002e1c:	4b04      	ldr	r3, [pc, #16]	; (8002e30 <BSP_LED_Toggle+0x1c>)
 8002e1e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002e22:	f001 fe5c 	bl	8004ade <HAL_GPIO_TogglePin>

  return BSP_ERROR_NONE;
}
 8002e26:	2000      	movs	r0, #0
 8002e28:	bd08      	pop	{r3, pc}
 8002e2a:	bf00      	nop
 8002e2c:	08014504 	.word	0x08014504
 8002e30:	0801450c 	.word	0x0801450c

08002e34 <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 8002e34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e38:	b086      	sub	sp, #24
  GPIO_InitTypeDef  gpio_init_structure = {0};
 8002e3a:	2400      	movs	r4, #0
 8002e3c:	9401      	str	r4, [sp, #4]
 8002e3e:	9402      	str	r4, [sp, #8]
 8002e40:	9403      	str	r4, [sp, #12]
 8002e42:	9404      	str	r4, [sp, #16]
 8002e44:	9405      	str	r4, [sp, #20]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002e46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002e4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002e4c:	f042 0204 	orr.w	r2, r2, #4
 8002e50:	64da      	str	r2, [r3, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
 8002e5a:	9b00      	ldr	r3, [sp, #0]
  
  /* Enable the Radio Switch Clock */
  RF_SW_CTRL3_GPIO_CLK_ENABLE();
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 8002e5c:	2710      	movs	r7, #16
 8002e5e:	9701      	str	r7, [sp, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8002e60:	2301      	movs	r3, #1
 8002e62:	9302      	str	r3, [sp, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e64:	2303      	movs	r3, #3
 8002e66:	9304      	str	r3, [sp, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 8002e68:	4d12      	ldr	r5, [pc, #72]	; (8002eb4 <BSP_RADIO_Init+0x80>)
 8002e6a:	a901      	add	r1, sp, #4
 8002e6c:	4628      	mov	r0, r5
 8002e6e:	f001 fce1 	bl	8004834 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 8002e72:	f04f 0820 	mov.w	r8, #32
 8002e76:	f8cd 8004 	str.w	r8, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 8002e7a:	a901      	add	r1, sp, #4
 8002e7c:	4628      	mov	r0, r5
 8002e7e:	f001 fcd9 	bl	8004834 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL3_PIN;
 8002e82:	2608      	movs	r6, #8
 8002e84:	9601      	str	r6, [sp, #4]
  HAL_GPIO_Init(RF_SW_CTRL3_GPIO_PORT, &gpio_init_structure);
 8002e86:	a901      	add	r1, sp, #4
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f001 fcd3 	bl	8004834 <HAL_GPIO_Init>

  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002e8e:	4622      	mov	r2, r4
 8002e90:	4641      	mov	r1, r8
 8002e92:	4628      	mov	r0, r5
 8002e94:	f001 fe1e 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002e98:	4622      	mov	r2, r4
 8002e9a:	4639      	mov	r1, r7
 8002e9c:	4628      	mov	r0, r5
 8002e9e:	f001 fe19 	bl	8004ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET); 
 8002ea2:	4622      	mov	r2, r4
 8002ea4:	4631      	mov	r1, r6
 8002ea6:	4628      	mov	r0, r5
 8002ea8:	f001 fe14 	bl	8004ad4 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
}
 8002eac:	4620      	mov	r0, r4
 8002eae:	b006      	add	sp, #24
 8002eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002eb4:	48000800 	.word	0x48000800

08002eb8 <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 8002eb8:	b510      	push	{r4, lr}
  switch (Config)
 8002eba:	2803      	cmp	r0, #3
 8002ebc:	d813      	bhi.n	8002ee6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002ebe:	e8df f000 	tbb	[pc, r0]
 8002ec2:	1402      	.short	0x1402
 8002ec4:	3625      	.short	0x3625
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_RESET);
 8002ec6:	4c22      	ldr	r4, [pc, #136]	; (8002f50 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	2108      	movs	r1, #8
 8002ecc:	4620      	mov	r0, r4
 8002ece:	f001 fe01 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2110      	movs	r1, #16
 8002ed6:	4620      	mov	r0, r4
 8002ed8:	f001 fdfc 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002edc:	2200      	movs	r2, #0
 8002ede:	2120      	movs	r1, #32
 8002ee0:	4620      	mov	r0, r4
 8002ee2:	f001 fdf7 	bl	8004ad4 <HAL_GPIO_WritePin>
    default:
      break;    
  }  

  return BSP_ERROR_NONE;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	bd10      	pop	{r4, pc}
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002eea:	4c19      	ldr	r4, [pc, #100]	; (8002f50 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	2108      	movs	r1, #8
 8002ef0:	4620      	mov	r0, r4
 8002ef2:	f001 fdef 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	2110      	movs	r1, #16
 8002efa:	4620      	mov	r0, r4
 8002efc:	f001 fdea 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 8002f00:	2200      	movs	r2, #0
 8002f02:	2120      	movs	r1, #32
 8002f04:	4620      	mov	r0, r4
 8002f06:	f001 fde5 	bl	8004ad4 <HAL_GPIO_WritePin>
      break;
 8002f0a:	e7ec      	b.n	8002ee6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f0c:	4c10      	ldr	r4, [pc, #64]	; (8002f50 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f0e:	2201      	movs	r2, #1
 8002f10:	2108      	movs	r1, #8
 8002f12:	4620      	mov	r0, r4
 8002f14:	f001 fdde 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002f18:	2201      	movs	r2, #1
 8002f1a:	2110      	movs	r1, #16
 8002f1c:	4620      	mov	r0, r4
 8002f1e:	f001 fdd9 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f22:	2201      	movs	r2, #1
 8002f24:	2120      	movs	r1, #32
 8002f26:	4620      	mov	r0, r4
 8002f28:	f001 fdd4 	bl	8004ad4 <HAL_GPIO_WritePin>
      break;
 8002f2c:	e7db      	b.n	8002ee6 <BSP_RADIO_ConfigRFSwitch+0x2e>
      HAL_GPIO_WritePin(RF_SW_CTRL3_GPIO_PORT, RF_SW_CTRL3_PIN, GPIO_PIN_SET);
 8002f2e:	4c08      	ldr	r4, [pc, #32]	; (8002f50 <BSP_RADIO_ConfigRFSwitch+0x98>)
 8002f30:	2201      	movs	r2, #1
 8002f32:	2108      	movs	r1, #8
 8002f34:	4620      	mov	r0, r4
 8002f36:	f001 fdcd 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2110      	movs	r1, #16
 8002f3e:	4620      	mov	r0, r4
 8002f40:	f001 fdc8 	bl	8004ad4 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002f44:	2201      	movs	r2, #1
 8002f46:	2120      	movs	r1, #32
 8002f48:	4620      	mov	r0, r4
 8002f4a:	f001 fdc3 	bl	8004ad4 <HAL_GPIO_WritePin>
      break;
 8002f4e:	e7ca      	b.n	8002ee6 <BSP_RADIO_ConfigRFSwitch+0x2e>
 8002f50:	48000800 	.word	0x48000800

08002f54 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
  return RADIO_CONF_RFO_LP_HP;
}
 8002f54:	2000      	movs	r0, #0
 8002f56:	4770      	bx	lr

08002f58 <BSP_RADIO_IsTCXO>:
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
  return RADIO_CONF_TCXO_SUPPORTED;
}
 8002f58:	2001      	movs	r0, #1
 8002f5a:	4770      	bx	lr

08002f5c <BSP_RADIO_IsDCDC>:
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
  return RADIO_CONF_DCDC_SUPPORTED;
}
 8002f5c:	2001      	movs	r0, #1
 8002f5e:	4770      	bx	lr

08002f60 <BSP_RADIO_GetRFOMaxPowerConfig>:
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 8002f60:	b908      	cbnz	r0, 8002f66 <BSP_RADIO_GetRFOMaxPowerConfig+0x6>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 8002f62:	200f      	movs	r0, #15
 8002f64:	4770      	bx	lr
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 8002f66:	2016      	movs	r0, #22
  }

  return ret;
}
 8002f68:	4770      	bx	lr

08002f6a <SystemInit>:

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8002f6a:	4770      	bx	lr

08002f6c <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002f6c:	4b11      	ldr	r3, [pc, #68]	; (8002fb4 <HAL_InitTick+0x48>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	b90b      	cbnz	r3, 8002f76 <HAL_InitTick+0xa>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8002f72:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8002f74:	4770      	bx	lr
{
 8002f76:	b510      	push	{r4, lr}
 8002f78:	4604      	mov	r4, r0
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002f7a:	f002 faa9 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8002f7e:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <HAL_InitTick+0x48>)
 8002f80:	781a      	ldrb	r2, [r3, #0]
 8002f82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f86:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8002f8e:	f000 ff9d 	bl	8003ecc <HAL_SYSTICK_Config>
 8002f92:	b968      	cbnz	r0, 8002fb0 <HAL_InitTick+0x44>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f94:	2c0f      	cmp	r4, #15
 8002f96:	d901      	bls.n	8002f9c <HAL_InitTick+0x30>
        status = HAL_ERROR;
 8002f98:	2001      	movs	r0, #1
 8002f9a:	e00a      	b.n	8002fb2 <HAL_InitTick+0x46>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	4621      	mov	r1, r4
 8002fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8002fa4:	f000 ff3a 	bl	8003e1c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <HAL_InitTick+0x4c>)
 8002faa:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 8002fac:	2000      	movs	r0, #0
 8002fae:	e000      	b.n	8002fb2 <HAL_InitTick+0x46>
      status = HAL_ERROR;
 8002fb0:	2001      	movs	r0, #1
}
 8002fb2:	bd10      	pop	{r4, pc}
 8002fb4:	2000007c 	.word	0x2000007c
 8002fb8:	20000080 	.word	0x20000080

08002fbc <HAL_Init>:
{
 8002fbc:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fbe:	2003      	movs	r0, #3
 8002fc0:	f000 ff1a 	bl	8003df8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002fc4:	f002 fa84 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8002fc8:	4b06      	ldr	r3, [pc, #24]	; (8002fe4 <HAL_Init+0x28>)
 8002fca:	6018      	str	r0, [r3, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002fcc:	200f      	movs	r0, #15
 8002fce:	f7ff ffcd 	bl	8002f6c <HAL_InitTick>
 8002fd2:	b110      	cbz	r0, 8002fda <HAL_Init+0x1e>
    status = HAL_ERROR;
 8002fd4:	2401      	movs	r4, #1
}
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	bd10      	pop	{r4, pc}
 8002fda:	4604      	mov	r4, r0
    HAL_MspInit();
 8002fdc:	f7fe fcd6 	bl	800198c <HAL_MspInit>
 8002fe0:	e7f9      	b.n	8002fd6 <HAL_Init+0x1a>
 8002fe2:	bf00      	nop
 8002fe4:	20000078 	.word	0x20000078

08002fe8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8002fe8:	4b03      	ldr	r3, [pc, #12]	; (8002ff8 <HAL_IncTick+0x10>)
 8002fea:	781b      	ldrb	r3, [r3, #0]
 8002fec:	4a03      	ldr	r2, [pc, #12]	; (8002ffc <HAL_IncTick+0x14>)
 8002fee:	6811      	ldr	r1, [r2, #0]
 8002ff0:	440b      	add	r3, r1
 8002ff2:	6013      	str	r3, [r2, #0]
}
 8002ff4:	4770      	bx	lr
 8002ff6:	bf00      	nop
 8002ff8:	2000007c 	.word	0x2000007c
 8002ffc:	2000064c 	.word	0x2000064c

08003000 <HAL_SuspendTick>:
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 8003000:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003004:	6913      	ldr	r3, [r2, #16]
 8003006:	f023 0302 	bic.w	r3, r3, #2
 800300a:	6113      	str	r3, [r2, #16]
}
 800300c:	4770      	bx	lr

0800300e <HAL_ResumeTick>:
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 800300e:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8003012:	6913      	ldr	r3, [r2, #16]
 8003014:	f043 0302 	orr.w	r3, r3, #2
 8003018:	6113      	str	r3, [r2, #16]
}
 800301a:	4770      	bx	lr

0800301c <HAL_GetUIDw0>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
  return (READ_REG(*((uint32_t *)UID_BASE)));
}
 800301c:	4b01      	ldr	r3, [pc, #4]	; (8003024 <HAL_GetUIDw0+0x8>)
 800301e:	f8d3 0590 	ldr.w	r0, [r3, #1424]	; 0x590
 8003022:	4770      	bx	lr
 8003024:	1fff7000 	.word	0x1fff7000

08003028 <HAL_GetUIDw1>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
}
 8003028:	4b01      	ldr	r3, [pc, #4]	; (8003030 <HAL_GetUIDw1+0x8>)
 800302a:	f8d3 0594 	ldr.w	r0, [r3, #1428]	; 0x594
 800302e:	4770      	bx	lr
 8003030:	1fff7000 	.word	0x1fff7000

08003034 <HAL_GetUIDw2>:
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
}
 8003034:	4b01      	ldr	r3, [pc, #4]	; (800303c <HAL_GetUIDw2+0x8>)
 8003036:	f8d3 0598 	ldr.w	r0, [r3, #1432]	; 0x598
 800303a:	4770      	bx	lr
 800303c:	1fff7000 	.word	0x1fff7000

08003040 <HAL_DBGMCU_DisableDBGSleepMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 8003040:	4a02      	ldr	r2, [pc, #8]	; (800304c <HAL_DBGMCU_DisableDBGSleepMode+0xc>)
 8003042:	6853      	ldr	r3, [r2, #4]
 8003044:	f023 0301 	bic.w	r3, r3, #1
 8003048:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
  LL_DBGMCU_DisableDBGSleepMode();
}
 800304a:	4770      	bx	lr
 800304c:	e0042000 	.word	0xe0042000

08003050 <HAL_DBGMCU_DisableDBGStopMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8003050:	4a02      	ldr	r2, [pc, #8]	; (800305c <HAL_DBGMCU_DisableDBGStopMode+0xc>)
 8003052:	6853      	ldr	r3, [r2, #4]
 8003054:	f023 0302 	bic.w	r3, r3, #2
 8003058:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
  LL_DBGMCU_DisableDBGStopMode();
}
 800305a:	4770      	bx	lr
 800305c:	e0042000 	.word	0xe0042000

08003060 <HAL_DBGMCU_DisableDBGStandbyMode>:
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8003060:	4a02      	ldr	r2, [pc, #8]	; (800306c <HAL_DBGMCU_DisableDBGStandbyMode+0xc>)
 8003062:	6853      	ldr	r3, [r2, #4]
 8003064:	f023 0304 	bic.w	r3, r3, #4
 8003068:	6053      	str	r3, [r2, #4]
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
  LL_DBGMCU_DisableDBGStandbyMode();
}
 800306a:	4770      	bx	lr
 800306c:	e0042000 	.word	0xe0042000

08003070 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003070:	b530      	push	{r4, r5, lr}
 8003072:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmpCFGR1 = 0UL;
  uint32_t tmpCFGR2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003074:	2300      	movs	r3, #0
 8003076:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 8003078:	2800      	cmp	r0, #0
 800307a:	f000 8106 	beq.w	800328a <HAL_ADC_Init+0x21a>
 800307e:	4604      	mov	r4, r0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8003080:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003082:	b1bb      	cbz	r3, 80030b4 <HAL_ADC_Init+0x44>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003084:	6822      	ldr	r2, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003086:	6893      	ldr	r3, [r2, #8]
 8003088:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 800308c:	d11f      	bne.n	80030ce <HAL_ADC_Init+0x5e>
  MODIFY_REG(ADCx->CR,
 800308e:	6893      	ldr	r3, [r2, #8]
 8003090:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003094:	f023 0317 	bic.w	r3, r3, #23
 8003098:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309c:	6093      	str	r3, [r2, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800309e:	4b7c      	ldr	r3, [pc, #496]	; (8003290 <HAL_ADC_Init+0x220>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	099b      	lsrs	r3, r3, #6
 80030a4:	4a7b      	ldr	r2, [pc, #492]	; (8003294 <HAL_ADC_Init+0x224>)
 80030a6:	fba2 2303 	umull	r2, r3, r2, r3
 80030aa:	099b      	lsrs	r3, r3, #6
 80030ac:	3301      	adds	r3, #1
 80030ae:	005b      	lsls	r3, r3, #1
 80030b0:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030b2:	e009      	b.n	80030c8 <HAL_ADC_Init+0x58>
    HAL_ADC_MspInit(hadc);
 80030b4:	f7fd ff3c 	bl	8000f30 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80030b8:	2300      	movs	r3, #0
 80030ba:	65e3      	str	r3, [r4, #92]	; 0x5c
    hadc->Lock = HAL_UNLOCKED;
 80030bc:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80030c0:	e7e0      	b.n	8003084 <HAL_ADC_Init+0x14>
    {
      wait_loop_index--;
 80030c2:	9b01      	ldr	r3, [sp, #4]
 80030c4:	3b01      	subs	r3, #1
 80030c6:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 80030c8:	9b01      	ldr	r3, [sp, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f9      	bne.n	80030c2 <HAL_ADC_Init+0x52>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030ce:	6822      	ldr	r2, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80030d0:	6893      	ldr	r3, [r2, #8]
 80030d2:	f013 5f80 	tst.w	r3, #268435456	; 0x10000000
 80030d6:	f040 809a 	bne.w	800320e <HAL_ADC_Init+0x19e>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030da:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80030dc:	f043 0310 	orr.w	r3, r3, #16
 80030e0:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030e2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	65e3      	str	r3, [r4, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80030ea:	2001      	movs	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80030ec:	6893      	ldr	r3, [r2, #8]
 80030ee:	f013 0304 	ands.w	r3, r3, #4
 80030f2:	d000      	beq.n	80030f6 <HAL_ADC_Init+0x86>
 80030f4:	2301      	movs	r3, #1
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80030f6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80030f8:	f011 0f10 	tst.w	r1, #16
 80030fc:	f040 80be 	bne.w	800327c <HAL_ADC_Init+0x20c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003100:	2b00      	cmp	r3, #0
 8003102:	f040 80bb 	bne.w	800327c <HAL_ADC_Init+0x20c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003106:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003108:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800310c:	f043 0302 	orr.w	r3, r3, #2
 8003110:	65a3      	str	r3, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	f013 0f01 	tst.w	r3, #1
 8003118:	d14f      	bne.n	80031ba <HAL_ADC_Init+0x14a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800311a:	68a3      	ldr	r3, [r4, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800311c:	7e21      	ldrb	r1, [r4, #24]
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800311e:	ea43 3381 	orr.w	r3, r3, r1, lsl #14
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8003122:	7e61      	ldrb	r1, [r4, #25]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8003124:	ea43 33c1 	orr.w	r3, r3, r1, lsl #15
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003128:	7ea5      	ldrb	r5, [r4, #26]
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 800312a:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800312e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003130:	b109      	cbz	r1, 8003136 <HAL_ADC_Init+0xc6>
 8003132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8003136:	430b      	orrs	r3, r1
                   hadc->Init.DataAlign                                           |
 8003138:	68e1      	ldr	r1, [r4, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800313a:	430b      	orrs	r3, r1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800313c:	6921      	ldr	r1, [r4, #16]
 800313e:	2900      	cmp	r1, #0
 8003140:	db67      	blt.n	8003212 <HAL_ADC_Init+0x1a2>
 8003142:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
                   hadc->Init.DataAlign                                           |
 8003146:	430b      	orrs	r3, r1
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003148:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800314c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003150:	f894 1020 	ldrb.w	r1, [r4, #32]
 8003154:	2901      	cmp	r1, #1
 8003156:	d05f      	beq.n	8003218 <HAL_ADC_Init+0x1a8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003158:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800315a:	b121      	cbz	r1, 8003166 <HAL_ADC_Init+0xf6>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 800315c:	f401 71e0 	and.w	r1, r1, #448	; 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8003160:	6aa5      	ldr	r5, [r4, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8003162:	4329      	orrs	r1, r5
 8003164:	430b      	orrs	r3, r1
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8003166:	68d1      	ldr	r1, [r2, #12]
 8003168:	f421 31fe 	bic.w	r1, r1, #130048	; 0x1fc00
 800316c:	f421 71ff 	bic.w	r1, r1, #510	; 0x1fe
 8003170:	430b      	orrs	r3, r1
 8003172:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003174:	6863      	ldr	r3, [r4, #4]
 8003176:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 800317a:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800317c:	431a      	orrs	r2, r3
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800317e:	f894 103c 	ldrb.w	r1, [r4, #60]	; 0x3c
 8003182:	2901      	cmp	r1, #1
 8003184:	d055      	beq.n	8003232 <HAL_ADC_Init+0x1c2>
                     hadc->Init.Oversampling.RightBitShift |
                     hadc->Init.Oversampling.TriggeredMode
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8003186:	6821      	ldr	r1, [r4, #0]
 8003188:	690d      	ldr	r5, [r1, #16]
 800318a:	4b43      	ldr	r3, [pc, #268]	; (8003298 <HAL_ADC_Init+0x228>)
 800318c:	402b      	ands	r3, r5
 800318e:	4313      	orrs	r3, r2
 8003190:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8003198:	d00f      	beq.n	80031ba <HAL_ADC_Init+0x14a>
 800319a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319e:	d00c      	beq.n	80031ba <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80031a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a4:	d009      	beq.n	80031ba <HAL_ADC_Init+0x14a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC_COMMON->CCR,
 80031a6:	493d      	ldr	r1, [pc, #244]	; (800329c <HAL_ADC_Init+0x22c>)
 80031a8:	f8d1 2708 	ldr.w	r2, [r1, #1800]	; 0x708
 80031ac:	f422 1270 	bic.w	r2, r2, #3932160	; 0x3c0000
 80031b0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80031b4:	4313      	orrs	r3, r2
 80031b6:	f8c1 3708 	str.w	r3, [r1, #1800]	; 0x708
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80031ba:	6821      	ldr	r1, [r4, #0]
 80031bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(ADCx->SMPR,
 80031be:	694a      	ldr	r2, [r1, #20]
 80031c0:	f022 0207 	bic.w	r2, r2, #7
 80031c4:	4313      	orrs	r3, r2
 80031c6:	614b      	str	r3, [r1, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80031c8:	6822      	ldr	r2, [r4, #0]
 80031ca:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80031cc:	6953      	ldr	r3, [r2, #20]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 80031d6:	6153      	str	r3, [r2, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d133      	bne.n	8003246 <HAL_ADC_Init+0x1d6>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80031de:	6822      	ldr	r2, [r4, #0]
 80031e0:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80031e2:	f063 030f 	orn	r3, r3, #15
 80031e6:	6293      	str	r3, [r2, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031e8:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80031ea:	695b      	ldr	r3, [r3, #20]
 80031ec:	f003 0307 	and.w	r3, r3, #7
      == hadc->Init.SamplingTimeCommon1)
 80031f0:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d039      	beq.n	800326a <HAL_ADC_Init+0x1fa>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80031f6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80031f8:	f023 0312 	bic.w	r3, r3, #18
 80031fc:	f043 0310 	orr.w	r3, r3, #16
 8003200:	65a3      	str	r3, [r4, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003202:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003204:	f043 0301 	orr.w	r3, r3, #1
 8003208:	65e3      	str	r3, [r4, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800320a:	2001      	movs	r0, #1
 800320c:	e03b      	b.n	8003286 <HAL_ADC_Init+0x216>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800320e:	2000      	movs	r0, #0
 8003210:	e76c      	b.n	80030ec <HAL_ADC_Init+0x7c>
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8003212:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003216:	e796      	b.n	8003146 <HAL_ADC_Init+0xd6>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8003218:	b915      	cbnz	r5, 8003220 <HAL_ADC_Init+0x1b0>
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	e79b      	b.n	8003158 <HAL_ADC_Init+0xe8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003220:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003222:	f041 0120 	orr.w	r1, r1, #32
 8003226:	65a1      	str	r1, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003228:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800322a:	f041 0101 	orr.w	r1, r1, #1
 800322e:	65e1      	str	r1, [r4, #92]	; 0x5c
 8003230:	e792      	b.n	8003158 <HAL_ADC_Init+0xe8>
                     hadc->Init.Oversampling.Ratio         |
 8003232:	6c21      	ldr	r1, [r4, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8003234:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.RightBitShift |
 8003236:	6c61      	ldr	r1, [r4, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8003238:	430b      	orrs	r3, r1
                     hadc->Init.Oversampling.TriggeredMode
 800323a:	6ca1      	ldr	r1, [r4, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 800323c:	430b      	orrs	r3, r1
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 800323e:	4313      	orrs	r3, r2
 8003240:	f043 0201 	orr.w	r2, r3, #1
 8003244:	e79f      	b.n	8003186 <HAL_ADC_Init+0x116>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003246:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800324a:	d1cd      	bne.n	80031e8 <HAL_ADC_Init+0x178>
      MODIFY_REG(hadc->Instance->CHSELR,
 800324c:	6821      	ldr	r1, [r4, #0]
 800324e:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8003250:	69e3      	ldr	r3, [r4, #28]
 8003252:	3b01      	subs	r3, #1
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	f003 031c 	and.w	r3, r3, #28
 800325a:	f06f 020f 	mvn.w	r2, #15
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003264:	4313      	orrs	r3, r2
 8003266:	628b      	str	r3, [r1, #40]	; 0x28
 8003268:	e7be      	b.n	80031e8 <HAL_ADC_Init+0x178>
      ADC_CLEAR_ERRORCODE(hadc);
 800326a:	2300      	movs	r3, #0
 800326c:	65e3      	str	r3, [r4, #92]	; 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 800326e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003270:	f023 0303 	bic.w	r3, r3, #3
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	65a3      	str	r3, [r4, #88]	; 0x58
 800327a:	e004      	b.n	8003286 <HAL_ADC_Init+0x216>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800327c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800327e:	f043 0310 	orr.w	r3, r3, #16
 8003282:	65a3      	str	r3, [r4, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003284:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8003286:	b003      	add	sp, #12
 8003288:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800328a:	2001      	movs	r0, #1
 800328c:	e7fb      	b.n	8003286 <HAL_ADC_Init+0x216>
 800328e:	bf00      	nop
 8003290:	20000078 	.word	0x20000078
 8003294:	053e2d63 	.word	0x053e2d63
 8003298:	1ffffc02 	.word	0x1ffffc02
 800329c:	40012000 	.word	0x40012000

080032a0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80032a6:	6946      	ldr	r6, [r0, #20]
 80032a8:	2e08      	cmp	r6, #8
 80032aa:	d005      	beq.n	80032b8 <HAL_ADC_PollForConversion+0x18>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032ac:	6803      	ldr	r3, [r0, #0]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	f013 0f01 	tst.w	r3, #1
 80032b4:	d11e      	bne.n	80032f4 <HAL_ADC_PollForConversion+0x54>

      return HAL_ERROR;
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032b6:	2604      	movs	r6, #4
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032b8:	f7fe fcd4 	bl	8001c64 <HAL_GetTick>
 80032bc:	4607      	mov	r7, r0

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032be:	6823      	ldr	r3, [r4, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	4232      	tst	r2, r6
 80032c4:	d11c      	bne.n	8003300 <HAL_ADC_PollForConversion+0x60>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032c6:	f1b5 3fff 	cmp.w	r5, #4294967295
 80032ca:	d0f8      	beq.n	80032be <HAL_ADC_PollForConversion+0x1e>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032cc:	f7fe fcca 	bl	8001c64 <HAL_GetTick>
 80032d0:	1bc3      	subs	r3, r0, r7
 80032d2:	42ab      	cmp	r3, r5
 80032d4:	d801      	bhi.n	80032da <HAL_ADC_PollForConversion+0x3a>
 80032d6:	2d00      	cmp	r5, #0
 80032d8:	d1f1      	bne.n	80032be <HAL_ADC_PollForConversion+0x1e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4233      	tst	r3, r6
 80032e0:	d1ed      	bne.n	80032be <HAL_ADC_PollForConversion+0x1e>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032e2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80032e4:	f043 0304 	orr.w	r3, r3, #4
 80032e8:	65a3      	str	r3, [r4, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80032ea:	2300      	movs	r3, #0
 80032ec:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

          return HAL_TIMEOUT;
 80032f0:	2003      	movs	r0, #3
 80032f2:	e028      	b.n	8003346 <HAL_ADC_PollForConversion+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f4:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80032f6:	f043 0320 	orr.w	r3, r3, #32
 80032fa:	6583      	str	r3, [r0, #88]	; 0x58
      return HAL_ERROR;
 80032fc:	2001      	movs	r0, #1
 80032fe:	e022      	b.n	8003346 <HAL_ADC_PollForConversion+0xa6>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003300:	6da2      	ldr	r2, [r4, #88]	; 0x58
 8003302:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003306:	65a2      	str	r2, [r4, #88]	; 0x58
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8003308:	68da      	ldr	r2, [r3, #12]
 800330a:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 800330e:	d115      	bne.n	800333c <HAL_ADC_PollForConversion+0x9c>

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003310:	7ea2      	ldrb	r2, [r4, #26]
 8003312:	b99a      	cbnz	r2, 800333c <HAL_ADC_PollForConversion+0x9c>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	f012 0f08 	tst.w	r2, #8
 800331a:	d00f      	beq.n	800333c <HAL_ADC_PollForConversion+0x9c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800331c:	689a      	ldr	r2, [r3, #8]
 800331e:	f012 0f04 	tst.w	r2, #4
 8003322:	d111      	bne.n	8003348 <HAL_ADC_PollForConversion+0xa8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	f022 020c 	bic.w	r2, r2, #12
 800332a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800332c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800332e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003332:	f023 0301 	bic.w	r3, r3, #1
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	65a3      	str	r3, [r4, #88]	; 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800333c:	7e20      	ldrb	r0, [r4, #24]
 800333e:	b960      	cbnz	r0, 800335a <HAL_ADC_PollForConversion+0xba>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003340:	6823      	ldr	r3, [r4, #0]
 8003342:	220c      	movs	r2, #12
 8003344:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
}
 8003346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003348:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800334a:	f043 0320 	orr.w	r3, r3, #32
 800334e:	65a3      	str	r3, [r4, #88]	; 0x58
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003350:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003352:	f043 0301 	orr.w	r3, r3, #1
 8003356:	65e3      	str	r3, [r4, #92]	; 0x5c
 8003358:	e7f0      	b.n	800333c <HAL_ADC_PollForConversion+0x9c>
  return HAL_OK;
 800335a:	2000      	movs	r0, #0
 800335c:	e7f3      	b.n	8003346 <HAL_ADC_PollForConversion+0xa6>

0800335e <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800335e:	6803      	ldr	r3, [r0, #0]
 8003360:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8003362:	4770      	bx	lr

08003364 <HAL_ADC_ConvCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003364:	4770      	bx	lr

08003366 <HAL_ADC_LevelOutOfWindowCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003366:	4770      	bx	lr

08003368 <HAL_ADC_ErrorCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003368:	4770      	bx	lr

0800336a <HAL_ADC_IRQHandler>:
{
 800336a:	b570      	push	{r4, r5, r6, lr}
 800336c:	4604      	mov	r4, r0
  uint32_t tmp_isr = hadc->Instance->ISR;
 800336e:	6803      	ldr	r3, [r0, #0]
 8003370:	681e      	ldr	r6, [r3, #0]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003372:	685d      	ldr	r5, [r3, #4]
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8003374:	f016 0f02 	tst.w	r6, #2
 8003378:	d010      	beq.n	800339c <HAL_ADC_IRQHandler+0x32>
 800337a:	f015 0f02 	tst.w	r5, #2
 800337e:	d00d      	beq.n	800339c <HAL_ADC_IRQHandler+0x32>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003380:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003382:	f013 0f10 	tst.w	r3, #16
 8003386:	d103      	bne.n	8003390 <HAL_ADC_IRQHandler+0x26>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003388:	6d83      	ldr	r3, [r0, #88]	; 0x58
 800338a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800338e:	6583      	str	r3, [r0, #88]	; 0x58
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003390:	4620      	mov	r0, r4
 8003392:	f000 fc02 	bl	8003b9a <HAL_ADCEx_EndOfSamplingCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003396:	6823      	ldr	r3, [r4, #0]
 8003398:	2202      	movs	r2, #2
 800339a:	601a      	str	r2, [r3, #0]
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800339c:	f016 0f04 	tst.w	r6, #4
 80033a0:	d002      	beq.n	80033a8 <HAL_ADC_IRQHandler+0x3e>
 80033a2:	f015 0f04 	tst.w	r5, #4
 80033a6:	d105      	bne.n	80033b4 <HAL_ADC_IRQHandler+0x4a>
 80033a8:	f016 0f08 	tst.w	r6, #8
 80033ac:	d02b      	beq.n	8003406 <HAL_ADC_IRQHandler+0x9c>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80033ae:	f015 0f08 	tst.w	r5, #8
 80033b2:	d028      	beq.n	8003406 <HAL_ADC_IRQHandler+0x9c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033b6:	f013 0f10 	tst.w	r3, #16
 80033ba:	d103      	bne.n	80033c4 <HAL_ADC_IRQHandler+0x5a>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80033bc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033c2:	65a3      	str	r3, [r4, #88]	; 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80033c4:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80033c6:	68da      	ldr	r2, [r3, #12]
 80033c8:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 80033cc:	d115      	bne.n	80033fa <HAL_ADC_IRQHandler+0x90>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 80033ce:	7ea2      	ldrb	r2, [r4, #26]
 80033d0:	b99a      	cbnz	r2, 80033fa <HAL_ADC_IRQHandler+0x90>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80033d2:	681a      	ldr	r2, [r3, #0]
 80033d4:	f012 0f08 	tst.w	r2, #8
 80033d8:	d00f      	beq.n	80033fa <HAL_ADC_IRQHandler+0x90>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	f012 0f04 	tst.w	r2, #4
 80033e0:	d145      	bne.n	800346e <HAL_ADC_IRQHandler+0x104>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	f022 020c 	bic.w	r2, r2, #12
 80033e8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 80033ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80033ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f0:	f023 0301 	bic.w	r3, r3, #1
 80033f4:	f043 0301 	orr.w	r3, r3, #1
 80033f8:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 80033fa:	4620      	mov	r0, r4
 80033fc:	f7ff ffb2 	bl	8003364 <HAL_ADC_ConvCpltCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003400:	6823      	ldr	r3, [r4, #0]
 8003402:	220c      	movs	r2, #12
 8003404:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003406:	f016 0f80 	tst.w	r6, #128	; 0x80
 800340a:	d002      	beq.n	8003412 <HAL_ADC_IRQHandler+0xa8>
 800340c:	f015 0f80 	tst.w	r5, #128	; 0x80
 8003410:	d136      	bne.n	8003480 <HAL_ADC_IRQHandler+0x116>
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003412:	f416 7f80 	tst.w	r6, #256	; 0x100
 8003416:	d002      	beq.n	800341e <HAL_ADC_IRQHandler+0xb4>
 8003418:	f415 7f80 	tst.w	r5, #256	; 0x100
 800341c:	d13b      	bne.n	8003496 <HAL_ADC_IRQHandler+0x12c>
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800341e:	f416 7f00 	tst.w	r6, #512	; 0x200
 8003422:	d002      	beq.n	800342a <HAL_ADC_IRQHandler+0xc0>
 8003424:	f415 7f00 	tst.w	r5, #512	; 0x200
 8003428:	d141      	bne.n	80034ae <HAL_ADC_IRQHandler+0x144>
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800342a:	f016 0f10 	tst.w	r6, #16
 800342e:	d017      	beq.n	8003460 <HAL_ADC_IRQHandler+0xf6>
 8003430:	f015 0f10 	tst.w	r5, #16
 8003434:	d014      	beq.n	8003460 <HAL_ADC_IRQHandler+0xf6>
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003436:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003438:	b123      	cbz	r3, 8003444 <HAL_ADC_IRQHandler+0xda>
      if (LL_ADC_REG_GetDMATransfer(hadc->Instance) != LL_ADC_REG_DMA_TRANSFER_NONE)
 800343a:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)(READ_BIT(ADCx->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG));
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	f013 0f03 	tst.w	r3, #3
 8003442:	d00a      	beq.n	800345a <HAL_ADC_IRQHandler+0xf0>
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003444:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003446:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800344a:	65a3      	str	r3, [r4, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800344c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800344e:	f043 0302 	orr.w	r3, r3, #2
 8003452:	65e3      	str	r3, [r4, #92]	; 0x5c
      HAL_ADC_ErrorCallback(hadc);
 8003454:	4620      	mov	r0, r4
 8003456:	f7ff ff87 	bl	8003368 <HAL_ADC_ErrorCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800345a:	6823      	ldr	r3, [r4, #0]
 800345c:	2210      	movs	r2, #16
 800345e:	601a      	str	r2, [r3, #0]
  if (((tmp_isr & ADC_FLAG_CCRDY) == ADC_FLAG_CCRDY) && ((tmp_ier & ADC_IT_CCRDY) == ADC_IT_CCRDY))
 8003460:	f416 5f00 	tst.w	r6, #8192	; 0x2000
 8003464:	d002      	beq.n	800346c <HAL_ADC_IRQHandler+0x102>
 8003466:	f415 5f00 	tst.w	r5, #8192	; 0x2000
 800346a:	d12c      	bne.n	80034c6 <HAL_ADC_IRQHandler+0x15c>
}
 800346c:	bd70      	pop	{r4, r5, r6, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800346e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003470:	f043 0320 	orr.w	r3, r3, #32
 8003474:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003476:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003478:	f043 0301 	orr.w	r3, r3, #1
 800347c:	65e3      	str	r3, [r4, #92]	; 0x5c
 800347e:	e7bc      	b.n	80033fa <HAL_ADC_IRQHandler+0x90>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003480:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003482:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003486:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003488:	4620      	mov	r0, r4
 800348a:	f7ff ff6c 	bl	8003366 <HAL_ADC_LevelOutOfWindowCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800348e:	6823      	ldr	r3, [r4, #0]
 8003490:	2280      	movs	r2, #128	; 0x80
 8003492:	601a      	str	r2, [r3, #0]
 8003494:	e7bd      	b.n	8003412 <HAL_ADC_IRQHandler+0xa8>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003496:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003498:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800349c:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800349e:	4620      	mov	r0, r4
 80034a0:	f000 fb79 	bl	8003b96 <HAL_ADCEx_LevelOutOfWindow2Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80034a4:	6823      	ldr	r3, [r4, #0]
 80034a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	e7b7      	b.n	800341e <HAL_ADC_IRQHandler+0xb4>
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80034ae:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80034b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80034b4:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80034b6:	4620      	mov	r0, r4
 80034b8:	f000 fb6e 	bl	8003b98 <HAL_ADCEx_LevelOutOfWindow3Callback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80034bc:	6823      	ldr	r3, [r4, #0]
 80034be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	e7b1      	b.n	800342a <HAL_ADC_IRQHandler+0xc0>
    HAL_ADCEx_ChannelConfigReadyCallback(hadc);
 80034c6:	4620      	mov	r0, r4
 80034c8:	f000 fb68 	bl	8003b9c <HAL_ADCEx_ChannelConfigReadyCallback>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_CCRDY);
 80034cc:	6823      	ldr	r3, [r4, #0]
 80034ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80034d2:	601a      	str	r2, [r3, #0]
}
 80034d4:	e7ca      	b.n	800346c <HAL_ADC_IRQHandler+0x102>
	...

080034d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80034d8:	b470      	push	{r4, r5, r6}
 80034da:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80034dc:	2200      	movs	r2, #0
 80034de:	9201      	str	r2, [sp, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80034e0:	6904      	ldr	r4, [r0, #16]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80034e2:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
 80034e6:	2a01      	cmp	r2, #1
 80034e8:	f000 8105 	beq.w	80036f6 <HAL_ADC_ConfigChannel+0x21e>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2201      	movs	r2, #1
 80034f0:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80034f4:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80034f6:	6890      	ldr	r0, [r2, #8]
 80034f8:	f010 0f04 	tst.w	r0, #4
 80034fc:	d00a      	beq.n	8003514 <HAL_ADC_ConfigChannel+0x3c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80034fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003500:	f042 0220 	orr.w	r2, r2, #32
 8003504:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003506:	2001      	movs	r0, #1
  }

  __HAL_UNLOCK(hadc);
 8003508:	2200      	movs	r2, #0
 800350a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return tmp_hal_status;
}
 800350e:	b003      	add	sp, #12
 8003510:	bc70      	pop	{r4, r5, r6}
 8003512:	4770      	bx	lr
    if (pConfig->Rank != ADC_RANK_NONE)
 8003514:	6848      	ldr	r0, [r1, #4]
 8003516:	2802      	cmp	r0, #2
 8003518:	f000 809e 	beq.w	8003658 <HAL_ADC_ConfigChannel+0x180>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800351c:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8003520:	d029      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x9e>
 8003522:	4d76      	ldr	r5, [pc, #472]	; (80036fc <HAL_ADC_ConfigChannel+0x224>)
 8003524:	42ac      	cmp	r4, r5
 8003526:	d026      	beq.n	8003576 <HAL_ADC_ConfigChannel+0x9e>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003528:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800352a:	f000 001f 	and.w	r0, r0, #31
 800352e:	250f      	movs	r5, #15
 8003530:	4085      	lsls	r5, r0
 8003532:	ea24 0505 	bic.w	r5, r4, r5
 8003536:	680c      	ldr	r4, [r1, #0]
 8003538:	f3c4 0611 	ubfx	r6, r4, #0, #18
 800353c:	2e00      	cmp	r6, #0
 800353e:	d133      	bne.n	80035a8 <HAL_ADC_ConfigChannel+0xd0>
 8003540:	f3c4 6484 	ubfx	r4, r4, #26, #5
 8003544:	fa04 f000 	lsl.w	r0, r4, r0
 8003548:	4328      	orrs	r0, r5
 800354a:	6618      	str	r0, [r3, #96]	; 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800354c:	684c      	ldr	r4, [r1, #4]
 800354e:	08a0      	lsrs	r0, r4, #2
 8003550:	3001      	adds	r0, #1
 8003552:	69dd      	ldr	r5, [r3, #28]
 8003554:	42a8      	cmp	r0, r5
 8003556:	d814      	bhi.n	8003582 <HAL_ADC_ConfigChannel+0xaa>
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003558:	680d      	ldr	r5, [r1, #0]
  MODIFY_REG(ADCx->CHSELR,
 800355a:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800355c:	f004 041f 	and.w	r4, r4, #31
 8003560:	260f      	movs	r6, #15
 8003562:	40a6      	lsls	r6, r4
 8003564:	ea20 0006 	bic.w	r0, r0, r6
 8003568:	f3c5 6583 	ubfx	r5, r5, #26, #4
 800356c:	fa05 f404 	lsl.w	r4, r5, r4
 8003570:	4304      	orrs	r4, r0
 8003572:	6294      	str	r4, [r2, #40]	; 0x28
}
 8003574:	e005      	b.n	8003582 <HAL_ADC_ConfigChannel+0xaa>
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003576:	680c      	ldr	r4, [r1, #0]
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003578:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800357a:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800357e:	4320      	orrs	r0, r4
 8003580:	6290      	str	r0, [r2, #40]	; 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003582:	681c      	ldr	r4, [r3, #0]
 8003584:	680d      	ldr	r5, [r1, #0]
 8003586:	688a      	ldr	r2, [r1, #8]
  MODIFY_REG(ADCx->SMPR,
 8003588:	6960      	ldr	r0, [r4, #20]
 800358a:	ea20 2005 	bic.w	r0, r0, r5, lsl #8
 800358e:	ea02 2205 	and.w	r2, r2, r5, lsl #8
 8003592:	f022 427c 	bic.w	r2, r2, #4227858432	; 0xfc000000
 8003596:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800359a:	4302      	orrs	r2, r0
 800359c:	6162      	str	r2, [r4, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800359e:	680a      	ldr	r2, [r1, #0]
 80035a0:	2a00      	cmp	r2, #0
 80035a2:	db09      	blt.n	80035b8 <HAL_ADC_ConfigChannel+0xe0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a4:	2000      	movs	r0, #0
 80035a6:	e7af      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a8:	fa94 f4a4 	rbit	r4, r4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80035ac:	b114      	cbz	r4, 80035b4 <HAL_ADC_ConfigChannel+0xdc>
  {
    return 32U;
  }
  return __builtin_clz(value);
 80035ae:	fab4 f484 	clz	r4, r4
 80035b2:	e7c7      	b.n	8003544 <HAL_ADC_ConfigChannel+0x6c>
    return 32U;
 80035b4:	2420      	movs	r4, #32
 80035b6:	e7c5      	b.n	8003544 <HAL_ADC_ConfigChannel+0x6c>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80035b8:	4951      	ldr	r1, [pc, #324]	; (8003700 <HAL_ADC_ConfigChannel+0x228>)
 80035ba:	f8d1 0708 	ldr.w	r0, [r1, #1800]	; 0x708
 80035be:	f000 71e0 	and.w	r1, r0, #29360128	; 0x1c00000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035c2:	4c50      	ldr	r4, [pc, #320]	; (8003704 <HAL_ADC_ConfigChannel+0x22c>)
 80035c4:	42a2      	cmp	r2, r4
 80035c6:	d007      	beq.n	80035d8 <HAL_ADC_ConfigChannel+0x100>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035c8:	4c4f      	ldr	r4, [pc, #316]	; (8003708 <HAL_ADC_ConfigChannel+0x230>)
 80035ca:	42a2      	cmp	r2, r4
 80035cc:	d026      	beq.n	800361c <HAL_ADC_ConfigChannel+0x144>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80035ce:	4c4f      	ldr	r4, [pc, #316]	; (800370c <HAL_ADC_ConfigChannel+0x234>)
 80035d0:	42a2      	cmp	r2, r4
 80035d2:	d032      	beq.n	800363a <HAL_ADC_ConfigChannel+0x162>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035d4:	2000      	movs	r0, #0
 80035d6:	e797      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80035d8:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80035dc:	d1f4      	bne.n	80035c8 <HAL_ADC_ConfigChannel+0xf0>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035de:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80035e2:	4847      	ldr	r0, [pc, #284]	; (8003700 <HAL_ADC_ConfigChannel+0x228>)
 80035e4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80035e8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80035ec:	4311      	orrs	r1, r2
 80035ee:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f2:	4a47      	ldr	r2, [pc, #284]	; (8003710 <HAL_ADC_ConfigChannel+0x238>)
 80035f4:	6812      	ldr	r2, [r2, #0]
 80035f6:	0992      	lsrs	r2, r2, #6
 80035f8:	4946      	ldr	r1, [pc, #280]	; (8003714 <HAL_ADC_ConfigChannel+0x23c>)
 80035fa:	fba1 1202 	umull	r1, r2, r1, r2
 80035fe:	0992      	lsrs	r2, r2, #6
 8003600:	3201      	adds	r2, #1
 8003602:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003606:	0092      	lsls	r2, r2, #2
 8003608:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 800360a:	e002      	b.n	8003612 <HAL_ADC_ConfigChannel+0x13a>
            wait_loop_index--;
 800360c:	9a01      	ldr	r2, [sp, #4]
 800360e:	3a01      	subs	r2, #1
 8003610:	9201      	str	r2, [sp, #4]
          while (wait_loop_index != 0UL)
 8003612:	9a01      	ldr	r2, [sp, #4]
 8003614:	2a00      	cmp	r2, #0
 8003616:	d1f9      	bne.n	800360c <HAL_ADC_ConfigChannel+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003618:	2000      	movs	r0, #0
 800361a:	e775      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800361c:	f010 7f80 	tst.w	r0, #16777216	; 0x1000000
 8003620:	d1d5      	bne.n	80035ce <HAL_ADC_ConfigChannel+0xf6>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003622:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8003626:	4836      	ldr	r0, [pc, #216]	; (8003700 <HAL_ADC_ConfigChannel+0x228>)
 8003628:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 800362c:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 8003630:	4311      	orrs	r1, r2
 8003632:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003636:	2000      	movs	r0, #0
}
 8003638:	e766      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800363a:	f410 0f80 	tst.w	r0, #4194304	; 0x400000
 800363e:	d158      	bne.n	80036f2 <HAL_ADC_ConfigChannel+0x21a>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003640:	f441 0280 	orr.w	r2, r1, #4194304	; 0x400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003644:	482e      	ldr	r0, [pc, #184]	; (8003700 <HAL_ADC_ConfigChannel+0x228>)
 8003646:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 800364a:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 800364e:	430a      	orrs	r2, r1
 8003650:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003654:	2000      	movs	r0, #0
}
 8003656:	e757      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003658:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 800365c:	d002      	beq.n	8003664 <HAL_ADC_ConfigChannel+0x18c>
 800365e:	4827      	ldr	r0, [pc, #156]	; (80036fc <HAL_ADC_ConfigChannel+0x224>)
 8003660:	4284      	cmp	r4, r0
 8003662:	d106      	bne.n	8003672 <HAL_ADC_ConfigChannel+0x19a>
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003664:	680c      	ldr	r4, [r1, #0]
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8003666:	6a90      	ldr	r0, [r2, #40]	; 0x28
 8003668:	f3c4 0411 	ubfx	r4, r4, #0, #18
 800366c:	ea20 0004 	bic.w	r0, r0, r4
 8003670:	6290      	str	r0, [r2, #40]	; 0x28
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003672:	680a      	ldr	r2, [r1, #0]
 8003674:	2a00      	cmp	r2, #0
 8003676:	db01      	blt.n	800367c <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003678:	2000      	movs	r0, #0
 800367a:	e745      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800367c:	4920      	ldr	r1, [pc, #128]	; (8003700 <HAL_ADC_ConfigChannel+0x228>)
 800367e:	f8d1 1708 	ldr.w	r1, [r1, #1800]	; 0x708
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003682:	4820      	ldr	r0, [pc, #128]	; (8003704 <HAL_ADC_ConfigChannel+0x22c>)
 8003684:	4282      	cmp	r2, r0
 8003686:	d007      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x1c0>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003688:	481f      	ldr	r0, [pc, #124]	; (8003708 <HAL_ADC_ConfigChannel+0x230>)
 800368a:	4282      	cmp	r2, r0
 800368c:	d013      	beq.n	80036b6 <HAL_ADC_ConfigChannel+0x1de>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800368e:	481f      	ldr	r0, [pc, #124]	; (800370c <HAL_ADC_ConfigChannel+0x234>)
 8003690:	4282      	cmp	r2, r0
 8003692:	d01f      	beq.n	80036d4 <HAL_ADC_ConfigChannel+0x1fc>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003694:	2000      	movs	r0, #0
 8003696:	e737      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003698:	f001 71a0 	and.w	r1, r1, #20971520	; 0x1400000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800369c:	f100 4010 	add.w	r0, r0, #2415919104	; 0x90000000
 80036a0:	f500 3088 	add.w	r0, r0, #69632	; 0x11000
 80036a4:	f8d0 2708 	ldr.w	r2, [r0, #1800]	; 0x708
 80036a8:	f022 72e0 	bic.w	r2, r2, #29360128	; 0x1c00000
 80036ac:	4311      	orrs	r1, r2
 80036ae:	f8c0 1708 	str.w	r1, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036b2:	2000      	movs	r0, #0
}
 80036b4:	e728      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036b6:	f401 0240 	and.w	r2, r1, #12582912	; 0xc00000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036ba:	f100 4008 	add.w	r0, r0, #2281701376	; 0x88000000
 80036be:	f500 4060 	add.w	r0, r0, #57344	; 0xe000
 80036c2:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80036c6:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80036ca:	430a      	orrs	r2, r1
 80036cc:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036d0:	2000      	movs	r0, #0
}
 80036d2:	e719      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80036d4:	f001 72c0 	and.w	r2, r1, #25165824	; 0x1800000
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80036d8:	f100 400c 	add.w	r0, r0, #2348810240	; 0x8c000000
 80036dc:	f500 3080 	add.w	r0, r0, #65536	; 0x10000
 80036e0:	f8d0 1708 	ldr.w	r1, [r0, #1800]	; 0x708
 80036e4:	f021 71e0 	bic.w	r1, r1, #29360128	; 0x1c00000
 80036e8:	430a      	orrs	r2, r1
 80036ea:	f8c0 2708 	str.w	r2, [r0, #1800]	; 0x708
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ee:	2000      	movs	r0, #0
}
 80036f0:	e70a      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
 80036f2:	2000      	movs	r0, #0
 80036f4:	e708      	b.n	8003508 <HAL_ADC_ConfigChannel+0x30>
  __HAL_LOCK(hadc);
 80036f6:	2002      	movs	r0, #2
 80036f8:	e709      	b.n	800350e <HAL_ADC_ConfigChannel+0x36>
 80036fa:	bf00      	nop
 80036fc:	80000004 	.word	0x80000004
 8003700:	40012000 	.word	0x40012000
 8003704:	b0001000 	.word	0xb0001000
 8003708:	b8004000 	.word	0xb8004000
 800370c:	b4002000 	.word	0xb4002000
 8003710:	20000078 	.word	0x20000078
 8003714:	053e2d63 	.word	0x053e2d63

08003718 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003718:	b538      	push	{r3, r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800371a:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	f012 0f04 	tst.w	r2, #4
 8003722:	d02a      	beq.n	800377a <ADC_ConversionStop+0x62>
 8003724:	4604      	mov	r4, r0
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	f012 0f02 	tst.w	r2, #2
 800372c:	d107      	bne.n	800373e <ADC_ConversionStop+0x26>
  MODIFY_REG(ADCx->CR,
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003734:	f022 0217 	bic.w	r2, r2, #23
 8003738:	f042 0210 	orr.w	r2, r2, #16
 800373c:	609a      	str	r2, [r3, #8]
      LL_ADC_REG_StopConversion(hadc->Instance);
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800373e:	f7fe fa91 	bl	8001c64 <HAL_GetTick>
 8003742:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	689b      	ldr	r3, [r3, #8]
 8003748:	f013 0f04 	tst.w	r3, #4
 800374c:	d013      	beq.n	8003776 <ADC_ConversionStop+0x5e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800374e:	f7fe fa89 	bl	8001c64 <HAL_GetTick>
 8003752:	1b43      	subs	r3, r0, r5
 8003754:	2b02      	cmp	r3, #2
 8003756:	d9f5      	bls.n	8003744 <ADC_ConversionStop+0x2c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f013 0f04 	tst.w	r3, #4
 8003760:	d0f0      	beq.n	8003744 <ADC_ConversionStop+0x2c>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003762:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003764:	f043 0310 	orr.w	r3, r3, #16
 8003768:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800376a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800376c:	f043 0301 	orr.w	r3, r3, #1
 8003770:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003772:	2001      	movs	r0, #1
 8003774:	e002      	b.n	800377c <ADC_ConversionStop+0x64>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003776:	2000      	movs	r0, #0
 8003778:	e000      	b.n	800377c <ADC_ConversionStop+0x64>
 800377a:	2000      	movs	r0, #0
}
 800377c:	bd38      	pop	{r3, r4, r5, pc}
	...

08003780 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003780:	b530      	push	{r4, r5, lr}
 8003782:	b083      	sub	sp, #12
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003784:	2300      	movs	r3, #0
 8003786:	9301      	str	r3, [sp, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003788:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	f012 0f01 	tst.w	r2, #1
 8003790:	d15b      	bne.n	800384a <ADC_Enable+0xca>
 8003792:	4604      	mov	r4, r0
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003794:	6899      	ldr	r1, [r3, #8]
 8003796:	4a2e      	ldr	r2, [pc, #184]	; (8003850 <ADC_Enable+0xd0>)
 8003798:	4211      	tst	r1, r2
 800379a:	d117      	bne.n	80037cc <ADC_Enable+0x4c>
  MODIFY_REG(ADCx->CR,
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80037a2:	f022 0217 	bic.w	r2, r2, #23
 80037a6:	f042 0201 	orr.w	r2, r2, #1
 80037aa:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80037ac:	4b29      	ldr	r3, [pc, #164]	; (8003854 <ADC_Enable+0xd4>)
 80037ae:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) 
 80037b2:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 80037b6:	d019      	beq.n	80037ec <ADC_Enable+0x6c>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80037b8:	4b27      	ldr	r3, [pc, #156]	; (8003858 <ADC_Enable+0xd8>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	099b      	lsrs	r3, r3, #6
 80037be:	4a27      	ldr	r2, [pc, #156]	; (800385c <ADC_Enable+0xdc>)
 80037c0:	fba2 2303 	umull	r2, r3, r2, r3
 80037c4:	099b      	lsrs	r3, r3, #6
 80037c6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) 
 80037c8:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80037ca:	e00c      	b.n	80037e6 <ADC_Enable+0x66>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037cc:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80037ce:	f043 0310 	orr.w	r3, r3, #16
 80037d2:	6583      	str	r3, [r0, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d4:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
 80037d6:	f043 0301 	orr.w	r3, r3, #1
 80037da:	65c3      	str	r3, [r0, #92]	; 0x5c
      return HAL_ERROR;
 80037dc:	2001      	movs	r0, #1
 80037de:	e035      	b.n	800384c <ADC_Enable+0xcc>
      {
        wait_loop_index--;
 80037e0:	9b01      	ldr	r3, [sp, #4]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 80037e6:	9b01      	ldr	r3, [sp, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d1f9      	bne.n	80037e0 <ADC_Enable+0x60>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80037ec:	7e63      	ldrb	r3, [r4, #25]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d101      	bne.n	80037f6 <ADC_Enable+0x76>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037f2:	2000      	movs	r0, #0
 80037f4:	e02a      	b.n	800384c <ADC_Enable+0xcc>
      tickstart = HAL_GetTick();
 80037f6:	f7fe fa35 	bl	8001c64 <HAL_GetTick>
 80037fa:	4605      	mov	r5, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037fc:	6823      	ldr	r3, [r4, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	f012 0f01 	tst.w	r2, #1
 8003804:	d11f      	bne.n	8003846 <ADC_Enable+0xc6>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003806:	689a      	ldr	r2, [r3, #8]
 8003808:	f012 0f01 	tst.w	r2, #1
 800380c:	d107      	bne.n	800381e <ADC_Enable+0x9e>
  MODIFY_REG(ADCx->CR,
 800380e:	689a      	ldr	r2, [r3, #8]
 8003810:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003814:	f022 0217 	bic.w	r2, r2, #23
 8003818:	f042 0201 	orr.w	r2, r2, #1
 800381c:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800381e:	f7fe fa21 	bl	8001c64 <HAL_GetTick>
 8003822:	1b40      	subs	r0, r0, r5
 8003824:	2802      	cmp	r0, #2
 8003826:	d9e9      	bls.n	80037fc <ADC_Enable+0x7c>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003828:	6823      	ldr	r3, [r4, #0]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f013 0f01 	tst.w	r3, #1
 8003830:	d1e4      	bne.n	80037fc <ADC_Enable+0x7c>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003832:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003834:	f043 0310 	orr.w	r3, r3, #16
 8003838:	65a3      	str	r3, [r4, #88]	; 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800383a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	65e3      	str	r3, [r4, #92]	; 0x5c
            return HAL_ERROR;
 8003842:	2001      	movs	r0, #1
 8003844:	e002      	b.n	800384c <ADC_Enable+0xcc>
  return HAL_OK;
 8003846:	2000      	movs	r0, #0
 8003848:	e000      	b.n	800384c <ADC_Enable+0xcc>
 800384a:	2000      	movs	r0, #0
}
 800384c:	b003      	add	sp, #12
 800384e:	bd30      	pop	{r4, r5, pc}
 8003850:	80000017 	.word	0x80000017
 8003854:	40012000 	.word	0x40012000
 8003858:	20000078 	.word	0x20000078
 800385c:	053e2d63 	.word	0x053e2d63

08003860 <HAL_ADC_Start>:
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003860:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	f013 0f04 	tst.w	r3, #4
 8003868:	d128      	bne.n	80038bc <HAL_ADC_Start+0x5c>
{
 800386a:	b510      	push	{r4, lr}
 800386c:	4604      	mov	r4, r0
    __HAL_LOCK(hadc);
 800386e:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003872:	2b01      	cmp	r3, #1
 8003874:	d024      	beq.n	80038c0 <HAL_ADC_Start+0x60>
 8003876:	2301      	movs	r3, #1
 8003878:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
    tmp_hal_status = ADC_Enable(hadc);
 800387c:	f7ff ff80 	bl	8003780 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8003880:	b9c0      	cbnz	r0, 80038b4 <HAL_ADC_Start+0x54>
      ADC_STATE_CLR_SET(hadc->State,
 8003882:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003888:	f023 0301 	bic.w	r3, r3, #1
 800388c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003890:	65a3      	str	r3, [r4, #88]	; 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8003892:	2300      	movs	r3, #0
 8003894:	65e3      	str	r3, [r4, #92]	; 0x5c
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003896:	6822      	ldr	r2, [r4, #0]
 8003898:	211c      	movs	r1, #28
 800389a:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 800389c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
      LL_ADC_REG_StartConversion(hadc->Instance);
 80038a0:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 80038a2:	6893      	ldr	r3, [r2, #8]
 80038a4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80038a8:	f023 0317 	bic.w	r3, r3, #23
 80038ac:	f043 0304 	orr.w	r3, r3, #4
 80038b0:	6093      	str	r3, [r2, #8]
}
 80038b2:	bd10      	pop	{r4, pc}
      __HAL_UNLOCK(hadc);
 80038b4:	2300      	movs	r3, #0
 80038b6:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
 80038ba:	e7fa      	b.n	80038b2 <HAL_ADC_Start+0x52>
    tmp_hal_status = HAL_BUSY;
 80038bc:	2002      	movs	r0, #2
}
 80038be:	4770      	bx	lr
    __HAL_LOCK(hadc);
 80038c0:	2002      	movs	r0, #2
 80038c2:	e7f6      	b.n	80038b2 <HAL_ADC_Start+0x52>

080038c4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80038c4:	b538      	push	{r3, r4, r5, lr}
 80038c6:	4604      	mov	r4, r0
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80038c8:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 80038ca:	6893      	ldr	r3, [r2, #8]
 80038cc:	f013 0302 	ands.w	r3, r3, #2
 80038d0:	d000      	beq.n	80038d4 <ADC_Disable+0x10>
 80038d2:	2301      	movs	r3, #1
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80038d4:	6891      	ldr	r1, [r2, #8]
 80038d6:	f011 0f01 	tst.w	r1, #1
 80038da:	d039      	beq.n	8003950 <ADC_Disable+0x8c>

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
      && (tmp_adc_is_disable_on_going == 0UL)
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d139      	bne.n	8003954 <ADC_Disable+0x90>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80038e0:	6893      	ldr	r3, [r2, #8]
 80038e2:	f003 0305 	and.w	r3, r3, #5
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d009      	beq.n	80038fe <ADC_Disable+0x3a>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80038ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038ec:	f043 0310 	orr.w	r3, r3, #16
 80038f0:	65a3      	str	r3, [r4, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038f2:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 80038f4:	f043 0301 	orr.w	r3, r3, #1
 80038f8:	65e3      	str	r3, [r4, #92]	; 0x5c

      return HAL_ERROR;
 80038fa:	2001      	movs	r0, #1
 80038fc:	e029      	b.n	8003952 <ADC_Disable+0x8e>
  MODIFY_REG(ADCx->CR,
 80038fe:	6893      	ldr	r3, [r2, #8]
 8003900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003904:	f023 0317 	bic.w	r3, r3, #23
 8003908:	f043 0302 	orr.w	r3, r3, #2
 800390c:	6093      	str	r3, [r2, #8]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800390e:	6823      	ldr	r3, [r4, #0]
 8003910:	2203      	movs	r2, #3
 8003912:	601a      	str	r2, [r3, #0]
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003914:	f7fe f9a6 	bl	8001c64 <HAL_GetTick>
 8003918:	4605      	mov	r5, r0

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800391a:	6823      	ldr	r3, [r4, #0]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f013 0f01 	tst.w	r3, #1
 8003922:	d013      	beq.n	800394c <ADC_Disable+0x88>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003924:	f7fe f99e 	bl	8001c64 <HAL_GetTick>
 8003928:	1b40      	subs	r0, r0, r5
 800392a:	2802      	cmp	r0, #2
 800392c:	d9f5      	bls.n	800391a <ADC_Disable+0x56>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800392e:	6823      	ldr	r3, [r4, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f013 0f01 	tst.w	r3, #1
 8003936:	d0f0      	beq.n	800391a <ADC_Disable+0x56>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003938:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800393a:	f043 0310 	orr.w	r3, r3, #16
 800393e:	65a3      	str	r3, [r4, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003940:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	65e3      	str	r3, [r4, #92]	; 0x5c

          return HAL_ERROR;
 8003948:	2001      	movs	r0, #1
 800394a:	e002      	b.n	8003952 <ADC_Disable+0x8e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800394c:	2000      	movs	r0, #0
 800394e:	e000      	b.n	8003952 <ADC_Disable+0x8e>
 8003950:	2000      	movs	r0, #0
}
 8003952:	bd38      	pop	{r3, r4, r5, pc}
  return HAL_OK;
 8003954:	2000      	movs	r0, #0
 8003956:	e7fc      	b.n	8003952 <ADC_Disable+0x8e>

08003958 <HAL_ADC_DeInit>:
{
 8003958:	b570      	push	{r4, r5, r6, lr}
  if (hadc == NULL)
 800395a:	2800      	cmp	r0, #0
 800395c:	d056      	beq.n	8003a0c <HAL_ADC_DeInit+0xb4>
 800395e:	4604      	mov	r4, r0
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 8003960:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8003962:	f043 0302 	orr.w	r3, r3, #2
 8003966:	6583      	str	r3, [r0, #88]	; 0x58
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003968:	f7ff fed6 	bl	8003718 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 800396c:	4606      	mov	r6, r0
 800396e:	2800      	cmp	r0, #0
 8003970:	d03d      	beq.n	80039ee <HAL_ADC_DeInit+0x96>
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 8003972:	6822      	ldr	r2, [r4, #0]
 8003974:	6853      	ldr	r3, [r2, #4]
 8003976:	f423 7367 	bic.w	r3, r3, #924	; 0x39c
 800397a:	f023 0303 	bic.w	r3, r3, #3
 800397e:	6053      	str	r3, [r2, #4]
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003980:	6823      	ldr	r3, [r4, #0]
 8003982:	f240 329f 	movw	r2, #927	; 0x39f
 8003986:	601a      	str	r2, [r3, #0]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 8003988:	6822      	ldr	r2, [r4, #0]
 800398a:	68d1      	ldr	r1, [r2, #12]
 800398c:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_ADC_DeInit+0xb8>)
 800398e:	400b      	ands	r3, r1
 8003990:	60d3      	str	r3, [r2, #12]
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 8003992:	6822      	ldr	r2, [r4, #0]
 8003994:	6913      	ldr	r3, [r2, #16]
 8003996:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800399a:	6113      	str	r3, [r2, #16]
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800399c:	6822      	ldr	r2, [r4, #0]
 800399e:	6953      	ldr	r3, [r2, #20]
 80039a0:	f023 0307 	bic.w	r3, r3, #7
 80039a4:	6153      	str	r3, [r2, #20]
  hadc->Instance->AWD1TR &= ~(ADC_AWD1TR_HT1 | ADC_AWD1TR_LT1);
 80039a6:	6822      	ldr	r2, [r4, #0]
 80039a8:	6a13      	ldr	r3, [r2, #32]
 80039aa:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80039ae:	6213      	str	r3, [r2, #32]
  hadc->Instance->AWD2TR &= ~(ADC_AWD2TR_HT2 | ADC_AWD2TR_LT2);
 80039b0:	6822      	ldr	r2, [r4, #0]
 80039b2:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80039b4:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80039b8:	6253      	str	r3, [r2, #36]	; 0x24
  hadc->Instance->AWD3TR &= ~(ADC_AWD3TR_HT3 | ADC_AWD3TR_LT3);
 80039ba:	6822      	ldr	r2, [r4, #0]
 80039bc:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80039be:	f003 23f0 	and.w	r3, r3, #4026593280	; 0xf000f000
 80039c2:	62d3      	str	r3, [r2, #44]	; 0x2c
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 80039c4:	6823      	ldr	r3, [r4, #0]
 80039c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039c8:	2500      	movs	r5, #0
 80039ca:	629d      	str	r5, [r3, #40]	; 0x28
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 80039cc:	4a11      	ldr	r2, [pc, #68]	; (8003a14 <HAL_ADC_DeInit+0xbc>)
 80039ce:	f8d2 3708 	ldr.w	r3, [r2, #1800]	; 0x708
 80039d2:	f023 73fe 	bic.w	r3, r3, #33292288	; 0x1fc0000
 80039d6:	f8c2 3708 	str.w	r3, [r2, #1800]	; 0x708
  HAL_ADC_MspDeInit(hadc);
 80039da:	4620      	mov	r0, r4
 80039dc:	f7fd fb0a 	bl	8000ff4 <HAL_ADC_MspDeInit>
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 80039e0:	6625      	str	r5, [r4, #96]	; 0x60
  ADC_CLEAR_ERRORCODE(hadc);
 80039e2:	65e5      	str	r5, [r4, #92]	; 0x5c
  hadc->State = HAL_ADC_STATE_RESET;
 80039e4:	65a5      	str	r5, [r4, #88]	; 0x58
  __HAL_UNLOCK(hadc);
 80039e6:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
}
 80039ea:	4630      	mov	r0, r6
 80039ec:	bd70      	pop	{r4, r5, r6, pc}
    tmp_hal_status = ADC_Disable(hadc);
 80039ee:	4620      	mov	r0, r4
 80039f0:	f7ff ff68 	bl	80038c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 80039f4:	4606      	mov	r6, r0
 80039f6:	b908      	cbnz	r0, 80039fc <HAL_ADC_DeInit+0xa4>
      hadc->State = HAL_ADC_STATE_READY;
 80039f8:	2301      	movs	r3, #1
 80039fa:	65a3      	str	r3, [r4, #88]	; 0x58
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80039fc:	6822      	ldr	r2, [r4, #0]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 80039fe:	6893      	ldr	r3, [r2, #8]
 8003a00:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8003a04:	f023 0317 	bic.w	r3, r3, #23
 8003a08:	6093      	str	r3, [r2, #8]
}
 8003a0a:	e7b2      	b.n	8003972 <HAL_ADC_DeInit+0x1a>
    return HAL_ERROR;
 8003a0c:	2601      	movs	r6, #1
 8003a0e:	e7ec      	b.n	80039ea <HAL_ADC_DeInit+0x92>
 8003a10:	833e0200 	.word	0x833e0200
 8003a14:	40012000 	.word	0x40012000

08003a18 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 8003a18:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003a1c:	2b01      	cmp	r3, #1
 8003a1e:	d019      	beq.n	8003a54 <HAL_ADC_Stop+0x3c>
{
 8003a20:	b510      	push	{r4, lr}
 8003a22:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8003a24:	2301      	movs	r3, #1
 8003a26:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003a2a:	f7ff fe75 	bl	8003718 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8003a2e:	b118      	cbz	r0, 8003a38 <HAL_ADC_Stop+0x20>
  __HAL_UNLOCK(hadc);
 8003a30:	2300      	movs	r3, #0
 8003a32:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
}
 8003a36:	bd10      	pop	{r4, pc}
    tmp_hal_status = ADC_Disable(hadc);
 8003a38:	4620      	mov	r0, r4
 8003a3a:	f7ff ff43 	bl	80038c4 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8003a3e:	2800      	cmp	r0, #0
 8003a40:	d1f6      	bne.n	8003a30 <HAL_ADC_Stop+0x18>
      ADC_STATE_CLR_SET(hadc->State,
 8003a42:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a48:	f023 0301 	bic.w	r3, r3, #1
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	65a3      	str	r3, [r4, #88]	; 0x58
 8003a52:	e7ed      	b.n	8003a30 <HAL_ADC_Stop+0x18>
  __HAL_LOCK(hadc);
 8003a54:	2002      	movs	r0, #2
}
 8003a56:	4770      	bx	lr

08003a58 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003a58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a5a:	b083      	sub	sp, #12
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	9301      	str	r3, [sp, #4]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 8003a60:	f890 3054 	ldrb.w	r3, [r0, #84]	; 0x54
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	f000 8094 	beq.w	8003b92 <HAL_ADCEx_Calibration_Start+0x13a>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003a72:	f7ff ff27 	bl	80038c4 <ADC_Disable>
 8003a76:	4605      	mov	r5, r0

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a78:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003a7a:	689a      	ldr	r2, [r3, #8]
 8003a7c:	f012 0201 	ands.w	r2, r2, #1
 8003a80:	d009      	beq.n	8003a96 <HAL_ADCEx_Calibration_Start+0x3e>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003a84:	f043 0310 	orr.w	r3, r3, #16
 8003a88:	65a3      	str	r3, [r4, #88]	; 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54

  return tmp_hal_status;
}
 8003a90:	4628      	mov	r0, r5
 8003a92:	b003      	add	sp, #12
 8003a94:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ADC_STATE_CLR_SET(hadc->State,
 8003a96:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8003a98:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8003a9c:	f041 0102 	orr.w	r1, r1, #2
 8003aa0:	65a1      	str	r1, [r4, #88]	; 0x58
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003aa2:	68de      	ldr	r6, [r3, #12]
 8003aa4:	f426 46ff 	bic.w	r6, r6, #32640	; 0x7f80
 8003aa8:	f026 067c 	bic.w	r6, r6, #124	; 0x7c
 8003aac:	0436      	lsls	r6, r6, #16
 8003aae:	0c36      	lsrs	r6, r6, #16
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 8003ab0:	68d9      	ldr	r1, [r3, #12]
 8003ab2:	f421 4100 	bic.w	r1, r1, #32768	; 0x8000
 8003ab6:	f021 0103 	bic.w	r1, r1, #3
 8003aba:	60d9      	str	r1, [r3, #12]
  uint32_t calibration_factor_accumulated = 0;
 8003abc:	4610      	mov	r0, r2
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003abe:	e005      	b.n	8003acc <HAL_ADCEx_Calibration_Start+0x74>
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 8003ac0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003ac8:	4418      	add	r0, r3
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003aca:	3201      	adds	r2, #1
 8003acc:	2a07      	cmp	r2, #7
 8003ace:	d81e      	bhi.n	8003b0e <HAL_ADCEx_Calibration_Start+0xb6>
      LL_ADC_StartCalibration(hadc->Instance);
 8003ad0:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003ad2:	688b      	ldr	r3, [r1, #8]
 8003ad4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ad8:	f023 0317 	bic.w	r3, r3, #23
 8003adc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003ae0:	608b      	str	r3, [r1, #8]
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003ae2:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ae4:	6899      	ldr	r1, [r3, #8]
 8003ae6:	2900      	cmp	r1, #0
 8003ae8:	daea      	bge.n	8003ac0 <HAL_ADCEx_Calibration_Start+0x68>
        wait_loop_index++;
 8003aea:	9b01      	ldr	r3, [sp, #4]
 8003aec:	3301      	adds	r3, #1
 8003aee:	9301      	str	r3, [sp, #4]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003af0:	9b01      	ldr	r3, [sp, #4]
 8003af2:	f5b3 3f2e 	cmp.w	r3, #178176	; 0x2b800
 8003af6:	d3f4      	bcc.n	8003ae2 <HAL_ADCEx_Calibration_Start+0x8a>
          ADC_STATE_CLR_SET(hadc->State,
 8003af8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003afa:	f023 0312 	bic.w	r3, r3, #18
 8003afe:	f043 0310 	orr.w	r3, r3, #16
 8003b02:	65a3      	str	r3, [r4, #88]	; 0x58
          __HAL_UNLOCK(hadc);
 8003b04:	2300      	movs	r3, #0
 8003b06:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          return HAL_ERROR;
 8003b0a:	2501      	movs	r5, #1
 8003b0c:	e7c0      	b.n	8003a90 <HAL_ADCEx_Calibration_Start+0x38>
    calibration_factor_accumulated /= calibration_index;
 8003b0e:	fbb0 f2f2 	udiv	r2, r0, r2
    LL_ADC_Enable(hadc->Instance);
 8003b12:	6821      	ldr	r1, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b14:	688b      	ldr	r3, [r1, #8]
 8003b16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b1a:	f023 0317 	bic.w	r3, r3, #23
 8003b1e:	f043 0301 	orr.w	r3, r3, #1
 8003b22:	608b      	str	r3, [r1, #8]
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003b24:	6823      	ldr	r3, [r4, #0]
  MODIFY_REG(ADCx->CALFACT,
 8003b26:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
 8003b2a:	f020 007f 	bic.w	r0, r0, #127	; 0x7f
 8003b2e:	4302      	orrs	r2, r0
 8003b30:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    LL_ADC_Disable(hadc->Instance);
 8003b34:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8003b36:	6893      	ldr	r3, [r2, #8]
 8003b38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f023 0317 	bic.w	r3, r3, #23
 8003b40:	f043 0302 	orr.w	r3, r3, #2
 8003b44:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8003b46:	f7fe f88d 	bl	8001c64 <HAL_GetTick>
 8003b4a:	4607      	mov	r7, r0
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b4c:	6823      	ldr	r3, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003b4e:	689a      	ldr	r2, [r3, #8]
 8003b50:	f012 0f01 	tst.w	r2, #1
 8003b54:	d109      	bne.n	8003b6a <HAL_ADCEx_Calibration_Start+0x112>
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003b56:	68da      	ldr	r2, [r3, #12]
 8003b58:	4316      	orrs	r6, r2
 8003b5a:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 8003b5c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b5e:	f023 0303 	bic.w	r3, r3, #3
 8003b62:	f043 0301 	orr.w	r3, r3, #1
 8003b66:	65a3      	str	r3, [r4, #88]	; 0x58
 8003b68:	e78f      	b.n	8003a8a <HAL_ADCEx_Calibration_Start+0x32>
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003b6a:	f7fe f87b 	bl	8001c64 <HAL_GetTick>
 8003b6e:	1bc3      	subs	r3, r0, r7
 8003b70:	2b02      	cmp	r3, #2
 8003b72:	d9eb      	bls.n	8003b4c <HAL_ADCEx_Calibration_Start+0xf4>
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	689b      	ldr	r3, [r3, #8]
 8003b78:	f013 0f01 	tst.w	r3, #1
 8003b7c:	d0e6      	beq.n	8003b4c <HAL_ADCEx_Calibration_Start+0xf4>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8003b80:	f043 0310 	orr.w	r3, r3, #16
 8003b84:	65a3      	str	r3, [r4, #88]	; 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b86:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003b88:	f043 0301 	orr.w	r3, r3, #1
 8003b8c:	65e3      	str	r3, [r4, #92]	; 0x5c
          return HAL_ERROR;
 8003b8e:	2501      	movs	r5, #1
 8003b90:	e77e      	b.n	8003a90 <HAL_ADCEx_Calibration_Start+0x38>
  __HAL_LOCK(hadc);
 8003b92:	2502      	movs	r5, #2
 8003b94:	e77c      	b.n	8003a90 <HAL_ADCEx_Calibration_Start+0x38>

08003b96 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003b96:	4770      	bx	lr

08003b98 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8003b98:	4770      	bx	lr

08003b9a <HAL_ADCEx_EndOfSamplingCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003b9a:	4770      	bx	lr

08003b9c <HAL_ADCEx_ChannelConfigReadyCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_ChannelConfigReadyCallback must be implemented in the user file.
  */
}
 8003b9c:	4770      	bx	lr
	...

08003ba0 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003ba0:	b530      	push	{r4, r5, lr}
 8003ba2:	b083      	sub	sp, #12
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003ba4:	2300      	movs	r3, #0
 8003ba6:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003ba8:	2800      	cmp	r0, #0
 8003baa:	f000 80b4 	beq.w	8003d16 <HAL_COMP_Init+0x176>
 8003bae:	4604      	mov	r4, r0
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003bb0:	6803      	ldr	r3, [r0, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	f2c0 80b1 	blt.w	8003d1c <HAL_COMP_Init+0x17c>
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003bba:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d031      	beq.n	8003c26 <HAL_COMP_Init+0x86>
      HAL_COMP_MspInit(hcomp);
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003bc2:	6821      	ldr	r1, [r4, #0]
 8003bc4:	6808      	ldr	r0, [r1, #0]
 8003bc6:	f400 0000 	and.w	r0, r0, #8388608	; 0x800000

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003bca:	6923      	ldr	r3, [r4, #16]
               | hcomp->Init.InputPlus
 8003bcc:	68e2      	ldr	r2, [r4, #12]
 8003bce:	4313      	orrs	r3, r2
               | hcomp->Init.BlankingSrce
 8003bd0:	69e2      	ldr	r2, [r4, #28]
 8003bd2:	4313      	orrs	r3, r2
               | hcomp->Init.Hysteresis
 8003bd4:	6962      	ldr	r2, [r4, #20]
 8003bd6:	4313      	orrs	r3, r2
               | hcomp->Init.OutputPol
 8003bd8:	69a2      	ldr	r2, [r4, #24]
 8003bda:	4313      	orrs	r3, r2
               | hcomp->Init.Mode
 8003bdc:	68a2      	ldr	r2, [r4, #8]
    tmp_csr = (  hcomp->Init.InputMinus
 8003bde:	4313      	orrs	r3, r2
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003be0:	680d      	ldr	r5, [r1, #0]
 8003be2:	4a50      	ldr	r2, [pc, #320]	; (8003d24 <HAL_COMP_Init+0x184>)
 8003be4:	402a      	ands	r2, r5
 8003be6:	4313      	orrs	r3, r2
 8003be8:	600b      	str	r3, [r1, #0]

    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 8003bea:	6863      	ldr	r3, [r4, #4]
 8003bec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bf0:	d01f      	beq.n	8003c32 <HAL_COMP_Init+0x92>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003bf2:	4a4d      	ldr	r2, [pc, #308]	; (8003d28 <HAL_COMP_Init+0x188>)
 8003bf4:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8003bf8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bfc:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    }

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003c00:	6822      	ldr	r2, [r4, #0]
 8003c02:	6813      	ldr	r3, [r2, #0]
 8003c04:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8003c08:	d021      	beq.n	8003c4e <HAL_COMP_Init+0xae>
 8003c0a:	bb00      	cbnz	r0, 8003c4e <HAL_COMP_Init+0xae>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c0c:	4b47      	ldr	r3, [pc, #284]	; (8003d2c <HAL_COMP_Init+0x18c>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	099b      	lsrs	r3, r3, #6
 8003c12:	4947      	ldr	r1, [pc, #284]	; (8003d30 <HAL_COMP_Init+0x190>)
 8003c14:	fba1 1303 	umull	r1, r3, r1, r3
 8003c18:	099b      	lsrs	r3, r3, #6
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003c24:	e010      	b.n	8003c48 <HAL_COMP_Init+0xa8>
      hcomp->Lock = HAL_UNLOCKED;
 8003c26:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      COMP_CLEAR_ERRORCODE(hcomp);
 8003c2a:	6283      	str	r3, [r0, #40]	; 0x28
      HAL_COMP_MspInit(hcomp);
 8003c2c:	f7fd face 	bl	80011cc <HAL_COMP_MspInit>
 8003c30:	e7c7      	b.n	8003bc2 <HAL_COMP_Init+0x22>
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 8003c32:	4a3d      	ldr	r2, [pc, #244]	; (8003d28 <HAL_COMP_Init+0x188>)
 8003c34:	f8d2 3204 	ldr.w	r3, [r2, #516]	; 0x204
 8003c38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3c:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
 8003c40:	e7de      	b.n	8003c00 <HAL_COMP_Init+0x60>
      {
        wait_loop_index--;
 8003c42:	9b01      	ldr	r3, [sp, #4]
 8003c44:	3b01      	subs	r3, #1
 8003c46:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003c48:	9b01      	ldr	r3, [sp, #4]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d1f9      	bne.n	8003c42 <HAL_COMP_Init+0xa2>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003c4e:	4b39      	ldr	r3, [pc, #228]	; (8003d34 <HAL_COMP_Init+0x194>)
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d02b      	beq.n	8003cac <HAL_COMP_Init+0x10c>
 8003c54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003c58:	6a22      	ldr	r2, [r4, #32]
 8003c5a:	f012 0f03 	tst.w	r2, #3
 8003c5e:	d044      	beq.n	8003cea <HAL_COMP_Init+0x14a>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003c60:	f012 0f10 	tst.w	r2, #16
 8003c64:	d025      	beq.n	8003cb2 <HAL_COMP_Init+0x112>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003c66:	4934      	ldr	r1, [pc, #208]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003c68:	680a      	ldr	r2, [r1, #0]
 8003c6a:	431a      	orrs	r2, r3
 8003c6c:	600a      	str	r2, [r1, #0]
      {
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003c6e:	6a22      	ldr	r2, [r4, #32]
 8003c70:	f012 0f20 	tst.w	r2, #32
 8003c74:	d023      	beq.n	8003cbe <HAL_COMP_Init+0x11e>
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003c76:	4930      	ldr	r1, [pc, #192]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003c78:	684a      	ldr	r2, [r1, #4]
 8003c7a:	431a      	orrs	r2, r3
 8003c7c:	604a      	str	r2, [r1, #4]
  *         @arg @ref LL_EXTI_LINE_22
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003c7e:	4a2e      	ldr	r2, [pc, #184]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003c80:	60d3      	str	r3, [r2, #12]

      /* Clear COMP EXTI pending bit (if any) */
      LL_EXTI_ClearFlag_0_31(exti_line);

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8003c82:	6a22      	ldr	r2, [r4, #32]
 8003c84:	f012 0f02 	tst.w	r2, #2
 8003c88:	d01f      	beq.n	8003cca <HAL_COMP_Init+0x12a>
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003c8a:	492b      	ldr	r1, [pc, #172]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003c8c:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 8003c90:	431a      	orrs	r2, r3
 8003c92:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif /* CORE_CM0PLUS */
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8003c96:	6a22      	ldr	r2, [r4, #32]
 8003c98:	f012 0f01 	tst.w	r2, #1
 8003c9c:	d01d      	beq.n	8003cda <HAL_COMP_Init+0x13a>
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003c9e:	4926      	ldr	r1, [pc, #152]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003ca0:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003caa:	e02b      	b.n	8003d04 <HAL_COMP_Init+0x164>
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003cac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003cb0:	e7d2      	b.n	8003c58 <HAL_COMP_Init+0xb8>
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003cb2:	4921      	ldr	r1, [pc, #132]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003cb4:	680a      	ldr	r2, [r1, #0]
 8003cb6:	ea22 0203 	bic.w	r2, r2, r3
 8003cba:	600a      	str	r2, [r1, #0]
}
 8003cbc:	e7d7      	b.n	8003c6e <HAL_COMP_Init+0xce>
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003cbe:	491e      	ldr	r1, [pc, #120]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003cc0:	684a      	ldr	r2, [r1, #4]
 8003cc2:	ea22 0203 	bic.w	r2, r2, r3
 8003cc6:	604a      	str	r2, [r1, #4]
}
 8003cc8:	e7d9      	b.n	8003c7e <HAL_COMP_Init+0xde>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003cca:	491b      	ldr	r1, [pc, #108]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003ccc:	f8d1 2084 	ldr.w	r2, [r1, #132]	; 0x84
 8003cd0:	ea22 0203 	bic.w	r2, r2, r3
 8003cd4:	f8c1 2084 	str.w	r2, [r1, #132]	; 0x84
}
 8003cd8:	e7dd      	b.n	8003c96 <HAL_COMP_Init+0xf6>
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003cda:	4917      	ldr	r1, [pc, #92]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003cdc:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
 8003ce0:	ea22 0303 	bic.w	r3, r2, r3
 8003ce4:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
}
 8003ce8:	e00c      	b.n	8003d04 <HAL_COMP_Init+0x164>
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003cea:	4a13      	ldr	r2, [pc, #76]	; (8003d38 <HAL_COMP_Init+0x198>)
 8003cec:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
 8003cf0:	ea21 0103 	bic.w	r1, r1, r3
 8003cf4:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003cf8:	f8d2 1080 	ldr.w	r1, [r2, #128]	; 0x80
 8003cfc:	ea21 0303 	bic.w	r3, r1, r3
 8003d00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8003d04:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
 8003d08:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 8003d0c:	b943      	cbnz	r3, 8003d20 <HAL_COMP_Init+0x180>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
 8003d14:	e000      	b.n	8003d18 <HAL_COMP_Init+0x178>
    status = HAL_ERROR;
 8003d16:	2001      	movs	r0, #1
    }
  }

  return status;
}
 8003d18:	b003      	add	sp, #12
 8003d1a:	bd30      	pop	{r4, r5, pc}
    status = HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
 8003d1e:	e7fb      	b.n	8003d18 <HAL_COMP_Init+0x178>
  HAL_StatusTypeDef status = HAL_OK;
 8003d20:	2000      	movs	r0, #0
 8003d22:	e7f9      	b.n	8003d18 <HAL_COMP_Init+0x178>
 8003d24:	f9207c03 	.word	0xf9207c03
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	20000078 	.word	0x20000078
 8003d30:	053e2d63 	.word	0x053e2d63
 8003d34:	40010200 	.word	0x40010200
 8003d38:	58000800 	.word	0x58000800

08003d3c <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 8003d3c:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0UL;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	9301      	str	r3, [sp, #4]
  HAL_StatusTypeDef status = HAL_OK;

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003d42:	b320      	cbz	r0, 8003d8e <HAL_COMP_Start+0x52>
  {
    status = HAL_ERROR;
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003d44:	6802      	ldr	r2, [r0, #0]
 8003d46:	6811      	ldr	r1, [r2, #0]
 8003d48:	2900      	cmp	r1, #0
 8003d4a:	db23      	blt.n	8003d94 <HAL_COMP_Start+0x58>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 8003d4c:	f890 1025 	ldrb.w	r1, [r0, #37]	; 0x25
 8003d50:	b2c9      	uxtb	r1, r1
 8003d52:	2901      	cmp	r1, #1
 8003d54:	d001      	beq.n	8003d5a <HAL_COMP_Start+0x1e>
        wait_loop_index--;
      }
    }
    else
    {
      status = HAL_ERROR;
 8003d56:	2001      	movs	r0, #1
 8003d58:	e01a      	b.n	8003d90 <HAL_COMP_Start+0x54>
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 8003d5a:	6811      	ldr	r1, [r2, #0]
 8003d5c:	f041 0101 	orr.w	r1, r1, #1
 8003d60:	6011      	str	r1, [r2, #0]
      hcomp->State = HAL_COMP_STATE_BUSY;
 8003d62:	2202      	movs	r2, #2
 8003d64:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
      wait_loop_index = ((COMP_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d68:	4b0b      	ldr	r3, [pc, #44]	; (8003d98 <HAL_COMP_Start+0x5c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	099b      	lsrs	r3, r3, #6
 8003d6e:	4a0b      	ldr	r2, [pc, #44]	; (8003d9c <HAL_COMP_Start+0x60>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	099b      	lsrs	r3, r3, #6
 8003d76:	3301      	adds	r3, #1
 8003d78:	00db      	lsls	r3, r3, #3
 8003d7a:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003d7c:	e002      	b.n	8003d84 <HAL_COMP_Start+0x48>
        wait_loop_index--;
 8003d7e:	9b01      	ldr	r3, [sp, #4]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	9301      	str	r3, [sp, #4]
      while(wait_loop_index != 0UL)
 8003d84:	9b01      	ldr	r3, [sp, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d1f9      	bne.n	8003d7e <HAL_COMP_Start+0x42>
  HAL_StatusTypeDef status = HAL_OK;
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e000      	b.n	8003d90 <HAL_COMP_Start+0x54>
    status = HAL_ERROR;
 8003d8e:	2001      	movs	r0, #1
    }
  }

  return status;
}
 8003d90:	b002      	add	sp, #8
 8003d92:	4770      	bx	lr
    status = HAL_ERROR;
 8003d94:	2001      	movs	r0, #1
 8003d96:	e7fb      	b.n	8003d90 <HAL_COMP_Start+0x54>
 8003d98:	20000078 	.word	0x20000078
 8003d9c:	053e2d63 	.word	0x053e2d63

08003da0 <HAL_COMP_GetOutputLevel>:
uint32_t HAL_COMP_GetOutputLevel(const COMP_HandleTypeDef *hcomp)
{
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 8003da0:	6803      	ldr	r3, [r0, #0]
 8003da2:	6818      	ldr	r0, [r3, #0]
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 8003da4:	f3c0 7080 	ubfx	r0, r0, #30, #1
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_COMP_IRQHandler>:
{
 8003dac:	b508      	push	{r3, lr}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003dae:	6802      	ldr	r2, [r0, #0]
 8003db0:	4b0e      	ldr	r3, [pc, #56]	; (8003dec <HAL_COMP_IRQHandler+0x40>)
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d007      	beq.n	8003dc6 <HAL_COMP_IRQHandler+0x1a>
 8003db6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8003dba:	4a0d      	ldr	r2, [pc, #52]	; (8003df0 <HAL_COMP_IRQHandler+0x44>)
 8003dbc:	68d2      	ldr	r2, [r2, #12]
 8003dbe:	ea33 0202 	bics.w	r2, r3, r2
 8003dc2:	d003      	beq.n	8003dcc <HAL_COMP_IRQHandler+0x20>
}
 8003dc4:	bd08      	pop	{r3, pc}
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003dc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003dca:	e7f6      	b.n	8003dba <HAL_COMP_IRQHandler+0xe>
    if(READ_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE) != 0UL)
 8003dcc:	4a09      	ldr	r2, [pc, #36]	; (8003df4 <HAL_COMP_IRQHandler+0x48>)
 8003dce:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8003dd2:	f412 7f00 	tst.w	r2, #512	; 0x200
 8003dd6:	d006      	beq.n	8003de6 <HAL_COMP_IRQHandler+0x3a>
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003dd8:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <HAL_COMP_IRQHandler+0x44>)
 8003dda:	f44f 02c0 	mov.w	r2, #6291456	; 0x600000
 8003dde:	60da      	str	r2, [r3, #12]
    HAL_COMP_TriggerCallback(hcomp);
 8003de0:	f7fe ffa0 	bl	8002d24 <HAL_COMP_TriggerCallback>
}
 8003de4:	e7ee      	b.n	8003dc4 <HAL_COMP_IRQHandler+0x18>
 8003de6:	4a02      	ldr	r2, [pc, #8]	; (8003df0 <HAL_COMP_IRQHandler+0x44>)
 8003de8:	60d3      	str	r3, [r2, #12]
}
 8003dea:	e7f9      	b.n	8003de0 <HAL_COMP_IRQHandler+0x34>
 8003dec:	40010200 	.word	0x40010200
 8003df0:	58000800 	.word	0x58000800
 8003df4:	40010000 	.word	0x40010000

08003df8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8003dfa:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dfc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003e00:	041b      	lsls	r3, r3, #16
 8003e02:	0c1b      	lsrs	r3, r3, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e04:	0200      	lsls	r0, r0, #8
 8003e06:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e0a:	4303      	orrs	r3, r0
  reg_value  =  (reg_value                                   |
 8003e0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003e14:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003e16:	4770      	bx	lr
 8003e18:	e000ed00 	.word	0xe000ed00

08003e1c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e1c:	b500      	push	{lr}
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e1e:	4b19      	ldr	r3, [pc, #100]	; (8003e84 <HAL_NVIC_SetPriority+0x68>)
 8003e20:	68db      	ldr	r3, [r3, #12]
 8003e22:	f3c3 2302 	ubfx	r3, r3, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e26:	f1c3 0c07 	rsb	ip, r3, #7
 8003e2a:	f1bc 0f04 	cmp.w	ip, #4
 8003e2e:	bf28      	it	cs
 8003e30:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e34:	f103 0e04 	add.w	lr, r3, #4
 8003e38:	f1be 0f06 	cmp.w	lr, #6
 8003e3c:	d918      	bls.n	8003e70 <HAL_NVIC_SetPriority+0x54>
 8003e3e:	3b03      	subs	r3, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e40:	f04f 3eff 	mov.w	lr, #4294967295
 8003e44:	fa0e fc0c 	lsl.w	ip, lr, ip
 8003e48:	ea21 010c 	bic.w	r1, r1, ip
 8003e4c:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e4e:	fa0e f303 	lsl.w	r3, lr, r3
 8003e52:	ea22 0303 	bic.w	r3, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e56:	4319      	orrs	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8003e58:	2800      	cmp	r0, #0
 8003e5a:	db0b      	blt.n	8003e74 <HAL_NVIC_SetPriority+0x58>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e5c:	0109      	lsls	r1, r1, #4
 8003e5e:	b2c9      	uxtb	r1, r1
 8003e60:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8003e64:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8003e68:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8003e6c:	f85d fb04 	ldr.w	pc, [sp], #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e70:	2300      	movs	r3, #0
 8003e72:	e7e5      	b.n	8003e40 <HAL_NVIC_SetPriority+0x24>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e74:	f000 000f 	and.w	r0, r0, #15
 8003e78:	0109      	lsls	r1, r1, #4
 8003e7a:	b2c9      	uxtb	r1, r1
 8003e7c:	4b02      	ldr	r3, [pc, #8]	; (8003e88 <HAL_NVIC_SetPriority+0x6c>)
 8003e7e:	5419      	strb	r1, [r3, r0]
 8003e80:	e7f4      	b.n	8003e6c <HAL_NVIC_SetPriority+0x50>
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00
 8003e88:	e000ed14 	.word	0xe000ed14

08003e8c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	db07      	blt.n	8003ea0 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e90:	f000 021f 	and.w	r2, r0, #31
 8003e94:	0940      	lsrs	r0, r0, #5
 8003e96:	2301      	movs	r3, #1
 8003e98:	4093      	lsls	r3, r2
 8003e9a:	4a02      	ldr	r2, [pc, #8]	; (8003ea4 <HAL_NVIC_EnableIRQ+0x18>)
 8003e9c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003ea0:	4770      	bx	lr
 8003ea2:	bf00      	nop
 8003ea4:	e000e100 	.word	0xe000e100

08003ea8 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003ea8:	2800      	cmp	r0, #0
 8003eaa:	db0c      	blt.n	8003ec6 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003eac:	f000 021f 	and.w	r2, r0, #31
 8003eb0:	0940      	lsrs	r0, r0, #5
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	3020      	adds	r0, #32
 8003eb8:	4a03      	ldr	r2, [pc, #12]	; (8003ec8 <HAL_NVIC_DisableIRQ+0x20>)
 8003eba:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003ebe:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ec2:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100

08003ecc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003ecc:	3801      	subs	r0, #1
 8003ece:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8003ed2:	d20b      	bcs.n	8003eec <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003ed4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ed8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eda:	4a05      	ldr	r2, [pc, #20]	; (8003ef0 <HAL_SYSTICK_Config+0x24>)
 8003edc:	21f0      	movs	r1, #240	; 0xf0
 8003ede:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ee2:	2000      	movs	r0, #0
 8003ee4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ee6:	2207      	movs	r2, #7
 8003ee8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003eea:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8003eec:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 8003eee:	4770      	bx	lr
 8003ef0:	e000ed00 	.word	0xe000ed00

08003ef4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8003ef4:	b170      	cbz	r0, 8003f14 <HAL_DAC_Init+0x20>
{
 8003ef6:	b510      	push	{r4, lr}
 8003ef8:	4604      	mov	r4, r0
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003efa:	7903      	ldrb	r3, [r0, #4]
 8003efc:	b133      	cbz	r3, 8003f0c <HAL_DAC_Init+0x18>
    HAL_DAC_MspInit(hdac);
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003efe:	2302      	movs	r3, #2
 8003f00:	7123      	strb	r3, [r4, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003f02:	2000      	movs	r0, #0
 8003f04:	6120      	str	r0, [r4, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003f06:	2301      	movs	r3, #1
 8003f08:	7123      	strb	r3, [r4, #4]

  /* Return function status */
  return HAL_OK;
}
 8003f0a:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8003f0c:	7143      	strb	r3, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8003f0e:	f7fd f9b5 	bl	800127c <HAL_DAC_MspInit>
 8003f12:	e7f4      	b.n	8003efe <HAL_DAC_Init+0xa>
    return HAL_ERROR;
 8003f14:	2001      	movs	r0, #1
}
 8003f16:	4770      	bx	lr

08003f18 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f18:	7943      	ldrb	r3, [r0, #5]
 8003f1a:	2b01      	cmp	r3, #1
 8003f1c:	d01e      	beq.n	8003f5c <HAL_DAC_Start+0x44>
{
 8003f1e:	b410      	push	{r4}
  __HAL_LOCK(hdac);
 8003f20:	2301      	movs	r3, #1
 8003f22:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f24:	2202      	movs	r2, #2
 8003f26:	7102      	strb	r2, [r0, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003f28:	6804      	ldr	r4, [r0, #0]
 8003f2a:	6822      	ldr	r2, [r4, #0]
 8003f2c:	f001 0110 	and.w	r1, r1, #16
 8003f30:	fa03 f101 	lsl.w	r1, r3, r1
 8003f34:	4311      	orrs	r1, r2
 8003f36:	6021      	str	r1, [r4, #0]

  /* Check if software trigger enabled */
  if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003f38:	6802      	ldr	r2, [r0, #0]
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d006      	beq.n	8003f52 <HAL_DAC_Start+0x3a>
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003f44:	2301      	movs	r3, #1
 8003f46:	7103      	strb	r3, [r0, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
 8003f4c:	4618      	mov	r0, r3
}
 8003f4e:	bc10      	pop	{r4}
 8003f50:	4770      	bx	lr
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003f52:	6853      	ldr	r3, [r2, #4]
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6053      	str	r3, [r2, #4]
 8003f5a:	e7f3      	b.n	8003f44 <HAL_DAC_Start+0x2c>
  __HAL_LOCK(hdac);
 8003f5c:	2002      	movs	r0, #2
}
 8003f5e:	4770      	bx	lr

08003f60 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003f60:	b410      	push	{r4}
 8003f62:	b083      	sub	sp, #12
  __IO uint32_t tmp = 0UL;
 8003f64:	2400      	movs	r4, #0
 8003f66:	9401      	str	r4, [sp, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003f68:	6800      	ldr	r0, [r0, #0]
 8003f6a:	9001      	str	r0, [sp, #4]
  if (Channel == DAC_CHANNEL_1)
 8003f6c:	b919      	cbnz	r1, 8003f76 <HAL_DAC_SetValue+0x16>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003f6e:	9901      	ldr	r1, [sp, #4]
 8003f70:	440a      	add	r2, r1
 8003f72:	3208      	adds	r2, #8
 8003f74:	9201      	str	r2, [sp, #4]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003f76:	9a01      	ldr	r2, [sp, #4]
 8003f78:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
}
 8003f7a:	2000      	movs	r0, #0
 8003f7c:	b003      	add	sp, #12
 8003f7e:	bc10      	pop	{r4}
 8003f80:	4770      	bx	lr

08003f82 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003f82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003f84:	7943      	ldrb	r3, [r0, #5]
 8003f86:	2b01      	cmp	r3, #1
 8003f88:	d07d      	beq.n	8004086 <HAL_DAC_ConfigChannel+0x104>
 8003f8a:	4604      	mov	r4, r0
 8003f8c:	460d      	mov	r5, r1
 8003f8e:	4616      	mov	r6, r2
 8003f90:	2301      	movs	r3, #1
 8003f92:	7143      	strb	r3, [r0, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003f94:	2302      	movs	r3, #2
 8003f96:	7103      	strb	r3, [r0, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003f98:	680b      	ldr	r3, [r1, #0]
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d032      	beq.n	8004004 <HAL_DAC_ConfigChannel+0x82>
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003f9e:	692b      	ldr	r3, [r5, #16]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d063      	beq.n	800406c <HAL_DAC_ConfigChannel+0xea>
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003fa4:	6820      	ldr	r0, [r4, #0]
 8003fa6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003fa8:	f006 0210 	and.w	r2, r6, #16
 8003fac:	2107      	movs	r1, #7
 8003fae:	4091      	lsls	r1, r2
 8003fb0:	ea23 0101 	bic.w	r1, r3, r1
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8003fb4:	682b      	ldr	r3, [r5, #0]
 8003fb6:	68ae      	ldr	r6, [r5, #8]
 8003fb8:	4333      	orrs	r3, r6
 8003fba:	68ee      	ldr	r6, [r5, #12]
 8003fbc:	4333      	orrs	r3, r6
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fbe:	4093      	lsls	r3, r2
 8003fc0:	430b      	orrs	r3, r1
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003fc2:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8003fc4:	6820      	ldr	r0, [r4, #0]
 8003fc6:	6803      	ldr	r3, [r0, #0]
 8003fc8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003fcc:	4091      	lsls	r1, r2
 8003fce:	ea23 0301 	bic.w	r3, r3, r1
 8003fd2:	6003      	str	r3, [r0, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003fd4:	6820      	ldr	r0, [r4, #0]
 8003fd6:	6803      	ldr	r3, [r0, #0]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003fd8:	f640 71fe 	movw	r1, #4094	; 0xffe
 8003fdc:	4091      	lsls	r1, r2
 8003fde:	ea23 0101 	bic.w	r1, r3, r1
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003fe2:	686b      	ldr	r3, [r5, #4]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fe4:	4093      	lsls	r3, r2
 8003fe6:	430b      	orrs	r3, r1
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003fe8:	6003      	str	r3, [r0, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003fea:	6820      	ldr	r0, [r4, #0]
 8003fec:	6803      	ldr	r3, [r0, #0]
 8003fee:	21c0      	movs	r1, #192	; 0xc0
 8003ff0:	fa01 f202 	lsl.w	r2, r1, r2
 8003ff4:	ea23 0202 	bic.w	r2, r3, r2
 8003ff8:	6002      	str	r2, [r0, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	7123      	strb	r3, [r4, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ffe:	2000      	movs	r0, #0
 8004000:	7160      	strb	r0, [r4, #5]

  /* Return function status */
  return status;
}
 8004002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tickstart = HAL_GetTick();
 8004004:	f7fd fe2e 	bl	8001c64 <HAL_GetTick>
 8004008:	4607      	mov	r7, r0
    while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800400e:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004012:	d010      	beq.n	8004036 <HAL_DAC_ConfigChannel+0xb4>
      if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004014:	f7fd fe26 	bl	8001c64 <HAL_GetTick>
 8004018:	1bc0      	subs	r0, r0, r7
 800401a:	2801      	cmp	r0, #1
 800401c:	d9f5      	bls.n	800400a <HAL_DAC_ConfigChannel+0x88>
        if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800401e:	6823      	ldr	r3, [r4, #0]
 8004020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004022:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8004026:	d0f0      	beq.n	800400a <HAL_DAC_ConfigChannel+0x88>
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004028:	6923      	ldr	r3, [r4, #16]
 800402a:	f043 0308 	orr.w	r3, r3, #8
 800402e:	6123      	str	r3, [r4, #16]
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004030:	2003      	movs	r0, #3
 8004032:	7120      	strb	r0, [r4, #4]
          return HAL_TIMEOUT;
 8004034:	e7e5      	b.n	8004002 <HAL_DAC_ConfigChannel+0x80>
    hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004036:	69aa      	ldr	r2, [r5, #24]
 8004038:	641a      	str	r2, [r3, #64]	; 0x40
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 800403a:	6820      	ldr	r0, [r4, #0]
 800403c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800403e:	f006 0210 	and.w	r2, r6, #16
 8004042:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004046:	4091      	lsls	r1, r2
 8004048:	ea23 0301 	bic.w	r3, r3, r1
 800404c:	69e9      	ldr	r1, [r5, #28]
 800404e:	4091      	lsls	r1, r2
 8004050:	430b      	orrs	r3, r1
 8004052:	6483      	str	r3, [r0, #72]	; 0x48
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004054:	6820      	ldr	r0, [r4, #0]
 8004056:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004058:	21ff      	movs	r1, #255	; 0xff
 800405a:	4091      	lsls	r1, r2
 800405c:	ea23 0301 	bic.w	r3, r3, r1
 8004060:	6a29      	ldr	r1, [r5, #32]
 8004062:	fa01 f202 	lsl.w	r2, r1, r2
 8004066:	4313      	orrs	r3, r2
 8004068:	64c3      	str	r3, [r0, #76]	; 0x4c
 800406a:	e798      	b.n	8003f9e <HAL_DAC_ConfigChannel+0x1c>
    tmpreg1 = hdac->Instance->CCR;
 800406c:	6821      	ldr	r1, [r4, #0]
 800406e:	6b8a      	ldr	r2, [r1, #56]	; 0x38
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004070:	f006 0010 	and.w	r0, r6, #16
 8004074:	231f      	movs	r3, #31
 8004076:	4083      	lsls	r3, r0
 8004078:	ea22 0203 	bic.w	r2, r2, r3
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800407c:	696b      	ldr	r3, [r5, #20]
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800407e:	4083      	lsls	r3, r0
 8004080:	4313      	orrs	r3, r2
    hdac->Instance->CCR = tmpreg1;
 8004082:	638b      	str	r3, [r1, #56]	; 0x38
 8004084:	e78e      	b.n	8003fa4 <HAL_DAC_ConfigChannel+0x22>
  __HAL_LOCK(hdac);
 8004086:	2002      	movs	r0, #2
 8004088:	e7bb      	b.n	8004002 <HAL_DAC_ConfigChannel+0x80>

0800408a <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800408a:	b410      	push	{r4}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800408c:	6cc4      	ldr	r4, [r0, #76]	; 0x4c
 800408e:	f8d0 c050 	ldr.w	ip, [r0, #80]	; 0x50
 8004092:	f8c4 c004 	str.w	ip, [r4, #4]

  if (hdma->DMAmuxRequestGen != NULL)
 8004096:	6d44      	ldr	r4, [r0, #84]	; 0x54
 8004098:	b124      	cbz	r4, 80040a4 <DMA_SetConfig+0x1a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800409a:	6d84      	ldr	r4, [r0, #88]	; 0x58
 800409c:	f8d0 c05c 	ldr.w	ip, [r0, #92]	; 0x5c
 80040a0:	f8c4 c004 	str.w	ip, [r4, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80040a4:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80040a6:	f004 0c1c 	and.w	ip, r4, #28
 80040aa:	2401      	movs	r4, #1
 80040ac:	fa04 f40c 	lsl.w	r4, r4, ip
 80040b0:	f8d0 c040 	ldr.w	ip, [r0, #64]	; 0x40
 80040b4:	f8cc 4004 	str.w	r4, [ip, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80040b8:	6804      	ldr	r4, [r0, #0]
 80040ba:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80040bc:	6883      	ldr	r3, [r0, #8]
 80040be:	2b10      	cmp	r3, #16
 80040c0:	d005      	beq.n	80040ce <DMA_SetConfig+0x44>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80040c2:	6803      	ldr	r3, [r0, #0]
 80040c4:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80040c6:	6803      	ldr	r3, [r0, #0]
 80040c8:	60da      	str	r2, [r3, #12]
  }
}
 80040ca:	bc10      	pop	{r4}
 80040cc:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 80040ce:	6803      	ldr	r3, [r0, #0]
 80040d0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80040d2:	6803      	ldr	r3, [r0, #0]
 80040d4:	60d9      	str	r1, [r3, #12]
 80040d6:	e7f8      	b.n	80040ca <DMA_SetConfig+0x40>

080040d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80040d8:	6803      	ldr	r3, [r0, #0]
 80040da:	4a14      	ldr	r2, [pc, #80]	; (800412c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d816      	bhi.n	800410e <DMA_CalcDMAMUXChannelBaseAndMask+0x36>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 80040e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80040e2:	f022 0203 	bic.w	r2, r2, #3
 80040e6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80040ea:	f502 3202 	add.w	r2, r2, #133120	; 0x20800
 80040ee:	6482      	str	r2, [r0, #72]	; 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3b08      	subs	r3, #8
 80040f4:	4a0e      	ldr	r2, [pc, #56]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	091b      	lsrs	r3, r3, #4
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80040fc:	4a0d      	ldr	r2, [pc, #52]	; (8004134 <DMA_CalcDMAMUXChannelBaseAndMask+0x5c>)
 80040fe:	64c2      	str	r2, [r0, #76]	; 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004100:	f003 031f 	and.w	r3, r3, #31
 8004104:	2201      	movs	r2, #1
 8004106:	fa02 f303 	lsl.w	r3, r2, r3
 800410a:	6503      	str	r3, [r0, #80]	; 0x50
}
 800410c:	4770      	bx	lr
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800410e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004110:	f022 0103 	bic.w	r1, r2, #3
 8004114:	4a08      	ldr	r2, [pc, #32]	; (8004138 <DMA_CalcDMAMUXChannelBaseAndMask+0x60>)
 8004116:	440a      	add	r2, r1
 8004118:	6482      	str	r2, [r0, #72]	; 0x48
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 800411a:	b2db      	uxtb	r3, r3
 800411c:	3b08      	subs	r3, #8
 800411e:	4a04      	ldr	r2, [pc, #16]	; (8004130 <DMA_CalcDMAMUXChannelBaseAndMask+0x58>)
 8004120:	fba2 2303 	umull	r2, r3, r2, r3
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	3307      	adds	r3, #7
 8004128:	e7e8      	b.n	80040fc <DMA_CalcDMAMUXChannelBaseAndMask+0x24>
 800412a:	bf00      	nop
 800412c:	40020407 	.word	0x40020407
 8004130:	cccccccd 	.word	0xcccccccd
 8004134:	40020880 	.word	0x40020880
 8004138:	4002081c 	.word	0x4002081c

0800413c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800413c:	6843      	ldr	r3, [r0, #4]
 800413e:	f003 037f 	and.w	r3, r3, #127	; 0x7f

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004142:	4a07      	ldr	r2, [pc, #28]	; (8004160 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x24>)
 8004144:	441a      	add	r2, r3
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	6542      	str	r2, [r0, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800414a:	4a06      	ldr	r2, [pc, #24]	; (8004164 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x28>)
 800414c:	6582      	str	r2, [r0, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 800414e:	3b01      	subs	r3, #1
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	2201      	movs	r2, #1
 8004156:	fa02 f303 	lsl.w	r3, r2, r3
 800415a:	65c3      	str	r3, [r0, #92]	; 0x5c
}
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	1000823f 	.word	0x1000823f
 8004164:	40020940 	.word	0x40020940

08004168 <HAL_DMA_Init>:
  if (hdma == NULL)
 8004168:	2800      	cmp	r0, #0
 800416a:	d060      	beq.n	800422e <HAL_DMA_Init+0xc6>
{
 800416c:	b510      	push	{r4, lr}
 800416e:	4604      	mov	r4, r0
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004170:	6802      	ldr	r2, [r0, #0]
 8004172:	4b30      	ldr	r3, [pc, #192]	; (8004234 <HAL_DMA_Init+0xcc>)
 8004174:	429a      	cmp	r2, r3
 8004176:	d842      	bhi.n	80041fe <HAL_DMA_Init+0x96>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004178:	4b2f      	ldr	r3, [pc, #188]	; (8004238 <HAL_DMA_Init+0xd0>)
 800417a:	4413      	add	r3, r2
 800417c:	492f      	ldr	r1, [pc, #188]	; (800423c <HAL_DMA_Init+0xd4>)
 800417e:	fba1 1303 	umull	r1, r3, r1, r3
 8004182:	091b      	lsrs	r3, r3, #4
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004188:	4b2d      	ldr	r3, [pc, #180]	; (8004240 <HAL_DMA_Init+0xd8>)
 800418a:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	2302      	movs	r3, #2
 800418e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004192:	6813      	ldr	r3, [r2, #0]
 8004194:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800419c:	6013      	str	r3, [r2, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800419e:	6821      	ldr	r1, [r4, #0]
 80041a0:	680a      	ldr	r2, [r1, #0]
 80041a2:	68a3      	ldr	r3, [r4, #8]
 80041a4:	68e0      	ldr	r0, [r4, #12]
 80041a6:	4303      	orrs	r3, r0
 80041a8:	6920      	ldr	r0, [r4, #16]
 80041aa:	4303      	orrs	r3, r0
 80041ac:	6960      	ldr	r0, [r4, #20]
 80041ae:	4303      	orrs	r3, r0
 80041b0:	69a0      	ldr	r0, [r4, #24]
 80041b2:	4303      	orrs	r3, r0
 80041b4:	69e0      	ldr	r0, [r4, #28]
 80041b6:	4303      	orrs	r3, r0
 80041b8:	6a20      	ldr	r0, [r4, #32]
 80041ba:	4303      	orrs	r3, r0
 80041bc:	4313      	orrs	r3, r2
 80041be:	600b      	str	r3, [r1, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80041c0:	4620      	mov	r0, r4
 80041c2:	f7ff ff89 	bl	80040d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80041c6:	68a3      	ldr	r3, [r4, #8]
 80041c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041cc:	d022      	beq.n	8004214 <HAL_DMA_Init+0xac>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80041ce:	6863      	ldr	r3, [r4, #4]
 80041d0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 80041d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80041d6:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041d8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80041da:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80041dc:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80041de:	6863      	ldr	r3, [r4, #4]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	2b03      	cmp	r3, #3
 80041e4:	d919      	bls.n	800421a <HAL_DMA_Init+0xb2>
    hdma->DMAmuxRequestGen = NULL;
 80041e6:	2300      	movs	r3, #0
 80041e8:	6563      	str	r3, [r4, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = NULL;
 80041ea:	65a3      	str	r3, [r4, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80041ec:	65e3      	str	r3, [r4, #92]	; 0x5c
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041ee:	2000      	movs	r0, #0
 80041f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80041f2:	2301      	movs	r3, #1
 80041f4:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80041f8:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80041fc:	bd10      	pop	{r4, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80041fe:	4b11      	ldr	r3, [pc, #68]	; (8004244 <HAL_DMA_Init+0xdc>)
 8004200:	4413      	add	r3, r2
 8004202:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_DMA_Init+0xd4>)
 8004204:	fba1 1303 	umull	r1, r3, r1, r3
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	009b      	lsls	r3, r3, #2
 800420c:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800420e:	4b0e      	ldr	r3, [pc, #56]	; (8004248 <HAL_DMA_Init+0xe0>)
 8004210:	6403      	str	r3, [r0, #64]	; 0x40
 8004212:	e7bb      	b.n	800418c <HAL_DMA_Init+0x24>
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004214:	2300      	movs	r3, #0
 8004216:	6063      	str	r3, [r4, #4]
 8004218:	e7d9      	b.n	80041ce <HAL_DMA_Init+0x66>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800421a:	4620      	mov	r0, r4
 800421c:	f7ff ff8e 	bl	800413c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004220:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004222:	2200      	movs	r2, #0
 8004224:	601a      	str	r2, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004228:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 800422a:	605a      	str	r2, [r3, #4]
 800422c:	e7df      	b.n	80041ee <HAL_DMA_Init+0x86>
    return HAL_ERROR;
 800422e:	2001      	movs	r0, #1
}
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	40020407 	.word	0x40020407
 8004238:	bffdfff8 	.word	0xbffdfff8
 800423c:	cccccccd 	.word	0xcccccccd
 8004240:	40020000 	.word	0x40020000
 8004244:	bffdfbf8 	.word	0xbffdfbf8
 8004248:	40020400 	.word	0x40020400

0800424c <HAL_DMA_DeInit>:
  if (NULL == hdma)
 800424c:	2800      	cmp	r0, #0
 800424e:	d04b      	beq.n	80042e8 <HAL_DMA_DeInit+0x9c>
{
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4604      	mov	r4, r0
  __HAL_DMA_DISABLE(hdma);
 8004254:	6802      	ldr	r2, [r0, #0]
 8004256:	6813      	ldr	r3, [r2, #0]
 8004258:	f023 0301 	bic.w	r3, r3, #1
 800425c:	6013      	str	r3, [r2, #0]
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800425e:	6802      	ldr	r2, [r0, #0]
 8004260:	4b22      	ldr	r3, [pc, #136]	; (80042ec <HAL_DMA_DeInit+0xa0>)
 8004262:	429a      	cmp	r2, r3
 8004264:	d82c      	bhi.n	80042c0 <HAL_DMA_DeInit+0x74>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004266:	4b22      	ldr	r3, [pc, #136]	; (80042f0 <HAL_DMA_DeInit+0xa4>)
 8004268:	4413      	add	r3, r2
 800426a:	4922      	ldr	r1, [pc, #136]	; (80042f4 <HAL_DMA_DeInit+0xa8>)
 800426c:	fba1 1303 	umull	r1, r3, r1, r3
 8004270:	091b      	lsrs	r3, r3, #4
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004276:	4b20      	ldr	r3, [pc, #128]	; (80042f8 <HAL_DMA_DeInit+0xac>)
 8004278:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->Instance->CCR = 0U;
 800427a:	2500      	movs	r5, #0
 800427c:	6015      	str	r5, [r2, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800427e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004280:	f003 021c 	and.w	r2, r3, #28
 8004284:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004286:	2301      	movs	r3, #1
 8004288:	4093      	lsls	r3, r2
 800428a:	604b      	str	r3, [r1, #4]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800428c:	4620      	mov	r0, r4
 800428e:	f7ff ff23 	bl	80040d8 <DMA_CalcDMAMUXChannelBaseAndMask>
  hdma->DMAmuxChannel->CCR = 0U;
 8004292:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004294:	601d      	str	r5, [r3, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004296:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004298:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800429a:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800429c:	6863      	ldr	r3, [r4, #4]
 800429e:	3b01      	subs	r3, #1
 80042a0:	2b03      	cmp	r3, #3
 80042a2:	d918      	bls.n	80042d6 <HAL_DMA_DeInit+0x8a>
  hdma->DMAmuxRequestGen = NULL;
 80042a4:	2000      	movs	r0, #0
 80042a6:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->DMAmuxRequestGenStatus = NULL;
 80042a8:	65a0      	str	r0, [r4, #88]	; 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 80042aa:	65e0      	str	r0, [r4, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 80042ac:	62e0      	str	r0, [r4, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80042ae:	6320      	str	r0, [r4, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80042b0:	6360      	str	r0, [r4, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80042b2:	63a0      	str	r0, [r4, #56]	; 0x38
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b4:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma->State = HAL_DMA_STATE_RESET;
 80042b6:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
  __HAL_UNLOCK(hdma);
 80042ba:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
}
 80042be:	bd38      	pop	{r3, r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80042c0:	4b0e      	ldr	r3, [pc, #56]	; (80042fc <HAL_DMA_DeInit+0xb0>)
 80042c2:	4413      	add	r3, r2
 80042c4:	490b      	ldr	r1, [pc, #44]	; (80042f4 <HAL_DMA_DeInit+0xa8>)
 80042c6:	fba1 1303 	umull	r1, r3, r1, r3
 80042ca:	091b      	lsrs	r3, r3, #4
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80042d0:	4b0b      	ldr	r3, [pc, #44]	; (8004300 <HAL_DMA_DeInit+0xb4>)
 80042d2:	6403      	str	r3, [r0, #64]	; 0x40
 80042d4:	e7d1      	b.n	800427a <HAL_DMA_DeInit+0x2e>
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80042d6:	4620      	mov	r0, r4
 80042d8:	f7ff ff30 	bl	800413c <DMA_CalcDMAMUXRequestGenBaseAndMask>
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80042dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80042de:	601d      	str	r5, [r3, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80042e0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80042e2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 80042e4:	605a      	str	r2, [r3, #4]
 80042e6:	e7dd      	b.n	80042a4 <HAL_DMA_DeInit+0x58>
    return HAL_ERROR;
 80042e8:	2001      	movs	r0, #1
}
 80042ea:	4770      	bx	lr
 80042ec:	40020407 	.word	0x40020407
 80042f0:	bffdfff8 	.word	0xbffdfff8
 80042f4:	cccccccd 	.word	0xcccccccd
 80042f8:	40020000 	.word	0x40020000
 80042fc:	bffdfbf8 	.word	0xbffdfbf8
 8004300:	40020400 	.word	0x40020400

08004304 <HAL_DMA_Start_IT>:
{
 8004304:	b538      	push	{r3, r4, r5, lr}
 8004306:	4604      	mov	r4, r0
  __HAL_LOCK(hdma);
 8004308:	f890 0024 	ldrb.w	r0, [r0, #36]	; 0x24
 800430c:	2801      	cmp	r0, #1
 800430e:	d043      	beq.n	8004398 <HAL_DMA_Start_IT+0x94>
 8004310:	2001      	movs	r0, #1
 8004312:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
  if (hdma->State == HAL_DMA_STATE_READY)
 8004316:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
 800431a:	b2c0      	uxtb	r0, r0
 800431c:	2801      	cmp	r0, #1
 800431e:	d006      	beq.n	800432e <HAL_DMA_Start_IT+0x2a>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004320:	2380      	movs	r3, #128	; 0x80
 8004322:	63e3      	str	r3, [r4, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 8004324:	2300      	movs	r3, #0
 8004326:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    status = HAL_ERROR;
 800432a:	2001      	movs	r0, #1
}
 800432c:	bd38      	pop	{r3, r4, r5, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800432e:	2002      	movs	r0, #2
 8004330:	f884 0025 	strb.w	r0, [r4, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004334:	2000      	movs	r0, #0
 8004336:	63e0      	str	r0, [r4, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8004338:	6825      	ldr	r5, [r4, #0]
 800433a:	6828      	ldr	r0, [r5, #0]
 800433c:	f020 0001 	bic.w	r0, r0, #1
 8004340:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004342:	4620      	mov	r0, r4
 8004344:	f7ff fea1 	bl	800408a <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8004348:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800434a:	b1d3      	cbz	r3, 8004382 <HAL_DMA_Start_IT+0x7e>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800434c:	6822      	ldr	r2, [r4, #0]
 800434e:	6813      	ldr	r3, [r2, #0]
 8004350:	f043 030e 	orr.w	r3, r3, #14
 8004354:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004356:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	f412 3f80 	tst.w	r2, #65536	; 0x10000
 800435e:	d003      	beq.n	8004368 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004366:	601a      	str	r2, [r3, #0]
    if (hdma->DMAmuxRequestGen != NULL)
 8004368:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800436a:	b11b      	cbz	r3, 8004374 <HAL_DMA_Start_IT+0x70>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004372:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8004374:	6822      	ldr	r2, [r4, #0]
 8004376:	6813      	ldr	r3, [r2, #0]
 8004378:	f043 0301 	orr.w	r3, r3, #1
 800437c:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800437e:	2000      	movs	r0, #0
 8004380:	e7d4      	b.n	800432c <HAL_DMA_Start_IT+0x28>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004382:	6822      	ldr	r2, [r4, #0]
 8004384:	6813      	ldr	r3, [r2, #0]
 8004386:	f023 0304 	bic.w	r3, r3, #4
 800438a:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800438c:	6822      	ldr	r2, [r4, #0]
 800438e:	6813      	ldr	r3, [r2, #0]
 8004390:	f043 030a 	orr.w	r3, r3, #10
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e7de      	b.n	8004356 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 8004398:	2002      	movs	r0, #2
 800439a:	e7c7      	b.n	800432c <HAL_DMA_Start_IT+0x28>

0800439c <HAL_DMA_Abort>:
  if (NULL == hdma)
 800439c:	4603      	mov	r3, r0
 800439e:	2800      	cmp	r0, #0
 80043a0:	d034      	beq.n	800440c <HAL_DMA_Abort+0x70>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80043a2:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 80043a6:	b2d2      	uxtb	r2, r2
 80043a8:	2a02      	cmp	r2, #2
 80043aa:	d006      	beq.n	80043ba <HAL_DMA_Abort+0x1e>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043ac:	2204      	movs	r2, #4
 80043ae:	63c2      	str	r2, [r0, #60]	; 0x3c
    __HAL_UNLOCK(hdma);
 80043b0:	2200      	movs	r2, #0
 80043b2:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    return HAL_ERROR;
 80043b6:	2001      	movs	r0, #1
 80043b8:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ba:	6801      	ldr	r1, [r0, #0]
 80043bc:	680a      	ldr	r2, [r1, #0]
 80043be:	f022 020e 	bic.w	r2, r2, #14
 80043c2:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043c4:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80043c6:	680a      	ldr	r2, [r1, #0]
 80043c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043cc:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 80043ce:	6801      	ldr	r1, [r0, #0]
 80043d0:	680a      	ldr	r2, [r1, #0]
 80043d2:	f022 0201 	bic.w	r2, r2, #1
 80043d6:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80043da:	f002 011c 	and.w	r1, r2, #28
 80043de:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80043e0:	2201      	movs	r2, #1
 80043e2:	408a      	lsls	r2, r1
 80043e4:	6042      	str	r2, [r0, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80043ea:	6051      	str	r1, [r2, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 80043ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80043ee:	b132      	cbz	r2, 80043fe <HAL_DMA_Abort+0x62>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043f0:	6811      	ldr	r1, [r2, #0]
 80043f2:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 80043f6:	6011      	str	r1, [r2, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80043fa:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80043fc:	6051      	str	r1, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004404:	2000      	movs	r0, #0
 8004406:	f883 0024 	strb.w	r0, [r3, #36]	; 0x24
  return HAL_OK;
 800440a:	4770      	bx	lr
    return HAL_ERROR;
 800440c:	2001      	movs	r0, #1
}
 800440e:	4770      	bx	lr

08004410 <HAL_DMA_Abort_IT>:
{
 8004410:	b508      	push	{r3, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004412:	f890 3025 	ldrb.w	r3, [r0, #37]	; 0x25
 8004416:	b2db      	uxtb	r3, r3
 8004418:	2b02      	cmp	r3, #2
 800441a:	d003      	beq.n	8004424 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800441c:	2304      	movs	r3, #4
 800441e:	63c3      	str	r3, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8004420:	2001      	movs	r0, #1
}
 8004422:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004424:	6802      	ldr	r2, [r0, #0]
 8004426:	6813      	ldr	r3, [r2, #0]
 8004428:	f023 030e 	bic.w	r3, r3, #14
 800442c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800442e:	6802      	ldr	r2, [r0, #0]
 8004430:	6813      	ldr	r3, [r2, #0]
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004438:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004440:	6013      	str	r3, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004442:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004444:	f003 021c 	and.w	r2, r3, #28
 8004448:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800444a:	2301      	movs	r3, #1
 800444c:	4093      	lsls	r3, r2
 800444e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004450:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004452:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004454:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != NULL)
 8004456:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8004458:	b133      	cbz	r3, 8004468 <HAL_DMA_Abort_IT+0x58>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004460:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004462:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8004464:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
 8004466:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8004468:	2301      	movs	r3, #1
 800446a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 800446e:	2300      	movs	r3, #0
 8004470:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferAbortCallback != NULL)
 8004474:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004476:	b113      	cbz	r3, 800447e <HAL_DMA_Abort_IT+0x6e>
      hdma->XferAbortCallback(hdma);
 8004478:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800447a:	2000      	movs	r0, #0
 800447c:	e7d1      	b.n	8004422 <HAL_DMA_Abort_IT+0x12>
 800447e:	2000      	movs	r0, #0
 8004480:	e7cf      	b.n	8004422 <HAL_DMA_Abort_IT+0x12>
	...

08004484 <HAL_DMA_IRQHandler>:
{
 8004484:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004486:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8004488:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 800448a:	6804      	ldr	r4, [r0, #0]
 800448c:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800448e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004490:	f003 031c 	and.w	r3, r3, #28
 8004494:	2204      	movs	r2, #4
 8004496:	409a      	lsls	r2, r3
 8004498:	420a      	tst	r2, r1
 800449a:	d015      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x44>
 800449c:	f015 0f04 	tst.w	r5, #4
 80044a0:	d012      	beq.n	80044c8 <HAL_DMA_IRQHandler+0x44>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044a2:	6823      	ldr	r3, [r4, #0]
 80044a4:	f013 0f20 	tst.w	r3, #32
 80044a8:	d103      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x2e>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	f023 0304 	bic.w	r3, r3, #4
 80044b0:	6023      	str	r3, [r4, #0]
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80044b2:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044b4:	f003 021c 	and.w	r2, r3, #28
 80044b8:	6c01      	ldr	r1, [r0, #64]	; 0x40
 80044ba:	2304      	movs	r3, #4
 80044bc:	4093      	lsls	r3, r2
 80044be:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80044c0:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80044c2:	b103      	cbz	r3, 80044c6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferHalfCpltCallback(hdma);
 80044c4:	4798      	blx	r3
}
 80044c6:	bd38      	pop	{r3, r4, r5, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80044c8:	2202      	movs	r2, #2
 80044ca:	409a      	lsls	r2, r3
 80044cc:	420a      	tst	r2, r1
 80044ce:	d028      	beq.n	8004522 <HAL_DMA_IRQHandler+0x9e>
 80044d0:	f015 0f02 	tst.w	r5, #2
 80044d4:	d025      	beq.n	8004522 <HAL_DMA_IRQHandler+0x9e>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80044d6:	6823      	ldr	r3, [r4, #0]
 80044d8:	f013 0f20 	tst.w	r3, #32
 80044dc:	d106      	bne.n	80044ec <HAL_DMA_IRQHandler+0x68>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80044de:	6823      	ldr	r3, [r4, #0]
 80044e0:	f023 030a 	bic.w	r3, r3, #10
 80044e4:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80044ec:	6802      	ldr	r2, [r0, #0]
 80044ee:	4b1c      	ldr	r3, [pc, #112]	; (8004560 <HAL_DMA_IRQHandler+0xdc>)
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d90e      	bls.n	8004512 <HAL_DMA_IRQHandler+0x8e>
 80044f4:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80044f6:	f003 021c 	and.w	r2, r3, #28
 80044fa:	2302      	movs	r3, #2
 80044fc:	4093      	lsls	r3, r2
 80044fe:	4a19      	ldr	r2, [pc, #100]	; (8004564 <HAL_DMA_IRQHandler+0xe0>)
 8004500:	6053      	str	r3, [r2, #4]
      __HAL_UNLOCK(hdma);
 8004502:	2300      	movs	r3, #0
 8004504:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      if (hdma->XferCpltCallback != NULL)
 8004508:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d0db      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x42>
        hdma->XferCpltCallback(hdma);
 800450e:	4798      	blx	r3
 8004510:	e7d9      	b.n	80044c6 <HAL_DMA_IRQHandler+0x42>
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004512:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004514:	f003 021c 	and.w	r2, r3, #28
 8004518:	2302      	movs	r3, #2
 800451a:	4093      	lsls	r3, r2
 800451c:	4a12      	ldr	r2, [pc, #72]	; (8004568 <HAL_DMA_IRQHandler+0xe4>)
 800451e:	6053      	str	r3, [r2, #4]
 8004520:	e7ef      	b.n	8004502 <HAL_DMA_IRQHandler+0x7e>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004522:	2208      	movs	r2, #8
 8004524:	fa02 f303 	lsl.w	r3, r2, r3
 8004528:	420b      	tst	r3, r1
 800452a:	d0cc      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x42>
 800452c:	f015 0f08 	tst.w	r5, #8
 8004530:	d0c9      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x42>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004532:	6823      	ldr	r3, [r4, #0]
 8004534:	f023 030e 	bic.w	r3, r3, #14
 8004538:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800453a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800453c:	f003 031c 	and.w	r3, r3, #28
 8004540:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8004542:	2201      	movs	r2, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	604b      	str	r3, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800454a:	63c2      	str	r2, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800454c:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8004550:	2300      	movs	r3, #0
 8004552:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8004556:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0b4      	beq.n	80044c6 <HAL_DMA_IRQHandler+0x42>
      hdma->XferErrorCallback(hdma);
 800455c:	4798      	blx	r3
  return;
 800455e:	e7b2      	b.n	80044c6 <HAL_DMA_IRQHandler+0x42>
 8004560:	40020080 	.word	0x40020080
 8004564:	40020400 	.word	0x40020400
 8004568:	40020000 	.word	0x40020000

0800456c <HAL_DMA_GetState>:
  return hdma->State;
 800456c:	f890 0025 	ldrb.w	r0, [r0, #37]	; 0x25
}
 8004570:	4770      	bx	lr

08004572 <HAL_DMA_ConfigChannelAttributes>:
  if (hdma == NULL)
 8004572:	b178      	cbz	r0, 8004594 <HAL_DMA_ConfigChannelAttributes+0x22>
  ccr = READ_REG(hdma->Instance->CCR);
 8004574:	6803      	ldr	r3, [r0, #0]
 8004576:	681a      	ldr	r2, [r3, #0]
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 8004578:	f011 0f10 	tst.w	r1, #16
 800457c:	d004      	beq.n	8004588 <HAL_DMA_ConfigChannelAttributes+0x16>
    if ((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 800457e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004582:	d004      	beq.n	800458e <HAL_DMA_ConfigChannelAttributes+0x1c>
      SET_BIT(ccr, DMA_CCR_PRIV);
 8004584:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
  WRITE_REG(hdma->Instance->CCR, ccr);
 8004588:	601a      	str	r2, [r3, #0]
  return status;
 800458a:	2000      	movs	r0, #0
 800458c:	4770      	bx	lr
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 800458e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004592:	e7f9      	b.n	8004588 <HAL_DMA_ConfigChannelAttributes+0x16>
    return status;
 8004594:	2001      	movs	r0, #1
}
 8004596:	4770      	bx	lr

08004598 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004598:	b410      	push	{r4}
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800459a:	4c05      	ldr	r4, [pc, #20]	; (80045b0 <FLASH_Program_DoubleWord+0x18>)
 800459c:	6961      	ldr	r1, [r4, #20]
 800459e:	f041 0101 	orr.w	r1, r1, #1
 80045a2:	6161      	str	r1, [r4, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80045a4:	6002      	str	r2, [r0, #0]
 80045a6:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80045aa:	6043      	str	r3, [r0, #4]
}
 80045ac:	bc10      	pop	{r4}
 80045ae:	4770      	bx	lr
 80045b0:	58004000 	.word	0x58004000

080045b4 <FLASH_Program_Fast>:

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80045b4:	4a0c      	ldr	r2, [pc, #48]	; (80045e8 <FLASH_Program_Fast+0x34>)
 80045b6:	6953      	ldr	r3, [r2, #20]
 80045b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045bc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80045be:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80045c2:	b672      	cpsid	i
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80045c4:	2340      	movs	r3, #64	; 0x40
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 80045c6:	f851 2b04 	ldr.w	r2, [r1], #4
 80045ca:	f840 2b04 	str.w	r2, [r0], #4
    dest_addr++;
    src_addr++;
    row_index--;
 80045ce:	3b01      	subs	r3, #1
  }
  while (row_index != 0U);
 80045d0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
 80045d4:	d1f7      	bne.n	80045c6 <FLASH_Program_Fast+0x12>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 80045d6:	4b04      	ldr	r3, [pc, #16]	; (80045e8 <FLASH_Program_Fast+0x34>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 80045de:	d1fa      	bne.n	80045d6 <FLASH_Program_Fast+0x22>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045e0:	f38c 8810 	msr	PRIMASK, ip
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	58004000 	.word	0x58004000

080045ec <HAL_FLASH_Unlock>:
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045ec:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_FLASH_Unlock+0x28>)
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	db01      	blt.n	80045f8 <HAL_FLASH_Unlock+0xc>
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2000      	movs	r0, #0
 80045f6:	4770      	bx	lr
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045f8:	4b06      	ldr	r3, [pc, #24]	; (8004614 <HAL_FLASH_Unlock+0x28>)
 80045fa:	4a07      	ldr	r2, [pc, #28]	; (8004618 <HAL_FLASH_Unlock+0x2c>)
 80045fc:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045fe:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8004602:	609a      	str	r2, [r3, #8]
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8004604:	695b      	ldr	r3, [r3, #20]
 8004606:	2b00      	cmp	r3, #0
 8004608:	db01      	blt.n	800460e <HAL_FLASH_Unlock+0x22>
  HAL_StatusTypeDef status = HAL_OK;
 800460a:	2000      	movs	r0, #0
 800460c:	4770      	bx	lr
      status = HAL_ERROR;
 800460e:	2001      	movs	r0, #1
}
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	58004000 	.word	0x58004000
 8004618:	45670123 	.word	0x45670123

0800461c <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800461c:	4b05      	ldr	r3, [pc, #20]	; (8004634 <HAL_FLASH_Lock+0x18>)
 800461e:	695a      	ldr	r2, [r3, #20]
 8004620:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8004624:	615a      	str	r2, [r3, #20]
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004626:	695b      	ldr	r3, [r3, #20]
 8004628:	2b00      	cmp	r3, #0
 800462a:	db01      	blt.n	8004630 <HAL_FLASH_Lock+0x14>
    status = HAL_ERROR;
 800462c:	2001      	movs	r0, #1
}
 800462e:	4770      	bx	lr
  HAL_StatusTypeDef status = HAL_OK;
 8004630:	2000      	movs	r0, #0
 8004632:	4770      	bx	lr
 8004634:	58004000 	.word	0x58004000

08004638 <FLASH_WaitForLastOperation>:
{
 8004638:	b538      	push	{r3, r4, r5, lr}
 800463a:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 800463c:	f7fd fb12 	bl	8001c64 <HAL_GetTick>
 8004640:	4604      	mov	r4, r0
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <FLASH_WaitForLastOperation+0x64>)
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 800464a:	d006      	beq.n	800465a <FLASH_WaitForLastOperation+0x22>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 800464c:	f7fd fb0a 	bl	8001c64 <HAL_GetTick>
 8004650:	1b00      	subs	r0, r0, r4
 8004652:	42a8      	cmp	r0, r5
 8004654:	d3f5      	bcc.n	8004642 <FLASH_WaitForLastOperation+0xa>
      return HAL_TIMEOUT;
 8004656:	2003      	movs	r0, #3
}
 8004658:	bd38      	pop	{r3, r4, r5, pc}
  error = FLASH->SR;
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <FLASH_WaitForLastOperation+0x64>)
 800465c:	691b      	ldr	r3, [r3, #16]
  if ((error & FLASH_FLAG_EOP) != 0U)
 800465e:	f013 0f01 	tst.w	r3, #1
 8004662:	d002      	beq.n	800466a <FLASH_WaitForLastOperation+0x32>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004664:	4a0d      	ldr	r2, [pc, #52]	; (800469c <FLASH_WaitForLastOperation+0x64>)
 8004666:	2101      	movs	r1, #1
 8004668:	6111      	str	r1, [r2, #16]
  error &= FLASH_FLAG_SR_ERRORS;
 800466a:	f24c 32fa 	movw	r2, #50170	; 0xc3fa
  __HAL_FLASH_CLEAR_FLAG(error);
 800466e:	4013      	ands	r3, r2
 8004670:	d001      	beq.n	8004676 <FLASH_WaitForLastOperation+0x3e>
 8004672:	4a0a      	ldr	r2, [pc, #40]	; (800469c <FLASH_WaitForLastOperation+0x64>)
 8004674:	6113      	str	r3, [r2, #16]
  if (error != 0U)
 8004676:	b95b      	cbnz	r3, 8004690 <FLASH_WaitForLastOperation+0x58>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 8004678:	4b08      	ldr	r3, [pc, #32]	; (800469c <FLASH_WaitForLastOperation+0x64>)
 800467a:	691b      	ldr	r3, [r3, #16]
 800467c:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8004680:	d00a      	beq.n	8004698 <FLASH_WaitForLastOperation+0x60>
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004682:	f7fd faef 	bl	8001c64 <HAL_GetTick>
 8004686:	1b00      	subs	r0, r0, r4
 8004688:	42a8      	cmp	r0, r5
 800468a:	d3f5      	bcc.n	8004678 <FLASH_WaitForLastOperation+0x40>
      return HAL_TIMEOUT;
 800468c:	2003      	movs	r0, #3
 800468e:	e7e3      	b.n	8004658 <FLASH_WaitForLastOperation+0x20>
    pFlash.ErrorCode = error;
 8004690:	4a03      	ldr	r2, [pc, #12]	; (80046a0 <FLASH_WaitForLastOperation+0x68>)
 8004692:	6053      	str	r3, [r2, #4]
    return HAL_ERROR;
 8004694:	2001      	movs	r0, #1
 8004696:	e7df      	b.n	8004658 <FLASH_WaitForLastOperation+0x20>
  return HAL_OK;
 8004698:	2000      	movs	r0, #0
 800469a:	e7dd      	b.n	8004658 <FLASH_WaitForLastOperation+0x20>
 800469c:	58004000 	.word	0x58004000
 80046a0:	20000650 	.word	0x20000650

080046a4 <HAL_FLASH_Program>:
{
 80046a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046a6:	461f      	mov	r7, r3
  __HAL_LOCK(&pFlash);
 80046a8:	4b15      	ldr	r3, [pc, #84]	; (8004700 <HAL_FLASH_Program+0x5c>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d025      	beq.n	80046fc <HAL_FLASH_Program+0x58>
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	4616      	mov	r6, r2
 80046b6:	4b12      	ldr	r3, [pc, #72]	; (8004700 <HAL_FLASH_Program+0x5c>)
 80046b8:	2201      	movs	r2, #1
 80046ba:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80046bc:	2200      	movs	r2, #0
 80046be:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046c0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046c4:	f7ff ffb8 	bl	8004638 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80046c8:	b970      	cbnz	r0, 80046e8 <HAL_FLASH_Program+0x44>
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80046ca:	2c01      	cmp	r4, #1
 80046cc:	d010      	beq.n	80046f0 <HAL_FLASH_Program+0x4c>
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80046ce:	4631      	mov	r1, r6
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7ff ff6f 	bl	80045b4 <FLASH_Program_Fast>
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80046d6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80046da:	f7ff ffad 	bl	8004638 <FLASH_WaitForLastOperation>
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80046de:	4a09      	ldr	r2, [pc, #36]	; (8004704 <HAL_FLASH_Program+0x60>)
 80046e0:	6953      	ldr	r3, [r2, #20]
 80046e2:	ea23 0404 	bic.w	r4, r3, r4
 80046e6:	6154      	str	r4, [r2, #20]
  __HAL_UNLOCK(&pFlash);
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_FLASH_Program+0x5c>)
 80046ea:	2200      	movs	r2, #0
 80046ec:	701a      	strb	r2, [r3, #0]
}
 80046ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      FLASH_Program_DoubleWord(Address, Data);
 80046f0:	4632      	mov	r2, r6
 80046f2:	463b      	mov	r3, r7
 80046f4:	4628      	mov	r0, r5
 80046f6:	f7ff ff4f 	bl	8004598 <FLASH_Program_DoubleWord>
 80046fa:	e7ec      	b.n	80046d6 <HAL_FLASH_Program+0x32>
  __HAL_LOCK(&pFlash);
 80046fc:	2002      	movs	r0, #2
 80046fe:	e7f6      	b.n	80046ee <HAL_FLASH_Program+0x4a>
 8004700:	20000650 	.word	0x20000650
 8004704:	58004000 	.word	0x58004000

08004708 <FLASH_MassErase>:
{
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 8004708:	4a03      	ldr	r2, [pc, #12]	; (8004718 <FLASH_MassErase+0x10>)
 800470a:	6953      	ldr	r3, [r2, #20]
 800470c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004710:	f043 0304 	orr.w	r3, r3, #4
 8004714:	6153      	str	r3, [r2, #20]
#endif
}
 8004716:	4770      	bx	lr
 8004718:	58004000 	.word	0x58004000

0800471c <FLASH_FlushCaches>:
  * @retval None
  */
void FLASH_FlushCaches(void)
{
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 800471c:	4b18      	ldr	r3, [pc, #96]	; (8004780 <FLASH_FlushCaches+0x64>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004724:	2b01      	cmp	r3, #1
 8004726:	d006      	beq.n	8004736 <FLASH_FlushCaches+0x1a>
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <FLASH_FlushCaches+0x64>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004730:	2b01      	cmp	r3, #1
 8004732:	d012      	beq.n	800475a <FLASH_FlushCaches+0x3e>
    __HAL_FLASH_DATA_CACHE_RESET();
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
  }
#endif
}
 8004734:	4770      	bx	lr
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <FLASH_FlushCaches+0x64>)
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800473e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004746:	601a      	str	r2, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800474e:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004756:	601a      	str	r2, [r3, #0]
 8004758:	e7e6      	b.n	8004728 <FLASH_FlushCaches+0xc>
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800475a:	4b09      	ldr	r3, [pc, #36]	; (8004780 <FLASH_FlushCaches+0x64>)
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004762:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_RESET();
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800476a:	601a      	str	r2, [r3, #0]
 800476c:	681a      	ldr	r2, [r3, #0]
 800476e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004772:	601a      	str	r2, [r3, #0]
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800477a:	601a      	str	r2, [r3, #0]
}
 800477c:	e7da      	b.n	8004734 <FLASH_FlushCaches+0x18>
 800477e:	bf00      	nop
 8004780:	58004000 	.word	0x58004000

08004784 <FLASH_AcknowledgePageErase>:
static void FLASH_AcknowledgePageErase(void)
{
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8004784:	4a03      	ldr	r2, [pc, #12]	; (8004794 <FLASH_AcknowledgePageErase+0x10>)
 8004786:	6953      	ldr	r3, [r2, #20]
 8004788:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 800478c:	f023 0302 	bic.w	r3, r3, #2
 8004790:	6153      	str	r3, [r2, #20]
#endif
}
 8004792:	4770      	bx	lr
 8004794:	58004000 	.word	0x58004000

08004798 <FLASH_PageErase>:
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004798:	4a05      	ldr	r2, [pc, #20]	; (80047b0 <FLASH_PageErase+0x18>)
 800479a:	6953      	ldr	r3, [r2, #20]
 800479c:	f423 737e 	bic.w	r3, r3, #1016	; 0x3f8
 80047a0:	ea43 00c0 	orr.w	r0, r3, r0, lsl #3
 80047a4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80047a8:	f040 0002 	orr.w	r0, r0, #2
 80047ac:	6150      	str	r0, [r2, #20]
}
 80047ae:	4770      	bx	lr
 80047b0:	58004000 	.word	0x58004000

080047b4 <HAL_FLASHEx_Erase>:
{
 80047b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80047b6:	4b1e      	ldr	r3, [pc, #120]	; (8004830 <HAL_FLASHEx_Erase+0x7c>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d035      	beq.n	800482a <HAL_FLASHEx_Erase+0x76>
 80047be:	4605      	mov	r5, r0
 80047c0:	460f      	mov	r7, r1
 80047c2:	4b1b      	ldr	r3, [pc, #108]	; (8004830 <HAL_FLASHEx_Erase+0x7c>)
 80047c4:	2201      	movs	r2, #1
 80047c6:	701a      	strb	r2, [r3, #0]
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047c8:	2200      	movs	r2, #0
 80047ca:	605a      	str	r2, [r3, #4]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047d0:	f7ff ff32 	bl	8004638 <FLASH_WaitForLastOperation>
  if (status == HAL_OK)
 80047d4:	4606      	mov	r6, r0
 80047d6:	bb18      	cbnz	r0, 8004820 <HAL_FLASHEx_Erase+0x6c>
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	2b04      	cmp	r3, #4
 80047dc:	d013      	beq.n	8004806 <HAL_FLASHEx_Erase+0x52>
      *PageError = 0xFFFFFFFFU;
 80047de:	f04f 33ff 	mov.w	r3, #4294967295
 80047e2:	603b      	str	r3, [r7, #0]
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80047e4:	686c      	ldr	r4, [r5, #4]
 80047e6:	686b      	ldr	r3, [r5, #4]
 80047e8:	68aa      	ldr	r2, [r5, #8]
 80047ea:	4413      	add	r3, r2
 80047ec:	42a3      	cmp	r3, r4
 80047ee:	d913      	bls.n	8004818 <HAL_FLASHEx_Erase+0x64>
        FLASH_PageErase(index);
 80047f0:	4620      	mov	r0, r4
 80047f2:	f7ff ffd1 	bl	8004798 <FLASH_PageErase>
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047f6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80047fa:	f7ff ff1d 	bl	8004638 <FLASH_WaitForLastOperation>
        if (status != HAL_OK)
 80047fe:	4606      	mov	r6, r0
 8004800:	b948      	cbnz	r0, 8004816 <HAL_FLASHEx_Erase+0x62>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004802:	3401      	adds	r4, #1
 8004804:	e7ef      	b.n	80047e6 <HAL_FLASHEx_Erase+0x32>
      FLASH_MassErase();
 8004806:	f7ff ff7f 	bl	8004708 <FLASH_MassErase>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800480a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800480e:	f7ff ff13 	bl	8004638 <FLASH_WaitForLastOperation>
 8004812:	4606      	mov	r6, r0
 8004814:	e002      	b.n	800481c <HAL_FLASHEx_Erase+0x68>
          *PageError = index;
 8004816:	603c      	str	r4, [r7, #0]
      FLASH_AcknowledgePageErase();
 8004818:	f7ff ffb4 	bl	8004784 <FLASH_AcknowledgePageErase>
    FLASH_FlushCaches();
 800481c:	f7ff ff7e 	bl	800471c <FLASH_FlushCaches>
  __HAL_UNLOCK(&pFlash);
 8004820:	4b03      	ldr	r3, [pc, #12]	; (8004830 <HAL_FLASHEx_Erase+0x7c>)
 8004822:	2200      	movs	r2, #0
 8004824:	701a      	strb	r2, [r3, #0]
}
 8004826:	4630      	mov	r0, r6
 8004828:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(&pFlash);
 800482a:	2602      	movs	r6, #2
 800482c:	e7fb      	b.n	8004826 <HAL_FLASHEx_Erase+0x72>
 800482e:	bf00      	nop
 8004830:	20000650 	.word	0x20000650

08004834 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004834:	b570      	push	{r4, r5, r6, lr}
  uint32_t position = 0x00u;
 8004836:	2300      	movs	r3, #0
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004838:	e069      	b.n	800490e <HAL_GPIO_Init+0xda>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800483a:	6885      	ldr	r5, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800483c:	005e      	lsls	r6, r3, #1
 800483e:	2403      	movs	r4, #3
 8004840:	40b4      	lsls	r4, r6
 8004842:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004846:	68cc      	ldr	r4, [r1, #12]
 8004848:	40b4      	lsls	r4, r6
 800484a:	432c      	orrs	r4, r5
        GPIOx->OSPEEDR = temp;
 800484c:	6084      	str	r4, [r0, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800484e:	6844      	ldr	r4, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004850:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004854:	684c      	ldr	r4, [r1, #4]
 8004856:	f3c4 1400 	ubfx	r4, r4, #4, #1
 800485a:	409c      	lsls	r4, r3
 800485c:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->OTYPER = temp;
 8004860:	6044      	str	r4, [r0, #4]
 8004862:	e065      	b.n	8004930 <HAL_GPIO_Init+0xfc>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004864:	08dd      	lsrs	r5, r3, #3
 8004866:	3508      	adds	r5, #8
 8004868:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800486c:	f003 0407 	and.w	r4, r3, #7
 8004870:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8004874:	240f      	movs	r4, #15
 8004876:	fa04 f40c 	lsl.w	r4, r4, ip
 800487a:	ea26 0e04 	bic.w	lr, r6, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800487e:	690c      	ldr	r4, [r1, #16]
 8004880:	fa04 f40c 	lsl.w	r4, r4, ip
 8004884:	ea44 040e 	orr.w	r4, r4, lr
        GPIOx->AFR[position >> 3u] = temp;
 8004888:	f840 4025 	str.w	r4, [r0, r5, lsl #2]
 800488c:	e067      	b.n	800495e <HAL_GPIO_Init+0x12a>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = SYSCFG->EXTICR[position >> 2u];
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800488e:	2402      	movs	r4, #2
 8004890:	e000      	b.n	8004894 <HAL_GPIO_Init+0x60>
 8004892:	2400      	movs	r4, #0
 8004894:	fa04 f40e 	lsl.w	r4, r4, lr
 8004898:	432c      	orrs	r4, r5
        SYSCFG->EXTICR[position >> 2u] = temp;
 800489a:	f10c 0c02 	add.w	ip, ip, #2
 800489e:	4d4b      	ldr	r5, [pc, #300]	; (80049cc <HAL_GPIO_Init+0x198>)
 80048a0:	f845 402c 	str.w	r4, [r5, ip, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048a4:	4c4a      	ldr	r4, [pc, #296]	; (80049d0 <HAL_GPIO_Init+0x19c>)
 80048a6:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80048a8:	43d4      	mvns	r4, r2
 80048aa:	ea25 0602 	bic.w	r6, r5, r2
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80048ae:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048b2:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
 80048b6:	d001      	beq.n	80048bc <HAL_GPIO_Init+0x88>
        {
          temp |= iocurrent;
 80048b8:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->RTSR1 = temp;
 80048bc:	4d44      	ldr	r5, [pc, #272]	; (80049d0 <HAL_GPIO_Init+0x19c>)
 80048be:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80048c0:	686d      	ldr	r5, [r5, #4]
        temp &= ~(iocurrent);
 80048c2:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048c6:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048ca:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
 80048ce:	d001      	beq.n	80048d4 <HAL_GPIO_Init+0xa0>
        {
          temp |= iocurrent;
 80048d0:	ea42 0605 	orr.w	r6, r2, r5
        }
        EXTI->FTSR1 = temp;
 80048d4:	4d3e      	ldr	r5, [pc, #248]	; (80049d0 <HAL_GPIO_Init+0x19c>)
 80048d6:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80048d8:	f8d5 5080 	ldr.w	r5, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048dc:	ea04 0605 	and.w	r6, r4, r5
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048e0:	f8d1 c004 	ldr.w	ip, [r1, #4]
 80048e4:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
 80048e8:	d001      	beq.n	80048ee <HAL_GPIO_Init+0xba>
        {
          temp |= iocurrent;
 80048ea:	ea42 0605 	orr.w	r6, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80048ee:	4d38      	ldr	r5, [pc, #224]	; (80049d0 <HAL_GPIO_Init+0x19c>)
 80048f0:	f8c5 6080 	str.w	r6, [r5, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80048f4:	f8d5 5084 	ldr.w	r5, [r5, #132]	; 0x84
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80048f8:	402c      	ands	r4, r5
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048fa:	684e      	ldr	r6, [r1, #4]
 80048fc:	f416 3f00 	tst.w	r6, #131072	; 0x20000
 8004900:	d001      	beq.n	8004906 <HAL_GPIO_Init+0xd2>
        {
          temp |= iocurrent;
 8004902:	ea42 0405 	orr.w	r4, r2, r5
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004906:	4a32      	ldr	r2, [pc, #200]	; (80049d0 <HAL_GPIO_Init+0x19c>)
 8004908:	f8c2 4084 	str.w	r4, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 800490c:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800490e:	680a      	ldr	r2, [r1, #0]
 8004910:	fa32 f403 	lsrs.w	r4, r2, r3
 8004914:	d058      	beq.n	80049c8 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004916:	f04f 0c01 	mov.w	ip, #1
 800491a:	fa0c fc03 	lsl.w	ip, ip, r3
    if (iocurrent != 0x00u)
 800491e:	ea1c 0202 	ands.w	r2, ip, r2
 8004922:	d0f3      	beq.n	800490c <HAL_GPIO_Init+0xd8>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004924:	684c      	ldr	r4, [r1, #4]
 8004926:	f004 0403 	and.w	r4, r4, #3
 800492a:	3c01      	subs	r4, #1
 800492c:	2c01      	cmp	r4, #1
 800492e:	d984      	bls.n	800483a <HAL_GPIO_Init+0x6>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004930:	684c      	ldr	r4, [r1, #4]
 8004932:	f004 0403 	and.w	r4, r4, #3
 8004936:	2c03      	cmp	r4, #3
 8004938:	d00c      	beq.n	8004954 <HAL_GPIO_Init+0x120>
        temp = GPIOx->PUPDR;
 800493a:	68c4      	ldr	r4, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800493c:	005d      	lsls	r5, r3, #1
 800493e:	f04f 0c03 	mov.w	ip, #3
 8004942:	fa0c fc05 	lsl.w	ip, ip, r5
 8004946:	ea24 0c0c 	bic.w	ip, r4, ip
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800494a:	688c      	ldr	r4, [r1, #8]
 800494c:	40ac      	lsls	r4, r5
 800494e:	ea44 040c 	orr.w	r4, r4, ip
        GPIOx->PUPDR = temp;
 8004952:	60c4      	str	r4, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004954:	684c      	ldr	r4, [r1, #4]
 8004956:	f004 0403 	and.w	r4, r4, #3
 800495a:	2c02      	cmp	r4, #2
 800495c:	d082      	beq.n	8004864 <HAL_GPIO_Init+0x30>
      temp = GPIOx->MODER;
 800495e:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004960:	ea4f 0e43 	mov.w	lr, r3, lsl #1
 8004964:	f04f 0c03 	mov.w	ip, #3
 8004968:	fa0c fc0e 	lsl.w	ip, ip, lr
 800496c:	ea24 0c0c 	bic.w	ip, r4, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004970:	684c      	ldr	r4, [r1, #4]
 8004972:	f004 0403 	and.w	r4, r4, #3
 8004976:	fa04 f40e 	lsl.w	r4, r4, lr
 800497a:	ea44 040c 	orr.w	r4, r4, ip
      GPIOx->MODER = temp;
 800497e:	6004      	str	r4, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004980:	684c      	ldr	r4, [r1, #4]
 8004982:	f414 3f40 	tst.w	r4, #196608	; 0x30000
 8004986:	d0c1      	beq.n	800490c <HAL_GPIO_Init+0xd8>
        temp = SYSCFG->EXTICR[position >> 2u];
 8004988:	ea4f 0c93 	mov.w	ip, r3, lsr #2
 800498c:	f10c 0502 	add.w	r5, ip, #2
 8004990:	4c0e      	ldr	r4, [pc, #56]	; (80049cc <HAL_GPIO_Init+0x198>)
 8004992:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004996:	f003 0403 	and.w	r4, r3, #3
 800499a:	ea4f 0e84 	mov.w	lr, r4, lsl #2
 800499e:	2407      	movs	r4, #7
 80049a0:	fa04 f40e 	lsl.w	r4, r4, lr
 80049a4:	ea25 0504 	bic.w	r5, r5, r4
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80049a8:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 80049ac:	f43f af71 	beq.w	8004892 <HAL_GPIO_Init+0x5e>
 80049b0:	4c08      	ldr	r4, [pc, #32]	; (80049d4 <HAL_GPIO_Init+0x1a0>)
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	d006      	beq.n	80049c4 <HAL_GPIO_Init+0x190>
 80049b6:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80049ba:	42a0      	cmp	r0, r4
 80049bc:	f43f af67 	beq.w	800488e <HAL_GPIO_Init+0x5a>
 80049c0:	2407      	movs	r4, #7
 80049c2:	e767      	b.n	8004894 <HAL_GPIO_Init+0x60>
 80049c4:	2401      	movs	r4, #1
 80049c6:	e765      	b.n	8004894 <HAL_GPIO_Init+0x60>
  }
}
 80049c8:	bd70      	pop	{r4, r5, r6, pc}
 80049ca:	bf00      	nop
 80049cc:	40010000 	.word	0x40010000
 80049d0:	58000800 	.word	0x58000800
 80049d4:	48000400 	.word	0x48000400

080049d8 <HAL_GPIO_DeInit>:
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
  uint32_t position = 0x00u;
 80049d8:	2300      	movs	r3, #0
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80049da:	fa31 f203 	lsrs.w	r2, r1, r3
 80049de:	d071      	beq.n	8004ac4 <HAL_GPIO_DeInit+0xec>
{
 80049e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e2:	e02e      	b.n	8004a42 <HAL_GPIO_DeInit+0x6a>
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
      tmp &= (0x07uL << (4U * (position & 0x03U)));
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80049e4:	2502      	movs	r5, #2
 80049e6:	e000      	b.n	80049ea <HAL_GPIO_DeInit+0x12>
 80049e8:	2500      	movs	r5, #0
 80049ea:	fa05 fc0c 	lsl.w	ip, r5, ip
 80049ee:	45a4      	cmp	ip, r4
 80049f0:	d049      	beq.n	8004a86 <HAL_GPIO_DeInit+0xae>
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80049f2:	6804      	ldr	r4, [r0, #0]
 80049f4:	005d      	lsls	r5, r3, #1
 80049f6:	f04f 0c03 	mov.w	ip, #3
 80049fa:	fa0c fc05 	lsl.w	ip, ip, r5
 80049fe:	ea44 040c 	orr.w	r4, r4, ip
 8004a02:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004a04:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004a08:	f10e 0e08 	add.w	lr, lr, #8
 8004a0c:	f850 402e 	ldr.w	r4, [r0, lr, lsl #2]
 8004a10:	f003 0507 	and.w	r5, r3, #7
 8004a14:	00ae      	lsls	r6, r5, #2
 8004a16:	250f      	movs	r5, #15
 8004a18:	40b5      	lsls	r5, r6
 8004a1a:	ea24 0405 	bic.w	r4, r4, r5
 8004a1e:	f840 402e 	str.w	r4, [r0, lr, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a22:	6884      	ldr	r4, [r0, #8]
 8004a24:	ea24 040c 	bic.w	r4, r4, ip
 8004a28:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a2a:	6844      	ldr	r4, [r0, #4]
 8004a2c:	ea24 0202 	bic.w	r2, r4, r2
 8004a30:	6042      	str	r2, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a32:	68c2      	ldr	r2, [r0, #12]
 8004a34:	ea22 020c 	bic.w	r2, r2, ip
 8004a38:	60c2      	str	r2, [r0, #12]
    }

    position++;
 8004a3a:	3301      	adds	r3, #1
  while ((GPIO_Pin >> position) != 0x00u)
 8004a3c:	fa31 f203 	lsrs.w	r2, r1, r3
 8004a40:	d03f      	beq.n	8004ac2 <HAL_GPIO_DeInit+0xea>
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004a42:	2201      	movs	r2, #1
 8004a44:	409a      	lsls	r2, r3
    if (iocurrent != 0x00u)
 8004a46:	ea12 0701 	ands.w	r7, r2, r1
 8004a4a:	d0f6      	beq.n	8004a3a <HAL_GPIO_DeInit+0x62>
      tmp = SYSCFG->EXTICR[position >> 2u];
 8004a4c:	089e      	lsrs	r6, r3, #2
 8004a4e:	1cb5      	adds	r5, r6, #2
 8004a50:	4c1d      	ldr	r4, [pc, #116]	; (8004ac8 <HAL_GPIO_DeInit+0xf0>)
 8004a52:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004a56:	f003 0c03 	and.w	ip, r3, #3
 8004a5a:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004a5e:	f04f 0e07 	mov.w	lr, #7
 8004a62:	fa0e fe0c 	lsl.w	lr, lr, ip
 8004a66:	ea0e 0404 	and.w	r4, lr, r4
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004a6a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
 8004a6e:	d0bb      	beq.n	80049e8 <HAL_GPIO_DeInit+0x10>
 8004a70:	4d16      	ldr	r5, [pc, #88]	; (8004acc <HAL_GPIO_DeInit+0xf4>)
 8004a72:	42a8      	cmp	r0, r5
 8004a74:	d005      	beq.n	8004a82 <HAL_GPIO_DeInit+0xaa>
 8004a76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004a7a:	42a8      	cmp	r0, r5
 8004a7c:	d0b2      	beq.n	80049e4 <HAL_GPIO_DeInit+0xc>
 8004a7e:	2507      	movs	r5, #7
 8004a80:	e7b3      	b.n	80049ea <HAL_GPIO_DeInit+0x12>
 8004a82:	2501      	movs	r5, #1
 8004a84:	e7b1      	b.n	80049ea <HAL_GPIO_DeInit+0x12>
        EXTI->IMR1 &= ~(iocurrent);
 8004a86:	4c12      	ldr	r4, [pc, #72]	; (8004ad0 <HAL_GPIO_DeInit+0xf8>)
 8004a88:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 8004a8c:	ea25 0507 	bic.w	r5, r5, r7
 8004a90:	f8c4 5080 	str.w	r5, [r4, #128]	; 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004a94:	f8d4 5084 	ldr.w	r5, [r4, #132]	; 0x84
 8004a98:	ea25 0507 	bic.w	r5, r5, r7
 8004a9c:	f8c4 5084 	str.w	r5, [r4, #132]	; 0x84
        EXTI->RTSR1 &= ~(iocurrent);
 8004aa0:	6825      	ldr	r5, [r4, #0]
 8004aa2:	ea25 0507 	bic.w	r5, r5, r7
 8004aa6:	6025      	str	r5, [r4, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004aa8:	6865      	ldr	r5, [r4, #4]
 8004aaa:	ea25 0707 	bic.w	r7, r5, r7
 8004aae:	6067      	str	r7, [r4, #4]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004ab0:	4d05      	ldr	r5, [pc, #20]	; (8004ac8 <HAL_GPIO_DeInit+0xf0>)
 8004ab2:	3602      	adds	r6, #2
 8004ab4:	f855 4026 	ldr.w	r4, [r5, r6, lsl #2]
 8004ab8:	ea24 040e 	bic.w	r4, r4, lr
 8004abc:	f845 4026 	str.w	r4, [r5, r6, lsl #2]
 8004ac0:	e797      	b.n	80049f2 <HAL_GPIO_DeInit+0x1a>
  }
}
 8004ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	40010000 	.word	0x40010000
 8004acc:	48000400 	.word	0x48000400
 8004ad0:	58000800 	.word	0x58000800

08004ad4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004ad4:	b10a      	cbz	r2, 8004ada <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004ad6:	6181      	str	r1, [r0, #24]
 8004ad8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ada:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8004adc:	4770      	bx	lr

08004ade <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004ade:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004ae0:	ea01 0203 	and.w	r2, r1, r3
 8004ae4:	ea21 0103 	bic.w	r1, r1, r3
 8004ae8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8004aec:	6181      	str	r1, [r0, #24]
}
 8004aee:	4770      	bx	lr

08004af0 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004af0:	4770      	bx	lr
	...

08004af4 <HAL_GPIO_EXTI_IRQHandler>:
{
 8004af4:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004af6:	4b05      	ldr	r3, [pc, #20]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004af8:	68db      	ldr	r3, [r3, #12]
 8004afa:	4203      	tst	r3, r0
 8004afc:	d100      	bne.n	8004b00 <HAL_GPIO_EXTI_IRQHandler+0xc>
}
 8004afe:	bd08      	pop	{r3, pc}
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b00:	4b02      	ldr	r3, [pc, #8]	; (8004b0c <HAL_GPIO_EXTI_IRQHandler+0x18>)
 8004b02:	60d8      	str	r0, [r3, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b04:	f7ff fff4 	bl	8004af0 <HAL_GPIO_EXTI_Callback>
}
 8004b08:	e7f9      	b.n	8004afe <HAL_GPIO_EXTI_IRQHandler+0xa>
 8004b0a:	bf00      	nop
 8004b0c:	58000800 	.word	0x58000800

08004b10 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004b10:	6803      	ldr	r3, [r0, #0]
 8004b12:	699a      	ldr	r2, [r3, #24]
 8004b14:	f012 0f02 	tst.w	r2, #2
 8004b18:	d001      	beq.n	8004b1e <I2C_Flush_TXDR+0xe>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b1e:	6803      	ldr	r3, [r0, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	f012 0f01 	tst.w	r2, #1
 8004b26:	d103      	bne.n	8004b30 <I2C_Flush_TXDR+0x20>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004b28:	699a      	ldr	r2, [r3, #24]
 8004b2a:	f042 0201 	orr.w	r2, r2, #1
 8004b2e:	619a      	str	r2, [r3, #24]
  }
}
 8004b30:	4770      	bx	lr

08004b32 <I2C_Disable_IRQ>:
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
  uint32_t tmpisr = 0U;

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004b32:	f011 0f01 	tst.w	r1, #1
 8004b36:	d009      	beq.n	8004b4c <I2C_Disable_IRQ+0x1a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b38:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004b3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004b40:	2b28      	cmp	r3, #40	; 0x28
 8004b42:	d001      	beq.n	8004b48 <I2C_Disable_IRQ+0x16>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b44:	23f2      	movs	r3, #242	; 0xf2
 8004b46:	e002      	b.n	8004b4e <I2C_Disable_IRQ+0x1c>
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004b48:	2342      	movs	r3, #66	; 0x42
 8004b4a:	e000      	b.n	8004b4e <I2C_Disable_IRQ+0x1c>
  uint32_t tmpisr = 0U;
 8004b4c:	2300      	movs	r3, #0
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004b4e:	f011 0f02 	tst.w	r1, #2
 8004b52:	d009      	beq.n	8004b68 <I2C_Disable_IRQ+0x36>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b54:	f043 0c44 	orr.w	ip, r3, #68	; 0x44

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004b58:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8004b5c:	f002 0228 	and.w	r2, r2, #40	; 0x28
 8004b60:	2a28      	cmp	r2, #40	; 0x28
 8004b62:	d010      	beq.n	8004b86 <I2C_Disable_IRQ+0x54>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b64:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004b68:	f411 4f00 	tst.w	r1, #32768	; 0x8000
 8004b6c:	d10d      	bne.n	8004b8a <I2C_Disable_IRQ+0x58>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004b6e:	2910      	cmp	r1, #16
 8004b70:	d00e      	beq.n	8004b90 <I2C_Disable_IRQ+0x5e>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8004b72:	2920      	cmp	r1, #32
 8004b74:	d00f      	beq.n	8004b96 <I2C_Disable_IRQ+0x64>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004b76:	2940      	cmp	r1, #64	; 0x40
 8004b78:	d010      	beq.n	8004b9c <I2C_Disable_IRQ+0x6a>
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004b7a:	6801      	ldr	r1, [r0, #0]
 8004b7c:	680a      	ldr	r2, [r1, #0]
 8004b7e:	ea22 0303 	bic.w	r3, r2, r3
 8004b82:	600b      	str	r3, [r1, #0]
}
 8004b84:	4770      	bx	lr
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004b86:	4663      	mov	r3, ip
 8004b88:	e7ee      	b.n	8004b68 <I2C_Disable_IRQ+0x36>
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004b8a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8004b8e:	e7ee      	b.n	8004b6e <I2C_Disable_IRQ+0x3c>
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004b90:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004b94:	e7ed      	b.n	8004b72 <I2C_Disable_IRQ+0x40>
    tmpisr |= I2C_IT_STOPI;
 8004b96:	f043 0320 	orr.w	r3, r3, #32
 8004b9a:	e7ec      	b.n	8004b76 <I2C_Disable_IRQ+0x44>
    tmpisr |= I2C_IT_TCI;
 8004b9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ba0:	e7eb      	b.n	8004b7a <I2C_Disable_IRQ+0x48>

08004ba2 <HAL_I2C_EV_IRQHandler>:
{
 8004ba2:	b508      	push	{r3, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8004ba4:	6803      	ldr	r3, [r0, #0]
 8004ba6:	6999      	ldr	r1, [r3, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8004ba8:	681a      	ldr	r2, [r3, #0]
  if (hi2c->XferISR != NULL)
 8004baa:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8004bac:	b103      	cbz	r3, 8004bb0 <HAL_I2C_EV_IRQHandler+0xe>
    hi2c->XferISR(hi2c, itflags, itsources);
 8004bae:	4798      	blx	r3
}
 8004bb0:	bd08      	pop	{r3, pc}

08004bb2 <HAL_I2C_SlaveTxCpltCallback>:
}
 8004bb2:	4770      	bx	lr

08004bb4 <HAL_I2C_SlaveRxCpltCallback>:
}
 8004bb4:	4770      	bx	lr

08004bb6 <I2C_ITSlaveSeqCplt>:
{
 8004bb6:	b510      	push	{r4, lr}
 8004bb8:	4604      	mov	r4, r0
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004bba:	6803      	ldr	r3, [r0, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bbe:	2100      	movs	r1, #0
 8004bc0:	f880 1042 	strb.w	r1, [r0, #66]	; 0x42
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004bc4:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004bc8:	d00e      	beq.n	8004be8 <I2C_ITSlaveSeqCplt+0x32>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004bd0:	601a      	str	r2, [r3, #0]
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004bd2:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b29      	cmp	r3, #41	; 0x29
 8004bda:	d00d      	beq.n	8004bf8 <I2C_ITSlaveSeqCplt+0x42>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004bdc:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b2a      	cmp	r3, #42	; 0x2a
 8004be4:	d018      	beq.n	8004c18 <I2C_ITSlaveSeqCplt+0x62>
}
 8004be6:	bd10      	pop	{r4, pc}
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004be8:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004bec:	d0f1      	beq.n	8004bd2 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	e7ec      	b.n	8004bd2 <I2C_ITSlaveSeqCplt+0x1c>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004bf8:	2328      	movs	r3, #40	; 0x28
 8004bfa:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004bfe:	2321      	movs	r3, #33	; 0x21
 8004c00:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8004c02:	2101      	movs	r1, #1
 8004c04:	4620      	mov	r0, r4
 8004c06:	f7ff ff94 	bl	8004b32 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c10:	4620      	mov	r0, r4
 8004c12:	f7ff ffce 	bl	8004bb2 <HAL_I2C_SlaveTxCpltCallback>
 8004c16:	e7e6      	b.n	8004be6 <I2C_ITSlaveSeqCplt+0x30>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004c18:	2328      	movs	r3, #40	; 0x28
 8004c1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c1e:	2322      	movs	r3, #34	; 0x22
 8004c20:	6323      	str	r3, [r4, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8004c22:	2102      	movs	r1, #2
 8004c24:	4620      	mov	r0, r4
 8004c26:	f7ff ff84 	bl	8004b32 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c30:	4620      	mov	r0, r4
 8004c32:	f7ff ffbf 	bl	8004bb4 <HAL_I2C_SlaveRxCpltCallback>
}
 8004c36:	e7d6      	b.n	8004be6 <I2C_ITSlaveSeqCplt+0x30>

08004c38 <HAL_I2C_AddrCallback>:
}
 8004c38:	4770      	bx	lr

08004c3a <I2C_ITAddrCplt>:
{
 8004c3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3c:	4604      	mov	r4, r0
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004c42:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c46:	2b28      	cmp	r3, #40	; 0x28
 8004c48:	d006      	beq.n	8004c58 <I2C_ITAddrCplt+0x1e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c4a:	6803      	ldr	r3, [r0, #0]
 8004c4c:	2208      	movs	r2, #8
 8004c4e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8004c50:	2300      	movs	r3, #0
 8004c52:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
}
 8004c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    transferdirection = I2C_GET_DIR(hi2c);
 8004c58:	6803      	ldr	r3, [r0, #0]
 8004c5a:	699e      	ldr	r6, [r3, #24]
 8004c5c:	f3c6 4600 	ubfx	r6, r6, #16, #1
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8004c60:	699a      	ldr	r2, [r3, #24]
 8004c62:	0c12      	lsrs	r2, r2, #16
 8004c64:	f002 05fe 	and.w	r5, r2, #254	; 0xfe
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8004c68:	689a      	ldr	r2, [r3, #8]
 8004c6a:	f3c2 0209 	ubfx	r2, r2, #0, #10
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8004c6e:	68df      	ldr	r7, [r3, #12]
 8004c70:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004c74:	68c1      	ldr	r1, [r0, #12]
 8004c76:	2902      	cmp	r1, #2
 8004c78:	d122      	bne.n	8004cc0 <I2C_ITAddrCplt+0x86>
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8004c7a:	ea85 15d2 	eor.w	r5, r5, r2, lsr #7
 8004c7e:	f015 0f06 	tst.w	r5, #6
 8004c82:	d110      	bne.n	8004ca6 <I2C_ITAddrCplt+0x6c>
        hi2c->AddrEventCount++;
 8004c84:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c86:	3101      	adds	r1, #1
 8004c88:	6481      	str	r1, [r0, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8004c8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8004c8c:	2902      	cmp	r1, #2
 8004c8e:	d1e2      	bne.n	8004c56 <I2C_ITAddrCplt+0x1c>
          hi2c->AddrEventCount = 0U;
 8004c90:	2100      	movs	r1, #0
 8004c92:	6481      	str	r1, [r0, #72]	; 0x48
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004c94:	2008      	movs	r0, #8
 8004c96:	61d8      	str	r0, [r3, #28]
          __HAL_UNLOCK(hi2c);
 8004c98:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4620      	mov	r0, r4
 8004ca0:	f7ff ffca 	bl	8004c38 <HAL_I2C_AddrCallback>
 8004ca4:	e7d7      	b.n	8004c56 <I2C_ITAddrCplt+0x1c>
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004ca6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004caa:	f7ff ff42 	bl	8004b32 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8004cae:	2300      	movs	r3, #0
 8004cb0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cb4:	463a      	mov	r2, r7
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	4620      	mov	r0, r4
 8004cba:	f7ff ffbd 	bl	8004c38 <HAL_I2C_AddrCallback>
 8004cbe:	e7ca      	b.n	8004c56 <I2C_ITAddrCplt+0x1c>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8004cc0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cc4:	f7ff ff35 	bl	8004b32 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8004cce:	462a      	mov	r2, r5
 8004cd0:	4631      	mov	r1, r6
 8004cd2:	4620      	mov	r0, r4
 8004cd4:	f7ff ffb0 	bl	8004c38 <HAL_I2C_AddrCallback>
 8004cd8:	e7bd      	b.n	8004c56 <I2C_ITAddrCplt+0x1c>

08004cda <HAL_I2C_ListenCpltCallback>:
}
 8004cda:	4770      	bx	lr

08004cdc <I2C_ITListenCplt>:
{
 8004cdc:	b510      	push	{r4, lr}
 8004cde:	4604      	mov	r4, r0
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce0:	4b17      	ldr	r3, [pc, #92]	; (8004d40 <I2C_ITListenCplt+0x64>)
 8004ce2:	62c3      	str	r3, [r0, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	6303      	str	r3, [r0, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8004ce8:	2220      	movs	r2, #32
 8004cea:	f880 2041 	strb.w	r2, [r0, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cee:	f880 3042 	strb.w	r3, [r0, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004cf2:	6343      	str	r3, [r0, #52]	; 0x34
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8004cf4:	f011 0f04 	tst.w	r1, #4
 8004cf8:	d013      	beq.n	8004d22 <I2C_ITListenCplt+0x46>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004cfa:	6803      	ldr	r3, [r0, #0]
 8004cfc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cfe:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d02:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004d04:	3301      	adds	r3, #1
 8004d06:	6243      	str	r3, [r0, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004d08:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 8004d0a:	b153      	cbz	r3, 8004d22 <I2C_ITListenCplt+0x46>
      hi2c->XferSize--;
 8004d0c:	3b01      	subs	r3, #1
 8004d0e:	8503      	strh	r3, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8004d10:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	3b01      	subs	r3, #1
 8004d16:	b29b      	uxth	r3, r3
 8004d18:	8543      	strh	r3, [r0, #42]	; 0x2a
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d1a:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	6443      	str	r3, [r0, #68]	; 0x44
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d22:	f248 0103 	movw	r1, #32771	; 0x8003
 8004d26:	4620      	mov	r0, r4
 8004d28:	f7ff ff03 	bl	8004b32 <I2C_Disable_IRQ>
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	2210      	movs	r2, #16
 8004d30:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  HAL_I2C_ListenCpltCallback(hi2c);
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7ff ffce 	bl	8004cda <HAL_I2C_ListenCpltCallback>
}
 8004d3e:	bd10      	pop	{r4, pc}
 8004d40:	ffff0000 	.word	0xffff0000

08004d44 <HAL_I2C_ErrorCallback>:
}
 8004d44:	4770      	bx	lr

08004d46 <HAL_I2C_AbortCpltCallback>:
}
 8004d46:	4770      	bx	lr

08004d48 <I2C_TreatErrorCallback>:
{
 8004d48:	b508      	push	{r3, lr}
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d4a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b60      	cmp	r3, #96	; 0x60
 8004d52:	d006      	beq.n	8004d62 <I2C_TreatErrorCallback+0x1a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d58:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004d5c:	f7ff fff2 	bl	8004d44 <HAL_I2C_ErrorCallback>
}
 8004d60:	bd08      	pop	{r3, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	2320      	movs	r3, #32
 8004d64:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	6303      	str	r3, [r0, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004d6c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    HAL_I2C_AbortCpltCallback(hi2c);
 8004d70:	f7ff ffe9 	bl	8004d46 <HAL_I2C_AbortCpltCallback>
 8004d74:	e7f4      	b.n	8004d60 <I2C_TreatErrorCallback+0x18>
	...

08004d78 <I2C_ITError>:
{
 8004d78:	b510      	push	{r4, lr}
 8004d7a:	4604      	mov	r4, r0
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004d7c:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004d80:	2000      	movs	r0, #0
 8004d82:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004d86:	4a3b      	ldr	r2, [pc, #236]	; (8004e74 <I2C_ITError+0xfc>)
 8004d88:	62e2      	str	r2, [r4, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8004d8a:	8560      	strh	r0, [r4, #42]	; 0x2a
  hi2c->ErrorCode |= ErrorCode;
 8004d8c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	6462      	str	r2, [r4, #68]	; 0x44
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8004d92:	3b28      	subs	r3, #40	; 0x28
 8004d94:	b2db      	uxtb	r3, r3
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d819      	bhi.n	8004dce <I2C_ITError+0x56>
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004d9a:	2103      	movs	r1, #3
 8004d9c:	4620      	mov	r0, r4
 8004d9e:	f7ff fec8 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8004da2:	2328      	movs	r3, #40	; 0x28
 8004da4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8004da8:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <I2C_ITError+0x100>)
 8004daa:	6363      	str	r3, [r4, #52]	; 0x34
  tmppreviousstate = hi2c->PreviousState;
 8004dac:	6b23      	ldr	r3, [r4, #48]	; 0x30
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8004dae:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004db0:	b11a      	cbz	r2, 8004dba <I2C_ITError+0x42>
 8004db2:	2b11      	cmp	r3, #17
 8004db4:	d01b      	beq.n	8004dee <I2C_ITError+0x76>
 8004db6:	2b21      	cmp	r3, #33	; 0x21
 8004db8:	d019      	beq.n	8004dee <I2C_ITError+0x76>
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8004dba:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8004dbc:	b11a      	cbz	r2, 8004dc6 <I2C_ITError+0x4e>
 8004dbe:	2b12      	cmp	r3, #18
 8004dc0:	d036      	beq.n	8004e30 <I2C_ITError+0xb8>
 8004dc2:	2b22      	cmp	r3, #34	; 0x22
 8004dc4:	d034      	beq.n	8004e30 <I2C_ITError+0xb8>
    I2C_TreatErrorCallback(hi2c);
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	f7ff ffbe 	bl	8004d48 <I2C_TreatErrorCallback>
}
 8004dcc:	bd10      	pop	{r4, pc}
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8004dce:	f248 0103 	movw	r1, #32771	; 0x8003
 8004dd2:	4620      	mov	r0, r4
 8004dd4:	f7ff fead 	bl	8004b32 <I2C_Disable_IRQ>
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8004dd8:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004ddc:	b2db      	uxtb	r3, r3
 8004dde:	2b60      	cmp	r3, #96	; 0x60
 8004de0:	d002      	beq.n	8004de8 <I2C_ITError+0x70>
      hi2c->State         = HAL_I2C_STATE_READY;
 8004de2:	2320      	movs	r3, #32
 8004de4:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->XferISR       = NULL;
 8004de8:	2300      	movs	r3, #0
 8004dea:	6363      	str	r3, [r4, #52]	; 0x34
 8004dec:	e7de      	b.n	8004dac <I2C_ITError+0x34>
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	f412 4f80 	tst.w	r2, #16384	; 0x4000
 8004df6:	d003      	beq.n	8004e00 <I2C_ITError+0x88>
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004df8:	681a      	ldr	r2, [r3, #0]
 8004dfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004dfe:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e00:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e02:	f7ff fbb3 	bl	800456c <HAL_DMA_GetState>
 8004e06:	2801      	cmp	r0, #1
 8004e08:	d00e      	beq.n	8004e28 <I2C_ITError+0xb0>
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e0a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004e0c:	4a1b      	ldr	r2, [pc, #108]	; (8004e7c <I2C_ITError+0x104>)
 8004e0e:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004e10:	2300      	movs	r3, #0
 8004e12:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e16:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e18:	f7ff fafa 	bl	8004410 <HAL_DMA_Abort_IT>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d0d5      	beq.n	8004dcc <I2C_ITError+0x54>
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e20:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004e22:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e24:	4798      	blx	r3
 8004e26:	e7d1      	b.n	8004dcc <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004e28:	4620      	mov	r0, r4
 8004e2a:	f7ff ff8d 	bl	8004d48 <I2C_TreatErrorCallback>
 8004e2e:	e7cd      	b.n	8004dcc <I2C_ITError+0x54>
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8004e30:	6823      	ldr	r3, [r4, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	f412 4f00 	tst.w	r2, #32768	; 0x8000
 8004e38:	d003      	beq.n	8004e42 <I2C_ITError+0xca>
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004e40:	601a      	str	r2, [r3, #0]
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e42:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e44:	f7ff fb92 	bl	800456c <HAL_DMA_GetState>
 8004e48:	2801      	cmp	r0, #1
 8004e4a:	d00e      	beq.n	8004e6a <I2C_ITError+0xf2>
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004e4c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004e4e:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <I2C_ITError+0x104>)
 8004e50:	639a      	str	r2, [r3, #56]	; 0x38
      __HAL_UNLOCK(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004e58:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e5a:	f7ff fad9 	bl	8004410 <HAL_DMA_Abort_IT>
 8004e5e:	2800      	cmp	r0, #0
 8004e60:	d0b4      	beq.n	8004dcc <I2C_ITError+0x54>
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e62:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8004e64:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8004e66:	4798      	blx	r3
 8004e68:	e7b0      	b.n	8004dcc <I2C_ITError+0x54>
      I2C_TreatErrorCallback(hi2c);
 8004e6a:	4620      	mov	r0, r4
 8004e6c:	f7ff ff6c 	bl	8004d48 <I2C_TreatErrorCallback>
 8004e70:	e7ac      	b.n	8004dcc <I2C_ITError+0x54>
 8004e72:	bf00      	nop
 8004e74:	ffff0000 	.word	0xffff0000
 8004e78:	08004fe9 	.word	0x08004fe9
 8004e7c:	080051a1 	.word	0x080051a1

08004e80 <I2C_ITSlaveCplt>:
{
 8004e80:	b570      	push	{r4, r5, r6, lr}
 8004e82:	4604      	mov	r4, r0
 8004e84:	460d      	mov	r5, r1
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8004e86:	6802      	ldr	r2, [r0, #0]
 8004e88:	6816      	ldr	r6, [r2, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8004e8a:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8004e8e:	b2db      	uxtb	r3, r3
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004e90:	2120      	movs	r1, #32
 8004e92:	61d1      	str	r1, [r2, #28]
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004e94:	2b21      	cmp	r3, #33	; 0x21
 8004e96:	d00d      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x34>
 8004e98:	2b29      	cmp	r3, #41	; 0x29
 8004e9a:	d00b      	beq.n	8004eb4 <I2C_ITSlaveCplt+0x34>
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004e9c:	2b22      	cmp	r3, #34	; 0x22
 8004e9e:	d001      	beq.n	8004ea4 <I2C_ITSlaveCplt+0x24>
 8004ea0:	2b2a      	cmp	r3, #42	; 0x2a
 8004ea2:	d10e      	bne.n	8004ec2 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8004ea4:	f248 0102 	movw	r1, #32770	; 0x8002
 8004ea8:	4620      	mov	r0, r4
 8004eaa:	f7ff fe42 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004eae:	2322      	movs	r3, #34	; 0x22
 8004eb0:	6323      	str	r3, [r4, #48]	; 0x30
 8004eb2:	e006      	b.n	8004ec2 <I2C_ITSlaveCplt+0x42>
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8004eb4:	f248 0101 	movw	r1, #32769	; 0x8001
 8004eb8:	4620      	mov	r0, r4
 8004eba:	f7ff fe3a 	bl	8004b32 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ebe:	2321      	movs	r3, #33	; 0x21
 8004ec0:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8004ec2:	6822      	ldr	r2, [r4, #0]
 8004ec4:	6853      	ldr	r3, [r2, #4]
 8004ec6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004eca:	6053      	str	r3, [r2, #4]
  I2C_RESET_CR2(hi2c);
 8004ecc:	6822      	ldr	r2, [r4, #0]
 8004ece:	6853      	ldr	r3, [r2, #4]
 8004ed0:	f023 73ff 	bic.w	r3, r3, #33423360	; 0x1fe0000
 8004ed4:	f423 338b 	bic.w	r3, r3, #71168	; 0x11600
 8004ed8:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
 8004edc:	f023 0301 	bic.w	r3, r3, #1
 8004ee0:	6053      	str	r3, [r2, #4]
  I2C_Flush_TXDR(hi2c);
 8004ee2:	4620      	mov	r0, r4
 8004ee4:	f7ff fe14 	bl	8004b10 <I2C_Flush_TXDR>
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8004ee8:	f416 4f80 	tst.w	r6, #16384	; 0x4000
 8004eec:	d040      	beq.n	8004f70 <I2C_ITSlaveCplt+0xf0>
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	6813      	ldr	r3, [r2, #0]
 8004ef2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ef6:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmatx != NULL)
 8004ef8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004efa:	b11b      	cbz	r3, 8004f04 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8004f04:	f015 0f04 	tst.w	r5, #4
 8004f08:	d011      	beq.n	8004f2e <I2C_ITSlaveCplt+0xae>
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8004f0a:	f025 0504 	bic.w	r5, r5, #4
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f14:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004f16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f18:	3301      	adds	r3, #1
 8004f1a:	6263      	str	r3, [r4, #36]	; 0x24
    if ((hi2c->XferSize > 0U))
 8004f1c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8004f1e:	b133      	cbz	r3, 8004f2e <I2C_ITSlaveCplt+0xae>
      hi2c->XferSize--;
 8004f20:	3b01      	subs	r3, #1
 8004f22:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8004f24:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f26:	b29b      	uxth	r3, r3
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	8563      	strh	r3, [r4, #42]	; 0x2a
  if (hi2c->XferCount != 0U)
 8004f2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8004f30:	b29b      	uxth	r3, r3
 8004f32:	b11b      	cbz	r3, 8004f3c <I2C_ITSlaveCplt+0xbc>
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f34:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	6463      	str	r3, [r4, #68]	; 0x44
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
  hi2c->XferISR = NULL;
 8004f42:	6363      	str	r3, [r4, #52]	; 0x34
  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f44:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8004f46:	bb1b      	cbnz	r3, 8004f90 <I2C_ITSlaveCplt+0x110>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8004f48:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004f4a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004f4e:	d12d      	bne.n	8004fac <I2C_ITSlaveCplt+0x12c>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004f50:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b22      	cmp	r3, #34	; 0x22
 8004f58:	d038      	beq.n	8004fcc <I2C_ITSlaveCplt+0x14c>
    hi2c->State = HAL_I2C_STATE_READY;
 8004f5a:	2320      	movs	r3, #32
 8004f5c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f60:	2300      	movs	r3, #0
 8004f62:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004f64:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004f68:	4620      	mov	r0, r4
 8004f6a:	f7ff fe22 	bl	8004bb2 <HAL_I2C_SlaveTxCpltCallback>
}
 8004f6e:	e02c      	b.n	8004fca <I2C_ITSlaveCplt+0x14a>
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8004f70:	f416 4f00 	tst.w	r6, #32768	; 0x8000
 8004f74:	d0c6      	beq.n	8004f04 <I2C_ITSlaveCplt+0x84>
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8004f76:	6822      	ldr	r2, [r4, #0]
 8004f78:	6813      	ldr	r3, [r2, #0]
 8004f7a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004f7e:	6013      	str	r3, [r2, #0]
    if (hi2c->hdmarx != NULL)
 8004f80:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0be      	beq.n	8004f04 <I2C_ITSlaveCplt+0x84>
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	b29b      	uxth	r3, r3
 8004f8c:	8563      	strh	r3, [r4, #42]	; 0x2a
 8004f8e:	e7b9      	b.n	8004f04 <I2C_ITSlaveCplt+0x84>
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8004f90:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8004f92:	4620      	mov	r0, r4
 8004f94:	f7ff fef0 	bl	8004d78 <I2C_ITError>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f98:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8004f9c:	b2db      	uxtb	r3, r3
 8004f9e:	2b28      	cmp	r3, #40	; 0x28
 8004fa0:	d113      	bne.n	8004fca <I2C_ITSlaveCplt+0x14a>
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f7ff fe99 	bl	8004cdc <I2C_ITListenCplt>
 8004faa:	e00e      	b.n	8004fca <I2C_ITSlaveCplt+0x14a>
    I2C_ITSlaveSeqCplt(hi2c);
 8004fac:	4620      	mov	r0, r4
 8004fae:	f7ff fe02 	bl	8004bb6 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004fb2:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <I2C_ITSlaveCplt+0x164>)
 8004fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8004fb6:	2320      	movs	r3, #32
 8004fb8:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fc0:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f7ff fe88 	bl	8004cda <HAL_I2C_ListenCpltCallback>
}
 8004fca:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	2320      	movs	r3, #32
 8004fce:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	6323      	str	r3, [r4, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004fd6:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004fda:	4620      	mov	r0, r4
 8004fdc:	f7ff fdea 	bl	8004bb4 <HAL_I2C_SlaveRxCpltCallback>
 8004fe0:	e7f3      	b.n	8004fca <I2C_ITSlaveCplt+0x14a>
 8004fe2:	bf00      	nop
 8004fe4:	ffff0000 	.word	0xffff0000

08004fe8 <I2C_Slave_ISR_IT>:
{
 8004fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tmpoptions = hi2c->XferOptions;
 8004fea:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
  __HAL_LOCK(hi2c);
 8004fec:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	f000 809e 	beq.w	8005132 <I2C_Slave_ISR_IT+0x14a>
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	460d      	mov	r5, r1
 8004ffa:	4616      	mov	r6, r2
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005002:	f011 0f20 	tst.w	r1, #32
 8005006:	d002      	beq.n	800500e <I2C_Slave_ISR_IT+0x26>
 8005008:	f012 0f20 	tst.w	r2, #32
 800500c:	d119      	bne.n	8005042 <I2C_Slave_ISR_IT+0x5a>
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800500e:	f015 0f10 	tst.w	r5, #16
 8005012:	d03e      	beq.n	8005092 <I2C_Slave_ISR_IT+0xaa>
 8005014:	f016 0f10 	tst.w	r6, #16
 8005018:	d03b      	beq.n	8005092 <I2C_Slave_ISR_IT+0xaa>
    if (hi2c->XferCount == 0U)
 800501a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800501c:	b29b      	uxth	r3, r3
 800501e:	bb43      	cbnz	r3, 8005072 <I2C_Slave_ISR_IT+0x8a>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005020:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8005024:	b2db      	uxtb	r3, r3
 8005026:	2b28      	cmp	r3, #40	; 0x28
 8005028:	d00e      	beq.n	8005048 <I2C_Slave_ISR_IT+0x60>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800502a:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800502e:	b2db      	uxtb	r3, r3
 8005030:	2b29      	cmp	r3, #41	; 0x29
 8005032:	d011      	beq.n	8005058 <I2C_Slave_ISR_IT+0x70>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005034:	6823      	ldr	r3, [r4, #0]
 8005036:	2210      	movs	r2, #16
 8005038:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(hi2c);
 800503a:	2000      	movs	r0, #0
 800503c:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
}
 8005040:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005042:	f7ff ff1d 	bl	8004e80 <I2C_ITSlaveCplt>
 8005046:	e7e2      	b.n	800500e <I2C_Slave_ISR_IT+0x26>
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005048:	f1b7 7f00 	cmp.w	r7, #33554432	; 0x2000000
 800504c:	d1ed      	bne.n	800502a <I2C_Slave_ISR_IT+0x42>
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800504e:	4629      	mov	r1, r5
 8005050:	4620      	mov	r0, r4
 8005052:	f7ff fe43 	bl	8004cdc <I2C_ITListenCplt>
 8005056:	e7f0      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005058:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 800505c:	d0ea      	beq.n	8005034 <I2C_Slave_ISR_IT+0x4c>
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800505e:	6823      	ldr	r3, [r4, #0]
 8005060:	2210      	movs	r2, #16
 8005062:	61da      	str	r2, [r3, #28]
        I2C_Flush_TXDR(hi2c);
 8005064:	4620      	mov	r0, r4
 8005066:	f7ff fd53 	bl	8004b10 <I2C_Flush_TXDR>
        I2C_ITSlaveSeqCplt(hi2c);
 800506a:	4620      	mov	r0, r4
 800506c:	f7ff fda3 	bl	8004bb6 <I2C_ITSlaveSeqCplt>
 8005070:	e7e3      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005072:	6823      	ldr	r3, [r4, #0]
 8005074:	2210      	movs	r2, #16
 8005076:	61da      	str	r2, [r3, #28]
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005078:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800507a:	f043 0304 	orr.w	r3, r3, #4
 800507e:	6463      	str	r3, [r4, #68]	; 0x44
      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005080:	b117      	cbz	r7, 8005088 <I2C_Slave_ISR_IT+0xa0>
 8005082:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005086:	d1d8      	bne.n	800503a <I2C_Slave_ISR_IT+0x52>
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005088:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800508a:	4620      	mov	r0, r4
 800508c:	f7ff fe74 	bl	8004d78 <I2C_ITError>
 8005090:	e7d3      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005092:	f015 0f04 	tst.w	r5, #4
 8005096:	d01f      	beq.n	80050d8 <I2C_Slave_ISR_IT+0xf0>
 8005098:	f016 0f04 	tst.w	r6, #4
 800509c:	d01c      	beq.n	80050d8 <I2C_Slave_ISR_IT+0xf0>
    if (hi2c->XferCount > 0U)
 800509e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050a0:	b29b      	uxth	r3, r3
 80050a2:	b173      	cbz	r3, 80050c2 <I2C_Slave_ISR_IT+0xda>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80050a4:	6823      	ldr	r3, [r4, #0]
 80050a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80050a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050aa:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80050ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80050ae:	3301      	adds	r3, #1
 80050b0:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80050b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80050b4:	3b01      	subs	r3, #1
 80050b6:	8523      	strh	r3, [r4, #40]	; 0x28
      hi2c->XferCount--;
 80050b8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29b      	uxth	r3, r3
 80050c0:	8563      	strh	r3, [r4, #42]	; 0x2a
    if ((hi2c->XferCount == 0U) && \
 80050c2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050c4:	b29b      	uxth	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1b7      	bne.n	800503a <I2C_Slave_ISR_IT+0x52>
 80050ca:	f517 3f80 	cmn.w	r7, #65536	; 0x10000
 80050ce:	d0b4      	beq.n	800503a <I2C_Slave_ISR_IT+0x52>
      I2C_ITSlaveSeqCplt(hi2c);
 80050d0:	4620      	mov	r0, r4
 80050d2:	f7ff fd70 	bl	8004bb6 <I2C_ITSlaveSeqCplt>
 80050d6:	e7b0      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80050d8:	f015 0f08 	tst.w	r5, #8
 80050dc:	d002      	beq.n	80050e4 <I2C_Slave_ISR_IT+0xfc>
 80050de:	f016 0f08 	tst.w	r6, #8
 80050e2:	d118      	bne.n	8005116 <I2C_Slave_ISR_IT+0x12e>
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80050e4:	f015 0f02 	tst.w	r5, #2
 80050e8:	d0a7      	beq.n	800503a <I2C_Slave_ISR_IT+0x52>
 80050ea:	f016 0f02 	tst.w	r6, #2
 80050ee:	d0a4      	beq.n	800503a <I2C_Slave_ISR_IT+0x52>
    if (hi2c->XferCount > 0U)
 80050f0:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80050f2:	b29b      	uxth	r3, r3
 80050f4:	b1a3      	cbz	r3, 8005120 <I2C_Slave_ISR_IT+0x138>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80050f6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	7812      	ldrb	r2, [r2, #0]
 80050fc:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->pBuffPtr++;
 80050fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005100:	3301      	adds	r3, #1
 8005102:	6263      	str	r3, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005104:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005106:	b29b      	uxth	r3, r3
 8005108:	3b01      	subs	r3, #1
 800510a:	b29b      	uxth	r3, r3
 800510c:	8563      	strh	r3, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 800510e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005110:	3b01      	subs	r3, #1
 8005112:	8523      	strh	r3, [r4, #40]	; 0x28
 8005114:	e791      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005116:	4629      	mov	r1, r5
 8005118:	4620      	mov	r0, r4
 800511a:	f7ff fd8e 	bl	8004c3a <I2C_ITAddrCplt>
 800511e:	e78c      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005120:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
 8005124:	d001      	beq.n	800512a <I2C_Slave_ISR_IT+0x142>
 8005126:	2f00      	cmp	r7, #0
 8005128:	d187      	bne.n	800503a <I2C_Slave_ISR_IT+0x52>
        I2C_ITSlaveSeqCplt(hi2c);
 800512a:	4620      	mov	r0, r4
 800512c:	f7ff fd43 	bl	8004bb6 <I2C_ITSlaveSeqCplt>
 8005130:	e783      	b.n	800503a <I2C_Slave_ISR_IT+0x52>
  __HAL_LOCK(hi2c);
 8005132:	2002      	movs	r0, #2
 8005134:	e784      	b.n	8005040 <I2C_Slave_ISR_IT+0x58>

08005136 <HAL_I2C_ER_IRQHandler>:
{
 8005136:	b510      	push	{r4, lr}
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005138:	6802      	ldr	r2, [r0, #0]
 800513a:	6993      	ldr	r3, [r2, #24]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800513c:	6811      	ldr	r1, [r2, #0]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800513e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005142:	d009      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x22>
 8005144:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005148:	d006      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x22>
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800514a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800514c:	f044 0401 	orr.w	r4, r4, #1
 8005150:	6444      	str	r4, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005152:	f44f 7480 	mov.w	r4, #256	; 0x100
 8005156:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005158:	f413 6f80 	tst.w	r3, #1024	; 0x400
 800515c:	d00a      	beq.n	8005174 <HAL_I2C_ER_IRQHandler+0x3e>
 800515e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8005162:	d007      	beq.n	8005174 <HAL_I2C_ER_IRQHandler+0x3e>
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005164:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005166:	f042 0208 	orr.w	r2, r2, #8
 800516a:	6442      	str	r2, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800516c:	6802      	ldr	r2, [r0, #0]
 800516e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8005172:	61d4      	str	r4, [r2, #28]
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005174:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005178:	d00a      	beq.n	8005190 <HAL_I2C_ER_IRQHandler+0x5a>
 800517a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800517e:	d007      	beq.n	8005190 <HAL_I2C_ER_IRQHandler+0x5a>
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005180:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005182:	f043 0302 	orr.w	r3, r3, #2
 8005186:	6443      	str	r3, [r0, #68]	; 0x44
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005188:	6803      	ldr	r3, [r0, #0]
 800518a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800518e:	61da      	str	r2, [r3, #28]
  tmperror = hi2c->ErrorCode;
 8005190:	6c41      	ldr	r1, [r0, #68]	; 0x44
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005192:	f011 0f0b 	tst.w	r1, #11
 8005196:	d100      	bne.n	800519a <HAL_I2C_ER_IRQHandler+0x64>
}
 8005198:	bd10      	pop	{r4, pc}
    I2C_ITError(hi2c, tmperror);
 800519a:	f7ff fded 	bl	8004d78 <I2C_ITError>
}
 800519e:	e7fb      	b.n	8005198 <HAL_I2C_ER_IRQHandler+0x62>

080051a0 <I2C_DMAAbort>:
{
 80051a0:	b508      	push	{r3, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80051a2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  if (hi2c->hdmatx != NULL)
 80051a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80051a6:	b10b      	cbz	r3, 80051ac <I2C_DMAAbort+0xc>
    hi2c->hdmatx->XferAbortCallback = NULL;
 80051a8:	2200      	movs	r2, #0
 80051aa:	639a      	str	r2, [r3, #56]	; 0x38
  if (hi2c->hdmarx != NULL)
 80051ac:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80051ae:	b10b      	cbz	r3, 80051b4 <I2C_DMAAbort+0x14>
    hi2c->hdmarx->XferAbortCallback = NULL;
 80051b0:	2200      	movs	r2, #0
 80051b2:	639a      	str	r2, [r3, #56]	; 0x38
  I2C_TreatErrorCallback(hi2c);
 80051b4:	f7ff fdc8 	bl	8004d48 <I2C_TreatErrorCallback>
}
 80051b8:	bd08      	pop	{r3, pc}
	...

080051bc <HAL_PWR_EnableBkUpAccess>:
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051bc:	4a02      	ldr	r2, [pc, #8]	; (80051c8 <HAL_PWR_EnableBkUpAccess+0xc>)
 80051be:	6813      	ldr	r3, [r2, #0]
 80051c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051c4:	6013      	str	r3, [r2, #0]
}
 80051c6:	4770      	bx	lr
 80051c8:	58000400 	.word	0x58000400

080051cc <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 80051cc:	b510      	push	{r4, lr}
 80051ce:	460c      	mov	r4, r1
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 80051d0:	b9a0      	cbnz	r0, 80051fc <HAL_PWR_EnterSLEEPMode+0x30>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 80051d2:	4b0f      	ldr	r3, [pc, #60]	; (8005210 <HAL_PWR_EnterSLEEPMode+0x44>)
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	f413 7f00 	tst.w	r3, #512	; 0x200
 80051da:	d10a      	bne.n	80051f2 <HAL_PWR_EnterSLEEPMode+0x26>
      HAL_PWREx_EnableLowPowerRunMode();
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80051dc:	4a0d      	ldr	r2, [pc, #52]	; (8005214 <HAL_PWR_EnterSLEEPMode+0x48>)
 80051de:	6913      	ldr	r3, [r2, #16]
 80051e0:	f023 0304 	bic.w	r3, r3, #4
 80051e4:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 80051e6:	2c01      	cmp	r4, #1
 80051e8:	d010      	beq.n	800520c <HAL_PWR_EnterSLEEPMode+0x40>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80051ea:	bf40      	sev
    __WFE();
 80051ec:	bf20      	wfe
    __WFE();
 80051ee:	bf20      	wfe
  }
}
 80051f0:	bd10      	pop	{r4, pc}
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 80051f2:	f000 f821 	bl	8005238 <HAL_PWREx_DisableLowPowerRunMode>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d0f0      	beq.n	80051dc <HAL_PWR_EnterSLEEPMode+0x10>
 80051fa:	e7f9      	b.n	80051f0 <HAL_PWR_EnterSLEEPMode+0x24>
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 80051fc:	4b04      	ldr	r3, [pc, #16]	; (8005210 <HAL_PWR_EnterSLEEPMode+0x44>)
 80051fe:	695b      	ldr	r3, [r3, #20]
 8005200:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005204:	d1ea      	bne.n	80051dc <HAL_PWR_EnterSLEEPMode+0x10>
      HAL_PWREx_EnableLowPowerRunMode();
 8005206:	f000 f80f 	bl	8005228 <HAL_PWREx_EnableLowPowerRunMode>
 800520a:	e7e7      	b.n	80051dc <HAL_PWR_EnterSLEEPMode+0x10>
    __WFI();
 800520c:	bf30      	wfi
 800520e:	e7ef      	b.n	80051f0 <HAL_PWR_EnterSLEEPMode+0x24>
 8005210:	58000400 	.word	0x58000400
 8005214:	e000ed00 	.word	0xe000ed00

08005218 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
  return (PWR->CR1 & PWR_CR1_VOS);
 8005218:	4b02      	ldr	r3, [pc, #8]	; (8005224 <HAL_PWREx_GetVoltageRange+0xc>)
 800521a:	6818      	ldr	r0, [r3, #0]
}
 800521c:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	58000400 	.word	0x58000400

08005228 <HAL_PWREx_EnableLowPowerRunMode>:
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8005228:	4a02      	ldr	r2, [pc, #8]	; (8005234 <HAL_PWREx_EnableLowPowerRunMode+0xc>)
 800522a:	6813      	ldr	r3, [r2, #0]
 800522c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005230:	6013      	str	r3, [r2, #0]
}
 8005232:	4770      	bx	lr
 8005234:	58000400 	.word	0x58000400

08005238 <HAL_PWREx_DisableLowPowerRunMode>:
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8005238:	4a0f      	ldr	r2, [pc, #60]	; (8005278 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800523a:	6813      	ldr	r3, [r2, #0]
 800523c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005240:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8005242:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_PWREx_DisableLowPowerRunMode+0x44>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	2232      	movs	r2, #50	; 0x32
 8005248:	fb02 f303 	mul.w	r3, r2, r3
 800524c:	4a0c      	ldr	r2, [pc, #48]	; (8005280 <HAL_PWREx_DisableLowPowerRunMode+0x48>)
 800524e:	fba2 2303 	umull	r2, r3, r2, r3
 8005252:	0c9b      	lsrs	r3, r3, #18
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005254:	e000      	b.n	8005258 <HAL_PWREx_DisableLowPowerRunMode+0x20>
  {
    wait_loop_index--;
 8005256:	3b01      	subs	r3, #1
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8005258:	4a07      	ldr	r2, [pc, #28]	; (8005278 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 800525a:	6952      	ldr	r2, [r2, #20]
 800525c:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005260:	d001      	beq.n	8005266 <HAL_PWREx_DisableLowPowerRunMode+0x2e>
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f7      	bne.n	8005256 <HAL_PWREx_DisableLowPowerRunMode+0x1e>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8005266:	4b04      	ldr	r3, [pc, #16]	; (8005278 <HAL_PWREx_DisableLowPowerRunMode+0x40>)
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	f413 7f00 	tst.w	r3, #512	; 0x200
 800526e:	d101      	bne.n	8005274 <HAL_PWREx_DisableLowPowerRunMode+0x3c>
  {
    return HAL_TIMEOUT;
  }

  return HAL_OK;
 8005270:	2000      	movs	r0, #0
 8005272:	4770      	bx	lr
    return HAL_TIMEOUT;
 8005274:	2003      	movs	r0, #3
}
 8005276:	4770      	bx	lr
 8005278:	58000400 	.word	0x58000400
 800527c:	20000078 	.word	0x20000078
 8005280:	431bde83 	.word	0x431bde83

08005284 <HAL_PWREx_EnterSTOP2Mode>:
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8005284:	4a0c      	ldr	r2, [pc, #48]	; (80052b8 <HAL_PWREx_EnterSTOP2Mode+0x34>)
 8005286:	6813      	ldr	r3, [r2, #0]
 8005288:	f023 0307 	bic.w	r3, r3, #7
 800528c:	f043 0302 	orr.w	r3, r3, #2
 8005290:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8005292:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 8005294:	6913      	ldr	r3, [r2, #16]
 8005296:	f043 0304 	orr.w	r3, r3, #4
 800529a:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 800529c:	2801      	cmp	r0, #1
 800529e:	d008      	beq.n	80052b2 <HAL_PWREx_EnterSTOP2Mode+0x2e>
    __WFI();
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 80052a0:	bf40      	sev
    __WFE();
 80052a2:	bf20      	wfe
    __WFE();
 80052a4:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80052a6:	4a05      	ldr	r2, [pc, #20]	; (80052bc <HAL_PWREx_EnterSTOP2Mode+0x38>)
 80052a8:	6913      	ldr	r3, [r2, #16]
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	6113      	str	r3, [r2, #16]
}
 80052b0:	4770      	bx	lr
    __WFI();
 80052b2:	bf30      	wfi
 80052b4:	e7f7      	b.n	80052a6 <HAL_PWREx_EnterSTOP2Mode+0x22>
 80052b6:	bf00      	nop
 80052b8:	58000400 	.word	0x58000400
 80052bc:	e000ed00 	.word	0xe000ed00

080052c0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80052c0:	b530      	push	{r4, r5, lr}
 80052c2:	b089      	sub	sp, #36	; 0x24
 80052c4:	4604      	mov	r4, r0
 80052c6:	468c      	mov	ip, r1
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80052c8:	4b2a      	ldr	r3, [pc, #168]	; (8005374 <RCC_SetFlashLatency+0xb4>)
 80052ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80052ce:	9006      	str	r0, [sp, #24]
 80052d0:	f8ad 101c 	strh.w	r1, [sp, #28]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80052d4:	f103 0208 	add.w	r2, r3, #8
 80052d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80052dc:	9004      	str	r0, [sp, #16]
 80052de:	f8ad 1014 	strh.w	r1, [sp, #20]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80052e2:	ad01      	add	r5, sp, #4
 80052e4:	3310      	adds	r3, #16
 80052e6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ee:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 80052f2:	d007      	beq.n	8005304 <RCC_SetFlashLatency+0x44>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80052f4:	2300      	movs	r3, #0
 80052f6:	e014      	b.n	8005322 <RCC_SetFlashLatency+0x62>
        latency = FLASH_LATENCY_RANGE[index];
 80052f8:	aa08      	add	r2, sp, #32
 80052fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80052fe:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 8005302:	e01e      	b.n	8005342 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005304:	2300      	movs	r3, #0
 8005306:	2b02      	cmp	r3, #2
 8005308:	d808      	bhi.n	800531c <RCC_SetFlashLatency+0x5c>
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 800530a:	aa08      	add	r2, sp, #32
 800530c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 8005310:	f832 2c08 	ldrh.w	r2, [r2, #-8]
 8005314:	42a2      	cmp	r2, r4
 8005316:	d2ef      	bcs.n	80052f8 <RCC_SetFlashLatency+0x38>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8005318:	3301      	adds	r3, #1
 800531a:	e7f4      	b.n	8005306 <RCC_SetFlashLatency+0x46>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 800531c:	2500      	movs	r5, #0
 800531e:	e010      	b.n	8005342 <RCC_SetFlashLatency+0x82>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8005320:	3301      	adds	r3, #1
 8005322:	2b02      	cmp	r3, #2
 8005324:	d80c      	bhi.n	8005340 <RCC_SetFlashLatency+0x80>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8005326:	aa08      	add	r2, sp, #32
 8005328:	eb02 0243 	add.w	r2, r2, r3, lsl #1
 800532c:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 8005330:	42a2      	cmp	r2, r4
 8005332:	d3f5      	bcc.n	8005320 <RCC_SetFlashLatency+0x60>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8005334:	aa08      	add	r2, sp, #32
 8005336:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800533a:	f853 5c1c 	ldr.w	r5, [r3, #-28]
        break;
 800533e:	e000      	b.n	8005342 <RCC_SetFlashLatency+0x82>
  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8005340:	2500      	movs	r5, #0
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005342:	4a0d      	ldr	r2, [pc, #52]	; (8005378 <RCC_SetFlashLatency+0xb8>)
 8005344:	6813      	ldr	r3, [r2, #0]
 8005346:	f023 0307 	bic.w	r3, r3, #7
 800534a:	432b      	orrs	r3, r5
 800534c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800534e:	f7fc fc89 	bl	8001c64 <HAL_GetTick>
 8005352:	4604      	mov	r4, r0

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8005354:	4b08      	ldr	r3, [pc, #32]	; (8005378 <RCC_SetFlashLatency+0xb8>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0307 	and.w	r3, r3, #7
 800535c:	42ab      	cmp	r3, r5
 800535e:	d006      	beq.n	800536e <RCC_SetFlashLatency+0xae>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005360:	f7fc fc80 	bl	8001c64 <HAL_GetTick>
 8005364:	1b00      	subs	r0, r0, r4
 8005366:	2802      	cmp	r0, #2
 8005368:	d9f4      	bls.n	8005354 <RCC_SetFlashLatency+0x94>
    {
      return HAL_TIMEOUT;
 800536a:	2003      	movs	r0, #3
 800536c:	e000      	b.n	8005370 <RCC_SetFlashLatency+0xb0>
    }
  }
  return HAL_OK;
 800536e:	2000      	movs	r0, #0
}
 8005370:	b009      	add	sp, #36	; 0x24
 8005372:	bd30      	pop	{r4, r5, pc}
 8005374:	08013f90 	.word	0x08013f90
 8005378:	58004000 	.word	0x58004000

0800537c <RCC_SetFlashLatencyFromMSIRange>:
{
 800537c:	b510      	push	{r4, lr}
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 800537e:	f3c0 1003 	ubfx	r0, r0, #4, #4
 8005382:	4b0c      	ldr	r3, [pc, #48]	; (80053b4 <RCC_SetFlashLatencyFromMSIRange+0x38>)
 8005384:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8005388:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800538c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8005390:	f003 030f 	and.w	r3, r3, #15
 8005394:	4a08      	ldr	r2, [pc, #32]	; (80053b8 <RCC_SetFlashLatencyFromMSIRange+0x3c>)
 8005396:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800539a:	fbb4 f4f0 	udiv	r4, r4, r0
  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800539e:	f7ff ff3b 	bl	8005218 <HAL_PWREx_GetVoltageRange>
 80053a2:	4601      	mov	r1, r0
 80053a4:	4805      	ldr	r0, [pc, #20]	; (80053bc <RCC_SetFlashLatencyFromMSIRange+0x40>)
 80053a6:	fba0 3004 	umull	r3, r0, r0, r4
 80053aa:	0c80      	lsrs	r0, r0, #18
 80053ac:	f7ff ff88 	bl	80052c0 <RCC_SetFlashLatency>
}
 80053b0:	bd10      	pop	{r4, pc}
 80053b2:	bf00      	nop
 80053b4:	08014578 	.word	0x08014578
 80053b8:	08014518 	.word	0x08014518
 80053bc:	431bde83 	.word	0x431bde83

080053c0 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80053c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053c4:	6899      	ldr	r1, [r3, #8]
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0303 	and.w	r3, r3, #3
  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80053cc:	f011 010c 	ands.w	r1, r1, #12
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCC_GetSysClockFreq+0x28>
 80053d2:	290c      	cmp	r1, #12
 80053d4:	d006      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x24>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80053d6:	2904      	cmp	r1, #4
 80053d8:	d047      	beq.n	800546a <HAL_RCC_GetSysClockFreq+0xaa>
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80053da:	2908      	cmp	r1, #8
 80053dc:	d03b      	beq.n	8005456 <HAL_RCC_GetSysClockFreq+0x96>
  uint32_t msifreq = 0U;
 80053de:	2200      	movs	r2, #0
  uint32_t sysclockfreq = 0U;
 80053e0:	4610      	mov	r0, r2
 80053e2:	e026      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80053e4:	2b01      	cmp	r3, #1
 80053e6:	d1f6      	bne.n	80053d6 <HAL_RCC_GetSysClockFreq+0x16>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80053e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f013 0308 	ands.w	r3, r3, #8
 80053f2:	d00d      	beq.n	8005410 <HAL_RCC_GetSysClockFreq+0x50>
 80053f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f013 0308 	ands.w	r3, r3, #8
 80053fe:	d124      	bne.n	800544a <HAL_RCC_GetSysClockFreq+0x8a>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8005400:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005404:	f8d2 2094 	ldr.w	r2, [r2, #148]	; 0x94
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005408:	4a2e      	ldr	r2, [pc, #184]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800540a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800540e:	e00e      	b.n	800542e <HAL_RCC_GetSysClockFreq+0x6e>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005410:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	f012 0f08 	tst.w	r2, #8
 800541a:	d112      	bne.n	8005442 <HAL_RCC_GetSysClockFreq+0x82>
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800541c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005420:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005424:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8005428:	4a26      	ldr	r2, [pc, #152]	; (80054c4 <HAL_RCC_GetSysClockFreq+0x104>)
 800542a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800542e:	b1d1      	cbz	r1, 8005466 <HAL_RCC_GetSysClockFreq+0xa6>
  uint32_t sysclockfreq = 0U;
 8005430:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f003 030c 	and.w	r3, r3, #12
  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800543c:	2b0c      	cmp	r3, #12
 800543e:	d01a      	beq.n	8005476 <HAL_RCC_GetSysClockFreq+0xb6>
}
 8005440:	4770      	bx	lr
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005442:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005446:	6812      	ldr	r2, [r2, #0]
 8005448:	e7ee      	b.n	8005428 <HAL_RCC_GetSysClockFreq+0x68>
 800544a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800544e:	681b      	ldr	r3, [r3, #0]
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005450:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005454:	e7d8      	b.n	8005408 <HAL_RCC_GetSysClockFreq+0x48>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005456:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800545a:	681a      	ldr	r2, [r3, #0]
 800545c:	f412 1280 	ands.w	r2, r2, #1048576	; 0x100000
 8005460:	d106      	bne.n	8005470 <HAL_RCC_GetSysClockFreq+0xb0>
      sysclockfreq = HSE_VALUE;
 8005462:	4819      	ldr	r0, [pc, #100]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005464:	e7e5      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x72>
      sysclockfreq = msifreq;
 8005466:	4610      	mov	r0, r2
 8005468:	e7e3      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 800546a:	2200      	movs	r2, #0
    sysclockfreq = HSI_VALUE;
 800546c:	4817      	ldr	r0, [pc, #92]	; (80054cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800546e:	e7e0      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x72>
  uint32_t msifreq = 0U;
 8005470:	2200      	movs	r2, #0
      sysclockfreq = HSE_VALUE / 2U;
 8005472:	4816      	ldr	r0, [pc, #88]	; (80054cc <HAL_RCC_GetSysClockFreq+0x10c>)
 8005474:	e7dd      	b.n	8005432 <HAL_RCC_GetSysClockFreq+0x72>
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005476:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005480:	2b02      	cmp	r3, #2
 8005482:	d009      	beq.n	8005498 <HAL_RCC_GetSysClockFreq+0xd8>
 8005484:	2b03      	cmp	r3, #3
 8005486:	d108      	bne.n	800549a <HAL_RCC_GetSysClockFreq+0xda>
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8005488:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8005492:	d115      	bne.n	80054c0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005494:	4a0c      	ldr	r2, [pc, #48]	; (80054c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005496:	e000      	b.n	800549a <HAL_RCC_GetSysClockFreq+0xda>
    switch (pllsource)
 8005498:	4a0c      	ldr	r2, [pc, #48]	; (80054cc <HAL_RCC_GetSysClockFreq+0x10c>)
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800549a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800549e:	68d8      	ldr	r0, [r3, #12]
 80054a0:	f3c0 2006 	ubfx	r0, r0, #8, #7
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80054a4:	fb00 f202 	mul.w	r2, r0, r2
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80054a8:	68d8      	ldr	r0, [r3, #12]
 80054aa:	f3c0 1002 	ubfx	r0, r0, #4, #3
 80054ae:	3001      	adds	r0, #1
 80054b0:	fbb2 f2f0 	udiv	r2, r2, r0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80054b4:	68d8      	ldr	r0, [r3, #12]
 80054b6:	0f40      	lsrs	r0, r0, #29
 80054b8:	3001      	adds	r0, #1
 80054ba:	fbb2 f0f0 	udiv	r0, r2, r0
  return sysclockfreq;
 80054be:	e7bf      	b.n	8005440 <HAL_RCC_GetSysClockFreq+0x80>
          pllinputfreq = HSE_VALUE / 2U;
 80054c0:	4a02      	ldr	r2, [pc, #8]	; (80054cc <HAL_RCC_GetSysClockFreq+0x10c>)
 80054c2:	e7ea      	b.n	800549a <HAL_RCC_GetSysClockFreq+0xda>
 80054c4:	08014578 	.word	0x08014578
 80054c8:	01e84800 	.word	0x01e84800
 80054cc:	00f42400 	.word	0x00f42400

080054d0 <HAL_RCC_GetHCLKFreq>:
{
 80054d0:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80054d2:	f7ff ff75 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80054d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054da:	689b      	ldr	r3, [r3, #8]
 80054dc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80054e0:	4a02      	ldr	r2, [pc, #8]	; (80054ec <HAL_RCC_GetHCLKFreq+0x1c>)
 80054e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80054e6:	fbb0 f0f3 	udiv	r0, r0, r3
 80054ea:	bd08      	pop	{r3, pc}
 80054ec:	08014518 	.word	0x08014518

080054f0 <HAL_RCC_OscConfig>:
  if (RCC_OscInitStruct == NULL)
 80054f0:	2800      	cmp	r0, #0
 80054f2:	f000 8311 	beq.w	8005b18 <HAL_RCC_OscConfig+0x628>
{
 80054f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054f8:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80054fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80054fe:	689d      	ldr	r5, [r3, #8]
 8005500:	f005 050c 	and.w	r5, r5, #12
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8005504:	68de      	ldr	r6, [r3, #12]
 8005506:	f006 0603 	and.w	r6, r6, #3
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800550a:	6803      	ldr	r3, [r0, #0]
 800550c:	f013 0f20 	tst.w	r3, #32
 8005510:	d02a      	beq.n	8005568 <HAL_RCC_OscConfig+0x78>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005512:	2d00      	cmp	r5, #0
 8005514:	d065      	beq.n	80055e2 <HAL_RCC_OscConfig+0xf2>
 8005516:	2d0c      	cmp	r5, #12
 8005518:	d061      	beq.n	80055de <HAL_RCC_OscConfig+0xee>
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800551a:	6a23      	ldr	r3, [r4, #32]
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80bf 	beq.w	80056a0 <HAL_RCC_OscConfig+0x1b0>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8005522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005526:	6813      	ldr	r3, [r2, #0]
 8005528:	f043 0301 	orr.w	r3, r3, #1
 800552c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800552e:	f7fc fb99 	bl	8001c64 <HAL_GetTick>
 8005532:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005534:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f013 0f02 	tst.w	r3, #2
 800553e:	f000 80a7 	beq.w	8005690 <HAL_RCC_OscConfig+0x1a0>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005542:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	f042 0208 	orr.w	r2, r2, #8
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005554:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005556:	430a      	orrs	r2, r1
 8005558:	601a      	str	r2, [r3, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800555a:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005562:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005566:	605a      	str	r2, [r3, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f013 0f01 	tst.w	r3, #1
 800556e:	f000 80b5 	beq.w	80056dc <HAL_RCC_OscConfig+0x1ec>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005572:	2d08      	cmp	r5, #8
 8005574:	f000 80ae 	beq.w	80056d4 <HAL_RCC_OscConfig+0x1e4>
 8005578:	2d0c      	cmp	r5, #12
 800557a:	f000 80a8 	beq.w	80056ce <HAL_RCC_OscConfig+0x1de>
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800557e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005582:	6813      	ldr	r3, [r2, #0]
 8005584:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005588:	68a1      	ldr	r1, [r4, #8]
 800558a:	430b      	orrs	r3, r1
 800558c:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800558e:	6863      	ldr	r3, [r4, #4]
 8005590:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005594:	f000 80c4 	beq.w	8005720 <HAL_RCC_OscConfig+0x230>
 8005598:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800559c:	f000 80c5 	beq.w	800572a <HAL_RCC_OscConfig+0x23a>
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80055a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80055aa:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80055b2:	601a      	str	r2, [r3, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055b4:	6863      	ldr	r3, [r4, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	f000 80c2 	beq.w	8005740 <HAL_RCC_OscConfig+0x250>
        tickstart = HAL_GetTick();
 80055bc:	f7fc fb52 	bl	8001c64 <HAL_GetTick>
 80055c0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80055c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80055cc:	f040 8086 	bne.w	80056dc <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055d0:	f7fc fb48 	bl	8001c64 <HAL_GetTick>
 80055d4:	1bc0      	subs	r0, r0, r7
 80055d6:	2864      	cmp	r0, #100	; 0x64
 80055d8:	d9f3      	bls.n	80055c2 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 80055da:	2003      	movs	r0, #3
 80055dc:	e2a9      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80055de:	2e01      	cmp	r6, #1
 80055e0:	d19b      	bne.n	800551a <HAL_RCC_OscConfig+0x2a>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80055e2:	6a23      	ldr	r3, [r4, #32]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	f000 8299 	beq.w	8005b1c <HAL_RCC_OscConfig+0x62c>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80055ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80055ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f013 0f08 	tst.w	r3, #8
 80055f6:	d029      	beq.n	800564c <HAL_RCC_OscConfig+0x15c>
 80055f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005602:	4298      	cmp	r0, r3
 8005604:	d92a      	bls.n	800565c <HAL_RCC_OscConfig+0x16c>
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005606:	f7ff feb9 	bl	800537c <RCC_SetFlashLatencyFromMSIRange>
 800560a:	2800      	cmp	r0, #0
 800560c:	f040 8288 	bne.w	8005b20 <HAL_RCC_OscConfig+0x630>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	f042 0208 	orr.w	r2, r2, #8
 800561a:	601a      	str	r2, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005622:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005624:	430a      	orrs	r2, r1
 8005626:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005628:	6a61      	ldr	r1, [r4, #36]	; 0x24
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005630:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005634:	605a      	str	r2, [r3, #4]
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005636:	f7ff ff4b 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 800563a:	4bba      	ldr	r3, [pc, #744]	; (8005924 <HAL_RCC_OscConfig+0x434>)
 800563c:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 800563e:	4bba      	ldr	r3, [pc, #744]	; (8005928 <HAL_RCC_OscConfig+0x438>)
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f7fd fc93 	bl	8002f6c <HAL_InitTick>
        if (status != HAL_OK)
 8005646:	2800      	cmp	r0, #0
 8005648:	d08e      	beq.n	8005568 <HAL_RCC_OscConfig+0x78>
 800564a:	e272      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800564c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005654:	091b      	lsrs	r3, r3, #4
 8005656:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565a:	e7d2      	b.n	8005602 <HAL_RCC_OscConfig+0x112>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800565c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f042 0208 	orr.w	r2, r2, #8
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800566e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005670:	430a      	orrs	r2, r1
 8005672:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005674:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800567c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005680:	605a      	str	r2, [r3, #4]
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005682:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005684:	f7ff fe7a 	bl	800537c <RCC_SetFlashLatencyFromMSIRange>
 8005688:	2800      	cmp	r0, #0
 800568a:	d0d4      	beq.n	8005636 <HAL_RCC_OscConfig+0x146>
            return HAL_ERROR;
 800568c:	2001      	movs	r0, #1
 800568e:	e250      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005690:	f7fc fae8 	bl	8001c64 <HAL_GetTick>
 8005694:	1bc0      	subs	r0, r0, r7
 8005696:	2802      	cmp	r0, #2
 8005698:	f67f af4c 	bls.w	8005534 <HAL_RCC_OscConfig+0x44>
            return HAL_TIMEOUT;
 800569c:	2003      	movs	r0, #3
 800569e:	e248      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80056a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056a4:	6813      	ldr	r3, [r2, #0]
 80056a6:	f023 0301 	bic.w	r3, r3, #1
 80056aa:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80056ac:	f7fc fada 	bl	8001c64 <HAL_GetTick>
 80056b0:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80056b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f013 0f02 	tst.w	r3, #2
 80056bc:	f43f af54 	beq.w	8005568 <HAL_RCC_OscConfig+0x78>
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056c0:	f7fc fad0 	bl	8001c64 <HAL_GetTick>
 80056c4:	1bc0      	subs	r0, r0, r7
 80056c6:	2802      	cmp	r0, #2
 80056c8:	d9f3      	bls.n	80056b2 <HAL_RCC_OscConfig+0x1c2>
            return HAL_TIMEOUT;
 80056ca:	2003      	movs	r0, #3
 80056cc:	e231      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80056ce:	2e03      	cmp	r6, #3
 80056d0:	f47f af55 	bne.w	800557e <HAL_RCC_OscConfig+0x8e>
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80056d4:	6863      	ldr	r3, [r4, #4]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f000 8224 	beq.w	8005b24 <HAL_RCC_OscConfig+0x634>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056dc:	6823      	ldr	r3, [r4, #0]
 80056de:	f013 0f02 	tst.w	r3, #2
 80056e2:	d056      	beq.n	8005792 <HAL_RCC_OscConfig+0x2a2>
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80056e4:	2d04      	cmp	r5, #4
 80056e6:	d03d      	beq.n	8005764 <HAL_RCC_OscConfig+0x274>
 80056e8:	2d0c      	cmp	r5, #12
 80056ea:	d039      	beq.n	8005760 <HAL_RCC_OscConfig+0x270>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80056ec:	6923      	ldr	r3, [r4, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	f000 808a 	beq.w	8005808 <HAL_RCC_OscConfig+0x318>
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80056f4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80056f8:	6813      	ldr	r3, [r2, #0]
 80056fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056fe:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005700:	f7fc fab0 	bl	8001c64 <HAL_GetTick>
 8005704:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005706:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005710:	d136      	bne.n	8005780 <HAL_RCC_OscConfig+0x290>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005712:	f7fc faa7 	bl	8001c64 <HAL_GetTick>
 8005716:	1b80      	subs	r0, r0, r6
 8005718:	2802      	cmp	r0, #2
 800571a:	d9f4      	bls.n	8005706 <HAL_RCC_OscConfig+0x216>
            return HAL_TIMEOUT;
 800571c:	2003      	movs	r0, #3
 800571e:	e208      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005720:	6813      	ldr	r3, [r2, #0]
 8005722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005726:	6013      	str	r3, [r2, #0]
}
 8005728:	e744      	b.n	80055b4 <HAL_RCC_OscConfig+0xc4>
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800572a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8005734:	601a      	str	r2, [r3, #0]
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8005736:	681a      	ldr	r2, [r3, #0]
 8005738:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800573c:	601a      	str	r2, [r3, #0]
}
 800573e:	e739      	b.n	80055b4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 8005740:	f7fc fa90 	bl	8001c64 <HAL_GetTick>
 8005744:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005746:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005750:	d0c4      	beq.n	80056dc <HAL_RCC_OscConfig+0x1ec>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005752:	f7fc fa87 	bl	8001c64 <HAL_GetTick>
 8005756:	1bc0      	subs	r0, r0, r7
 8005758:	2864      	cmp	r0, #100	; 0x64
 800575a:	d9f4      	bls.n	8005746 <HAL_RCC_OscConfig+0x256>
            return HAL_TIMEOUT;
 800575c:	2003      	movs	r0, #3
 800575e:	e1e8      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005760:	2e02      	cmp	r6, #2
 8005762:	d1c3      	bne.n	80056ec <HAL_RCC_OscConfig+0x1fc>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005764:	6923      	ldr	r3, [r4, #16]
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 81de 	beq.w	8005b28 <HAL_RCC_OscConfig+0x638>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800576e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005772:	6853      	ldr	r3, [r2, #4]
 8005774:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005778:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800577c:	6053      	str	r3, [r2, #4]
}
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x2a2>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005780:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005782:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005786:	6853      	ldr	r3, [r2, #4]
 8005788:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800578c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8005790:	6053      	str	r3, [r2, #4]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005792:	6823      	ldr	r3, [r4, #0]
 8005794:	f013 0f08 	tst.w	r3, #8
 8005798:	d07e      	beq.n	8005898 <HAL_RCC_OscConfig+0x3a8>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800579a:	69a3      	ldr	r3, [r4, #24]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d062      	beq.n	8005866 <HAL_RCC_OscConfig+0x376>
      uint32_t csr_temp = RCC->CSR;
 80057a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80057a8:	69e1      	ldr	r1, [r4, #28]
 80057aa:	f003 0210 	and.w	r2, r3, #16
 80057ae:	4291      	cmp	r1, r2
 80057b0:	d011      	beq.n	80057d6 <HAL_RCC_OscConfig+0x2e6>
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80057b2:	f003 0203 	and.w	r2, r3, #3
 80057b6:	2a02      	cmp	r2, #2
 80057b8:	f000 81b8 	beq.w	8005b2c <HAL_RCC_OscConfig+0x63c>
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80057bc:	f013 0f01 	tst.w	r3, #1
 80057c0:	d138      	bne.n	8005834 <HAL_RCC_OscConfig+0x344>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80057c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057c6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80057ca:	f023 0310 	bic.w	r3, r3, #16
 80057ce:	69e1      	ldr	r1, [r4, #28]
 80057d0:	430b      	orrs	r3, r1
 80057d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80057d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80057da:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80057de:	f043 0301 	orr.w	r3, r3, #1
 80057e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 80057e6:	f7fc fa3d 	bl	8001c64 <HAL_GetTick>
 80057ea:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80057ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80057f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057f4:	f013 0f02 	tst.w	r3, #2
 80057f8:	d14e      	bne.n	8005898 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fa:	f7fc fa33 	bl	8001c64 <HAL_GetTick>
 80057fe:	1b80      	subs	r0, r0, r6
 8005800:	2811      	cmp	r0, #17
 8005802:	d9f3      	bls.n	80057ec <HAL_RCC_OscConfig+0x2fc>
          return HAL_TIMEOUT;
 8005804:	2003      	movs	r0, #3
 8005806:	e194      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005808:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800580c:	6813      	ldr	r3, [r2, #0]
 800580e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005812:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005814:	f7fc fa26 	bl	8001c64 <HAL_GetTick>
 8005818:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800581a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005824:	d0b5      	beq.n	8005792 <HAL_RCC_OscConfig+0x2a2>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005826:	f7fc fa1d 	bl	8001c64 <HAL_GetTick>
 800582a:	1b80      	subs	r0, r0, r6
 800582c:	2802      	cmp	r0, #2
 800582e:	d9f4      	bls.n	800581a <HAL_RCC_OscConfig+0x32a>
            return HAL_TIMEOUT;
 8005830:	2003      	movs	r0, #3
 8005832:	e17e      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005834:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005838:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800583c:	f023 0301 	bic.w	r3, r3, #1
 8005840:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
          tickstart = HAL_GetTick();
 8005844:	f7fc fa0e 	bl	8001c64 <HAL_GetTick>
 8005848:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800584a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800584e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005852:	f013 0f02 	tst.w	r3, #2
 8005856:	d0b4      	beq.n	80057c2 <HAL_RCC_OscConfig+0x2d2>
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005858:	f7fc fa04 	bl	8001c64 <HAL_GetTick>
 800585c:	1b80      	subs	r0, r0, r6
 800585e:	2811      	cmp	r0, #17
 8005860:	d9f3      	bls.n	800584a <HAL_RCC_OscConfig+0x35a>
              return HAL_TIMEOUT;
 8005862:	2003      	movs	r0, #3
 8005864:	e165      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8005866:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800586a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 800586e:	f023 0301 	bic.w	r3, r3, #1
 8005872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005876:	f7fc f9f5 	bl	8001c64 <HAL_GetTick>
 800587a:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 800587c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005880:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005884:	f013 0f02 	tst.w	r3, #2
 8005888:	d006      	beq.n	8005898 <HAL_RCC_OscConfig+0x3a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800588a:	f7fc f9eb 	bl	8001c64 <HAL_GetTick>
 800588e:	1b80      	subs	r0, r0, r6
 8005890:	2811      	cmp	r0, #17
 8005892:	d9f3      	bls.n	800587c <HAL_RCC_OscConfig+0x38c>
          return HAL_TIMEOUT;
 8005894:	2003      	movs	r0, #3
 8005896:	e14c      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005898:	6823      	ldr	r3, [r4, #0]
 800589a:	f013 0f04 	tst.w	r3, #4
 800589e:	f000 80b8 	beq.w	8005a12 <HAL_RCC_OscConfig+0x522>
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80058a2:	4b22      	ldr	r3, [pc, #136]	; (800592c <HAL_RCC_OscConfig+0x43c>)
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058aa:	d110      	bne.n	80058ce <HAL_RCC_OscConfig+0x3de>
      HAL_PWR_EnableBkUpAccess();
 80058ac:	f7ff fc86 	bl	80051bc <HAL_PWR_EnableBkUpAccess>
      tickstart = HAL_GetTick();
 80058b0:	f7fc f9d8 	bl	8001c64 <HAL_GetTick>
 80058b4:	4606      	mov	r6, r0
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <HAL_RCC_OscConfig+0x43c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f413 7f80 	tst.w	r3, #256	; 0x100
 80058be:	d106      	bne.n	80058ce <HAL_RCC_OscConfig+0x3de>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058c0:	f7fc f9d0 	bl	8001c64 <HAL_GetTick>
 80058c4:	1b80      	subs	r0, r0, r6
 80058c6:	2802      	cmp	r0, #2
 80058c8:	d9f5      	bls.n	80058b6 <HAL_RCC_OscConfig+0x3c6>
          return HAL_TIMEOUT;
 80058ca:	2003      	movs	r0, #3
 80058cc:	e131      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80058ce:	68e3      	ldr	r3, [r4, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d068      	beq.n	80059a6 <HAL_RCC_OscConfig+0x4b6>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 80058d4:	2b85      	cmp	r3, #133	; 0x85
 80058d6:	d001      	beq.n	80058dc <HAL_RCC_OscConfig+0x3ec>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80058d8:	2b05      	cmp	r3, #5
 80058da:	d107      	bne.n	80058ec <HAL_RCC_OscConfig+0x3fc>
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80058dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058e0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058e4:	f043 0304 	orr.w	r3, r3, #4
 80058e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      tickstart = HAL_GetTick();
 80058ec:	f7fc f9ba 	bl	8001c64 <HAL_GetTick>
 80058f0:	4606      	mov	r6, r0
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80058f2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80058f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80058fa:	f043 0301 	orr.w	r3, r3, #1
 80058fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005902:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005906:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800590a:	f013 0f02 	tst.w	r3, #2
 800590e:	d10f      	bne.n	8005930 <HAL_RCC_OscConfig+0x440>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005910:	f7fc f9a8 	bl	8001c64 <HAL_GetTick>
 8005914:	1b80      	subs	r0, r0, r6
 8005916:	f241 3388 	movw	r3, #5000	; 0x1388
 800591a:	4298      	cmp	r0, r3
 800591c:	d9f1      	bls.n	8005902 <HAL_RCC_OscConfig+0x412>
          return HAL_TIMEOUT;
 800591e:	2003      	movs	r0, #3
 8005920:	e107      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
 8005922:	bf00      	nop
 8005924:	20000078 	.word	0x20000078
 8005928:	20000080 	.word	0x20000080
 800592c:	58000400 	.word	0x58000400
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005930:	68e3      	ldr	r3, [r4, #12]
 8005932:	2b81      	cmp	r3, #129	; 0x81
 8005934:	d001      	beq.n	800593a <HAL_RCC_OscConfig+0x44a>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005936:	2b85      	cmp	r3, #133	; 0x85
 8005938:	d11a      	bne.n	8005970 <HAL_RCC_OscConfig+0x480>
        tickstart = HAL_GetTick();
 800593a:	f7fc f993 	bl	8001c64 <HAL_GetTick>
 800593e:	4606      	mov	r6, r0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005940:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005944:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800594c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005958:	f413 6f00 	tst.w	r3, #2048	; 0x800
 800595c:	d159      	bne.n	8005a12 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800595e:	f7fc f981 	bl	8001c64 <HAL_GetTick>
 8005962:	1b80      	subs	r0, r0, r6
 8005964:	f241 3388 	movw	r3, #5000	; 0x1388
 8005968:	4298      	cmp	r0, r3
 800596a:	d9f1      	bls.n	8005950 <HAL_RCC_OscConfig+0x460>
            return HAL_TIMEOUT;
 800596c:	2003      	movs	r0, #3
 800596e:	e0e0      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        tickstart = HAL_GetTick();
 8005970:	f7fc f978 	bl	8001c64 <HAL_GetTick>
 8005974:	4606      	mov	r6, r0
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800597a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800597e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005982:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800598a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598e:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005992:	d03e      	beq.n	8005a12 <HAL_RCC_OscConfig+0x522>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005994:	f7fc f966 	bl	8001c64 <HAL_GetTick>
 8005998:	1b80      	subs	r0, r0, r6
 800599a:	f241 3388 	movw	r3, #5000	; 0x1388
 800599e:	4298      	cmp	r0, r3
 80059a0:	d9f1      	bls.n	8005986 <HAL_RCC_OscConfig+0x496>
            return HAL_TIMEOUT;
 80059a2:	2003      	movs	r0, #3
 80059a4:	e0c5      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80059a6:	f7fc f95d 	bl	8001c64 <HAL_GetTick>
 80059aa:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80059ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059b0:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80059bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
 80059c8:	d008      	beq.n	80059dc <HAL_RCC_OscConfig+0x4ec>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059ca:	f7fc f94b 	bl	8001c64 <HAL_GetTick>
 80059ce:	1b80      	subs	r0, r0, r6
 80059d0:	f241 3388 	movw	r3, #5000	; 0x1388
 80059d4:	4298      	cmp	r0, r3
 80059d6:	d9f1      	bls.n	80059bc <HAL_RCC_OscConfig+0x4cc>
          return HAL_TIMEOUT;
 80059d8:	2003      	movs	r0, #3
 80059da:	e0aa      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
      tickstart = HAL_GetTick();
 80059dc:	f7fc f942 	bl	8001c64 <HAL_GetTick>
 80059e0:	4606      	mov	r6, r0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80059e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80059ea:	f023 0301 	bic.w	r3, r3, #1
 80059ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80059f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f013 0f02 	tst.w	r3, #2
 80059fe:	d008      	beq.n	8005a12 <HAL_RCC_OscConfig+0x522>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a00:	f7fc f930 	bl	8001c64 <HAL_GetTick>
 8005a04:	1b80      	subs	r0, r0, r6
 8005a06:	f241 3388 	movw	r3, #5000	; 0x1388
 8005a0a:	4298      	cmp	r0, r3
 8005a0c:	d9f1      	bls.n	80059f2 <HAL_RCC_OscConfig+0x502>
          return HAL_TIMEOUT;
 8005a0e:	2003      	movs	r0, #3
 8005a10:	e08f      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	f000 808b 	beq.w	8005b30 <HAL_RCC_OscConfig+0x640>
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005a1a:	2d0c      	cmp	r5, #12
 8005a1c:	d060      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x5f0>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d016      	beq.n	8005a50 <HAL_RCC_OscConfig+0x560>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a26:	6813      	ldr	r3, [r2, #0]
 8005a28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a2c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a2e:	f7fc f919 	bl	8001c64 <HAL_GetTick>
 8005a32:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a3e:	d148      	bne.n	8005ad2 <HAL_RCC_OscConfig+0x5e2>
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8005a40:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a44:	68d1      	ldr	r1, [r2, #12]
 8005a46:	4b41      	ldr	r3, [pc, #260]	; (8005b4c <HAL_RCC_OscConfig+0x65c>)
 8005a48:	400b      	ands	r3, r1
 8005a4a:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8005a4c:	2000      	movs	r0, #0
 8005a4e:	e070      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8005a50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a54:	6813      	ldr	r3, [r2, #0]
 8005a56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a5a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005a5c:	f7fc f902 	bl	8001c64 <HAL_GetTick>
 8005a60:	4605      	mov	r5, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005a62:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005a6c:	d12a      	bne.n	8005ac4 <HAL_RCC_OscConfig+0x5d4>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005a72:	68d3      	ldr	r3, [r2, #12]
 8005a74:	4936      	ldr	r1, [pc, #216]	; (8005b50 <HAL_RCC_OscConfig+0x660>)
 8005a76:	4019      	ands	r1, r3
 8005a78:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005a7a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8005a7c:	4303      	orrs	r3, r0
 8005a7e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8005a80:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8005a84:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005a86:	4303      	orrs	r3, r0
 8005a88:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8005a8a:	4303      	orrs	r3, r0
 8005a8c:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8005a8e:	4303      	orrs	r3, r0
 8005a90:	430b      	orrs	r3, r1
 8005a92:	60d3      	str	r3, [r2, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005a94:	6813      	ldr	r3, [r2, #0]
 8005a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a9a:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005a9c:	68d3      	ldr	r3, [r2, #12]
 8005a9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8005aa4:	f7fc f8de 	bl	8001c64 <HAL_GetTick>
 8005aa8:	4604      	mov	r4, r0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005aaa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8005ab4:	d13e      	bne.n	8005b34 <HAL_RCC_OscConfig+0x644>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ab6:	f7fc f8d5 	bl	8001c64 <HAL_GetTick>
 8005aba:	1b00      	subs	r0, r0, r4
 8005abc:	280a      	cmp	r0, #10
 8005abe:	d9f4      	bls.n	8005aaa <HAL_RCC_OscConfig+0x5ba>
            return HAL_TIMEOUT;
 8005ac0:	2003      	movs	r0, #3
 8005ac2:	e036      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ac4:	f7fc f8ce 	bl	8001c64 <HAL_GetTick>
 8005ac8:	1b40      	subs	r0, r0, r5
 8005aca:	280a      	cmp	r0, #10
 8005acc:	d9c9      	bls.n	8005a62 <HAL_RCC_OscConfig+0x572>
            return HAL_TIMEOUT;
 8005ace:	2003      	movs	r0, #3
 8005ad0:	e02f      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ad2:	f7fc f8c7 	bl	8001c64 <HAL_GetTick>
 8005ad6:	1b00      	subs	r0, r0, r4
 8005ad8:	280a      	cmp	r0, #10
 8005ada:	d9ab      	bls.n	8005a34 <HAL_RCC_OscConfig+0x544>
            return HAL_TIMEOUT;
 8005adc:	2003      	movs	r0, #3
 8005ade:	e028      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d029      	beq.n	8005b38 <HAL_RCC_OscConfig+0x648>
        pll_config = RCC->PLLCFGR;
 8005ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ae8:	68db      	ldr	r3, [r3, #12]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005aea:	f003 0103 	and.w	r1, r3, #3
 8005aee:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8005af0:	4291      	cmp	r1, r2
 8005af2:	d123      	bne.n	8005b3c <HAL_RCC_OscConfig+0x64c>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005af4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005af8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005afa:	428a      	cmp	r2, r1
 8005afc:	d120      	bne.n	8005b40 <HAL_RCC_OscConfig+0x650>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005afe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b02:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005b04:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 8005b08:	d11c      	bne.n	8005b44 <HAL_RCC_OscConfig+0x654>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005b0a:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
 8005b0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d119      	bne.n	8005b48 <HAL_RCC_OscConfig+0x658>
  return HAL_OK;
 8005b14:	2000      	movs	r0, #0
 8005b16:	e00c      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
    return HAL_ERROR;
 8005b18:	2001      	movs	r0, #1
}
 8005b1a:	4770      	bx	lr
        return HAL_ERROR;
 8005b1c:	2001      	movs	r0, #1
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
            return HAL_ERROR;
 8005b20:	2001      	movs	r0, #1
 8005b22:	e006      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005b24:	2001      	movs	r0, #1
 8005b26:	e004      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005b28:	2001      	movs	r0, #1
 8005b2a:	e002      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
  return HAL_OK;
 8005b30:	2000      	movs	r0, #0
}
 8005b32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return HAL_OK;
 8005b34:	2000      	movs	r0, #0
 8005b36:	e7fc      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
        return HAL_ERROR;
 8005b38:	2001      	movs	r0, #1
 8005b3a:	e7fa      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
          return HAL_ERROR;
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	e7f8      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
 8005b40:	2001      	movs	r0, #1
 8005b42:	e7f6      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
 8005b44:	2001      	movs	r0, #1
 8005b46:	e7f4      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
 8005b48:	2001      	movs	r0, #1
 8005b4a:	e7f2      	b.n	8005b32 <HAL_RCC_OscConfig+0x642>
 8005b4c:	eefefffc 	.word	0xeefefffc
 8005b50:	11c1808c 	.word	0x11c1808c

08005b54 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f000 8127 	beq.w	8005da8 <HAL_RCC_ClockConfig+0x254>
{
 8005b5a:	b570      	push	{r4, r5, r6, lr}
 8005b5c:	460c      	mov	r4, r1
 8005b5e:	4605      	mov	r5, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b60:	4b93      	ldr	r3, [pc, #588]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	428b      	cmp	r3, r1
 8005b6a:	d32d      	bcc.n	8005bc8 <HAL_RCC_ClockConfig+0x74>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b6c:	682b      	ldr	r3, [r5, #0]
 8005b6e:	f013 0f02 	tst.w	r3, #2
 8005b72:	d13f      	bne.n	8005bf4 <HAL_RCC_ClockConfig+0xa0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8005b74:	682b      	ldr	r3, [r5, #0]
 8005b76:	f013 0f20 	tst.w	r3, #32
 8005b7a:	d153      	bne.n	8005c24 <HAL_RCC_ClockConfig+0xd0>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005b7c:	682b      	ldr	r3, [r5, #0]
 8005b7e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005b82:	d16a      	bne.n	8005c5a <HAL_RCC_ClockConfig+0x106>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b84:	682b      	ldr	r3, [r5, #0]
 8005b86:	f013 0f04 	tst.w	r3, #4
 8005b8a:	f040 8083 	bne.w	8005c94 <HAL_RCC_ClockConfig+0x140>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b8e:	682b      	ldr	r3, [r5, #0]
 8005b90:	f013 0f08 	tst.w	r3, #8
 8005b94:	f040 8097 	bne.w	8005cc6 <HAL_RCC_ClockConfig+0x172>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b98:	682b      	ldr	r3, [r5, #0]
 8005b9a:	f013 0f01 	tst.w	r3, #1
 8005b9e:	f000 80de 	beq.w	8005d5e <HAL_RCC_ClockConfig+0x20a>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba2:	686b      	ldr	r3, [r5, #4]
 8005ba4:	2b02      	cmp	r3, #2
 8005ba6:	f000 80a8 	beq.w	8005cfa <HAL_RCC_ClockConfig+0x1a6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005baa:	2b03      	cmp	r3, #3
 8005bac:	f000 80ad 	beq.w	8005d0a <HAL_RCC_ClockConfig+0x1b6>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	f040 80b2 	bne.w	8005d1a <HAL_RCC_ClockConfig+0x1c6>
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005bb6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005bba:	6812      	ldr	r2, [r2, #0]
 8005bbc:	f012 0f02 	tst.w	r2, #2
 8005bc0:	f040 80b1 	bne.w	8005d26 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005bc4:	2001      	movs	r0, #1
 8005bc6:	e0ee      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bc8:	4a79      	ldr	r2, [pc, #484]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005bca:	6813      	ldr	r3, [r2, #0]
 8005bcc:	f023 0307 	bic.w	r3, r3, #7
 8005bd0:	430b      	orrs	r3, r1
 8005bd2:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005bd4:	f7fc f846 	bl	8001c64 <HAL_GetTick>
 8005bd8:	4606      	mov	r6, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bda:	4b75      	ldr	r3, [pc, #468]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	42a3      	cmp	r3, r4
 8005be4:	d0c2      	beq.n	8005b6c <HAL_RCC_ClockConfig+0x18>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005be6:	f7fc f83d 	bl	8001c64 <HAL_GetTick>
 8005bea:	1b80      	subs	r0, r0, r6
 8005bec:	2802      	cmp	r0, #2
 8005bee:	d9f4      	bls.n	8005bda <HAL_RCC_ClockConfig+0x86>
        return HAL_TIMEOUT;
 8005bf0:	2003      	movs	r0, #3
 8005bf2:	e0d8      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005bf4:	68ab      	ldr	r3, [r5, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005bf6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005bfa:	688a      	ldr	r2, [r1, #8]
 8005bfc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005c00:	4313      	orrs	r3, r2
 8005c02:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005c04:	f7fc f82e 	bl	8001c64 <HAL_GetTick>
 8005c08:	4606      	mov	r6, r0
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8005c0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c14:	d1ae      	bne.n	8005b74 <HAL_RCC_ClockConfig+0x20>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c16:	f7fc f825 	bl	8001c64 <HAL_GetTick>
 8005c1a:	1b80      	subs	r0, r0, r6
 8005c1c:	2802      	cmp	r0, #2
 8005c1e:	d9f4      	bls.n	8005c0a <HAL_RCC_ClockConfig+0xb6>
        return HAL_TIMEOUT;
 8005c20:	2003      	movs	r0, #3
 8005c22:	e0c0      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8005c24:	696b      	ldr	r3, [r5, #20]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 8005c26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c2a:	f8d1 2108 	ldr.w	r2, [r1, #264]	; 0x108
 8005c2e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005c32:	4313      	orrs	r3, r2
 8005c34:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005c38:	f7fc f814 	bl	8001c64 <HAL_GetTick>
 8005c3c:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8005c3e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c42:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c46:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005c4a:	d197      	bne.n	8005b7c <HAL_RCC_ClockConfig+0x28>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c4c:	f7fc f80a 	bl	8001c64 <HAL_GetTick>
 8005c50:	1b80      	subs	r0, r0, r6
 8005c52:	2802      	cmp	r0, #2
 8005c54:	d9f3      	bls.n	8005c3e <HAL_RCC_ClockConfig+0xea>
        return HAL_TIMEOUT;
 8005c56:	2003      	movs	r0, #3
 8005c58:	e0a5      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005c5a:	69a9      	ldr	r1, [r5, #24]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005c5c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005c60:	f8d2 3108 	ldr.w	r3, [r2, #264]	; 0x108
 8005c64:	f023 030f 	bic.w	r3, r3, #15
 8005c68:	ea43 1311 	orr.w	r3, r3, r1, lsr #4
 8005c6c:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
    tickstart = HAL_GetTick();
 8005c70:	f7fb fff8 	bl	8001c64 <HAL_GetTick>
 8005c74:	4606      	mov	r6, r0
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8005c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005c7a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005c7e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005c82:	f47f af7f 	bne.w	8005b84 <HAL_RCC_ClockConfig+0x30>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005c86:	f7fb ffed 	bl	8001c64 <HAL_GetTick>
 8005c8a:	1b80      	subs	r0, r0, r6
 8005c8c:	2802      	cmp	r0, #2
 8005c8e:	d9f2      	bls.n	8005c76 <HAL_RCC_ClockConfig+0x122>
        return HAL_TIMEOUT;
 8005c90:	2003      	movs	r0, #3
 8005c92:	e088      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005c94:	68eb      	ldr	r3, [r5, #12]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8005c96:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005c9a:	688a      	ldr	r2, [r1, #8]
 8005c9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005ca4:	f7fb ffde 	bl	8001c64 <HAL_GetTick>
 8005ca8:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8005caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8005cb4:	f47f af6b 	bne.w	8005b8e <HAL_RCC_ClockConfig+0x3a>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cb8:	f7fb ffd4 	bl	8001c64 <HAL_GetTick>
 8005cbc:	1b80      	subs	r0, r0, r6
 8005cbe:	2802      	cmp	r0, #2
 8005cc0:	d9f3      	bls.n	8005caa <HAL_RCC_ClockConfig+0x156>
        return HAL_TIMEOUT;
 8005cc2:	2003      	movs	r0, #3
 8005cc4:	e06f      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005cc6:	6929      	ldr	r1, [r5, #16]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005cc8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005ccc:	6893      	ldr	r3, [r2, #8]
 8005cce:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8005cd2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8005cd6:	6093      	str	r3, [r2, #8]
    tickstart = HAL_GetTick();
 8005cd8:	f7fb ffc4 	bl	8001c64 <HAL_GetTick>
 8005cdc:	4606      	mov	r6, r0
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8005cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8005ce8:	f47f af56 	bne.w	8005b98 <HAL_RCC_ClockConfig+0x44>
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cec:	f7fb ffba 	bl	8001c64 <HAL_GetTick>
 8005cf0:	1b80      	subs	r0, r0, r6
 8005cf2:	2802      	cmp	r0, #2
 8005cf4:	d9f3      	bls.n	8005cde <HAL_RCC_ClockConfig+0x18a>
        return HAL_TIMEOUT;
 8005cf6:	2003      	movs	r0, #3
 8005cf8:	e055      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8005cfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005cfe:	6812      	ldr	r2, [r2, #0]
 8005d00:	f412 3f00 	tst.w	r2, #131072	; 0x20000
 8005d04:	d10f      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005d06:	2001      	movs	r0, #1
 8005d08:	e04d      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8005d0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d0e:	6812      	ldr	r2, [r2, #0]
 8005d10:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8005d14:	d107      	bne.n	8005d26 <HAL_RCC_ClockConfig+0x1d2>
        return HAL_ERROR;
 8005d16:	2001      	movs	r0, #1
 8005d18:	e045      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005d1a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005d1e:	6812      	ldr	r2, [r2, #0]
 8005d20:	f412 6f80 	tst.w	r2, #1024	; 0x400
 8005d24:	d042      	beq.n	8005dac <HAL_RCC_ClockConfig+0x258>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005d26:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005d2a:	688a      	ldr	r2, [r1, #8]
 8005d2c:	f022 0203 	bic.w	r2, r2, #3
 8005d30:	4313      	orrs	r3, r2
 8005d32:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8005d34:	f7fb ff96 	bl	8001c64 <HAL_GetTick>
 8005d38:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005d3a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005d3e:	689b      	ldr	r3, [r3, #8]
 8005d40:	f003 030c 	and.w	r3, r3, #12
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d44:	686a      	ldr	r2, [r5, #4]
 8005d46:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005d4a:	d008      	beq.n	8005d5e <HAL_RCC_ClockConfig+0x20a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d4c:	f7fb ff8a 	bl	8001c64 <HAL_GetTick>
 8005d50:	1b80      	subs	r0, r0, r6
 8005d52:	f241 3388 	movw	r3, #5000	; 0x1388
 8005d56:	4298      	cmp	r0, r3
 8005d58:	d9ef      	bls.n	8005d3a <HAL_RCC_ClockConfig+0x1e6>
        return HAL_TIMEOUT;
 8005d5a:	2003      	movs	r0, #3
 8005d5c:	e023      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d5e:	4b14      	ldr	r3, [pc, #80]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f003 0307 	and.w	r3, r3, #7
 8005d66:	42a3      	cmp	r3, r4
 8005d68:	d915      	bls.n	8005d96 <HAL_RCC_ClockConfig+0x242>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	f023 0307 	bic.w	r3, r3, #7
 8005d72:	4323      	orrs	r3, r4
 8005d74:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8005d76:	f7fb ff75 	bl	8001c64 <HAL_GetTick>
 8005d7a:	4605      	mov	r5, r0
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d7c:	4b0c      	ldr	r3, [pc, #48]	; (8005db0 <HAL_RCC_ClockConfig+0x25c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0307 	and.w	r3, r3, #7
 8005d84:	42a3      	cmp	r3, r4
 8005d86:	d006      	beq.n	8005d96 <HAL_RCC_ClockConfig+0x242>
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005d88:	f7fb ff6c 	bl	8001c64 <HAL_GetTick>
 8005d8c:	1b40      	subs	r0, r0, r5
 8005d8e:	2802      	cmp	r0, #2
 8005d90:	d9f4      	bls.n	8005d7c <HAL_RCC_ClockConfig+0x228>
        return HAL_TIMEOUT;
 8005d92:	2003      	movs	r0, #3
 8005d94:	e007      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005d96:	f7ff fb9b 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
 8005d9a:	4b06      	ldr	r3, [pc, #24]	; (8005db4 <HAL_RCC_ClockConfig+0x260>)
 8005d9c:	6018      	str	r0, [r3, #0]
  return HAL_InitTick(uwTickPrio);
 8005d9e:	4b06      	ldr	r3, [pc, #24]	; (8005db8 <HAL_RCC_ClockConfig+0x264>)
 8005da0:	6818      	ldr	r0, [r3, #0]
 8005da2:	f7fd f8e3 	bl	8002f6c <HAL_InitTick>
}
 8005da6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8005da8:	2001      	movs	r0, #1
}
 8005daa:	4770      	bx	lr
        return HAL_ERROR;
 8005dac:	2001      	movs	r0, #1
 8005dae:	e7fa      	b.n	8005da6 <HAL_RCC_ClockConfig+0x252>
 8005db0:	58004000 	.word	0x58004000
 8005db4:	20000078 	.word	0x20000078
 8005db8:	20000080 	.word	0x20000080

08005dbc <HAL_RCC_GetPCLK1Freq>:
{
 8005dbc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005dbe:	f7ff fb87 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8005dc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8005dcc:	4a02      	ldr	r2, [pc, #8]	; (8005dd8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005dce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005dd2:	40d8      	lsrs	r0, r3
 8005dd4:	bd08      	pop	{r3, pc}
 8005dd6:	bf00      	nop
 8005dd8:	08014558 	.word	0x08014558

08005ddc <HAL_RCC_GetPCLK2Freq>:
{
 8005ddc:	b508      	push	{r3, lr}
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8005dde:	f7ff fb77 	bl	80054d0 <HAL_RCC_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8005de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8005dec:	4a02      	ldr	r2, [pc, #8]	; (8005df8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005dee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8005df2:	40d8      	lsrs	r0, r3
 8005df4:	bd08      	pop	{r3, pc}
 8005df6:	bf00      	nop
 8005df8:	08014558 	.word	0x08014558

08005dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005dfc:	b570      	push	{r4, r5, r6, lr}
 8005dfe:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e00:	6803      	ldr	r3, [r0, #0]
 8005e02:	f413 3f80 	tst.w	r3, #65536	; 0x10000
 8005e06:	f040 80ab 	bne.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x164>
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8005e0a:	2500      	movs	r5, #0
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e0c:	6823      	ldr	r3, [r4, #0]
 8005e0e:	f013 0f01 	tst.w	r3, #1
 8005e12:	d00a      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e14:	6862      	ldr	r2, [r4, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 8005e16:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e1a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e1e:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005e22:	b292      	uxth	r2, r2
 8005e24:	4313      	orrs	r3, r2
 8005e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	f013 0f02 	tst.w	r3, #2
 8005e30:	d00a      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e32:	68a2      	ldr	r2, [r4, #8]
 8005e34:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e38:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e3c:	ea23 4312 	bic.w	r3, r3, r2, lsr #16
 8005e40:	b292      	uxth	r2, r2
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005e48:	6823      	ldr	r3, [r4, #0]
 8005e4a:	f013 0f20 	tst.w	r3, #32
 8005e4e:	d009      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005e50:	6923      	ldr	r3, [r4, #16]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8005e52:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e56:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005e5a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005e64:	6823      	ldr	r3, [r4, #0]
 8005e66:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005e6a:	d00c      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005e6c:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 8005e6e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e72:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e76:	0c02      	lsrs	r2, r0, #16
 8005e78:	0412      	lsls	r2, r2, #16
 8005e7a:	ea23 0302 	bic.w	r3, r3, r2
 8005e7e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005e86:	6823      	ldr	r3, [r4, #0]
 8005e88:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8005e8c:	d00c      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005e8e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005e90:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005e94:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005e98:	0c02      	lsrs	r2, r0, #16
 8005e9a:	0412      	lsls	r2, r2, #16
 8005e9c:	ea23 0302 	bic.w	r3, r3, r2
 8005ea0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8005eae:	d00c      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0xce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8005eb0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005eb6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8005eba:	0c02      	lsrs	r2, r0, #16
 8005ebc:	0412      	lsls	r2, r2, #16
 8005ebe:	ea23 0302 	bic.w	r3, r3, r2
 8005ec2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8005ed0:	f040 809e 	bne.w	8006010 <HAL_RCCEx_PeriphCLKConfig+0x214>
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ed4:	6823      	ldr	r3, [r4, #0]
 8005ed6:	f013 0f80 	tst.w	r3, #128	; 0x80
 8005eda:	f040 80aa 	bne.w	8006032 <HAL_RCCEx_PeriphCLKConfig+0x236>
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005ede:	6823      	ldr	r3, [r4, #0]
 8005ee0:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005ee4:	f040 80b6 	bne.w	8006054 <HAL_RCCEx_PeriphCLKConfig+0x258>
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8005ee8:	6823      	ldr	r3, [r4, #0]
 8005eea:	f013 0f10 	tst.w	r3, #16
 8005eee:	d00e      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x112>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8005ef0:	68e3      	ldr	r3, [r4, #12]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8005ef2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005ef6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005efa:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005efe:	4313      	orrs	r3, r2
 8005f00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8005f04:	68e3      	ldr	r3, [r4, #12]
 8005f06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f0a:	f000 80b4 	beq.w	8006076 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f0e:	6823      	ldr	r3, [r4, #0]
 8005f10:	f413 4f00 	tst.w	r3, #32768	; 0x8000
 8005f14:	d00f      	beq.n	8005f36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f16:	6b23      	ldr	r3, [r4, #48]	; 0x30
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 8005f18:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f1c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f20:	f022 4240 	bic.w	r2, r2, #3221225472	; 0xc0000000
 8005f24:	4313      	orrs	r3, r2
 8005f26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f2a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8005f2c:	b91b      	cbnz	r3, 8005f36 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8005f2e:	68cb      	ldr	r3, [r1, #12]
 8005f30:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f34:	60cb      	str	r3, [r1, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f36:	6823      	ldr	r3, [r4, #0]
 8005f38:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 8005f3c:	d00e      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f3e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8005f40:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005f44:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8005f48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8005f52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8005f54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f58:	f000 8092 	beq.w	8006080 <HAL_RCCEx_PeriphCLKConfig+0x284>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
    }
  }

  return status;
}
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}
    HAL_PWR_EnableBkUpAccess();
 8005f60:	f7ff f92c 	bl	80051bc <HAL_PWR_EnableBkUpAccess>
    tickstart = HAL_GetTick();
 8005f64:	f7fb fe7e 	bl	8001c64 <HAL_GetTick>
 8005f68:	4605      	mov	r5, r0
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8005f6a:	4b48      	ldr	r3, [pc, #288]	; (800608c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f413 7f80 	tst.w	r3, #256	; 0x100
 8005f72:	d106      	bne.n	8005f82 <HAL_RCCEx_PeriphCLKConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f74:	f7fb fe76 	bl	8001c64 <HAL_GetTick>
 8005f78:	1b40      	subs	r0, r0, r5
 8005f7a:	2802      	cmp	r0, #2
 8005f7c:	d9f5      	bls.n	8005f6a <HAL_RCCEx_PeriphCLKConfig+0x16e>
        ret = HAL_TIMEOUT;
 8005f7e:	2503      	movs	r5, #3
 8005f80:	e000      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8005f82:	2500      	movs	r5, #0
    if (ret == HAL_OK)
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	f47f af41 	bne.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x10>
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8005f8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f92:	f403 7340 	and.w	r3, r3, #768	; 0x300
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8005f96:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d024      	beq.n	8005fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005fa0:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fa4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005fa8:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005fac:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
 8005fb0:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8005fb4:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 8005fb8:	f421 3180 	bic.w	r1, r1, #65536	; 0x10000
 8005fbc:	f8c3 1090 	str.w	r1, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8005fc0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8005fc4:	f012 0f02 	tst.w	r2, #2
 8005fc8:	d10f      	bne.n	8005fea <HAL_RCCEx_PeriphCLKConfig+0x1ee>
      if (ret == HAL_OK)
 8005fca:	2d00      	cmp	r5, #0
 8005fcc:	f47f af1e 	bne.w	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x10>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8005fd2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8005fd6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8005fda:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8005fe4:	e712      	b.n	8005e0c <HAL_RCCEx_PeriphCLKConfig+0x10>
  uint32_t tmpregister = 0;
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	e7ec      	b.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
        tickstart = HAL_GetTick();
 8005fea:	f7fb fe3b 	bl	8001c64 <HAL_GetTick>
 8005fee:	4606      	mov	r6, r0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8005ff0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8005ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff8:	f013 0f02 	tst.w	r3, #2
 8005ffc:	d1e5      	bne.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ffe:	f7fb fe31 	bl	8001c64 <HAL_GetTick>
 8006002:	1b80      	subs	r0, r0, r6
 8006004:	f241 3388 	movw	r3, #5000	; 0x1388
 8006008:	4298      	cmp	r0, r3
 800600a:	d9f1      	bls.n	8005ff0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
            ret = HAL_TIMEOUT;
 800600c:	2503      	movs	r5, #3
 800600e:	e7dc      	b.n	8005fca <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006010:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006012:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006016:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800601a:	0919      	lsrs	r1, r3, #4
 800601c:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006020:	ea22 0201 	bic.w	r2, r2, r1
 8006024:	011b      	lsls	r3, r3, #4
 8006026:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006030:	e750      	b.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006032:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006034:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 8006038:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800603c:	0919      	lsrs	r1, r3, #4
 800603e:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006042:	ea22 0201 	bic.w	r2, r2, r1
 8006046:	011b      	lsls	r3, r3, #4
 8006048:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800604c:	4313      	orrs	r3, r2
 800604e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006052:	e744      	b.n	8005ede <HAL_RCCEx_PeriphCLKConfig+0xe2>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006054:	69e3      	ldr	r3, [r4, #28]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8006056:	f04f 40b0 	mov.w	r0, #1476395008	; 0x58000000
 800605a:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 800605e:	0919      	lsrs	r1, r3, #4
 8006060:	f401 217f 	and.w	r1, r1, #1044480	; 0xff000
 8006064:	ea22 0201 	bic.w	r2, r2, r1
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800606e:	4313      	orrs	r3, r2
 8006070:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006074:	e738      	b.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006076:	68cb      	ldr	r3, [r1, #12]
 8006078:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800607c:	60cb      	str	r3, [r1, #12]
 800607e:	e746      	b.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x112>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006080:	68cb      	ldr	r3, [r1, #12]
 8006082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006086:	60cb      	str	r3, [r1, #12]
 8006088:	e768      	b.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800608a:	bf00      	nop
 800608c:	58000400 	.word	0x58000400

08006090 <HAL_RTC_DeactivateAlarm>:
{
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006090:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006094:	2b01      	cmp	r3, #1
 8006096:	d036      	beq.n	8006106 <HAL_RTC_DeactivateAlarm+0x76>
 8006098:	2301      	movs	r3, #1
 800609a:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 800609e:	2302      	movs	r3, #2
 80060a0:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80060a4:	4b19      	ldr	r3, [pc, #100]	; (800610c <HAL_RTC_DeactivateAlarm+0x7c>)
 80060a6:	22ca      	movs	r2, #202	; 0xca
 80060a8:	625a      	str	r2, [r3, #36]	; 0x24
 80060aa:	2253      	movs	r2, #83	; 0x53
 80060ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (Alarm == RTC_ALARM_A)
 80060ae:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80060b2:	d019      	beq.n	80060e8 <HAL_RTC_DeactivateAlarm+0x58>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80060b4:	4b15      	ldr	r3, [pc, #84]	; (800610c <HAL_RTC_DeactivateAlarm+0x7c>)
 80060b6:	699a      	ldr	r2, [r3, #24]
 80060b8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80060bc:	619a      	str	r2, [r3, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 80060be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80060c0:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060c4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80060c6:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80060c8:	f022 0202 	bic.w	r2, r2, #2
 80060cc:	6302      	str	r2, [r0, #48]	; 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80060ce:	2202      	movs	r2, #2
 80060d0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <HAL_RTC_DeactivateAlarm+0x7c>)
 80060d4:	22ff      	movs	r2, #255	; 0xff
 80060d6:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80060d8:	2301      	movs	r3, #1
 80060da:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80060de:	2300      	movs	r3, #0
 80060e0:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80060e4:	4618      	mov	r0, r3
 80060e6:	4770      	bx	lr
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 80060e8:	699a      	ldr	r2, [r3, #24]
 80060ea:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 80060ee:	619a      	str	r2, [r3, #24]
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 80060f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060f2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80060f6:	645a      	str	r2, [r3, #68]	; 0x44
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 80060f8:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80060fa:	f022 0201 	bic.w	r2, r2, #1
 80060fe:	6302      	str	r2, [r0, #48]	; 0x30
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006100:	2201      	movs	r2, #1
 8006102:	65da      	str	r2, [r3, #92]	; 0x5c
 8006104:	e7e5      	b.n	80060d2 <HAL_RTC_DeactivateAlarm+0x42>
  __HAL_LOCK(hrtc);
 8006106:	2002      	movs	r0, #2
}
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40002800 	.word	0x40002800

08006110 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4604      	mov	r4, r0
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 8006114:	4b0d      	ldr	r3, [pc, #52]	; (800614c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006116:	6d5d      	ldr	r5, [r3, #84]	; 0x54
 8006118:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800611a:	401d      	ands	r5, r3

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 800611c:	f015 0f01 	tst.w	r5, #1
 8006120:	d106      	bne.n	8006130 <HAL_RTC_AlarmIRQHandler+0x20>
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 8006122:	f015 0f02 	tst.w	r5, #2
 8006126:	d109      	bne.n	800613c <HAL_RTC_AlarmIRQHandler+0x2c>
    HAL_RTCEx_AlarmBEventCallback(hrtc);
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006128:	2301      	movs	r3, #1
 800612a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 800612e:	bd38      	pop	{r3, r4, r5, pc}
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006130:	4b06      	ldr	r3, [pc, #24]	; (800614c <HAL_RTC_AlarmIRQHandler+0x3c>)
 8006132:	2201      	movs	r2, #1
 8006134:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTC_AlarmAEventCallback(hrtc);
 8006136:	f7fb ff3d 	bl	8001fb4 <HAL_RTC_AlarmAEventCallback>
 800613a:	e7f2      	b.n	8006122 <HAL_RTC_AlarmIRQHandler+0x12>
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 800613c:	4b03      	ldr	r3, [pc, #12]	; (800614c <HAL_RTC_AlarmIRQHandler+0x3c>)
 800613e:	2202      	movs	r2, #2
 8006140:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 8006142:	4620      	mov	r0, r4
 8006144:	f000 f9ee 	bl	8006524 <HAL_RTCEx_AlarmBEventCallback>
 8006148:	e7ee      	b.n	8006128 <HAL_RTC_AlarmIRQHandler+0x18>
 800614a:	bf00      	nop
 800614c:	40002800 	.word	0x40002800

08006150 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006150:	b510      	push	{r4, lr}
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006152:	4a0b      	ldr	r2, [pc, #44]	; (8006180 <HAL_RTC_WaitForSynchro+0x30>)
 8006154:	68d3      	ldr	r3, [r2, #12]
 8006156:	f023 0320 	bic.w	r3, r3, #32
 800615a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800615c:	f7fb fd82 	bl	8001c64 <HAL_GetTick>
 8006160:	4604      	mov	r4, r0

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <HAL_RTC_WaitForSynchro+0x30>)
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	f013 0f20 	tst.w	r3, #32
 800616a:	d107      	bne.n	800617c <HAL_RTC_WaitForSynchro+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800616c:	f7fb fd7a 	bl	8001c64 <HAL_GetTick>
 8006170:	1b00      	subs	r0, r0, r4
 8006172:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006176:	d9f4      	bls.n	8006162 <HAL_RTC_WaitForSynchro+0x12>
    {
      return HAL_TIMEOUT;
 8006178:	2003      	movs	r0, #3
 800617a:	e000      	b.n	800617e <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 800617c:	2000      	movs	r0, #0
}
 800617e:	bd10      	pop	{r4, pc}
 8006180:	40002800 	.word	0x40002800

08006184 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006184:	b570      	push	{r4, r5, r6, lr}
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006186:	4b11      	ldr	r3, [pc, #68]	; (80061cc <RTC_EnterInitMode+0x48>)
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800618e:	d002      	beq.n	8006196 <RTC_EnterInitMode+0x12>
  HAL_StatusTypeDef status = HAL_OK;
 8006190:	2400      	movs	r4, #0
      }
    }
  }

  return status;
}
 8006192:	4620      	mov	r0, r4
 8006194:	bd70      	pop	{r4, r5, r6, pc}
 8006196:	4606      	mov	r6, r0
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006198:	4a0c      	ldr	r2, [pc, #48]	; (80061cc <RTC_EnterInitMode+0x48>)
 800619a:	68d3      	ldr	r3, [r2, #12]
 800619c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061a0:	60d3      	str	r3, [r2, #12]
    tickstart = HAL_GetTick();
 80061a2:	f7fb fd5f 	bl	8001c64 <HAL_GetTick>
 80061a6:	4605      	mov	r5, r0
  HAL_StatusTypeDef status = HAL_OK;
 80061a8:	2400      	movs	r4, #0
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80061aa:	4b08      	ldr	r3, [pc, #32]	; (80061cc <RTC_EnterInitMode+0x48>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	f013 0f40 	tst.w	r3, #64	; 0x40
 80061b2:	d1ee      	bne.n	8006192 <RTC_EnterInitMode+0xe>
 80061b4:	2c03      	cmp	r4, #3
 80061b6:	d0ec      	beq.n	8006192 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 80061b8:	f7fb fd54 	bl	8001c64 <HAL_GetTick>
 80061bc:	1b43      	subs	r3, r0, r5
 80061be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80061c2:	d9f2      	bls.n	80061aa <RTC_EnterInitMode+0x26>
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061c4:	2403      	movs	r4, #3
 80061c6:	f886 402d 	strb.w	r4, [r6, #45]	; 0x2d
 80061ca:	e7ee      	b.n	80061aa <RTC_EnterInitMode+0x26>
 80061cc:	40002800 	.word	0x40002800

080061d0 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80061d0:	b510      	push	{r4, lr}
 80061d2:	4604      	mov	r4, r0
  HAL_StatusTypeDef status = HAL_OK;

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80061d4:	4b11      	ldr	r3, [pc, #68]	; (800621c <RTC_ExitInitMode+0x4c>)
 80061d6:	68da      	ldr	r2, [r3, #12]
 80061d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80061dc:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80061de:	699b      	ldr	r3, [r3, #24]
 80061e0:	f013 0f20 	tst.w	r3, #32
 80061e4:	d107      	bne.n	80061f6 <RTC_ExitInitMode+0x26>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80061e6:	f7ff ffb3 	bl	8006150 <HAL_RTC_WaitForSynchro>
 80061ea:	4603      	mov	r3, r0
 80061ec:	b1a0      	cbz	r0, 8006218 <RTC_ExitInitMode+0x48>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80061ee:	2303      	movs	r3, #3
 80061f0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
 80061f4:	e010      	b.n	8006218 <RTC_ExitInitMode+0x48>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80061f6:	4a09      	ldr	r2, [pc, #36]	; (800621c <RTC_ExitInitMode+0x4c>)
 80061f8:	6993      	ldr	r3, [r2, #24]
 80061fa:	f023 0320 	bic.w	r3, r3, #32
 80061fe:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006200:	f7ff ffa6 	bl	8006150 <HAL_RTC_WaitForSynchro>
 8006204:	4603      	mov	r3, r0
 8006206:	b110      	cbz	r0, 800620e <RTC_ExitInitMode+0x3e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006208:	2303      	movs	r3, #3
 800620a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
      status = HAL_TIMEOUT;
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800620e:	4903      	ldr	r1, [pc, #12]	; (800621c <RTC_ExitInitMode+0x4c>)
 8006210:	698a      	ldr	r2, [r1, #24]
 8006212:	f042 0220 	orr.w	r2, r2, #32
 8006216:	618a      	str	r2, [r1, #24]
  }

  return status;
}
 8006218:	4618      	mov	r0, r3
 800621a:	bd10      	pop	{r4, pc}
 800621c:	40002800 	.word	0x40002800

08006220 <HAL_RTC_Init>:
  if (hrtc != NULL)
 8006220:	2800      	cmp	r0, #0
 8006222:	d052      	beq.n	80062ca <HAL_RTC_Init+0xaa>
{
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4604      	mov	r4, r0
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8006228:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800622c:	b163      	cbz	r3, 8006248 <HAL_RTC_Init+0x28>
    hrtc->State = HAL_RTC_STATE_BUSY;
 800622e:	2302      	movs	r3, #2
 8006230:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8006234:	4b26      	ldr	r3, [pc, #152]	; (80062d0 <HAL_RTC_Init+0xb0>)
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f013 0f10 	tst.w	r3, #16
 800623c:	d009      	beq.n	8006252 <HAL_RTC_Init+0x32>
      status = HAL_OK;
 800623e:	2000      	movs	r0, #0
      hrtc->State = HAL_RTC_STATE_READY;
 8006240:	2301      	movs	r3, #1
 8006242:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006246:	bd38      	pop	{r3, r4, r5, pc}
      hrtc->Lock = HAL_UNLOCKED;
 8006248:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
      HAL_RTC_MspInit(hrtc);
 800624c:	f7fb fb3e 	bl	80018cc <HAL_RTC_MspInit>
 8006250:	e7ed      	b.n	800622e <HAL_RTC_Init+0xe>
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006252:	4b1f      	ldr	r3, [pc, #124]	; (80062d0 <HAL_RTC_Init+0xb0>)
 8006254:	22ca      	movs	r2, #202	; 0xca
 8006256:	625a      	str	r2, [r3, #36]	; 0x24
 8006258:	2253      	movs	r2, #83	; 0x53
 800625a:	625a      	str	r2, [r3, #36]	; 0x24
      status = RTC_EnterInitMode(hrtc);
 800625c:	4620      	mov	r0, r4
 800625e:	f7ff ff91 	bl	8006184 <RTC_EnterInitMode>
      if (status == HAL_OK)
 8006262:	b128      	cbz	r0, 8006270 <HAL_RTC_Init+0x50>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006264:	4b1a      	ldr	r3, [pc, #104]	; (80062d0 <HAL_RTC_Init+0xb0>)
 8006266:	22ff      	movs	r2, #255	; 0xff
 8006268:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800626a:	2800      	cmp	r0, #0
 800626c:	d1eb      	bne.n	8006246 <HAL_RTC_Init+0x26>
 800626e:	e7e7      	b.n	8006240 <HAL_RTC_Init+0x20>
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8006270:	4b17      	ldr	r3, [pc, #92]	; (80062d0 <HAL_RTC_Init+0xb0>)
 8006272:	699a      	ldr	r2, [r3, #24]
 8006274:	f022 628e 	bic.w	r2, r2, #74448896	; 0x4700000
 8006278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800627c:	619a      	str	r2, [r3, #24]
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800627e:	6999      	ldr	r1, [r3, #24]
 8006280:	6862      	ldr	r2, [r4, #4]
 8006282:	6920      	ldr	r0, [r4, #16]
 8006284:	4302      	orrs	r2, r0
 8006286:	69a0      	ldr	r0, [r4, #24]
 8006288:	4302      	orrs	r2, r0
 800628a:	430a      	orrs	r2, r1
 800628c:	619a      	str	r2, [r3, #24]
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800628e:	68e2      	ldr	r2, [r4, #12]
 8006290:	68a1      	ldr	r1, [r4, #8]
 8006292:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8006296:	611a      	str	r2, [r3, #16]
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006298:	68da      	ldr	r2, [r3, #12]
 800629a:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
 800629e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80062a0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80062a2:	4301      	orrs	r1, r0
 80062a4:	430a      	orrs	r2, r1
 80062a6:	60da      	str	r2, [r3, #12]
        status = RTC_ExitInitMode(hrtc);
 80062a8:	4620      	mov	r0, r4
 80062aa:	f7ff ff91 	bl	80061d0 <RTC_ExitInitMode>
        if (status == HAL_OK)
 80062ae:	2800      	cmp	r0, #0
 80062b0:	d1d8      	bne.n	8006264 <HAL_RTC_Init+0x44>
          MODIFY_REG(RTC->CR, \
 80062b2:	4907      	ldr	r1, [pc, #28]	; (80062d0 <HAL_RTC_Init+0xb0>)
 80062b4:	698b      	ldr	r3, [r1, #24]
 80062b6:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 80062ba:	6a22      	ldr	r2, [r4, #32]
 80062bc:	69e5      	ldr	r5, [r4, #28]
 80062be:	432a      	orrs	r2, r5
 80062c0:	6965      	ldr	r5, [r4, #20]
 80062c2:	432a      	orrs	r2, r5
 80062c4:	4313      	orrs	r3, r2
 80062c6:	618b      	str	r3, [r1, #24]
 80062c8:	e7cc      	b.n	8006264 <HAL_RTC_Init+0x44>
  HAL_StatusTypeDef status = HAL_ERROR;
 80062ca:	2001      	movs	r0, #1
}
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40002800 	.word	0x40002800

080062d4 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80062d4:	2300      	movs	r3, #0
  uint8_t tmp_Value = Value;

  while (tmp_Value >= 10U)
 80062d6:	e002      	b.n	80062de <RTC_ByteToBcd2+0xa>
  {
    bcdhigh++;
 80062d8:	3301      	adds	r3, #1
    tmp_Value -= 10U;
 80062da:	380a      	subs	r0, #10
 80062dc:	b2c0      	uxtb	r0, r0
  while (tmp_Value >= 10U)
 80062de:	2809      	cmp	r0, #9
 80062e0:	d8fa      	bhi.n	80062d8 <RTC_ByteToBcd2+0x4>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 80062e2:	011b      	lsls	r3, r3, #4
 80062e4:	b2db      	uxtb	r3, r3
}
 80062e6:	4318      	orrs	r0, r3
 80062e8:	4770      	bx	lr
	...

080062ec <HAL_RTC_SetAlarm_IT>:
  __HAL_LOCK(hrtc);
 80062ec:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	f000 80b0 	beq.w	8006456 <HAL_RTC_SetAlarm_IT+0x16a>
{
 80062f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062fa:	4605      	mov	r5, r0
 80062fc:	460c      	mov	r4, r1
  __HAL_LOCK(hrtc);
 80062fe:	2301      	movs	r3, #1
 8006300:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006304:	2302      	movs	r3, #2
 8006306:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800630a:	4b54      	ldr	r3, [pc, #336]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 800630c:	68de      	ldr	r6, [r3, #12]
 800630e:	f406 7640 	and.w	r6, r6, #768	; 0x300
  if (binaryMode != RTC_BINARY_ONLY)
 8006312:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 8006316:	d043      	beq.n	80063a0 <HAL_RTC_SetAlarm_IT+0xb4>
    if (Format == RTC_FORMAT_BIN)
 8006318:	bb12      	cbnz	r2, 8006360 <HAL_RTC_SetAlarm_IT+0x74>
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800631a:	699b      	ldr	r3, [r3, #24]
 800631c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006320:	d101      	bne.n	8006326 <HAL_RTC_SetAlarm_IT+0x3a>
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006322:	2300      	movs	r3, #0
 8006324:	70cb      	strb	r3, [r1, #3]
      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006326:	f8d4 8014 	ldr.w	r8, [r4, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800632a:	7820      	ldrb	r0, [r4, #0]
 800632c:	f7ff ffd2 	bl	80062d4 <RTC_ByteToBcd2>
 8006330:	0407      	lsls	r7, r0, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006332:	7860      	ldrb	r0, [r4, #1]
 8006334:	f7ff ffce 	bl	80062d4 <RTC_ByteToBcd2>
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006338:	ea47 2700 	orr.w	r7, r7, r0, lsl #8
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800633c:	78a0      	ldrb	r0, [r4, #2]
 800633e:	f7ff ffc9 	bl	80062d4 <RTC_ByteToBcd2>
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006342:	4307      	orrs	r7, r0
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006344:	78e0      	ldrb	r0, [r4, #3]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006346:	ea47 5780 	orr.w	r7, r7, r0, lsl #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800634a:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
 800634e:	f7ff ffc1 	bl	80062d4 <RTC_ByteToBcd2>
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006352:	ea47 6000 	orr.w	r0, r7, r0, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006356:	6a27      	ldr	r7, [r4, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006358:	4338      	orrs	r0, r7
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800635a:	ea48 0000 	orr.w	r0, r8, r0
 800635e:	e020      	b.n	80063a2 <HAL_RTC_SetAlarm_IT+0xb6>
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 8006360:	6948      	ldr	r0, [r1, #20]
 8006362:	f1b0 3f80 	cmp.w	r0, #2155905152	; 0x80808080
 8006366:	d009      	beq.n	800637c <HAL_RTC_SetAlarm_IT+0x90>
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 8006368:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800636c:	d006      	beq.n	800637c <HAL_RTC_SetAlarm_IT+0x90>
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 800636e:	4b3b      	ldr	r3, [pc, #236]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 8006370:	699b      	ldr	r3, [r3, #24]
 8006372:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006376:	d101      	bne.n	800637c <HAL_RTC_SetAlarm_IT+0x90>
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006378:	2300      	movs	r3, #0
 800637a:	70cb      	strb	r3, [r1, #3]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800637c:	7822      	ldrb	r2, [r4, #0]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800637e:	7863      	ldrb	r3, [r4, #1]
 8006380:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006382:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006386:	78a2      	ldrb	r2, [r4, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 8006388:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800638a:	78e2      	ldrb	r2, [r4, #3]
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800638c:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006390:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006394:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006398:	6a22      	ldr	r2, [r4, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 800639a:	4313      	orrs	r3, r2
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800639c:	4318      	orrs	r0, r3
 800639e:	e000      	b.n	80063a2 <HAL_RTC_SetAlarm_IT+0xb6>
  uint32_t tmpreg = 0;
 80063a0:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80063a2:	4b2e      	ldr	r3, [pc, #184]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 80063a4:	22ca      	movs	r2, #202	; 0xca
 80063a6:	625a      	str	r2, [r3, #36]	; 0x24
 80063a8:	2253      	movs	r2, #83	; 0x53
 80063aa:	625a      	str	r2, [r3, #36]	; 0x24
  if (sAlarm->Alarm == RTC_ALARM_A)
 80063ac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80063ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063b2:	d02a      	beq.n	800640a <HAL_RTC_SetAlarm_IT+0x11e>
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063b4:	4b29      	ldr	r3, [pc, #164]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 80063b6:	699a      	ldr	r2, [r3, #24]
 80063b8:	f422 5208 	bic.w	r2, r2, #8704	; 0x2200
 80063bc:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80063be:	2202      	movs	r2, #2
 80063c0:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 80063c2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 80063c6:	d040      	beq.n	800644a <HAL_RTC_SetAlarm_IT+0x15e>
      WRITE_REG(RTC->ALRMBR, tmpreg);
 80063c8:	4b24      	ldr	r3, [pc, #144]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 80063ca:	6498      	str	r0, [r3, #72]	; 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 80063cc:	69a2      	ldr	r2, [r4, #24]
 80063ce:	64da      	str	r2, [r3, #76]	; 0x4c
    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 80063d0:	6862      	ldr	r2, [r4, #4]
 80063d2:	4b22      	ldr	r3, [pc, #136]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 80063d4:	675a      	str	r2, [r3, #116]	; 0x74
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80063d6:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80063d8:	f042 0202 	orr.w	r2, r2, #2
 80063dc:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80063de:	699a      	ldr	r2, [r3, #24]
 80063e0:	f442 5208 	orr.w	r2, r2, #8704	; 0x2200
 80063e4:	619a      	str	r2, [r3, #24]
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80063e6:	4a1e      	ldr	r2, [pc, #120]	; (8006460 <HAL_RTC_SetAlarm_IT+0x174>)
 80063e8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
 80063ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063f4:	4b19      	ldr	r3, [pc, #100]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 80063f6:	22ff      	movs	r2, #255	; 0xff
 80063f8:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 80063fa:	2301      	movs	r3, #1
 80063fc:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  __HAL_UNLOCK(hrtc);
 8006400:	2000      	movs	r0, #0
 8006402:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
}
 8006406:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800640a:	4b14      	ldr	r3, [pc, #80]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 800640c:	699a      	ldr	r2, [r3, #24]
 800640e:	f422 5288 	bic.w	r2, r2, #4352	; 0x1100
 8006412:	619a      	str	r2, [r3, #24]
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006414:	2201      	movs	r2, #1
 8006416:	65da      	str	r2, [r3, #92]	; 0x5c
    if (binaryMode == RTC_BINARY_ONLY)
 8006418:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
 800641c:	d00f      	beq.n	800643e <HAL_RTC_SetAlarm_IT+0x152>
      WRITE_REG(RTC->ALRMAR, tmpreg);
 800641e:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 8006420:	6418      	str	r0, [r3, #64]	; 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 8006422:	69a2      	ldr	r2, [r4, #24]
 8006424:	645a      	str	r2, [r3, #68]	; 0x44
    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006426:	6862      	ldr	r2, [r4, #4]
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 800642a:	671a      	str	r2, [r3, #112]	; 0x70
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800642c:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 800642e:	f042 0201 	orr.w	r2, r2, #1
 8006432:	632a      	str	r2, [r5, #48]	; 0x30
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006434:	699a      	ldr	r2, [r3, #24]
 8006436:	f442 5288 	orr.w	r2, r2, #4352	; 0x1100
 800643a:	619a      	str	r2, [r3, #24]
 800643c:	e7d3      	b.n	80063e6 <HAL_RTC_SetAlarm_IT+0xfa>
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 800643e:	69a3      	ldr	r3, [r4, #24]
 8006440:	69e2      	ldr	r2, [r4, #28]
 8006442:	4313      	orrs	r3, r2
 8006444:	4a05      	ldr	r2, [pc, #20]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 8006446:	6453      	str	r3, [r2, #68]	; 0x44
 8006448:	e7ed      	b.n	8006426 <HAL_RTC_SetAlarm_IT+0x13a>
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 800644a:	69a3      	ldr	r3, [r4, #24]
 800644c:	69e2      	ldr	r2, [r4, #28]
 800644e:	4313      	orrs	r3, r2
 8006450:	4a02      	ldr	r2, [pc, #8]	; (800645c <HAL_RTC_SetAlarm_IT+0x170>)
 8006452:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006454:	e7bc      	b.n	80063d0 <HAL_RTC_SetAlarm_IT+0xe4>
  __HAL_LOCK(hrtc);
 8006456:	2002      	movs	r0, #2
}
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40002800 	.word	0x40002800
 8006460:	58000800 	.word	0x58000800

08006464 <HAL_RTCEx_EnableBypassShadow>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006464:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006468:	2b01      	cmp	r3, #1
 800646a:	d017      	beq.n	800649c <HAL_RTCEx_EnableBypassShadow+0x38>
 800646c:	2101      	movs	r1, #1
 800646e:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006472:	2302      	movs	r3, #2
 8006474:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006478:	4b09      	ldr	r3, [pc, #36]	; (80064a0 <HAL_RTCEx_EnableBypassShadow+0x3c>)
 800647a:	22ca      	movs	r2, #202	; 0xca
 800647c:	625a      	str	r2, [r3, #36]	; 0x24
 800647e:	2253      	movs	r2, #83	; 0x53
 8006480:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006482:	699a      	ldr	r2, [r3, #24]
 8006484:	f042 0220 	orr.w	r2, r2, #32
 8006488:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800648a:	22ff      	movs	r2, #255	; 0xff
 800648c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800648e:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006492:	2300      	movs	r3, #0
 8006494:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 8006498:	4618      	mov	r0, r3
 800649a:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 800649c:	2002      	movs	r0, #2
}
 800649e:	4770      	bx	lr
 80064a0:	40002800 	.word	0x40002800

080064a4 <HAL_RTCEx_SetSSRU_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
  /* Process Locked */
  __HAL_LOCK(hrtc);
 80064a4:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d020      	beq.n	80064ee <HAL_RTCEx_SetSSRU_IT+0x4a>
{
 80064ac:	b410      	push	{r4}
  __HAL_LOCK(hrtc);
 80064ae:	2101      	movs	r1, #1
 80064b0:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 80064b4:	2302      	movs	r3, #2
 80064b6:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064ba:	4b0e      	ldr	r3, [pc, #56]	; (80064f4 <HAL_RTCEx_SetSSRU_IT+0x50>)
 80064bc:	22ca      	movs	r2, #202	; 0xca
 80064be:	625a      	str	r2, [r3, #36]	; 0x24
 80064c0:	2253      	movs	r2, #83	; 0x53
 80064c2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 80064c4:	699a      	ldr	r2, [r3, #24]
 80064c6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80064ca:	619a      	str	r2, [r3, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 80064cc:	4c0a      	ldr	r4, [pc, #40]	; (80064f8 <HAL_RTCEx_SetSSRU_IT+0x54>)
 80064ce:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 80064d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80064d6:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064da:	22ff      	movs	r2, #255	; 0xff
 80064dc:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80064de:	f880 102d 	strb.w	r1, [r0, #45]	; 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80064e2:	2300      	movs	r3, #0
 80064e4:	f880 302c 	strb.w	r3, [r0, #44]	; 0x2c

  return HAL_OK;
 80064e8:	4618      	mov	r0, r3
}
 80064ea:	bc10      	pop	{r4}
 80064ec:	4770      	bx	lr
  __HAL_LOCK(hrtc);
 80064ee:	2002      	movs	r0, #2
}
 80064f0:	4770      	bx	lr
 80064f2:	bf00      	nop
 80064f4:	40002800 	.word	0x40002800
 80064f8:	58000800 	.word	0x58000800

080064fc <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80064fc:	b510      	push	{r4, lr}
 80064fe:	4604      	mov	r4, r0
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006500:	4b07      	ldr	r3, [pc, #28]	; (8006520 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006502:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006504:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006508:	d103      	bne.n	8006512 <HAL_RTCEx_SSRUIRQHandler+0x16>
    HAL_RTCEx_SSRUEventCallback(hrtc);
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800650a:	2301      	movs	r3, #1
 800650c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
}
 8006510:	bd10      	pop	{r4, pc}
    RTC->SCR = RTC_SCR_CSSRUF;
 8006512:	4b03      	ldr	r3, [pc, #12]	; (8006520 <HAL_RTCEx_SSRUIRQHandler+0x24>)
 8006514:	2240      	movs	r2, #64	; 0x40
 8006516:	65da      	str	r2, [r3, #92]	; 0x5c
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006518:	f7fb fd50 	bl	8001fbc <HAL_RTCEx_SSRUEventCallback>
 800651c:	e7f5      	b.n	800650a <HAL_RTCEx_SSRUIRQHandler+0xe>
 800651e:	bf00      	nop
 8006520:	40002800 	.word	0x40002800

08006524 <HAL_RTCEx_AlarmBEventCallback>:
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006524:	4770      	bx	lr

08006526 <HAL_RTCEx_BKUPWrite>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006526:	0089      	lsls	r1, r1, #2
 8006528:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800652c:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006530:	600a      	str	r2, [r1, #0]
}
 8006532:	4770      	bx	lr

08006534 <HAL_RTCEx_BKUPRead>:
  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
  tmp += (BackupRegister * 4U);
 8006534:	0089      	lsls	r1, r1, #2
 8006536:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 800653a:	f501 4131 	add.w	r1, r1, #45312	; 0xb100

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 800653e:	6808      	ldr	r0, [r1, #0]
}
 8006540:	4770      	bx	lr
	...

08006544 <SUBGHZSPI_Init>:
{
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8006544:	4b07      	ldr	r3, [pc, #28]	; (8006564 <SUBGHZSPI_Init+0x20>)
 8006546:	681a      	ldr	r2, [r3, #0]
 8006548:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800654c:	601a      	str	r2, [r3, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 800654e:	f440 7041 	orr.w	r0, r0, #772	; 0x304
 8006552:	6018      	str	r0, [r3, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 8006554:	f44f 52b8 	mov.w	r2, #5888	; 0x1700
 8006558:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006560:	601a      	str	r2, [r3, #0]
}
 8006562:	4770      	bx	lr
 8006564:	58010000 	.word	0x58010000

08006568 <HAL_SUBGHZ_Init>:
{
 8006568:	b530      	push	{r4, r5, lr}
 800656a:	b083      	sub	sp, #12
  if (hsubghz == NULL)
 800656c:	2800      	cmp	r0, #0
 800656e:	d058      	beq.n	8006622 <HAL_SUBGHZ_Init+0xba>
 8006570:	4604      	mov	r4, r0
  subghz_state = hsubghz->State;
 8006572:	7983      	ldrb	r3, [r0, #6]
  if ((subghz_state == HAL_SUBGHZ_STATE_RESET) ||
 8006574:	f003 05ff 	and.w	r5, r3, #255	; 0xff
 8006578:	b10b      	cbz	r3, 800657e <HAL_SUBGHZ_Init+0x16>
 800657a:	2d03      	cmp	r5, #3
 800657c:	d10b      	bne.n	8006596 <HAL_SUBGHZ_Init+0x2e>
    hsubghz->Lock = HAL_UNLOCKED;
 800657e:	2300      	movs	r3, #0
 8006580:	7163      	strb	r3, [r4, #5]
    HAL_SUBGHZ_MspInit(hsubghz);
 8006582:	4620      	mov	r0, r4
 8006584:	f7fb fa7e 	bl	8001a84 <HAL_SUBGHZ_MspInit>
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006588:	4a27      	ldr	r2, [pc, #156]	; (8006628 <HAL_SUBGHZ_Init+0xc0>)
 800658a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800658e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  if (subghz_state == HAL_SUBGHZ_STATE_RESET)
 8006596:	b185      	cbz	r5, 80065ba <HAL_SUBGHZ_Init+0x52>
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006598:	4b24      	ldr	r3, [pc, #144]	; (800662c <HAL_SUBGHZ_Init+0xc4>)
 800659a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800659e:	619a      	str	r2, [r3, #24]
    status = HAL_OK;
 80065a0:	2500      	movs	r5, #0
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	f7ff ffce 	bl	8006544 <SUBGHZSPI_Init>
    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	7123      	strb	r3, [r4, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60a3      	str	r3, [r4, #8]
  hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80065b0:	2301      	movs	r3, #1
 80065b2:	71a3      	strb	r3, [r4, #6]
}
 80065b4:	4628      	mov	r0, r5
 80065b6:	b003      	add	sp, #12
 80065b8:	bd30      	pop	{r4, r5, pc}
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80065ba:	2302      	movs	r3, #2
 80065bc:	71a3      	strb	r3, [r4, #6]
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 80065be:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80065c2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
 80065c6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80065ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80065ce:	4b18      	ldr	r3, [pc, #96]	; (8006630 <HAL_SUBGHZ_Init+0xc8>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80065d6:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80065da:	2264      	movs	r2, #100	; 0x64
 80065dc:	fb02 f303 	mul.w	r3, r2, r3
 80065e0:	9301      	str	r3, [sp, #4]
      if (count == 0U)
 80065e2:	9b01      	ldr	r3, [sp, #4]
 80065e4:	b1d3      	cbz	r3, 800661c <HAL_SUBGHZ_Init+0xb4>
      count--;
 80065e6:	9b01      	ldr	r3, [sp, #4]
 80065e8:	3b01      	subs	r3, #1
 80065ea:	9301      	str	r3, [sp, #4]
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 80065ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80065f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80065f4:	f413 4f80 	tst.w	r3, #16384	; 0x4000
 80065f8:	d1f3      	bne.n	80065e2 <HAL_SUBGHZ_Init+0x7a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80065fa:	4b0c      	ldr	r3, [pc, #48]	; (800662c <HAL_SUBGHZ_Init+0xc4>)
 80065fc:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8006600:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006604:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006608:	689a      	ldr	r2, [r3, #8]
 800660a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800660e:	609a      	str	r2, [r3, #8]
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006610:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006614:	619a      	str	r2, [r3, #24]
  if (status == HAL_OK)
 8006616:	2d00      	cmp	r5, #0
 8006618:	d1ca      	bne.n	80065b0 <HAL_SUBGHZ_Init+0x48>
 800661a:	e7c2      	b.n	80065a2 <HAL_SUBGHZ_Init+0x3a>
        hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800661c:	2501      	movs	r5, #1
 800661e:	60a5      	str	r5, [r4, #8]
        break;
 8006620:	e7eb      	b.n	80065fa <HAL_SUBGHZ_Init+0x92>
    return status;
 8006622:	2501      	movs	r5, #1
 8006624:	e7c6      	b.n	80065b4 <HAL_SUBGHZ_Init+0x4c>
 8006626:	bf00      	nop
 8006628:	58000800 	.word	0x58000800
 800662c:	58000400 	.word	0x58000400
 8006630:	20000078 	.word	0x20000078

08006634 <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 8006634:	b082      	sub	sp, #8
 8006636:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006638:	4b1a      	ldr	r3, [pc, #104]	; (80066a4 <SUBGHZSPI_Transmit+0x70>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006640:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006644:	2064      	movs	r0, #100	; 0x64
 8006646:	fb00 f303 	mul.w	r3, r0, r3
 800664a:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800664c:	9b01      	ldr	r3, [sp, #4]
 800664e:	b14b      	cbz	r3, 8006664 <SUBGHZSPI_Transmit+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006650:	9b01      	ldr	r3, [sp, #4]
 8006652:	3b01      	subs	r3, #1
 8006654:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8006656:	4b14      	ldr	r3, [pc, #80]	; (80066a8 <SUBGHZSPI_Transmit+0x74>)
 8006658:	689b      	ldr	r3, [r3, #8]
 800665a:	f013 0f02 	tst.w	r3, #2
 800665e:	d0f5      	beq.n	800664c <SUBGHZSPI_Transmit+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 8006660:	2000      	movs	r0, #0
 8006662:	e001      	b.n	8006668 <SUBGHZSPI_Transmit+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006664:	2001      	movs	r0, #1
 8006666:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = Data;
 8006668:	4b0f      	ldr	r3, [pc, #60]	; (80066a8 <SUBGHZSPI_Transmit+0x74>)
 800666a:	7319      	strb	r1, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800666c:	4b0d      	ldr	r3, [pc, #52]	; (80066a4 <SUBGHZSPI_Transmit+0x70>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8006674:	f3c3 434c 	ubfx	r3, r3, #17, #13
 8006678:	2164      	movs	r1, #100	; 0x64
 800667a:	fb01 f303 	mul.w	r3, r1, r3
 800667e:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006680:	9b01      	ldr	r3, [sp, #4]
 8006682:	b143      	cbz	r3, 8006696 <SUBGHZSPI_Transmit+0x62>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006684:	9b01      	ldr	r3, [sp, #4]
 8006686:	3b01      	subs	r3, #1
 8006688:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800668a:	4b07      	ldr	r3, [pc, #28]	; (80066a8 <SUBGHZSPI_Transmit+0x74>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f013 0f01 	tst.w	r3, #1
 8006692:	d0f5      	beq.n	8006680 <SUBGHZSPI_Transmit+0x4c>
 8006694:	e001      	b.n	800669a <SUBGHZSPI_Transmit+0x66>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006696:	2001      	movs	r0, #1
 8006698:	6090      	str	r0, [r2, #8]

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 800669a:	4b03      	ldr	r3, [pc, #12]	; (80066a8 <SUBGHZSPI_Transmit+0x74>)
 800669c:	68db      	ldr	r3, [r3, #12]

  return status;
}
 800669e:	b002      	add	sp, #8
 80066a0:	4770      	bx	lr
 80066a2:	bf00      	nop
 80066a4:	20000078 	.word	0x20000078
 80066a8:	58010000 	.word	0x58010000

080066ac <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80066ac:	b082      	sub	sp, #8
 80066ae:	4602      	mov	r2, r0
  HAL_StatusTypeDef status = HAL_OK;
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066b0:	4b1c      	ldr	r3, [pc, #112]	; (8006724 <SUBGHZSPI_Receive+0x78>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80066b8:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80066bc:	2064      	movs	r0, #100	; 0x64
 80066be:	fb00 f303 	mul.w	r3, r0, r3
 80066c2:	9301      	str	r3, [sp, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 80066c4:	9b01      	ldr	r3, [sp, #4]
 80066c6:	b14b      	cbz	r3, 80066dc <SUBGHZSPI_Receive+0x30>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	3b01      	subs	r3, #1
 80066cc:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 80066ce:	4b16      	ldr	r3, [pc, #88]	; (8006728 <SUBGHZSPI_Receive+0x7c>)
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	f013 0f02 	tst.w	r3, #2
 80066d6:	d0f5      	beq.n	80066c4 <SUBGHZSPI_Receive+0x18>
  HAL_StatusTypeDef status = HAL_OK;
 80066d8:	2000      	movs	r0, #0
 80066da:	e001      	b.n	80066e0 <SUBGHZSPI_Receive+0x34>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80066dc:	2001      	movs	r0, #1
 80066de:	6090      	str	r0, [r2, #8]

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
  *spidr = SUBGHZ_DUMMY_DATA;
 80066e0:	4b11      	ldr	r3, [pc, #68]	; (8006728 <SUBGHZSPI_Receive+0x7c>)
 80066e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80066e6:	f883 c00c 	strb.w	ip, [r3, #12]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80066ea:	4b0e      	ldr	r3, [pc, #56]	; (8006724 <SUBGHZSPI_Receive+0x78>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 80066f2:	f3c3 434c 	ubfx	r3, r3, #17, #13
 80066f6:	f04f 0c64 	mov.w	ip, #100	; 0x64
 80066fa:	fb0c f303 	mul.w	r3, ip, r3
 80066fe:	9301      	str	r3, [sp, #4]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8006700:	9b01      	ldr	r3, [sp, #4]
 8006702:	b143      	cbz	r3, 8006716 <SUBGHZSPI_Receive+0x6a>
    {
      status = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
      break;
    }
    count--;
 8006704:	9b01      	ldr	r3, [sp, #4]
 8006706:	3b01      	subs	r3, #1
 8006708:	9301      	str	r3, [sp, #4]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 800670a:	4b07      	ldr	r3, [pc, #28]	; (8006728 <SUBGHZSPI_Receive+0x7c>)
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f013 0f01 	tst.w	r3, #1
 8006712:	d0f5      	beq.n	8006700 <SUBGHZSPI_Receive+0x54>
 8006714:	e001      	b.n	800671a <SUBGHZSPI_Receive+0x6e>
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006716:	2001      	movs	r0, #1
 8006718:	6090      	str	r0, [r2, #8]

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 800671a:	4b03      	ldr	r3, [pc, #12]	; (8006728 <SUBGHZSPI_Receive+0x7c>)
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	700b      	strb	r3, [r1, #0]

  return status;
}
 8006720:	b002      	add	sp, #8
 8006722:	4770      	bx	lr
 8006724:	20000078 	.word	0x20000078
 8006728:	58010000 	.word	0x58010000

0800672c <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 800672c:	b082      	sub	sp, #8
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 800672e:	4b13      	ldr	r3, [pc, #76]	; (800677c <SUBGHZ_WaitOnBusy+0x50>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006736:	f3c3 434b 	ubfx	r3, r3, #17, #12
 800673a:	2264      	movs	r2, #100	; 0x64
 800673c:	fb02 f303 	mul.w	r3, r2, r3
 8006740:	9301      	str	r3, [sp, #4]
 8006742:	e006      	b.n	8006752 <SUBGHZ_WaitOnBusy+0x26>
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();

    if (count == 0U)
    {
      status  = HAL_ERROR;
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8006744:	2302      	movs	r3, #2
 8006746:	6083      	str	r3, [r0, #8]
      status  = HAL_ERROR;
 8006748:	2001      	movs	r0, #1
    }
    count--;
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);

  return status;
}
 800674a:	b002      	add	sp, #8
 800674c:	4770      	bx	lr
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 800674e:	4213      	tst	r3, r2
 8006750:	d012      	beq.n	8006778 <SUBGHZ_WaitOnBusy+0x4c>
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <SUBGHZ_WaitOnBusy+0x54>)
 8006754:	695b      	ldr	r3, [r3, #20]
 8006756:	f013 0304 	ands.w	r3, r3, #4
 800675a:	d000      	beq.n	800675e <SUBGHZ_WaitOnBusy+0x32>
 800675c:	2301      	movs	r3, #1
    if (count == 0U)
 800675e:	9a01      	ldr	r2, [sp, #4]
 8006760:	2a00      	cmp	r2, #0
 8006762:	d0ef      	beq.n	8006744 <SUBGHZ_WaitOnBusy+0x18>
    count--;
 8006764:	9a01      	ldr	r2, [sp, #4]
 8006766:	3a01      	subs	r2, #1
 8006768:	9201      	str	r2, [sp, #4]
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 800676a:	4a05      	ldr	r2, [pc, #20]	; (8006780 <SUBGHZ_WaitOnBusy+0x54>)
 800676c:	6952      	ldr	r2, [r2, #20]
 800676e:	f012 0202 	ands.w	r2, r2, #2
 8006772:	d0ec      	beq.n	800674e <SUBGHZ_WaitOnBusy+0x22>
 8006774:	2201      	movs	r2, #1
 8006776:	e7ea      	b.n	800674e <SUBGHZ_WaitOnBusy+0x22>
  status = HAL_OK;
 8006778:	2000      	movs	r0, #0
 800677a:	e7e6      	b.n	800674a <SUBGHZ_WaitOnBusy+0x1e>
 800677c:	20000078 	.word	0x20000078
 8006780:	58000400 	.word	0x58000400

08006784 <SUBGHZ_CheckDeviceReady>:
{
 8006784:	b500      	push	{lr}
 8006786:	b083      	sub	sp, #12
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 8006788:	7903      	ldrb	r3, [r0, #4]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d004      	beq.n	8006798 <SUBGHZ_CheckDeviceReady+0x14>
  return (SUBGHZ_WaitOnBusy(hsubghz));
 800678e:	f7ff ffcd 	bl	800672c <SUBGHZ_WaitOnBusy>
}
 8006792:	b003      	add	sp, #12
 8006794:	f85d fb04 	ldr.w	pc, [sp], #4
    count  = SUBGHZ_NSS_LOOP_TIME;
 8006798:	4b0d      	ldr	r3, [pc, #52]	; (80067d0 <SUBGHZ_CheckDeviceReady+0x4c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80067a0:	f3c3 334f 	ubfx	r3, r3, #13, #16
 80067a4:	9301      	str	r3, [sp, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80067a6:	4a0b      	ldr	r2, [pc, #44]	; (80067d4 <SUBGHZ_CheckDeviceReady+0x50>)
 80067a8:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80067b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      count--;
 80067b4:	9b01      	ldr	r3, [sp, #4]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	9301      	str	r3, [sp, #4]
    } while (count != 0UL);
 80067ba:	9b01      	ldr	r3, [sp, #4]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1f9      	bne.n	80067b4 <SUBGHZ_CheckDeviceReady+0x30>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80067c0:	4a04      	ldr	r2, [pc, #16]	; (80067d4 <SUBGHZ_CheckDeviceReady+0x50>)
 80067c2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80067c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80067ce:	e7de      	b.n	800678e <SUBGHZ_CheckDeviceReady+0xa>
 80067d0:	20000078 	.word	0x20000078
 80067d4:	58000400 	.word	0x58000400

080067d8 <HAL_SUBGHZ_WriteRegisters>:
{
 80067d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067dc:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80067de:	7980      	ldrb	r0, [r0, #6]
 80067e0:	fa5f f880 	uxtb.w	r8, r0
 80067e4:	f1b8 0f01 	cmp.w	r8, #1
 80067e8:	d13e      	bne.n	8006868 <HAL_SUBGHZ_WriteRegisters+0x90>
 80067ea:	460c      	mov	r4, r1
 80067ec:	4617      	mov	r7, r2
 80067ee:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 80067f0:	796b      	ldrb	r3, [r5, #5]
 80067f2:	2b01      	cmp	r3, #1
 80067f4:	d03b      	beq.n	800686e <HAL_SUBGHZ_WriteRegisters+0x96>
 80067f6:	2301      	movs	r3, #1
 80067f8:	716b      	strb	r3, [r5, #5]
    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 80067fa:	2302      	movs	r3, #2
 80067fc:	71ab      	strb	r3, [r5, #6]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80067fe:	4628      	mov	r0, r5
 8006800:	f7ff ffc0 	bl	8006784 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006804:	4a1b      	ldr	r2, [pc, #108]	; (8006874 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006806:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800680a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800680e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006812:	210d      	movs	r1, #13
 8006814:	4628      	mov	r0, r5
 8006816:	f7ff ff0d 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 800681a:	0a21      	lsrs	r1, r4, #8
 800681c:	4628      	mov	r0, r5
 800681e:	f7ff ff09 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006822:	b2e1      	uxtb	r1, r4
 8006824:	4628      	mov	r0, r5
 8006826:	f7ff ff05 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800682a:	2400      	movs	r4, #0
 800682c:	e005      	b.n	800683a <HAL_SUBGHZ_WriteRegisters+0x62>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800682e:	5d39      	ldrb	r1, [r7, r4]
 8006830:	4628      	mov	r0, r5
 8006832:	f7ff feff 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006836:	3401      	adds	r4, #1
 8006838:	b2a4      	uxth	r4, r4
 800683a:	42b4      	cmp	r4, r6
 800683c:	d3f7      	bcc.n	800682e <HAL_SUBGHZ_WriteRegisters+0x56>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800683e:	4a0d      	ldr	r2, [pc, #52]	; (8006874 <HAL_SUBGHZ_WriteRegisters+0x9c>)
 8006840:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006844:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800684c:	4628      	mov	r0, r5
 800684e:	f7ff ff6d 	bl	800672c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006852:	68ab      	ldr	r3, [r5, #8]
 8006854:	b90b      	cbnz	r3, 800685a <HAL_SUBGHZ_WriteRegisters+0x82>
      status = HAL_OK;
 8006856:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800685a:	2301      	movs	r3, #1
 800685c:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 800685e:	2300      	movs	r3, #0
 8006860:	716b      	strb	r3, [r5, #5]
}
 8006862:	4640      	mov	r0, r8
 8006864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006868:	f04f 0802 	mov.w	r8, #2
 800686c:	e7f9      	b.n	8006862 <HAL_SUBGHZ_WriteRegisters+0x8a>
    __HAL_LOCK(hsubghz);
 800686e:	f04f 0802 	mov.w	r8, #2
 8006872:	e7f6      	b.n	8006862 <HAL_SUBGHZ_WriteRegisters+0x8a>
 8006874:	58000400 	.word	0x58000400

08006878 <HAL_SUBGHZ_ReadRegisters>:
{
 8006878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800687c:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800687e:	7980      	ldrb	r0, [r0, #6]
 8006880:	fa5f f880 	uxtb.w	r8, r0
 8006884:	f1b8 0f01 	cmp.w	r8, #1
 8006888:	d141      	bne.n	800690e <HAL_SUBGHZ_ReadRegisters+0x96>
 800688a:	460c      	mov	r4, r1
 800688c:	4615      	mov	r5, r2
 800688e:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006890:	7973      	ldrb	r3, [r6, #5]
 8006892:	2b01      	cmp	r3, #1
 8006894:	d03e      	beq.n	8006914 <HAL_SUBGHZ_ReadRegisters+0x9c>
 8006896:	2301      	movs	r3, #1
 8006898:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 800689a:	4630      	mov	r0, r6
 800689c:	f7ff ff72 	bl	8006784 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80068a0:	4a1e      	ldr	r2, [pc, #120]	; (800691c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80068a2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068a6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80068aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 80068ae:	211d      	movs	r1, #29
 80068b0:	4630      	mov	r0, r6
 80068b2:	f7ff febf 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 80068b6:	0a21      	lsrs	r1, r4, #8
 80068b8:	4630      	mov	r0, r6
 80068ba:	f7ff febb 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 80068be:	b2e1      	uxtb	r1, r4
 80068c0:	4630      	mov	r0, r6
 80068c2:	f7ff feb7 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 80068c6:	2100      	movs	r1, #0
 80068c8:	4630      	mov	r0, r6
 80068ca:	f7ff feb3 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80068ce:	2400      	movs	r4, #0
 80068d0:	e006      	b.n	80068e0 <HAL_SUBGHZ_ReadRegisters+0x68>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80068d2:	4629      	mov	r1, r5
 80068d4:	4630      	mov	r0, r6
 80068d6:	f7ff fee9 	bl	80066ac <SUBGHZSPI_Receive>
      pData++;
 80068da:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 80068dc:	3401      	adds	r4, #1
 80068de:	b2a4      	uxth	r4, r4
 80068e0:	42bc      	cmp	r4, r7
 80068e2:	d3f6      	bcc.n	80068d2 <HAL_SUBGHZ_ReadRegisters+0x5a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80068e4:	4a0d      	ldr	r2, [pc, #52]	; (800691c <HAL_SUBGHZ_ReadRegisters+0xa4>)
 80068e6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80068ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80068f2:	4630      	mov	r0, r6
 80068f4:	f7ff ff1a 	bl	800672c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80068f8:	68b3      	ldr	r3, [r6, #8]
 80068fa:	b90b      	cbnz	r3, 8006900 <HAL_SUBGHZ_ReadRegisters+0x88>
      status = HAL_OK;
 80068fc:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006900:	2301      	movs	r3, #1
 8006902:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006904:	2300      	movs	r3, #0
 8006906:	7173      	strb	r3, [r6, #5]
}
 8006908:	4640      	mov	r0, r8
 800690a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 800690e:	f04f 0802 	mov.w	r8, #2
 8006912:	e7f9      	b.n	8006908 <HAL_SUBGHZ_ReadRegisters+0x90>
    __HAL_LOCK(hsubghz);
 8006914:	f04f 0802 	mov.w	r8, #2
 8006918:	e7f6      	b.n	8006908 <HAL_SUBGHZ_ReadRegisters+0x90>
 800691a:	bf00      	nop
 800691c:	58000400 	.word	0x58000400

08006920 <HAL_SUBGHZ_ExecSetCmd>:
{
 8006920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006924:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006926:	7980      	ldrb	r0, [r0, #6]
 8006928:	fa5f f980 	uxtb.w	r9, r0
 800692c:	f1b9 0f01 	cmp.w	r9, #1
 8006930:	d143      	bne.n	80069ba <HAL_SUBGHZ_ExecSetCmd+0x9a>
 8006932:	4688      	mov	r8, r1
 8006934:	4617      	mov	r7, r2
 8006936:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006938:	796b      	ldrb	r3, [r5, #5]
 800693a:	2b01      	cmp	r3, #1
 800693c:	d040      	beq.n	80069c0 <HAL_SUBGHZ_ExecSetCmd+0xa0>
 800693e:	2301      	movs	r3, #1
 8006940:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006942:	4628      	mov	r0, r5
 8006944:	f7ff ff1e 	bl	8006784 <SUBGHZ_CheckDeviceReady>
    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 8006948:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800694c:	d005      	beq.n	800695a <HAL_SUBGHZ_ExecSetCmd+0x3a>
 800694e:	f1b8 0f94 	cmp.w	r8, #148	; 0x94
 8006952:	d002      	beq.n	800695a <HAL_SUBGHZ_ExecSetCmd+0x3a>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 8006954:	2300      	movs	r3, #0
 8006956:	712b      	strb	r3, [r5, #4]
 8006958:	e001      	b.n	800695e <HAL_SUBGHZ_ExecSetCmd+0x3e>
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 800695a:	2301      	movs	r3, #1
 800695c:	712b      	strb	r3, [r5, #4]
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 800695e:	4a1a      	ldr	r2, [pc, #104]	; (80069c8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 8006960:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006964:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006968:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 800696c:	4641      	mov	r1, r8
 800696e:	4628      	mov	r0, r5
 8006970:	f7ff fe60 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006974:	2400      	movs	r4, #0
 8006976:	e005      	b.n	8006984 <HAL_SUBGHZ_ExecSetCmd+0x64>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006978:	5d39      	ldrb	r1, [r7, r4]
 800697a:	4628      	mov	r0, r5
 800697c:	f7ff fe5a 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006980:	3401      	adds	r4, #1
 8006982:	b2a4      	uxth	r4, r4
 8006984:	42b4      	cmp	r4, r6
 8006986:	d3f7      	bcc.n	8006978 <HAL_SUBGHZ_ExecSetCmd+0x58>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006988:	4a0f      	ldr	r2, [pc, #60]	; (80069c8 <HAL_SUBGHZ_ExecSetCmd+0xa8>)
 800698a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 800698e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006992:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if (Command != RADIO_SET_SLEEP)
 8006996:	f1b8 0f84 	cmp.w	r8, #132	; 0x84
 800699a:	d10a      	bne.n	80069b2 <HAL_SUBGHZ_ExecSetCmd+0x92>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800699c:	68ab      	ldr	r3, [r5, #8]
 800699e:	b90b      	cbnz	r3, 80069a4 <HAL_SUBGHZ_ExecSetCmd+0x84>
      status = HAL_OK;
 80069a0:	f04f 0900 	mov.w	r9, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80069a4:	2301      	movs	r3, #1
 80069a6:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 80069a8:	2300      	movs	r3, #0
 80069aa:	716b      	strb	r3, [r5, #5]
}
 80069ac:	4648      	mov	r0, r9
 80069ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80069b2:	4628      	mov	r0, r5
 80069b4:	f7ff feba 	bl	800672c <SUBGHZ_WaitOnBusy>
 80069b8:	e7f0      	b.n	800699c <HAL_SUBGHZ_ExecSetCmd+0x7c>
    return HAL_BUSY;
 80069ba:	f04f 0902 	mov.w	r9, #2
 80069be:	e7f5      	b.n	80069ac <HAL_SUBGHZ_ExecSetCmd+0x8c>
    __HAL_LOCK(hsubghz);
 80069c0:	f04f 0902 	mov.w	r9, #2
 80069c4:	e7f2      	b.n	80069ac <HAL_SUBGHZ_ExecSetCmd+0x8c>
 80069c6:	bf00      	nop
 80069c8:	58000400 	.word	0x58000400

080069cc <HAL_SUBGHZ_ExecGetCmd>:
{
 80069cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069d0:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80069d2:	7980      	ldrb	r0, [r0, #6]
 80069d4:	fa5f f880 	uxtb.w	r8, r0
 80069d8:	f1b8 0f01 	cmp.w	r8, #1
 80069dc:	d139      	bne.n	8006a52 <HAL_SUBGHZ_ExecGetCmd+0x86>
 80069de:	460c      	mov	r4, r1
 80069e0:	4615      	mov	r5, r2
 80069e2:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 80069e4:	7973      	ldrb	r3, [r6, #5]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d036      	beq.n	8006a58 <HAL_SUBGHZ_ExecGetCmd+0x8c>
 80069ea:	2301      	movs	r3, #1
 80069ec:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7ff fec8 	bl	8006784 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 80069f4:	4a1a      	ldr	r2, [pc, #104]	; (8006a60 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 80069f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 80069fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8006a02:	4621      	mov	r1, r4
 8006a04:	4630      	mov	r0, r6
 8006a06:	f7ff fe15 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006a0a:	2100      	movs	r1, #0
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f7ff fe11 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006a12:	2400      	movs	r4, #0
 8006a14:	e006      	b.n	8006a24 <HAL_SUBGHZ_ExecGetCmd+0x58>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006a16:	4629      	mov	r1, r5
 8006a18:	4630      	mov	r0, r6
 8006a1a:	f7ff fe47 	bl	80066ac <SUBGHZSPI_Receive>
      pData++;
 8006a1e:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006a20:	3401      	adds	r4, #1
 8006a22:	b2a4      	uxth	r4, r4
 8006a24:	42bc      	cmp	r4, r7
 8006a26:	d3f6      	bcc.n	8006a16 <HAL_SUBGHZ_ExecGetCmd+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006a28:	4a0d      	ldr	r2, [pc, #52]	; (8006a60 <HAL_SUBGHZ_ExecGetCmd+0x94>)
 8006a2a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006a36:	4630      	mov	r0, r6
 8006a38:	f7ff fe78 	bl	800672c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006a3c:	68b3      	ldr	r3, [r6, #8]
 8006a3e:	b90b      	cbnz	r3, 8006a44 <HAL_SUBGHZ_ExecGetCmd+0x78>
      status = HAL_OK;
 8006a40:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006a44:	2301      	movs	r3, #1
 8006a46:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006a48:	2300      	movs	r3, #0
 8006a4a:	7173      	strb	r3, [r6, #5]
}
 8006a4c:	4640      	mov	r0, r8
 8006a4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006a52:	f04f 0802 	mov.w	r8, #2
 8006a56:	e7f9      	b.n	8006a4c <HAL_SUBGHZ_ExecGetCmd+0x80>
    __HAL_LOCK(hsubghz);
 8006a58:	f04f 0802 	mov.w	r8, #2
 8006a5c:	e7f6      	b.n	8006a4c <HAL_SUBGHZ_ExecGetCmd+0x80>
 8006a5e:	bf00      	nop
 8006a60:	58000400 	.word	0x58000400

08006a64 <HAL_SUBGHZ_IRQHandler>:
{
 8006a64:	b530      	push	{r4, r5, lr}
 8006a66:	b083      	sub	sp, #12
 8006a68:	4605      	mov	r5, r0
  uint8_t tmpisr[2U] = {0U};
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	f8ad 3004 	strh.w	r3, [sp, #4]
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 8006a70:	2302      	movs	r3, #2
 8006a72:	aa01      	add	r2, sp, #4
 8006a74:	2112      	movs	r1, #18
 8006a76:	f7ff ffa9 	bl	80069cc <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 8006a7a:	f89d 3004 	ldrb.w	r3, [sp, #4]
  itsource = (itsource << 8U) | tmpisr[1U];
 8006a7e:	f89d 4005 	ldrb.w	r4, [sp, #5]
 8006a82:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2U);
 8006a86:	2302      	movs	r3, #2
 8006a88:	aa01      	add	r2, sp, #4
 8006a8a:	4619      	mov	r1, r3
 8006a8c:	4628      	mov	r0, r5
 8006a8e:	f7ff ff47 	bl	8006920 <HAL_SUBGHZ_ExecSetCmd>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 8006a92:	f014 0f01 	tst.w	r4, #1
 8006a96:	d123      	bne.n	8006ae0 <HAL_SUBGHZ_IRQHandler+0x7c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 8006a98:	f014 0f02 	tst.w	r4, #2
 8006a9c:	d124      	bne.n	8006ae8 <HAL_SUBGHZ_IRQHandler+0x84>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 8006a9e:	f014 0f04 	tst.w	r4, #4
 8006aa2:	d125      	bne.n	8006af0 <HAL_SUBGHZ_IRQHandler+0x8c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 8006aa4:	f014 0f08 	tst.w	r4, #8
 8006aa8:	d126      	bne.n	8006af8 <HAL_SUBGHZ_IRQHandler+0x94>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 8006aaa:	f014 0f10 	tst.w	r4, #16
 8006aae:	d127      	bne.n	8006b00 <HAL_SUBGHZ_IRQHandler+0x9c>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 8006ab0:	f014 0f20 	tst.w	r4, #32
 8006ab4:	d128      	bne.n	8006b08 <HAL_SUBGHZ_IRQHandler+0xa4>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 8006ab6:	f014 0f40 	tst.w	r4, #64	; 0x40
 8006aba:	d129      	bne.n	8006b10 <HAL_SUBGHZ_IRQHandler+0xac>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 8006abc:	f014 0f80 	tst.w	r4, #128	; 0x80
 8006ac0:	d006      	beq.n	8006ad0 <HAL_SUBGHZ_IRQHandler+0x6c>
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 8006ac2:	f414 7f80 	tst.w	r4, #256	; 0x100
 8006ac6:	d027      	beq.n	8006b18 <HAL_SUBGHZ_IRQHandler+0xb4>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 8006ac8:	2101      	movs	r1, #1
 8006aca:	4628      	mov	r0, r5
 8006acc:	f00c fa64 	bl	8012f98 <HAL_SUBGHZ_CADStatusCallback>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 8006ad0:	f414 7f00 	tst.w	r4, #512	; 0x200
 8006ad4:	d125      	bne.n	8006b22 <HAL_SUBGHZ_IRQHandler+0xbe>
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_LR_FHSS_HOP) != RESET)
 8006ad6:	f414 4f80 	tst.w	r4, #16384	; 0x4000
 8006ada:	d126      	bne.n	8006b2a <HAL_SUBGHZ_IRQHandler+0xc6>
}
 8006adc:	b003      	add	sp, #12
 8006ade:	bd30      	pop	{r4, r5, pc}
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8006ae0:	4628      	mov	r0, r5
 8006ae2:	f00c fa41 	bl	8012f68 <HAL_SUBGHZ_TxCpltCallback>
 8006ae6:	e7d7      	b.n	8006a98 <HAL_SUBGHZ_IRQHandler+0x34>
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8006ae8:	4628      	mov	r0, r5
 8006aea:	f00c fa45 	bl	8012f78 <HAL_SUBGHZ_RxCpltCallback>
 8006aee:	e7d6      	b.n	8006a9e <HAL_SUBGHZ_IRQHandler+0x3a>
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8006af0:	4628      	mov	r0, r5
 8006af2:	f00c fa75 	bl	8012fe0 <HAL_SUBGHZ_PreambleDetectedCallback>
 8006af6:	e7d5      	b.n	8006aa4 <HAL_SUBGHZ_IRQHandler+0x40>
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8006af8:	4628      	mov	r0, r5
 8006afa:	f00c fa79 	bl	8012ff0 <HAL_SUBGHZ_SyncWordValidCallback>
 8006afe:	e7d4      	b.n	8006aaa <HAL_SUBGHZ_IRQHandler+0x46>
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8006b00:	4628      	mov	r0, r5
 8006b02:	f00c fa7d 	bl	8013000 <HAL_SUBGHZ_HeaderValidCallback>
 8006b06:	e7d3      	b.n	8006ab0 <HAL_SUBGHZ_IRQHandler+0x4c>
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 8006b08:	4628      	mov	r0, r5
 8006b0a:	f00c fa61 	bl	8012fd0 <HAL_SUBGHZ_HeaderErrorCallback>
 8006b0e:	e7d2      	b.n	8006ab6 <HAL_SUBGHZ_IRQHandler+0x52>
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 8006b10:	4628      	mov	r0, r5
 8006b12:	f00c fa39 	bl	8012f88 <HAL_SUBGHZ_CRCErrorCallback>
 8006b16:	e7d1      	b.n	8006abc <HAL_SUBGHZ_IRQHandler+0x58>
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	4628      	mov	r0, r5
 8006b1c:	f00c fa3c 	bl	8012f98 <HAL_SUBGHZ_CADStatusCallback>
 8006b20:	e7d6      	b.n	8006ad0 <HAL_SUBGHZ_IRQHandler+0x6c>
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 8006b22:	4628      	mov	r0, r5
 8006b24:	f00c fa4a 	bl	8012fbc <HAL_SUBGHZ_RxTxTimeoutCallback>
 8006b28:	e7d5      	b.n	8006ad6 <HAL_SUBGHZ_IRQHandler+0x72>
    HAL_SUBGHZ_LrFhssHopCallback(hsubghz);
 8006b2a:	4628      	mov	r0, r5
 8006b2c:	f00c fa70 	bl	8013010 <HAL_SUBGHZ_LrFhssHopCallback>
}
 8006b30:	e7d4      	b.n	8006adc <HAL_SUBGHZ_IRQHandler+0x78>
	...

08006b34 <HAL_SUBGHZ_WriteBuffer>:
{
 8006b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b38:	4605      	mov	r5, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006b3a:	7980      	ldrb	r0, [r0, #6]
 8006b3c:	fa5f f880 	uxtb.w	r8, r0
 8006b40:	f1b8 0f01 	cmp.w	r8, #1
 8006b44:	d138      	bne.n	8006bb8 <HAL_SUBGHZ_WriteBuffer+0x84>
 8006b46:	460c      	mov	r4, r1
 8006b48:	4617      	mov	r7, r2
 8006b4a:	461e      	mov	r6, r3
    __HAL_LOCK(hsubghz);
 8006b4c:	796b      	ldrb	r3, [r5, #5]
 8006b4e:	2b01      	cmp	r3, #1
 8006b50:	d035      	beq.n	8006bbe <HAL_SUBGHZ_WriteBuffer+0x8a>
 8006b52:	2301      	movs	r3, #1
 8006b54:	716b      	strb	r3, [r5, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006b56:	4628      	mov	r0, r5
 8006b58:	f7ff fe14 	bl	8006784 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b5c:	4a19      	ldr	r2, [pc, #100]	; (8006bc4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006b5e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006b66:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8006b6a:	210e      	movs	r1, #14
 8006b6c:	4628      	mov	r0, r5
 8006b6e:	f7ff fd61 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006b72:	4621      	mov	r1, r4
 8006b74:	4628      	mov	r0, r5
 8006b76:	f7ff fd5d 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b7a:	2400      	movs	r4, #0
 8006b7c:	e005      	b.n	8006b8a <HAL_SUBGHZ_WriteBuffer+0x56>
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006b7e:	5d39      	ldrb	r1, [r7, r4]
 8006b80:	4628      	mov	r0, r5
 8006b82:	f7ff fd57 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006b86:	3401      	adds	r4, #1
 8006b88:	b2a4      	uxth	r4, r4
 8006b8a:	42b4      	cmp	r4, r6
 8006b8c:	d3f7      	bcc.n	8006b7e <HAL_SUBGHZ_WriteBuffer+0x4a>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006b8e:	4a0d      	ldr	r2, [pc, #52]	; (8006bc4 <HAL_SUBGHZ_WriteBuffer+0x90>)
 8006b90:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006b9c:	4628      	mov	r0, r5
 8006b9e:	f7ff fdc5 	bl	800672c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006ba2:	68ab      	ldr	r3, [r5, #8]
 8006ba4:	b90b      	cbnz	r3, 8006baa <HAL_SUBGHZ_WriteBuffer+0x76>
      status = HAL_OK;
 8006ba6:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006baa:	2301      	movs	r3, #1
 8006bac:	71ab      	strb	r3, [r5, #6]
    __HAL_UNLOCK(hsubghz);
 8006bae:	2300      	movs	r3, #0
 8006bb0:	716b      	strb	r3, [r5, #5]
}
 8006bb2:	4640      	mov	r0, r8
 8006bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006bb8:	f04f 0802 	mov.w	r8, #2
 8006bbc:	e7f9      	b.n	8006bb2 <HAL_SUBGHZ_WriteBuffer+0x7e>
    __HAL_LOCK(hsubghz);
 8006bbe:	f04f 0802 	mov.w	r8, #2
 8006bc2:	e7f6      	b.n	8006bb2 <HAL_SUBGHZ_WriteBuffer+0x7e>
 8006bc4:	58000400 	.word	0x58000400

08006bc8 <HAL_SUBGHZ_ReadBuffer>:
{
 8006bc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bcc:	4606      	mov	r6, r0
  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006bce:	7980      	ldrb	r0, [r0, #6]
 8006bd0:	fa5f f880 	uxtb.w	r8, r0
 8006bd4:	f1b8 0f01 	cmp.w	r8, #1
 8006bd8:	d13d      	bne.n	8006c56 <HAL_SUBGHZ_ReadBuffer+0x8e>
 8006bda:	460c      	mov	r4, r1
 8006bdc:	4615      	mov	r5, r2
 8006bde:	461f      	mov	r7, r3
    __HAL_LOCK(hsubghz);
 8006be0:	7973      	ldrb	r3, [r6, #5]
 8006be2:	2b01      	cmp	r3, #1
 8006be4:	d03a      	beq.n	8006c5c <HAL_SUBGHZ_ReadBuffer+0x94>
 8006be6:	2301      	movs	r3, #1
 8006be8:	7173      	strb	r3, [r6, #5]
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006bea:	4630      	mov	r0, r6
 8006bec:	f7ff fdca 	bl	8006784 <SUBGHZ_CheckDeviceReady>
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006bf0:	4a1c      	ldr	r2, [pc, #112]	; (8006c64 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006bf2:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006bf6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006bfa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 8006bfe:	211e      	movs	r1, #30
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff fd17 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 8006c06:	4621      	mov	r1, r4
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7ff fd13 	bl	8006634 <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 8006c0e:	2100      	movs	r1, #0
 8006c10:	4630      	mov	r0, r6
 8006c12:	f7ff fd0f 	bl	8006634 <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006c16:	2400      	movs	r4, #0
 8006c18:	e006      	b.n	8006c28 <HAL_SUBGHZ_ReadBuffer+0x60>
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	4630      	mov	r0, r6
 8006c1e:	f7ff fd45 	bl	80066ac <SUBGHZSPI_Receive>
      pData++;
 8006c22:	3501      	adds	r5, #1
    for (uint16_t i = 0U; i < Size; i++)
 8006c24:	3401      	adds	r4, #1
 8006c26:	b2a4      	uxth	r4, r4
 8006c28:	42bc      	cmp	r4, r7
 8006c2a:	d3f6      	bcc.n	8006c1a <HAL_SUBGHZ_ReadBuffer+0x52>
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006c2c:	4a0d      	ldr	r2, [pc, #52]	; (8006c64 <HAL_SUBGHZ_ReadBuffer+0x9c>)
 8006c2e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006c32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006c3a:	4630      	mov	r0, r6
 8006c3c:	f7ff fd76 	bl	800672c <SUBGHZ_WaitOnBusy>
    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006c40:	68b3      	ldr	r3, [r6, #8]
 8006c42:	b90b      	cbnz	r3, 8006c48 <HAL_SUBGHZ_ReadBuffer+0x80>
      status = HAL_OK;
 8006c44:	f04f 0800 	mov.w	r8, #0
    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006c48:	2301      	movs	r3, #1
 8006c4a:	71b3      	strb	r3, [r6, #6]
    __HAL_UNLOCK(hsubghz);
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	7173      	strb	r3, [r6, #5]
}
 8006c50:	4640      	mov	r0, r8
 8006c52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 8006c56:	f04f 0802 	mov.w	r8, #2
 8006c5a:	e7f9      	b.n	8006c50 <HAL_SUBGHZ_ReadBuffer+0x88>
    __HAL_LOCK(hsubghz);
 8006c5c:	f04f 0802 	mov.w	r8, #2
 8006c60:	e7f6      	b.n	8006c50 <HAL_SUBGHZ_ReadBuffer+0x88>
 8006c62:	bf00      	nop
 8006c64:	58000400 	.word	0x58000400

08006c68 <UART_EndTxTransfer>:
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c68:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c6a:	e852 3f00 	ldrex	r3, [r2]
 8006c6e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c72:	e842 3100 	strex	r1, r3, [r2]
 8006c76:	2900      	cmp	r1, #0
 8006c78:	d1f6      	bne.n	8006c68 <UART_EndTxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c7a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	f102 0308 	add.w	r3, r2, #8
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c88:	3208      	adds	r2, #8
 8006c8a:	e842 3100 	strex	r1, r3, [r2]
 8006c8e:	2900      	cmp	r1, #0
 8006c90:	d1f3      	bne.n	8006c7a <UART_EndTxTransfer+0x12>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c92:	2320      	movs	r3, #32
 8006c94:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
}
 8006c98:	4770      	bx	lr

08006c9a <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c9a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c9c:	e852 3f00 	ldrex	r3, [r2]
 8006ca0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca4:	e842 3100 	strex	r1, r3, [r2]
 8006ca8:	2900      	cmp	r1, #0
 8006caa:	d1f6      	bne.n	8006c9a <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cac:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cae:	f102 0308 	add.w	r3, r2, #8
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cba:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cbe:	3208      	adds	r2, #8
 8006cc0:	e842 3100 	strex	r1, r3, [r2]
 8006cc4:	2900      	cmp	r1, #0
 8006cc6:	d1f1      	bne.n	8006cac <UART_EndRxTransfer+0x12>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cc8:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d006      	beq.n	8006cdc <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cce:	2320      	movs	r3, #32
 8006cd0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	66c3      	str	r3, [r0, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006cd8:	6743      	str	r3, [r0, #116]	; 0x74
}
 8006cda:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cdc:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	e852 3f00 	ldrex	r3, [r2]
 8006ce2:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	e842 3100 	strex	r1, r3, [r2]
 8006cea:	2900      	cmp	r1, #0
 8006cec:	d1f6      	bne.n	8006cdc <UART_EndRxTransfer+0x42>
 8006cee:	e7ee      	b.n	8006cce <UART_EndRxTransfer+0x34>

08006cf0 <HAL_UART_Transmit_DMA>:
{
 8006cf0:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8006cf2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8006cf6:	2a20      	cmp	r2, #32
 8006cf8:	d13d      	bne.n	8006d76 <HAL_UART_Transmit_DMA+0x86>
{
 8006cfa:	b510      	push	{r4, lr}
 8006cfc:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	d03b      	beq.n	8006d7a <HAL_UART_Transmit_DMA+0x8a>
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d03b      	beq.n	8006d7e <HAL_UART_Transmit_DMA+0x8e>
    huart->pTxBuffPtr  = pData;
 8006d06:	6501      	str	r1, [r0, #80]	; 0x50
    huart->TxXferSize  = Size;
 8006d08:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    huart->TxXferCount = Size;
 8006d0c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d10:	2200      	movs	r2, #0
 8006d12:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d16:	2221      	movs	r2, #33	; 0x21
 8006d18:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if (huart->hdmatx != NULL)
 8006d1c:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d1e:	b1ca      	cbz	r2, 8006d54 <HAL_UART_Transmit_DMA+0x64>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8006d20:	4918      	ldr	r1, [pc, #96]	; (8006d84 <HAL_UART_Transmit_DMA+0x94>)
 8006d22:	62d1      	str	r1, [r2, #44]	; 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8006d24:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d26:	4918      	ldr	r1, [pc, #96]	; (8006d88 <HAL_UART_Transmit_DMA+0x98>)
 8006d28:	6311      	str	r1, [r2, #48]	; 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8006d2a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d2c:	4917      	ldr	r1, [pc, #92]	; (8006d8c <HAL_UART_Transmit_DMA+0x9c>)
 8006d2e:	6351      	str	r1, [r2, #52]	; 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 8006d30:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
 8006d32:	2100      	movs	r1, #0
 8006d34:	6391      	str	r1, [r2, #56]	; 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8006d36:	6802      	ldr	r2, [r0, #0]
 8006d38:	3228      	adds	r2, #40	; 0x28
 8006d3a:	6d01      	ldr	r1, [r0, #80]	; 0x50
 8006d3c:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8006d3e:	f7fd fae1 	bl	8004304 <HAL_DMA_Start_IT>
 8006d42:	b138      	cbz	r0, 8006d54 <HAL_UART_Transmit_DMA+0x64>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d44:	2310      	movs	r3, #16
 8006d46:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        huart->gState = HAL_UART_STATE_READY;
 8006d4a:	2320      	movs	r3, #32
 8006d4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
        return HAL_ERROR;
 8006d50:	2001      	movs	r0, #1
 8006d52:	e00f      	b.n	8006d74 <HAL_UART_Transmit_DMA+0x84>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006d54:	6823      	ldr	r3, [r4, #0]
 8006d56:	2240      	movs	r2, #64	; 0x40
 8006d58:	621a      	str	r2, [r3, #32]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006d5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d5c:	f102 0308 	add.w	r3, r2, #8
 8006d60:	e853 3f00 	ldrex	r3, [r3]
 8006d64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d68:	3208      	adds	r2, #8
 8006d6a:	e842 3100 	strex	r1, r3, [r2]
 8006d6e:	2900      	cmp	r1, #0
 8006d70:	d1f3      	bne.n	8006d5a <HAL_UART_Transmit_DMA+0x6a>
    return HAL_OK;
 8006d72:	2000      	movs	r0, #0
}
 8006d74:	bd10      	pop	{r4, pc}
    return HAL_BUSY;
 8006d76:	2002      	movs	r0, #2
}
 8006d78:	4770      	bx	lr
      return HAL_ERROR;
 8006d7a:	2001      	movs	r0, #1
 8006d7c:	e7fa      	b.n	8006d74 <HAL_UART_Transmit_DMA+0x84>
 8006d7e:	2001      	movs	r0, #1
 8006d80:	e7f8      	b.n	8006d74 <HAL_UART_Transmit_DMA+0x84>
 8006d82:	bf00      	nop
 8006d84:	08006d91 	.word	0x08006d91
 8006d88:	08006dff 	.word	0x08006dff
 8006d8c:	08006e0b 	.word	0x08006e0b

08006d90 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006d90:	b508      	push	{r3, lr}
 8006d92:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d94:	6a80      	ldr	r0, [r0, #40]	; 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f013 0f20 	tst.w	r3, #32
 8006d9e:	d118      	bne.n	8006dd2 <UART_DMATransmitCplt+0x42>
  {
    huart->TxXferCount = 0U;
 8006da0:	2300      	movs	r3, #0
 8006da2:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006da6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da8:	f102 0308 	add.w	r3, r2, #8
 8006dac:	e853 3f00 	ldrex	r3, [r3]
 8006db0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db4:	3208      	adds	r2, #8
 8006db6:	e842 3100 	strex	r1, r3, [r2]
 8006dba:	2900      	cmp	r1, #0
 8006dbc:	d1f3      	bne.n	8006da6 <UART_DMATransmitCplt+0x16>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dbe:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	e852 3f00 	ldrex	r3, [r2]
 8006dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	e842 3100 	strex	r1, r3, [r2]
 8006dcc:	2900      	cmp	r1, #0
 8006dce:	d1f6      	bne.n	8006dbe <UART_DMATransmitCplt+0x2e>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006dd0:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8006dd2:	f7fb fa33 	bl	800223c <HAL_UART_TxCpltCallback>
}
 8006dd6:	e7fb      	b.n	8006dd0 <UART_DMATransmitCplt+0x40>

08006dd8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006dd8:	b508      	push	{r3, lr}
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006dda:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	e852 3f00 	ldrex	r3, [r2]
 8006de0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de4:	e842 3100 	strex	r1, r3, [r2]
 8006de8:	2900      	cmp	r1, #0
 8006dea:	d1f6      	bne.n	8006dda <UART_EndTransmit_IT+0x2>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006dec:	2320      	movs	r3, #32
 8006dee:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006df2:	2300      	movs	r3, #0
 8006df4:	6783      	str	r3, [r0, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006df6:	f7fb fa21 	bl	800223c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006dfa:	bd08      	pop	{r3, pc}

08006dfc <HAL_UART_TxHalfCpltCallback>:
}
 8006dfc:	4770      	bx	lr

08006dfe <UART_DMATxHalfCplt>:
{
 8006dfe:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8006e00:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8006e02:	f7ff fffb 	bl	8006dfc <HAL_UART_TxHalfCpltCallback>
}
 8006e06:	bd08      	pop	{r3, pc}

08006e08 <HAL_UART_ErrorCallback>:
}
 8006e08:	4770      	bx	lr

08006e0a <UART_DMAError>:
{
 8006e0a:	b538      	push	{r3, r4, r5, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e0c:	6a84      	ldr	r4, [r0, #40]	; 0x28
  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006e0e:	f8d4 2088 	ldr.w	r2, [r4, #136]	; 0x88
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006e12:	f8d4 508c 	ldr.w	r5, [r4, #140]	; 0x8c
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	689b      	ldr	r3, [r3, #8]
 8006e1a:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006e1e:	d001      	beq.n	8006e24 <UART_DMAError+0x1a>
 8006e20:	2a21      	cmp	r2, #33	; 0x21
 8006e22:	d010      	beq.n	8006e46 <UART_DMAError+0x3c>
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006e24:	6823      	ldr	r3, [r4, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006e2c:	d001      	beq.n	8006e32 <UART_DMAError+0x28>
 8006e2e:	2d22      	cmp	r5, #34	; 0x22
 8006e30:	d010      	beq.n	8006e54 <UART_DMAError+0x4a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006e32:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8006e36:	f043 0310 	orr.w	r3, r3, #16
 8006e3a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
  HAL_UART_ErrorCallback(huart);
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff ffe2 	bl	8006e08 <HAL_UART_ErrorCallback>
}
 8006e44:	bd38      	pop	{r3, r4, r5, pc}
    huart->TxXferCount = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8a4 3056 	strh.w	r3, [r4, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f7ff ff0b 	bl	8006c68 <UART_EndTxTransfer>
 8006e52:	e7e7      	b.n	8006e24 <UART_DMAError+0x1a>
    huart->RxXferCount = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	f7ff ff1d 	bl	8006c9a <UART_EndRxTransfer>
 8006e60:	e7e7      	b.n	8006e32 <UART_DMAError+0x28>

08006e62 <UART_DMAAbortOnError>:
{
 8006e62:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e64:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 8006e66:	2300      	movs	r3, #0
 8006e68:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006e6c:	f8a0 3056 	strh.w	r3, [r0, #86]	; 0x56
  HAL_UART_ErrorCallback(huart);
 8006e70:	f7ff ffca 	bl	8006e08 <HAL_UART_ErrorCallback>
}
 8006e74:	bd08      	pop	{r3, pc}

08006e76 <HAL_UARTEx_RxEventCallback>:
}
 8006e76:	4770      	bx	lr

08006e78 <HAL_UART_IRQHandler>:
{
 8006e78:	b570      	push	{r4, r5, r6, lr}
 8006e7a:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006e7c:	6801      	ldr	r1, [r0, #0]
 8006e7e:	69cb      	ldr	r3, [r1, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006e80:	6808      	ldr	r0, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e82:	688d      	ldr	r5, [r1, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e84:	f640 020f 	movw	r2, #2063	; 0x80f
  if (errorflags == 0U)
 8006e88:	401a      	ands	r2, r3
 8006e8a:	d108      	bne.n	8006e9e <HAL_UART_IRQHandler+0x26>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006e8c:	f013 0f20 	tst.w	r3, #32
 8006e90:	d005      	beq.n	8006e9e <HAL_UART_IRQHandler+0x26>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006e92:	f010 0f20 	tst.w	r0, #32
 8006e96:	d134      	bne.n	8006f02 <HAL_UART_IRQHandler+0x8a>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006e98:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006e9c:	d131      	bne.n	8006f02 <HAL_UART_IRQHandler+0x8a>
  if ((errorflags != 0U)
 8006e9e:	b12a      	cbz	r2, 8006eac <HAL_UART_IRQHandler+0x34>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006ea0:	4a99      	ldr	r2, [pc, #612]	; (8007108 <HAL_UART_IRQHandler+0x290>)
 8006ea2:	402a      	ands	r2, r5
 8006ea4:	d133      	bne.n	8006f0e <HAL_UART_IRQHandler+0x96>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ea6:	4e99      	ldr	r6, [pc, #612]	; (800710c <HAL_UART_IRQHandler+0x294>)
 8006ea8:	4230      	tst	r0, r6
 8006eaa:	d130      	bne.n	8006f0e <HAL_UART_IRQHandler+0x96>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eac:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8006eae:	2a01      	cmp	r2, #1
 8006eb0:	f000 80c6 	beq.w	8007040 <HAL_UART_IRQHandler+0x1c8>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006eb4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006eb8:	d003      	beq.n	8006ec2 <HAL_UART_IRQHandler+0x4a>
 8006eba:	f415 0f80 	tst.w	r5, #4194304	; 0x400000
 8006ebe:	f040 8165 	bne.w	800718c <HAL_UART_IRQHandler+0x314>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ec2:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006ec6:	d007      	beq.n	8006ed8 <HAL_UART_IRQHandler+0x60>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ec8:	f010 0f80 	tst.w	r0, #128	; 0x80
 8006ecc:	f040 8165 	bne.w	800719a <HAL_UART_IRQHandler+0x322>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006ed0:	f415 0f00 	tst.w	r5, #8388608	; 0x800000
 8006ed4:	f040 8161 	bne.w	800719a <HAL_UART_IRQHandler+0x322>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006ed8:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006edc:	d003      	beq.n	8006ee6 <HAL_UART_IRQHandler+0x6e>
 8006ede:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006ee2:	f040 8161 	bne.w	80071a8 <HAL_UART_IRQHandler+0x330>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006ee6:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8006eea:	d003      	beq.n	8006ef4 <HAL_UART_IRQHandler+0x7c>
 8006eec:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006ef0:	f040 815e 	bne.w	80071b0 <HAL_UART_IRQHandler+0x338>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006ef4:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8006ef8:	d002      	beq.n	8006f00 <HAL_UART_IRQHandler+0x88>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	f2c0 815c 	blt.w	80071b8 <HAL_UART_IRQHandler+0x340>
}
 8006f00:	bd70      	pop	{r4, r5, r6, pc}
      if (huart->RxISR != NULL)
 8006f02:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d0fb      	beq.n	8006f00 <HAL_UART_IRQHandler+0x88>
        huart->RxISR(huart);
 8006f08:	4620      	mov	r0, r4
 8006f0a:	4798      	blx	r3
      return;
 8006f0c:	e7f8      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006f0e:	f013 0f01 	tst.w	r3, #1
 8006f12:	d009      	beq.n	8006f28 <HAL_UART_IRQHandler+0xb0>
 8006f14:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006f18:	d006      	beq.n	8006f28 <HAL_UART_IRQHandler+0xb0>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006f1a:	2601      	movs	r6, #1
 8006f1c:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f1e:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006f22:	4331      	orrs	r1, r6
 8006f24:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f28:	f013 0f02 	tst.w	r3, #2
 8006f2c:	d00b      	beq.n	8006f46 <HAL_UART_IRQHandler+0xce>
 8006f2e:	f015 0f01 	tst.w	r5, #1
 8006f32:	d008      	beq.n	8006f46 <HAL_UART_IRQHandler+0xce>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f34:	6821      	ldr	r1, [r4, #0]
 8006f36:	2602      	movs	r6, #2
 8006f38:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f3a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006f3e:	f041 0104 	orr.w	r1, r1, #4
 8006f42:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f46:	f013 0f04 	tst.w	r3, #4
 8006f4a:	d00b      	beq.n	8006f64 <HAL_UART_IRQHandler+0xec>
 8006f4c:	f015 0f01 	tst.w	r5, #1
 8006f50:	d008      	beq.n	8006f64 <HAL_UART_IRQHandler+0xec>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f52:	6821      	ldr	r1, [r4, #0]
 8006f54:	2604      	movs	r6, #4
 8006f56:	620e      	str	r6, [r1, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f58:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
 8006f5c:	f041 0102 	orr.w	r1, r1, #2
 8006f60:	f8c4 1090 	str.w	r1, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f64:	f013 0f08 	tst.w	r3, #8
 8006f68:	d00b      	beq.n	8006f82 <HAL_UART_IRQHandler+0x10a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006f6a:	f010 0f20 	tst.w	r0, #32
 8006f6e:	d100      	bne.n	8006f72 <HAL_UART_IRQHandler+0xfa>
 8006f70:	b13a      	cbz	r2, 8006f82 <HAL_UART_IRQHandler+0x10a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f72:	6822      	ldr	r2, [r4, #0]
 8006f74:	2108      	movs	r1, #8
 8006f76:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f78:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006f7c:	430a      	orrs	r2, r1
 8006f7e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f82:	f413 6f00 	tst.w	r3, #2048	; 0x800
 8006f86:	d00c      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x12a>
 8006f88:	f010 6f80 	tst.w	r0, #67108864	; 0x4000000
 8006f8c:	d009      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x12a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f94:	6211      	str	r1, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f96:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006f9a:	f042 0220 	orr.w	r2, r2, #32
 8006f9e:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fa2:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8006fa6:	2a00      	cmp	r2, #0
 8006fa8:	d0aa      	beq.n	8006f00 <HAL_UART_IRQHandler+0x88>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006faa:	f013 0f20 	tst.w	r3, #32
 8006fae:	d009      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x14c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006fb0:	f010 0f20 	tst.w	r0, #32
 8006fb4:	d102      	bne.n	8006fbc <HAL_UART_IRQHandler+0x144>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006fb6:	f015 5f80 	tst.w	r5, #268435456	; 0x10000000
 8006fba:	d003      	beq.n	8006fc4 <HAL_UART_IRQHandler+0x14c>
        if (huart->RxISR != NULL)
 8006fbc:	6f63      	ldr	r3, [r4, #116]	; 0x74
 8006fbe:	b10b      	cbz	r3, 8006fc4 <HAL_UART_IRQHandler+0x14c>
          huart->RxISR(huart);
 8006fc0:	4620      	mov	r0, r4
 8006fc2:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 8006fc4:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fc8:	6823      	ldr	r3, [r4, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006fd0:	d102      	bne.n	8006fd8 <HAL_UART_IRQHandler+0x160>
 8006fd2:	f012 0f28 	tst.w	r2, #40	; 0x28
 8006fd6:	d02c      	beq.n	8007032 <HAL_UART_IRQHandler+0x1ba>
        UART_EndRxTransfer(huart);
 8006fd8:	4620      	mov	r0, r4
 8006fda:	f7ff fe5e 	bl	8006c9a <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fde:	6823      	ldr	r3, [r4, #0]
 8006fe0:	689b      	ldr	r3, [r3, #8]
 8006fe2:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006fe6:	d020      	beq.n	800702a <HAL_UART_IRQHandler+0x1b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fe8:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fea:	f102 0308 	add.w	r3, r2, #8
 8006fee:	e853 3f00 	ldrex	r3, [r3]
 8006ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	3208      	adds	r2, #8
 8006ff8:	e842 3100 	strex	r1, r3, [r2]
 8006ffc:	2900      	cmp	r1, #0
 8006ffe:	d1f3      	bne.n	8006fe8 <HAL_UART_IRQHandler+0x170>
          if (huart->hdmarx != NULL)
 8007000:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 8007004:	b16b      	cbz	r3, 8007022 <HAL_UART_IRQHandler+0x1aa>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007006:	4a42      	ldr	r2, [pc, #264]	; (8007110 <HAL_UART_IRQHandler+0x298>)
 8007008:	639a      	str	r2, [r3, #56]	; 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800700a:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800700e:	f7fd f9ff 	bl	8004410 <HAL_DMA_Abort_IT>
 8007012:	2800      	cmp	r0, #0
 8007014:	f43f af74 	beq.w	8006f00 <HAL_UART_IRQHandler+0x88>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007018:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 800701c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800701e:	4798      	blx	r3
 8007020:	e76e      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
            HAL_UART_ErrorCallback(huart);
 8007022:	4620      	mov	r0, r4
 8007024:	f7ff fef0 	bl	8006e08 <HAL_UART_ErrorCallback>
 8007028:	e76a      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
          HAL_UART_ErrorCallback(huart);
 800702a:	4620      	mov	r0, r4
 800702c:	f7ff feec 	bl	8006e08 <HAL_UART_ErrorCallback>
 8007030:	e766      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
        HAL_UART_ErrorCallback(huart);
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff fee8 	bl	8006e08 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007038:	2300      	movs	r3, #0
 800703a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    return;
 800703e:	e75f      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007040:	f013 0f10 	tst.w	r3, #16
 8007044:	f43f af36 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x3c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007048:	f010 0f10 	tst.w	r0, #16
 800704c:	f43f af32 	beq.w	8006eb4 <HAL_UART_IRQHandler+0x3c>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007050:	2310      	movs	r3, #16
 8007052:	620b      	str	r3, [r1, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	6823      	ldr	r3, [r4, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	f013 0f40 	tst.w	r3, #64	; 0x40
 800705c:	d05a      	beq.n	8007114 <HAL_UART_IRQHandler+0x29c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800705e:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 8007062:	6813      	ldr	r3, [r2, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8007068:	2b00      	cmp	r3, #0
 800706a:	f43f af49 	beq.w	8006f00 <HAL_UART_IRQHandler+0x88>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800706e:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007072:	4299      	cmp	r1, r3
 8007074:	f67f af44 	bls.w	8006f00 <HAL_UART_IRQHandler+0x88>
        huart->RxXferCount = nb_remaining_rx_data;
 8007078:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800707c:	6813      	ldr	r3, [r2, #0]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f013 0f20 	tst.w	r3, #32
 8007084:	d132      	bne.n	80070ec <HAL_UART_IRQHandler+0x274>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007086:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007088:	e852 3f00 	ldrex	r3, [r2]
 800708c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007090:	e842 3100 	strex	r1, r3, [r2]
 8007094:	2900      	cmp	r1, #0
 8007096:	d1f6      	bne.n	8007086 <HAL_UART_IRQHandler+0x20e>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007098:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800709a:	f102 0308 	add.w	r3, r2, #8
 800709e:	e853 3f00 	ldrex	r3, [r3]
 80070a2:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	3208      	adds	r2, #8
 80070a8:	e842 3100 	strex	r1, r3, [r2]
 80070ac:	2900      	cmp	r1, #0
 80070ae:	d1f3      	bne.n	8007098 <HAL_UART_IRQHandler+0x220>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b2:	f102 0308 	add.w	r3, r2, #8
 80070b6:	e853 3f00 	ldrex	r3, [r3]
 80070ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070be:	3208      	adds	r2, #8
 80070c0:	e842 3100 	strex	r1, r3, [r2]
 80070c4:	2900      	cmp	r1, #0
 80070c6:	d1f3      	bne.n	80070b0 <HAL_UART_IRQHandler+0x238>
          huart->RxState = HAL_UART_STATE_READY;
 80070c8:	2320      	movs	r3, #32
 80070ca:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	2300      	movs	r3, #0
 80070d0:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	e852 3f00 	ldrex	r3, [r2]
 80070d8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	e842 3100 	strex	r1, r3, [r2]
 80070e0:	2900      	cmp	r1, #0
 80070e2:	d1f6      	bne.n	80070d2 <HAL_UART_IRQHandler+0x25a>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070e4:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 80070e8:	f7fd f958 	bl	800439c <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070ec:	2302      	movs	r3, #2
 80070ee:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070f0:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80070f4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	1ac9      	subs	r1, r1, r3
 80070fc:	b289      	uxth	r1, r1
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff feb9 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
      return;
 8007104:	e6fc      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
 8007106:	bf00      	nop
 8007108:	10000001 	.word	0x10000001
 800710c:	04000120 	.word	0x04000120
 8007110:	08006e63 	.word	0x08006e63
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007114:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 8007118:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800711c:	b29b      	uxth	r3, r3
 800711e:	1ac9      	subs	r1, r1, r3
 8007120:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8007122:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8007126:	b29b      	uxth	r3, r3
 8007128:	2b00      	cmp	r3, #0
 800712a:	f43f aee9 	beq.w	8006f00 <HAL_UART_IRQHandler+0x88>
          && (nb_rx_data > 0U))
 800712e:	2900      	cmp	r1, #0
 8007130:	f43f aee6 	beq.w	8006f00 <HAL_UART_IRQHandler+0x88>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007134:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007136:	e852 3f00 	ldrex	r3, [r2]
 800713a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	e842 3000 	strex	r0, r3, [r2]
 8007142:	2800      	cmp	r0, #0
 8007144:	d1f6      	bne.n	8007134 <HAL_UART_IRQHandler+0x2bc>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007146:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007148:	f102 0308 	add.w	r3, r2, #8
 800714c:	e853 3f00 	ldrex	r3, [r3]
 8007150:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007154:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007158:	3208      	adds	r2, #8
 800715a:	e842 3000 	strex	r0, r3, [r2]
 800715e:	2800      	cmp	r0, #0
 8007160:	d1f1      	bne.n	8007146 <HAL_UART_IRQHandler+0x2ce>
        huart->RxState = HAL_UART_STATE_READY;
 8007162:	2320      	movs	r3, #32
 8007164:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007168:	2300      	movs	r3, #0
 800716a:	66e3      	str	r3, [r4, #108]	; 0x6c
        huart->RxISR = NULL;
 800716c:	6763      	str	r3, [r4, #116]	; 0x74
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800716e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007170:	e852 3f00 	ldrex	r3, [r2]
 8007174:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	e842 3000 	strex	r0, r3, [r2]
 800717c:	2800      	cmp	r0, #0
 800717e:	d1f6      	bne.n	800716e <HAL_UART_IRQHandler+0x2f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007180:	2302      	movs	r3, #2
 8007182:	6723      	str	r3, [r4, #112]	; 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007184:	4620      	mov	r0, r4
 8007186:	f7ff fe76 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
      return;
 800718a:	e6b9      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800718c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007190:	620b      	str	r3, [r1, #32]
    HAL_UARTEx_WakeupCallback(huart);
 8007192:	4620      	mov	r0, r4
 8007194:	f000 fe62 	bl	8007e5c <HAL_UARTEx_WakeupCallback>
    return;
 8007198:	e6b2      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    if (huart->TxISR != NULL)
 800719a:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800719c:	2b00      	cmp	r3, #0
 800719e:	f43f aeaf 	beq.w	8006f00 <HAL_UART_IRQHandler+0x88>
      huart->TxISR(huart);
 80071a2:	4620      	mov	r0, r4
 80071a4:	4798      	blx	r3
    return;
 80071a6:	e6ab      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    UART_EndTransmit_IT(huart);
 80071a8:	4620      	mov	r0, r4
 80071aa:	f7ff fe15 	bl	8006dd8 <UART_EndTransmit_IT>
    return;
 80071ae:	e6a7      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80071b0:	4620      	mov	r0, r4
 80071b2:	f000 fe55 	bl	8007e60 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 80071b6:	e6a3      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>
    HAL_UARTEx_RxFifoFullCallback(huart);
 80071b8:	4620      	mov	r0, r4
 80071ba:	f000 fe50 	bl	8007e5e <HAL_UARTEx_RxFifoFullCallback>
    return;
 80071be:	e69f      	b.n	8006f00 <HAL_UART_IRQHandler+0x88>

080071c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071c0:	b508      	push	{r3, lr}
  uint16_t uhMask = huart->Mask;
 80071c2:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80071c6:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 80071ca:	2a22      	cmp	r2, #34	; 0x22
 80071cc:	d005      	beq.n	80071da <UART_RxISR_8BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071ce:	6802      	ldr	r2, [r0, #0]
 80071d0:	6993      	ldr	r3, [r2, #24]
 80071d2:	f043 0308 	orr.w	r3, r3, #8
 80071d6:	6193      	str	r3, [r2, #24]
  }
}
 80071d8:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80071da:	6802      	ldr	r2, [r0, #0]
 80071dc:	6a51      	ldr	r1, [r2, #36]	; 0x24
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	6d82      	ldr	r2, [r0, #88]	; 0x58
 80071e2:	400b      	ands	r3, r1
 80071e4:	7013      	strb	r3, [r2, #0]
    huart->pRxBuffPtr++;
 80071e6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80071e8:	3301      	adds	r3, #1
 80071ea:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80071ec:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	3b01      	subs	r3, #1
 80071f4:	b29b      	uxth	r3, r3
 80071f6:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80071fa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80071fe:	b29b      	uxth	r3, r3
 8007200:	2b00      	cmp	r3, #0
 8007202:	d1e9      	bne.n	80071d8 <UART_RxISR_8BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007204:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	e852 3f00 	ldrex	r3, [r2]
 800720a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	e842 3100 	strex	r1, r3, [r2]
 8007212:	2900      	cmp	r1, #0
 8007214:	d1f6      	bne.n	8007204 <UART_RxISR_8BIT+0x44>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007216:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007218:	f102 0308 	add.w	r3, r2, #8
 800721c:	e853 3f00 	ldrex	r3, [r3]
 8007220:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007224:	3208      	adds	r2, #8
 8007226:	e842 3100 	strex	r1, r3, [r2]
 800722a:	2900      	cmp	r1, #0
 800722c:	d1f3      	bne.n	8007216 <UART_RxISR_8BIT+0x56>
      huart->RxState = HAL_UART_STATE_READY;
 800722e:	2320      	movs	r3, #32
 8007230:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 8007234:	2300      	movs	r3, #0
 8007236:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007238:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800723a:	6803      	ldr	r3, [r0, #0]
 800723c:	4a16      	ldr	r2, [pc, #88]	; (8007298 <UART_RxISR_8BIT+0xd8>)
 800723e:	4293      	cmp	r3, r2
 8007240:	d00c      	beq.n	800725c <UART_RxISR_8BIT+0x9c>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007242:	685b      	ldr	r3, [r3, #4]
 8007244:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007248:	d008      	beq.n	800725c <UART_RxISR_8BIT+0x9c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800724a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800724c:	e852 3f00 	ldrex	r3, [r2]
 8007250:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007254:	e842 3100 	strex	r1, r3, [r2]
 8007258:	2900      	cmp	r1, #0
 800725a:	d1f6      	bne.n	800724a <UART_RxISR_8BIT+0x8a>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800725c:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d116      	bne.n	8007290 <UART_RxISR_8BIT+0xd0>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007262:	2300      	movs	r3, #0
 8007264:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007266:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007268:	e852 3f00 	ldrex	r3, [r2]
 800726c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007270:	e842 3100 	strex	r1, r3, [r2]
 8007274:	2900      	cmp	r1, #0
 8007276:	d1f6      	bne.n	8007266 <UART_RxISR_8BIT+0xa6>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007278:	6803      	ldr	r3, [r0, #0]
 800727a:	69da      	ldr	r2, [r3, #28]
 800727c:	f012 0f10 	tst.w	r2, #16
 8007280:	d001      	beq.n	8007286 <UART_RxISR_8BIT+0xc6>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007282:	2210      	movs	r2, #16
 8007284:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007286:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 800728a:	f7ff fdf4 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
 800728e:	e7a3      	b.n	80071d8 <UART_RxISR_8BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 8007290:	f7fa ffe4 	bl	800225c <HAL_UART_RxCpltCallback>
 8007294:	e7a0      	b.n	80071d8 <UART_RxISR_8BIT+0x18>
 8007296:	bf00      	nop
 8007298:	40008000 	.word	0x40008000

0800729c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800729c:	b508      	push	{r3, lr}
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800729e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	; 0x60
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072a2:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 80072a6:	2b22      	cmp	r3, #34	; 0x22
 80072a8:	d005      	beq.n	80072b6 <UART_RxISR_16BIT+0x1a>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072aa:	6802      	ldr	r2, [r0, #0]
 80072ac:	6993      	ldr	r3, [r2, #24]
 80072ae:	f043 0308 	orr.w	r3, r3, #8
 80072b2:	6193      	str	r3, [r2, #24]
  }
}
 80072b4:	bd08      	pop	{r3, pc}
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80072b6:	6803      	ldr	r3, [r0, #0]
 80072b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072ba:	6d81      	ldr	r1, [r0, #88]	; 0x58
    *tmp = (uint16_t)(uhdata & uhMask);
 80072bc:	4013      	ands	r3, r2
 80072be:	800b      	strh	r3, [r1, #0]
    huart->pRxBuffPtr += 2U;
 80072c0:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80072c2:	3302      	adds	r3, #2
 80072c4:	6583      	str	r3, [r0, #88]	; 0x58
    huart->RxXferCount--;
 80072c6:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80072ca:	b29b      	uxth	r3, r3
 80072cc:	3b01      	subs	r3, #1
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
    if (huart->RxXferCount == 0U)
 80072d4:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1ea      	bne.n	80072b4 <UART_RxISR_16BIT+0x18>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072de:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	e852 3f00 	ldrex	r3, [r2]
 80072e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e8:	e842 3100 	strex	r1, r3, [r2]
 80072ec:	2900      	cmp	r1, #0
 80072ee:	d1f6      	bne.n	80072de <UART_RxISR_16BIT+0x42>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072f0:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f2:	f102 0308 	add.w	r3, r2, #8
 80072f6:	e853 3f00 	ldrex	r3, [r3]
 80072fa:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fe:	3208      	adds	r2, #8
 8007300:	e842 3100 	strex	r1, r3, [r2]
 8007304:	2900      	cmp	r1, #0
 8007306:	d1f3      	bne.n	80072f0 <UART_RxISR_16BIT+0x54>
      huart->RxState = HAL_UART_STATE_READY;
 8007308:	2320      	movs	r3, #32
 800730a:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
      huart->RxISR = NULL;
 800730e:	2300      	movs	r3, #0
 8007310:	6743      	str	r3, [r0, #116]	; 0x74
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007312:	6703      	str	r3, [r0, #112]	; 0x70
      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007314:	6803      	ldr	r3, [r0, #0]
 8007316:	4a16      	ldr	r2, [pc, #88]	; (8007370 <UART_RxISR_16BIT+0xd4>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00c      	beq.n	8007336 <UART_RxISR_16BIT+0x9a>
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007322:	d008      	beq.n	8007336 <UART_RxISR_16BIT+0x9a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007324:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007326:	e852 3f00 	ldrex	r3, [r2]
 800732a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800732e:	e842 3100 	strex	r1, r3, [r2]
 8007332:	2900      	cmp	r1, #0
 8007334:	d1f6      	bne.n	8007324 <UART_RxISR_16BIT+0x88>
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007336:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
 8007338:	2b01      	cmp	r3, #1
 800733a:	d116      	bne.n	800736a <UART_RxISR_16BIT+0xce>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733c:	2300      	movs	r3, #0
 800733e:	66c3      	str	r3, [r0, #108]	; 0x6c
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007340:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007342:	e852 3f00 	ldrex	r3, [r2]
 8007346:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800734a:	e842 3100 	strex	r1, r3, [r2]
 800734e:	2900      	cmp	r1, #0
 8007350:	d1f6      	bne.n	8007340 <UART_RxISR_16BIT+0xa4>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007352:	6803      	ldr	r3, [r0, #0]
 8007354:	69da      	ldr	r2, [r3, #28]
 8007356:	f012 0f10 	tst.w	r2, #16
 800735a:	d001      	beq.n	8007360 <UART_RxISR_16BIT+0xc4>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800735c:	2210      	movs	r2, #16
 800735e:	621a      	str	r2, [r3, #32]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007360:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 8007364:	f7ff fd87 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
 8007368:	e7a4      	b.n	80072b4 <UART_RxISR_16BIT+0x18>
        HAL_UART_RxCpltCallback(huart);
 800736a:	f7fa ff77 	bl	800225c <HAL_UART_RxCpltCallback>
 800736e:	e7a1      	b.n	80072b4 <UART_RxISR_16BIT+0x18>
 8007370:	40008000 	.word	0x40008000

08007374 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t  uhMask = huart->Mask;
 8007378:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800737c:	6803      	ldr	r3, [r0, #0]
 800737e:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007380:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007384:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007388:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 800738c:	2a22      	cmp	r2, #34	; 0x22
 800738e:	d005      	beq.n	800739c <UART_RxISR_8BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007390:	699a      	ldr	r2, [r3, #24]
 8007392:	f042 0208 	orr.w	r2, r2, #8
 8007396:	619a      	str	r2, [r3, #24]
  }
}
 8007398:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800739c:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800739e:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073a2:	e008      	b.n	80073b6 <UART_RxISR_8BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80073a4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d14c      	bne.n	8007446 <UART_RxISR_8BIT_FIFOEN+0xd2>
      if (huart->RxXferCount == 0U)
 80073ac:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073b0:	b29b      	uxth	r3, r3
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d04e      	beq.n	8007454 <UART_RxISR_8BIT_FIFOEN+0xe0>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073b6:	2f00      	cmp	r7, #0
 80073b8:	f000 809a 	beq.w	80074f0 <UART_RxISR_8BIT_FIFOEN+0x17c>
 80073bc:	f015 0f20 	tst.w	r5, #32
 80073c0:	f000 8096 	beq.w	80074f0 <UART_RxISR_8BIT_FIFOEN+0x17c>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073c4:	6823      	ldr	r3, [r4, #0]
 80073c6:	6a59      	ldr	r1, [r3, #36]	; 0x24
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073c8:	b2f3      	uxtb	r3, r6
 80073ca:	6da2      	ldr	r2, [r4, #88]	; 0x58
 80073cc:	400b      	ands	r3, r1
 80073ce:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr++;
 80073d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80073d2:	3301      	adds	r3, #1
 80073d4:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80073d6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29b      	uxth	r3, r3
 80073e0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80073e8:	f015 0f07 	tst.w	r5, #7
 80073ec:	d0de      	beq.n	80073ac <UART_RxISR_8BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80073ee:	f015 0f01 	tst.w	r5, #1
 80073f2:	d009      	beq.n	8007408 <UART_RxISR_8BIT_FIFOEN+0x94>
 80073f4:	f419 7f80 	tst.w	r9, #256	; 0x100
 80073f8:	d006      	beq.n	8007408 <UART_RxISR_8BIT_FIFOEN+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80073fa:	2201      	movs	r2, #1
 80073fc:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80073fe:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007402:	4313      	orrs	r3, r2
 8007404:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007408:	f015 0f02 	tst.w	r5, #2
 800740c:	d00b      	beq.n	8007426 <UART_RxISR_8BIT_FIFOEN+0xb2>
 800740e:	f018 0f01 	tst.w	r8, #1
 8007412:	d008      	beq.n	8007426 <UART_RxISR_8BIT_FIFOEN+0xb2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007414:	6823      	ldr	r3, [r4, #0]
 8007416:	2202      	movs	r2, #2
 8007418:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800741a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800741e:	f043 0304 	orr.w	r3, r3, #4
 8007422:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007426:	f015 0f04 	tst.w	r5, #4
 800742a:	d0bb      	beq.n	80073a4 <UART_RxISR_8BIT_FIFOEN+0x30>
 800742c:	f018 0f01 	tst.w	r8, #1
 8007430:	d0b8      	beq.n	80073a4 <UART_RxISR_8BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007432:	6823      	ldr	r3, [r4, #0]
 8007434:	2204      	movs	r2, #4
 8007436:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007438:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800743c:	f043 0302 	orr.w	r3, r3, #2
 8007440:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007444:	e7ae      	b.n	80073a4 <UART_RxISR_8BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007446:	4620      	mov	r0, r4
 8007448:	f7ff fcde 	bl	8006e08 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800744c:	2300      	movs	r3, #0
 800744e:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8007452:	e7ab      	b.n	80073ac <UART_RxISR_8BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007454:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	e852 3f00 	ldrex	r3, [r2]
 800745a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800745e:	e842 3100 	strex	r1, r3, [r2]
 8007462:	2900      	cmp	r1, #0
 8007464:	d1f6      	bne.n	8007454 <UART_RxISR_8BIT_FIFOEN+0xe0>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007466:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007468:	f102 0308 	add.w	r3, r2, #8
 800746c:	e853 3f00 	ldrex	r3, [r3]
 8007470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007474:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007478:	3208      	adds	r2, #8
 800747a:	e842 3100 	strex	r1, r3, [r2]
 800747e:	2900      	cmp	r1, #0
 8007480:	d1f1      	bne.n	8007466 <UART_RxISR_8BIT_FIFOEN+0xf2>
        huart->RxState = HAL_UART_STATE_READY;
 8007482:	2320      	movs	r3, #32
 8007484:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007488:	2300      	movs	r3, #0
 800748a:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800748c:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	4a29      	ldr	r2, [pc, #164]	; (8007538 <UART_RxISR_8BIT_FIFOEN+0x1c4>)
 8007492:	4293      	cmp	r3, r2
 8007494:	d003      	beq.n	800749e <UART_RxISR_8BIT_FIFOEN+0x12a>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 800749c:	d106      	bne.n	80074ac <UART_RxISR_8BIT_FIFOEN+0x138>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800749e:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d00d      	beq.n	80074c0 <UART_RxISR_8BIT_FIFOEN+0x14c>
          HAL_UART_RxCpltCallback(huart);
 80074a4:	4620      	mov	r0, r4
 80074a6:	f7fa fed9 	bl	800225c <HAL_UART_RxCpltCallback>
 80074aa:	e784      	b.n	80073b6 <UART_RxISR_8BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074ac:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074ae:	e852 3f00 	ldrex	r3, [r2]
 80074b2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b6:	e842 3100 	strex	r1, r3, [r2]
 80074ba:	2900      	cmp	r1, #0
 80074bc:	d1f6      	bne.n	80074ac <UART_RxISR_8BIT_FIFOEN+0x138>
 80074be:	e7ee      	b.n	800749e <UART_RxISR_8BIT_FIFOEN+0x12a>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c0:	2300      	movs	r3, #0
 80074c2:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c4:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c6:	e852 3f00 	ldrex	r3, [r2]
 80074ca:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074ce:	e842 3100 	strex	r1, r3, [r2]
 80074d2:	2900      	cmp	r1, #0
 80074d4:	d1f6      	bne.n	80074c4 <UART_RxISR_8BIT_FIFOEN+0x150>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	69da      	ldr	r2, [r3, #28]
 80074da:	f012 0f10 	tst.w	r2, #16
 80074de:	d001      	beq.n	80074e4 <UART_RxISR_8BIT_FIFOEN+0x170>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80074e0:	2210      	movs	r2, #16
 80074e2:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074e4:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80074e8:	4620      	mov	r0, r4
 80074ea:	f7ff fcc4 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
 80074ee:	e762      	b.n	80073b6 <UART_RxISR_8BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80074f0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80074f4:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	f43f af4e 	beq.w	8007398 <UART_RxISR_8BIT_FIFOEN+0x24>
 80074fc:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 8007500:	429a      	cmp	r2, r3
 8007502:	f67f af49 	bls.w	8007398 <UART_RxISR_8BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007506:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007508:	f102 0308 	add.w	r3, r2, #8
 800750c:	e853 3f00 	ldrex	r3, [r3]
 8007510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	3208      	adds	r2, #8
 8007516:	e842 3100 	strex	r1, r3, [r2]
 800751a:	2900      	cmp	r1, #0
 800751c:	d1f3      	bne.n	8007506 <UART_RxISR_8BIT_FIFOEN+0x192>
      huart->RxISR = UART_RxISR_8BIT;
 800751e:	4b07      	ldr	r3, [pc, #28]	; (800753c <UART_RxISR_8BIT_FIFOEN+0x1c8>)
 8007520:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007522:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007524:	e852 3f00 	ldrex	r3, [r2]
 8007528:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800752c:	e842 3100 	strex	r1, r3, [r2]
 8007530:	2900      	cmp	r1, #0
 8007532:	d1f6      	bne.n	8007522 <UART_RxISR_8BIT_FIFOEN+0x1ae>
 8007534:	e730      	b.n	8007398 <UART_RxISR_8BIT_FIFOEN+0x24>
 8007536:	bf00      	nop
 8007538:	40008000 	.word	0x40008000
 800753c:	080071c1 	.word	0x080071c1

08007540 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007544:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007548:	6803      	ldr	r3, [r0, #0]
 800754a:	69dd      	ldr	r5, [r3, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800754c:	f8d3 9000 	ldr.w	r9, [r3]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007550:	f8d3 8008 	ldr.w	r8, [r3, #8]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007554:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c
 8007558:	2a22      	cmp	r2, #34	; 0x22
 800755a:	d005      	beq.n	8007568 <UART_RxISR_16BIT_FIFOEN+0x28>
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800755c:	699a      	ldr	r2, [r3, #24]
 800755e:	f042 0208 	orr.w	r2, r2, #8
 8007562:	619a      	str	r2, [r3, #24]
  }
}
 8007564:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007568:	4604      	mov	r4, r0
    nb_rx_data = huart->NbRxDataToProcess;
 800756a:	f8b0 7068 	ldrh.w	r7, [r0, #104]	; 0x68
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800756e:	e008      	b.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x42>
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007570:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007574:	2b00      	cmp	r3, #0
 8007576:	d14b      	bne.n	8007610 <UART_RxISR_16BIT_FIFOEN+0xd0>
      if (huart->RxXferCount == 0U)
 8007578:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 800757c:	b29b      	uxth	r3, r3
 800757e:	2b00      	cmp	r3, #0
 8007580:	d04d      	beq.n	800761e <UART_RxISR_16BIT_FIFOEN+0xde>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007582:	2f00      	cmp	r7, #0
 8007584:	f000 8099 	beq.w	80076ba <UART_RxISR_16BIT_FIFOEN+0x17a>
 8007588:	f015 0f20 	tst.w	r5, #32
 800758c:	f000 8095 	beq.w	80076ba <UART_RxISR_16BIT_FIFOEN+0x17a>
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007590:	6823      	ldr	r3, [r4, #0]
 8007592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007594:	6da2      	ldr	r2, [r4, #88]	; 0x58
      *tmp = (uint16_t)(uhdata & uhMask);
 8007596:	4033      	ands	r3, r6
 8007598:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 800759a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800759c:	3302      	adds	r3, #2
 800759e:	65a3      	str	r3, [r4, #88]	; 0x58
      huart->RxXferCount--;
 80075a0:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	3b01      	subs	r3, #1
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80075ae:	6823      	ldr	r3, [r4, #0]
 80075b0:	69dd      	ldr	r5, [r3, #28]
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80075b2:	f015 0f07 	tst.w	r5, #7
 80075b6:	d0df      	beq.n	8007578 <UART_RxISR_16BIT_FIFOEN+0x38>
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80075b8:	f015 0f01 	tst.w	r5, #1
 80075bc:	d009      	beq.n	80075d2 <UART_RxISR_16BIT_FIFOEN+0x92>
 80075be:	f419 7f80 	tst.w	r9, #256	; 0x100
 80075c2:	d006      	beq.n	80075d2 <UART_RxISR_16BIT_FIFOEN+0x92>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80075c4:	2201      	movs	r2, #1
 80075c6:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80075c8:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80075cc:	4313      	orrs	r3, r2
 80075ce:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075d2:	f015 0f02 	tst.w	r5, #2
 80075d6:	d00b      	beq.n	80075f0 <UART_RxISR_16BIT_FIFOEN+0xb0>
 80075d8:	f018 0f01 	tst.w	r8, #1
 80075dc:	d008      	beq.n	80075f0 <UART_RxISR_16BIT_FIFOEN+0xb0>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075de:	6823      	ldr	r3, [r4, #0]
 80075e0:	2202      	movs	r2, #2
 80075e2:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80075e8:	f043 0304 	orr.w	r3, r3, #4
 80075ec:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075f0:	f015 0f04 	tst.w	r5, #4
 80075f4:	d0bc      	beq.n	8007570 <UART_RxISR_16BIT_FIFOEN+0x30>
 80075f6:	f018 0f01 	tst.w	r8, #1
 80075fa:	d0b9      	beq.n	8007570 <UART_RxISR_16BIT_FIFOEN+0x30>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075fc:	6823      	ldr	r3, [r4, #0]
 80075fe:	2204      	movs	r2, #4
 8007600:	621a      	str	r2, [r3, #32]
          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007602:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8007606:	f043 0302 	orr.w	r3, r3, #2
 800760a:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800760e:	e7af      	b.n	8007570 <UART_RxISR_16BIT_FIFOEN+0x30>
          HAL_UART_ErrorCallback(huart);
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff fbf9 	bl	8006e08 <HAL_UART_ErrorCallback>
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007616:	2300      	movs	r3, #0
 8007618:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 800761c:	e7ac      	b.n	8007578 <UART_RxISR_16BIT_FIFOEN+0x38>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800761e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	e852 3f00 	ldrex	r3, [r2]
 8007624:	f423 7380 	bic.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007628:	e842 3100 	strex	r1, r3, [r2]
 800762c:	2900      	cmp	r1, #0
 800762e:	d1f6      	bne.n	800761e <UART_RxISR_16BIT_FIFOEN+0xde>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007630:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007632:	f102 0308 	add.w	r3, r2, #8
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800763e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007642:	3208      	adds	r2, #8
 8007644:	e842 3100 	strex	r1, r3, [r2]
 8007648:	2900      	cmp	r1, #0
 800764a:	d1f1      	bne.n	8007630 <UART_RxISR_16BIT_FIFOEN+0xf0>
        huart->RxState = HAL_UART_STATE_READY;
 800764c:	2320      	movs	r3, #32
 800764e:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
        huart->RxISR = NULL;
 8007652:	2300      	movs	r3, #0
 8007654:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007656:	6723      	str	r3, [r4, #112]	; 0x70
        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	4a29      	ldr	r2, [pc, #164]	; (8007700 <UART_RxISR_16BIT_FIFOEN+0x1c0>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d003      	beq.n	8007668 <UART_RxISR_16BIT_FIFOEN+0x128>
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007660:	685b      	ldr	r3, [r3, #4]
 8007662:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007666:	d106      	bne.n	8007676 <UART_RxISR_16BIT_FIFOEN+0x136>
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007668:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800766a:	2b01      	cmp	r3, #1
 800766c:	d00d      	beq.n	800768a <UART_RxISR_16BIT_FIFOEN+0x14a>
          HAL_UART_RxCpltCallback(huart);
 800766e:	4620      	mov	r0, r4
 8007670:	f7fa fdf4 	bl	800225c <HAL_UART_RxCpltCallback>
 8007674:	e785      	b.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x42>
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007676:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007678:	e852 3f00 	ldrex	r3, [r2]
 800767c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007680:	e842 3100 	strex	r1, r3, [r2]
 8007684:	2900      	cmp	r1, #0
 8007686:	d1f6      	bne.n	8007676 <UART_RxISR_16BIT_FIFOEN+0x136>
 8007688:	e7ee      	b.n	8007668 <UART_RxISR_16BIT_FIFOEN+0x128>
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	2300      	movs	r3, #0
 800768c:	66e3      	str	r3, [r4, #108]	; 0x6c
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800768e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007690:	e852 3f00 	ldrex	r3, [r2]
 8007694:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007698:	e842 3100 	strex	r1, r3, [r2]
 800769c:	2900      	cmp	r1, #0
 800769e:	d1f6      	bne.n	800768e <UART_RxISR_16BIT_FIFOEN+0x14e>
          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076a0:	6823      	ldr	r3, [r4, #0]
 80076a2:	69da      	ldr	r2, [r3, #28]
 80076a4:	f012 0f10 	tst.w	r2, #16
 80076a8:	d001      	beq.n	80076ae <UART_RxISR_16BIT_FIFOEN+0x16e>
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076aa:	2210      	movs	r2, #16
 80076ac:	621a      	str	r2, [r3, #32]
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076ae:	f8b4 105c 	ldrh.w	r1, [r4, #92]	; 0x5c
 80076b2:	4620      	mov	r0, r4
 80076b4:	f7ff fbdf 	bl	8006e76 <HAL_UARTEx_RxEventCallback>
 80076b8:	e763      	b.n	8007582 <UART_RxISR_16BIT_FIFOEN+0x42>
    rxdatacount = huart->RxXferCount;
 80076ba:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 80076be:	b29b      	uxth	r3, r3
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	f43f af4f 	beq.w	8007564 <UART_RxISR_16BIT_FIFOEN+0x24>
 80076c6:	f8b4 2068 	ldrh.w	r2, [r4, #104]	; 0x68
 80076ca:	429a      	cmp	r2, r3
 80076cc:	f67f af4a 	bls.w	8007564 <UART_RxISR_16BIT_FIFOEN+0x24>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076d0:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d2:	f102 0308 	add.w	r3, r2, #8
 80076d6:	e853 3f00 	ldrex	r3, [r3]
 80076da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076de:	3208      	adds	r2, #8
 80076e0:	e842 3100 	strex	r1, r3, [r2]
 80076e4:	2900      	cmp	r1, #0
 80076e6:	d1f3      	bne.n	80076d0 <UART_RxISR_16BIT_FIFOEN+0x190>
      huart->RxISR = UART_RxISR_16BIT;
 80076e8:	4b06      	ldr	r3, [pc, #24]	; (8007704 <UART_RxISR_16BIT_FIFOEN+0x1c4>)
 80076ea:	6763      	str	r3, [r4, #116]	; 0x74
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ec:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ee:	e852 3f00 	ldrex	r3, [r2]
 80076f2:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f6:	e842 3100 	strex	r1, r3, [r2]
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d1f6      	bne.n	80076ec <UART_RxISR_16BIT_FIFOEN+0x1ac>
 80076fe:	e731      	b.n	8007564 <UART_RxISR_16BIT_FIFOEN+0x24>
 8007700:	40008000 	.word	0x40008000
 8007704:	0800729d 	.word	0x0800729d

08007708 <UART_SetConfig>:
{
 8007708:	b570      	push	{r4, r5, r6, lr}
 800770a:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800770c:	6801      	ldr	r1, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800770e:	6883      	ldr	r3, [r0, #8]
 8007710:	6902      	ldr	r2, [r0, #16]
 8007712:	4313      	orrs	r3, r2
 8007714:	6942      	ldr	r2, [r0, #20]
 8007716:	4313      	orrs	r3, r2
 8007718:	69c2      	ldr	r2, [r0, #28]
 800771a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800771c:	6808      	ldr	r0, [r1, #0]
 800771e:	4a9d      	ldr	r2, [pc, #628]	; (8007994 <UART_SetConfig+0x28c>)
 8007720:	4002      	ands	r2, r0
 8007722:	4313      	orrs	r3, r2
 8007724:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007726:	6822      	ldr	r2, [r4, #0]
 8007728:	6853      	ldr	r3, [r2, #4]
 800772a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800772e:	68e1      	ldr	r1, [r4, #12]
 8007730:	430b      	orrs	r3, r1
 8007732:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007734:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	4b97      	ldr	r3, [pc, #604]	; (8007998 <UART_SetConfig+0x290>)
 800773a:	429a      	cmp	r2, r3
 800773c:	d001      	beq.n	8007742 <UART_SetConfig+0x3a>
    tmpreg |= huart->Init.OneBitSampling;
 800773e:	6a23      	ldr	r3, [r4, #32]
 8007740:	4319      	orrs	r1, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007742:	6893      	ldr	r3, [r2, #8]
 8007744:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007748:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800774c:	430b      	orrs	r3, r1
 800774e:	6093      	str	r3, [r2, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007750:	6822      	ldr	r2, [r4, #0]
 8007752:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8007754:	f023 030f 	bic.w	r3, r3, #15
 8007758:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800775a:	430b      	orrs	r3, r1
 800775c:	62d3      	str	r3, [r2, #44]	; 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800775e:	6823      	ldr	r3, [r4, #0]
 8007760:	4a8e      	ldr	r2, [pc, #568]	; (800799c <UART_SetConfig+0x294>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d01c      	beq.n	80077a0 <UART_SetConfig+0x98>
 8007766:	4a8e      	ldr	r2, [pc, #568]	; (80079a0 <UART_SetConfig+0x298>)
 8007768:	4293      	cmp	r3, r2
 800776a:	d031      	beq.n	80077d0 <UART_SetConfig+0xc8>
 800776c:	4a8a      	ldr	r2, [pc, #552]	; (8007998 <UART_SetConfig+0x290>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d04b      	beq.n	800780a <UART_SetConfig+0x102>
 8007772:	2210      	movs	r2, #16
  if (UART_INSTANCE_LOWPOWER(huart))
 8007774:	4988      	ldr	r1, [pc, #544]	; (8007998 <UART_SetConfig+0x290>)
 8007776:	428b      	cmp	r3, r1
 8007778:	d068      	beq.n	800784c <UART_SetConfig+0x144>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800777a:	69e0      	ldr	r0, [r4, #28]
 800777c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007780:	f000 80a5 	beq.w	80078ce <UART_SetConfig+0x1c6>
    switch (clocksource)
 8007784:	2a08      	cmp	r2, #8
 8007786:	f200 811f 	bhi.w	80079c8 <UART_SetConfig+0x2c0>
 800778a:	e8df f012 	tbh	[pc, r2, lsl #1]
 800778e:	00d3      	.short	0x00d3
 8007790:	00d100f5 	.word	0x00d100f5
 8007794:	00f8011d 	.word	0x00f8011d
 8007798:	011d011d 	.word	0x011d011d
 800779c:	00fb011d 	.word	0x00fb011d
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80077a0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077a4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80077a8:	f002 0203 	and.w	r2, r2, #3
 80077ac:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077b0:	f5a2 3240 	sub.w	r2, r2, #196608	; 0x30000
 80077b4:	2a03      	cmp	r2, #3
 80077b6:	d809      	bhi.n	80077cc <UART_SetConfig+0xc4>
 80077b8:	e8df f002 	tbb	[pc, r2]
 80077bc:	063c0402 	.word	0x063c0402
 80077c0:	2201      	movs	r2, #1
 80077c2:	e7d7      	b.n	8007774 <UART_SetConfig+0x6c>
 80077c4:	2204      	movs	r2, #4
 80077c6:	e7d5      	b.n	8007774 <UART_SetConfig+0x6c>
 80077c8:	2208      	movs	r2, #8
 80077ca:	e7d3      	b.n	8007774 <UART_SetConfig+0x6c>
 80077cc:	2210      	movs	r2, #16
 80077ce:	e7d1      	b.n	8007774 <UART_SetConfig+0x6c>
 80077d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80077d4:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 80077d8:	f002 020c 	and.w	r2, r2, #12
 80077dc:	f442 2240 	orr.w	r2, r2, #786432	; 0xc0000
 80077e0:	f5a2 2240 	sub.w	r2, r2, #786432	; 0xc0000
 80077e4:	2a0c      	cmp	r2, #12
 80077e6:	d80e      	bhi.n	8007806 <UART_SetConfig+0xfe>
 80077e8:	e8df f002 	tbb	[pc, r2]
 80077ec:	0d0d0d07 	.word	0x0d0d0d07
 80077f0:	0d0d0d09 	.word	0x0d0d0d09
 80077f4:	0d0d0d26 	.word	0x0d0d0d26
 80077f8:	0b          	.byte	0x0b
 80077f9:	00          	.byte	0x00
 80077fa:	2200      	movs	r2, #0
 80077fc:	e7ba      	b.n	8007774 <UART_SetConfig+0x6c>
 80077fe:	2204      	movs	r2, #4
 8007800:	e7b8      	b.n	8007774 <UART_SetConfig+0x6c>
 8007802:	2208      	movs	r2, #8
 8007804:	e7b6      	b.n	8007774 <UART_SetConfig+0x6c>
 8007806:	2210      	movs	r2, #16
 8007808:	e7b4      	b.n	8007774 <UART_SetConfig+0x6c>
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800780a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800780e:	f8d2 2088 	ldr.w	r2, [r2, #136]	; 0x88
 8007812:	f402 6240 	and.w	r2, r2, #3072	; 0xc00
 8007816:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 800781a:	d00f      	beq.n	800783c <UART_SetConfig+0x134>
 800781c:	d805      	bhi.n	800782a <UART_SetConfig+0x122>
 800781e:	b17a      	cbz	r2, 8007840 <UART_SetConfig+0x138>
 8007820:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8007824:	d10e      	bne.n	8007844 <UART_SetConfig+0x13c>
 8007826:	2204      	movs	r2, #4
 8007828:	e7a4      	b.n	8007774 <UART_SetConfig+0x6c>
 800782a:	f5b2 6f40 	cmp.w	r2, #3072	; 0xc00
 800782e:	d10b      	bne.n	8007848 <UART_SetConfig+0x140>
 8007830:	2208      	movs	r2, #8
 8007832:	e79f      	b.n	8007774 <UART_SetConfig+0x6c>
 8007834:	2202      	movs	r2, #2
 8007836:	e79d      	b.n	8007774 <UART_SetConfig+0x6c>
 8007838:	2202      	movs	r2, #2
 800783a:	e79b      	b.n	8007774 <UART_SetConfig+0x6c>
 800783c:	2202      	movs	r2, #2
 800783e:	e799      	b.n	8007774 <UART_SetConfig+0x6c>
 8007840:	2200      	movs	r2, #0
 8007842:	e797      	b.n	8007774 <UART_SetConfig+0x6c>
 8007844:	2210      	movs	r2, #16
 8007846:	e795      	b.n	8007774 <UART_SetConfig+0x6c>
 8007848:	2210      	movs	r2, #16
 800784a:	e793      	b.n	8007774 <UART_SetConfig+0x6c>
    switch (clocksource)
 800784c:	2a08      	cmp	r2, #8
 800784e:	f200 809c 	bhi.w	800798a <UART_SetConfig+0x282>
 8007852:	e8df f002 	tbb	[pc, r2]
 8007856:	9a08      	.short	0x9a08
 8007858:	9a379a3a 	.word	0x9a379a3a
 800785c:	9a9a      	.short	0x9a9a
 800785e:	05          	.byte	0x05
 800785f:	00          	.byte	0x00
 8007860:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007864:	e004      	b.n	8007870 <UART_SetConfig+0x168>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007866:	f7fe faa9 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800786a:	2800      	cmp	r0, #0
 800786c:	f000 808f 	beq.w	800798e <UART_SetConfig+0x286>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007870:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007872:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <UART_SetConfig+0x29c>)
 8007874:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 8007878:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800787c:	6865      	ldr	r5, [r4, #4]
 800787e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8007882:	4299      	cmp	r1, r3
 8007884:	f200 8094 	bhi.w	80079b0 <UART_SetConfig+0x2a8>
 8007888:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800788c:	f200 8092 	bhi.w	80079b4 <UART_SetConfig+0x2ac>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007890:	2600      	movs	r6, #0
 8007892:	4633      	mov	r3, r6
 8007894:	4631      	mov	r1, r6
 8007896:	f7f9 f987 	bl	8000ba8 <__aeabi_uldivmod>
 800789a:	0209      	lsls	r1, r1, #8
 800789c:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 80078a0:	0200      	lsls	r0, r0, #8
 80078a2:	086b      	lsrs	r3, r5, #1
 80078a4:	18c0      	adds	r0, r0, r3
 80078a6:	462a      	mov	r2, r5
 80078a8:	4633      	mov	r3, r6
 80078aa:	f141 0100 	adc.w	r1, r1, #0
 80078ae:	f7f9 f97b 	bl	8000ba8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80078b2:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80078b6:	4b3c      	ldr	r3, [pc, #240]	; (80079a8 <UART_SetConfig+0x2a0>)
 80078b8:	429a      	cmp	r2, r3
 80078ba:	d87d      	bhi.n	80079b8 <UART_SetConfig+0x2b0>
          huart->Instance->BRR = usartdiv;
 80078bc:	6823      	ldr	r3, [r4, #0]
 80078be:	60d8      	str	r0, [r3, #12]
 80078c0:	4630      	mov	r0, r6
 80078c2:	e050      	b.n	8007966 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetSysClockFreq();
 80078c4:	f7fd fd7c 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
        break;
 80078c8:	e7cf      	b.n	800786a <UART_SetConfig+0x162>
        pclk = (uint32_t) HSI_VALUE;
 80078ca:	4838      	ldr	r0, [pc, #224]	; (80079ac <UART_SetConfig+0x2a4>)
 80078cc:	e7d0      	b.n	8007870 <UART_SetConfig+0x168>
    switch (clocksource)
 80078ce:	2a08      	cmp	r2, #8
 80078d0:	d874      	bhi.n	80079bc <UART_SetConfig+0x2b4>
 80078d2:	e8df f002 	tbb	[pc, r2]
 80078d6:	2707      	.short	0x2707
 80078d8:	732a7305 	.word	0x732a7305
 80078dc:	7373      	.short	0x7373
 80078de:	0b          	.byte	0x0b
 80078df:	00          	.byte	0x00
 80078e0:	4832      	ldr	r0, [pc, #200]	; (80079ac <UART_SetConfig+0x2a4>)
 80078e2:	e003      	b.n	80078ec <UART_SetConfig+0x1e4>
        pclk = HAL_RCC_GetPCLK1Freq();
 80078e4:	f7fe fa6a 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80078e8:	2800      	cmp	r0, #0
 80078ea:	d069      	beq.n	80079c0 <UART_SetConfig+0x2b8>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80078ec:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80078ee:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <UART_SetConfig+0x29c>)
 80078f0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80078f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80078f8:	6862      	ldr	r2, [r4, #4]
 80078fa:	0853      	lsrs	r3, r2, #1
 80078fc:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8007900:	fbb0 f0f2 	udiv	r0, r0, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007904:	f1a0 0210 	sub.w	r2, r0, #16
 8007908:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800790c:	429a      	cmp	r2, r3
 800790e:	d859      	bhi.n	80079c4 <UART_SetConfig+0x2bc>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007910:	b283      	uxth	r3, r0
 8007912:	f023 030f 	bic.w	r3, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007916:	f3c0 0042 	ubfx	r0, r0, #1, #3
 800791a:	4318      	orrs	r0, r3
        huart->Instance->BRR = brrtemp;
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	60d8      	str	r0, [r3, #12]
 8007920:	2000      	movs	r0, #0
 8007922:	e020      	b.n	8007966 <UART_SetConfig+0x25e>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007924:	f7fe fa5a 	bl	8005ddc <HAL_RCC_GetPCLK2Freq>
        break;
 8007928:	e7de      	b.n	80078e8 <UART_SetConfig+0x1e0>
        pclk = HAL_RCC_GetSysClockFreq();
 800792a:	f7fd fd49 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
        break;
 800792e:	e7db      	b.n	80078e8 <UART_SetConfig+0x1e0>
    switch (clocksource)
 8007930:	481e      	ldr	r0, [pc, #120]	; (80079ac <UART_SetConfig+0x2a4>)
 8007932:	e003      	b.n	800793c <UART_SetConfig+0x234>
        pclk = HAL_RCC_GetPCLK1Freq();
 8007934:	f7fe fa42 	bl	8005dbc <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8007938:	2800      	cmp	r0, #0
 800793a:	d047      	beq.n	80079cc <UART_SetConfig+0x2c4>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800793c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800793e:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <UART_SetConfig+0x29c>)
 8007940:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007944:	fbb0 f0f3 	udiv	r0, r0, r3
 8007948:	6863      	ldr	r3, [r4, #4]
 800794a:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800794e:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007952:	f1a0 0210 	sub.w	r2, r0, #16
 8007956:	f64f 73ef 	movw	r3, #65519	; 0xffef
 800795a:	429a      	cmp	r2, r3
 800795c:	d838      	bhi.n	80079d0 <UART_SetConfig+0x2c8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	b280      	uxth	r0, r0
 8007962:	60d8      	str	r0, [r3, #12]
 8007964:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
 8007966:	2301      	movs	r3, #1
 8007968:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800796c:	f8a4 3068 	strh.w	r3, [r4, #104]	; 0x68
  huart->RxISR = NULL;
 8007970:	2300      	movs	r3, #0
 8007972:	6763      	str	r3, [r4, #116]	; 0x74
  huart->TxISR = NULL;
 8007974:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8007976:	bd70      	pop	{r4, r5, r6, pc}
        pclk = HAL_RCC_GetPCLK2Freq();
 8007978:	f7fe fa30 	bl	8005ddc <HAL_RCC_GetPCLK2Freq>
        break;
 800797c:	e7dc      	b.n	8007938 <UART_SetConfig+0x230>
        pclk = HAL_RCC_GetSysClockFreq();
 800797e:	f7fd fd1f 	bl	80053c0 <HAL_RCC_GetSysClockFreq>
        break;
 8007982:	e7d9      	b.n	8007938 <UART_SetConfig+0x230>
        pclk = (uint32_t) LSE_VALUE;
 8007984:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007988:	e7d8      	b.n	800793c <UART_SetConfig+0x234>
    switch (clocksource)
 800798a:	2001      	movs	r0, #1
 800798c:	e7eb      	b.n	8007966 <UART_SetConfig+0x25e>
 800798e:	2000      	movs	r0, #0
 8007990:	e7e9      	b.n	8007966 <UART_SetConfig+0x25e>
 8007992:	bf00      	nop
 8007994:	cfff69f3 	.word	0xcfff69f3
 8007998:	40008000 	.word	0x40008000
 800799c:	40013800 	.word	0x40013800
 80079a0:	40004400 	.word	0x40004400
 80079a4:	080145b8 	.word	0x080145b8
 80079a8:	000ffcff 	.word	0x000ffcff
 80079ac:	00f42400 	.word	0x00f42400
        ret = HAL_ERROR;
 80079b0:	2001      	movs	r0, #1
 80079b2:	e7d8      	b.n	8007966 <UART_SetConfig+0x25e>
 80079b4:	2001      	movs	r0, #1
 80079b6:	e7d6      	b.n	8007966 <UART_SetConfig+0x25e>
          ret = HAL_ERROR;
 80079b8:	2001      	movs	r0, #1
 80079ba:	e7d4      	b.n	8007966 <UART_SetConfig+0x25e>
    switch (clocksource)
 80079bc:	2001      	movs	r0, #1
 80079be:	e7d2      	b.n	8007966 <UART_SetConfig+0x25e>
 80079c0:	2000      	movs	r0, #0
 80079c2:	e7d0      	b.n	8007966 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80079c4:	2001      	movs	r0, #1
 80079c6:	e7ce      	b.n	8007966 <UART_SetConfig+0x25e>
    switch (clocksource)
 80079c8:	2001      	movs	r0, #1
 80079ca:	e7cc      	b.n	8007966 <UART_SetConfig+0x25e>
 80079cc:	2000      	movs	r0, #0
 80079ce:	e7ca      	b.n	8007966 <UART_SetConfig+0x25e>
        ret = HAL_ERROR;
 80079d0:	2001      	movs	r0, #1
 80079d2:	e7c8      	b.n	8007966 <UART_SetConfig+0x25e>

080079d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80079d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80079d6:	f013 0f01 	tst.w	r3, #1
 80079da:	d006      	beq.n	80079ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80079dc:	6802      	ldr	r2, [r0, #0]
 80079de:	6853      	ldr	r3, [r2, #4]
 80079e0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80079e4:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 80079e6:	430b      	orrs	r3, r1
 80079e8:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80079ea:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80079ec:	f013 0f02 	tst.w	r3, #2
 80079f0:	d006      	beq.n	8007a00 <UART_AdvFeatureConfig+0x2c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80079f2:	6802      	ldr	r2, [r0, #0]
 80079f4:	6853      	ldr	r3, [r2, #4]
 80079f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079fa:	6b01      	ldr	r1, [r0, #48]	; 0x30
 80079fc:	430b      	orrs	r3, r1
 80079fe:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007a00:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a02:	f013 0f04 	tst.w	r3, #4
 8007a06:	d006      	beq.n	8007a16 <UART_AdvFeatureConfig+0x42>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007a08:	6802      	ldr	r2, [r0, #0]
 8007a0a:	6853      	ldr	r3, [r2, #4]
 8007a0c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a10:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007a12:	430b      	orrs	r3, r1
 8007a14:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007a16:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a18:	f013 0f08 	tst.w	r3, #8
 8007a1c:	d006      	beq.n	8007a2c <UART_AdvFeatureConfig+0x58>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007a1e:	6802      	ldr	r2, [r0, #0]
 8007a20:	6853      	ldr	r3, [r2, #4]
 8007a22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007a26:	6b81      	ldr	r1, [r0, #56]	; 0x38
 8007a28:	430b      	orrs	r3, r1
 8007a2a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007a2c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a2e:	f013 0f10 	tst.w	r3, #16
 8007a32:	d006      	beq.n	8007a42 <UART_AdvFeatureConfig+0x6e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007a34:	6802      	ldr	r2, [r0, #0]
 8007a36:	6893      	ldr	r3, [r2, #8]
 8007a38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007a3c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007a42:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a44:	f013 0f20 	tst.w	r3, #32
 8007a48:	d006      	beq.n	8007a58 <UART_AdvFeatureConfig+0x84>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007a4a:	6802      	ldr	r2, [r0, #0]
 8007a4c:	6893      	ldr	r3, [r2, #8]
 8007a4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007a52:	6c01      	ldr	r1, [r0, #64]	; 0x40
 8007a54:	430b      	orrs	r3, r1
 8007a56:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007a58:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a5a:	f013 0f40 	tst.w	r3, #64	; 0x40
 8007a5e:	d00a      	beq.n	8007a76 <UART_AdvFeatureConfig+0xa2>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007a60:	6802      	ldr	r2, [r0, #0]
 8007a62:	6853      	ldr	r3, [r2, #4]
 8007a64:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007a68:	6c41      	ldr	r1, [r0, #68]	; 0x44
 8007a6a:	430b      	orrs	r3, r1
 8007a6c:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007a6e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8007a70:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007a74:	d00b      	beq.n	8007a8e <UART_AdvFeatureConfig+0xba>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007a76:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007a78:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007a7c:	d006      	beq.n	8007a8c <UART_AdvFeatureConfig+0xb8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007a7e:	6802      	ldr	r2, [r0, #0]
 8007a80:	6853      	ldr	r3, [r2, #4]
 8007a82:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8007a86:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8007a88:	430b      	orrs	r3, r1
 8007a8a:	6053      	str	r3, [r2, #4]
}
 8007a8c:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007a8e:	6802      	ldr	r2, [r0, #0]
 8007a90:	6853      	ldr	r3, [r2, #4]
 8007a92:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a96:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007a98:	430b      	orrs	r3, r1
 8007a9a:	6053      	str	r3, [r2, #4]
 8007a9c:	e7eb      	b.n	8007a76 <UART_AdvFeatureConfig+0xa2>

08007a9e <UART_WaitOnFlagUntilTimeout>:
{
 8007a9e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007aa2:	4605      	mov	r5, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	4616      	mov	r6, r2
 8007aa8:	4699      	mov	r9, r3
 8007aaa:	f8dd 8020 	ldr.w	r8, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aae:	682c      	ldr	r4, [r5, #0]
 8007ab0:	69e4      	ldr	r4, [r4, #28]
 8007ab2:	ea37 0304 	bics.w	r3, r7, r4
 8007ab6:	bf0c      	ite	eq
 8007ab8:	f04f 0c01 	moveq.w	ip, #1
 8007abc:	f04f 0c00 	movne.w	ip, #0
 8007ac0:	45b4      	cmp	ip, r6
 8007ac2:	d157      	bne.n	8007b74 <UART_WaitOnFlagUntilTimeout+0xd6>
    if (Timeout != HAL_MAX_DELAY)
 8007ac4:	f1b8 3fff 	cmp.w	r8, #4294967295
 8007ac8:	d0f1      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aca:	f7fa f8cb 	bl	8001c64 <HAL_GetTick>
 8007ace:	eba0 0009 	sub.w	r0, r0, r9
 8007ad2:	4540      	cmp	r0, r8
 8007ad4:	d82f      	bhi.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x98>
 8007ad6:	f1b8 0f00 	cmp.w	r8, #0
 8007ada:	d02c      	beq.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x98>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007adc:	682b      	ldr	r3, [r5, #0]
 8007ade:	681a      	ldr	r2, [r3, #0]
 8007ae0:	f012 0f04 	tst.w	r2, #4
 8007ae4:	d0e3      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae6:	69da      	ldr	r2, [r3, #28]
 8007ae8:	f412 6f00 	tst.w	r2, #2048	; 0x800
 8007aec:	d0df      	beq.n	8007aae <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007aee:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007af2:	621a      	str	r2, [r3, #32]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007af4:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	e852 3f00 	ldrex	r3, [r2]
 8007afa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	e842 3100 	strex	r1, r3, [r2]
 8007b02:	2900      	cmp	r1, #0
 8007b04:	d1f6      	bne.n	8007af4 <UART_WaitOnFlagUntilTimeout+0x56>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b06:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	f102 0308 	add.w	r3, r2, #8
 8007b0c:	e853 3f00 	ldrex	r3, [r3]
 8007b10:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b14:	3208      	adds	r2, #8
 8007b16:	e842 3100 	strex	r1, r3, [r2]
 8007b1a:	2900      	cmp	r1, #0
 8007b1c:	d1f3      	bne.n	8007b06 <UART_WaitOnFlagUntilTimeout+0x68>
          huart->gState = HAL_UART_STATE_READY;
 8007b1e:	2320      	movs	r3, #32
 8007b20:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8007b24:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b28:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
          __HAL_UNLOCK(huart);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
          return HAL_TIMEOUT;
 8007b32:	2003      	movs	r0, #3
 8007b34:	e01f      	b.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xd8>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007b36:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b38:	e852 3f00 	ldrex	r3, [r2]
 8007b3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b40:	e842 3100 	strex	r1, r3, [r2]
 8007b44:	2900      	cmp	r1, #0
 8007b46:	d1f6      	bne.n	8007b36 <UART_WaitOnFlagUntilTimeout+0x98>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b48:	682a      	ldr	r2, [r5, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4a:	f102 0308 	add.w	r3, r2, #8
 8007b4e:	e853 3f00 	ldrex	r3, [r3]
 8007b52:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b56:	3208      	adds	r2, #8
 8007b58:	e842 3100 	strex	r1, r3, [r2]
 8007b5c:	2900      	cmp	r1, #0
 8007b5e:	d1f3      	bne.n	8007b48 <UART_WaitOnFlagUntilTimeout+0xaa>
        huart->gState = HAL_UART_STATE_READY;
 8007b60:	2320      	movs	r3, #32
 8007b62:	f8c5 3088 	str.w	r3, [r5, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8007b66:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
        __HAL_UNLOCK(huart);
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	f885 3084 	strb.w	r3, [r5, #132]	; 0x84
        return HAL_TIMEOUT;
 8007b70:	2003      	movs	r0, #3
 8007b72:	e000      	b.n	8007b76 <UART_WaitOnFlagUntilTimeout+0xd8>
  return HAL_OK;
 8007b74:	2000      	movs	r0, #0
}
 8007b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08007b7a <UART_CheckIdleState>:
{
 8007b7a:	b530      	push	{r4, r5, lr}
 8007b7c:	b083      	sub	sp, #12
 8007b7e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b80:	2300      	movs	r3, #0
 8007b82:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  tickstart = HAL_GetTick();
 8007b86:	f7fa f86d 	bl	8001c64 <HAL_GetTick>
 8007b8a:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007b8c:	6822      	ldr	r2, [r4, #0]
 8007b8e:	6812      	ldr	r2, [r2, #0]
 8007b90:	f012 0f08 	tst.w	r2, #8
 8007b94:	d110      	bne.n	8007bb8 <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007b96:	6823      	ldr	r3, [r4, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f013 0f04 	tst.w	r3, #4
 8007b9e:	d119      	bne.n	8007bd4 <UART_CheckIdleState+0x5a>
  huart->gState = HAL_UART_STATE_READY;
 8007ba0:	2320      	movs	r3, #32
 8007ba2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ba6:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	2000      	movs	r0, #0
 8007bac:	66e0      	str	r0, [r4, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007bae:	6720      	str	r0, [r4, #112]	; 0x70
  __HAL_UNLOCK(huart);
 8007bb0:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007bb4:	b003      	add	sp, #12
 8007bb6:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bb8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bbc:	9300      	str	r3, [sp, #0]
 8007bbe:	4603      	mov	r3, r0
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007bc6:	4620      	mov	r0, r4
 8007bc8:	f7ff ff69 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007bcc:	2800      	cmp	r0, #0
 8007bce:	d0e2      	beq.n	8007b96 <UART_CheckIdleState+0x1c>
      return HAL_TIMEOUT;
 8007bd0:	2003      	movs	r0, #3
 8007bd2:	e7ef      	b.n	8007bb4 <UART_CheckIdleState+0x3a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007bd4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007bd8:	9300      	str	r3, [sp, #0]
 8007bda:	462b      	mov	r3, r5
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007be2:	4620      	mov	r0, r4
 8007be4:	f7ff ff5b 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007be8:	2800      	cmp	r0, #0
 8007bea:	d0d9      	beq.n	8007ba0 <UART_CheckIdleState+0x26>
      return HAL_TIMEOUT;
 8007bec:	2003      	movs	r0, #3
 8007bee:	e7e1      	b.n	8007bb4 <UART_CheckIdleState+0x3a>

08007bf0 <HAL_UART_Init>:
  if (huart == NULL)
 8007bf0:	b378      	cbz	r0, 8007c52 <HAL_UART_Init+0x62>
{
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8007bf6:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 8007bfa:	b30b      	cbz	r3, 8007c40 <HAL_UART_Init+0x50>
  huart->gState = HAL_UART_STATE_BUSY;
 8007bfc:	2324      	movs	r3, #36	; 0x24
 8007bfe:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8007c02:	6822      	ldr	r2, [r4, #0]
 8007c04:	6813      	ldr	r3, [r2, #0]
 8007c06:	f023 0301 	bic.w	r3, r3, #1
 8007c0a:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007c0c:	4620      	mov	r0, r4
 8007c0e:	f7ff fd7b 	bl	8007708 <UART_SetConfig>
 8007c12:	2801      	cmp	r0, #1
 8007c14:	d013      	beq.n	8007c3e <HAL_UART_Init+0x4e>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007c16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007c18:	b9bb      	cbnz	r3, 8007c4a <HAL_UART_Init+0x5a>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007c1a:	6822      	ldr	r2, [r4, #0]
 8007c1c:	6853      	ldr	r3, [r2, #4]
 8007c1e:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8007c22:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c24:	6822      	ldr	r2, [r4, #0]
 8007c26:	6893      	ldr	r3, [r2, #8]
 8007c28:	f023 032a 	bic.w	r3, r3, #42	; 0x2a
 8007c2c:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8007c2e:	6822      	ldr	r2, [r4, #0]
 8007c30:	6813      	ldr	r3, [r2, #0]
 8007c32:	f043 0301 	orr.w	r3, r3, #1
 8007c36:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f7ff ff9e 	bl	8007b7a <UART_CheckIdleState>
}
 8007c3e:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8007c40:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    HAL_UART_MspInit(huart);
 8007c44:	f7fa f9f6 	bl	8002034 <HAL_UART_MspInit>
 8007c48:	e7d8      	b.n	8007bfc <HAL_UART_Init+0xc>
    UART_AdvFeatureConfig(huart);
 8007c4a:	4620      	mov	r0, r4
 8007c4c:	f7ff fec2 	bl	80079d4 <UART_AdvFeatureConfig>
 8007c50:	e7e3      	b.n	8007c1a <HAL_UART_Init+0x2a>
    return HAL_ERROR;
 8007c52:	2001      	movs	r0, #1
}
 8007c54:	4770      	bx	lr
	...

08007c58 <UART_Start_Receive_IT>:
{
 8007c58:	b410      	push	{r4}
  huart->pRxBuffPtr  = pData;
 8007c5a:	6581      	str	r1, [r0, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007c5c:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007c60:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007c64:	2300      	movs	r3, #0
 8007c66:	6743      	str	r3, [r0, #116]	; 0x74
  UART_MASK_COMPUTATION(huart);
 8007c68:	6883      	ldr	r3, [r0, #8]
 8007c6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c6e:	d006      	beq.n	8007c7e <UART_Start_Receive_IT+0x26>
 8007c70:	b9a3      	cbnz	r3, 8007c9c <UART_Start_Receive_IT+0x44>
 8007c72:	6903      	ldr	r3, [r0, #16]
 8007c74:	b973      	cbnz	r3, 8007c94 <UART_Start_Receive_IT+0x3c>
 8007c76:	23ff      	movs	r3, #255	; 0xff
 8007c78:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007c7c:	e014      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
 8007c7e:	6903      	ldr	r3, [r0, #16]
 8007c80:	b923      	cbnz	r3, 8007c8c <UART_Start_Receive_IT+0x34>
 8007c82:	f240 13ff 	movw	r3, #511	; 0x1ff
 8007c86:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007c8a:	e00d      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
 8007c8c:	23ff      	movs	r3, #255	; 0xff
 8007c8e:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007c92:	e009      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
 8007c94:	237f      	movs	r3, #127	; 0x7f
 8007c96:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007c9a:	e005      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
 8007c9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007ca0:	d02d      	beq.n	8007cfe <UART_Start_Receive_IT+0xa6>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	f8c0 3090 	str.w	r3, [r0, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007cae:	2322      	movs	r3, #34	; 0x22
 8007cb0:	f8c0 308c 	str.w	r3, [r0, #140]	; 0x8c
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cb4:	6801      	ldr	r1, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb6:	f101 0308 	add.w	r3, r1, #8
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc2:	3108      	adds	r1, #8
 8007cc4:	e841 3400 	strex	r4, r3, [r1]
 8007cc8:	2c00      	cmp	r4, #0
 8007cca:	d1f3      	bne.n	8007cb4 <UART_Start_Receive_IT+0x5c>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ccc:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007cce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007cd2:	d01e      	beq.n	8007d12 <UART_Start_Receive_IT+0xba>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cd4:	6883      	ldr	r3, [r0, #8]
 8007cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007cda:	d042      	beq.n	8007d62 <UART_Start_Receive_IT+0x10a>
      huart->RxISR = UART_RxISR_8BIT;
 8007cdc:	4b29      	ldr	r3, [pc, #164]	; (8007d84 <UART_Start_Receive_IT+0x12c>)
 8007cde:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007ce0:	6903      	ldr	r3, [r0, #16]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d043      	beq.n	8007d6e <UART_Start_Receive_IT+0x116>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007ce6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ce8:	e852 3f00 	ldrex	r3, [r2]
 8007cec:	f443 7390 	orr.w	r3, r3, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf0:	e842 3100 	strex	r1, r3, [r2]
 8007cf4:	2900      	cmp	r1, #0
 8007cf6:	d1f6      	bne.n	8007ce6 <UART_Start_Receive_IT+0x8e>
}
 8007cf8:	2000      	movs	r0, #0
 8007cfa:	bc10      	pop	{r4}
 8007cfc:	4770      	bx	lr
  UART_MASK_COMPUTATION(huart);
 8007cfe:	6903      	ldr	r3, [r0, #16]
 8007d00:	b91b      	cbnz	r3, 8007d0a <UART_Start_Receive_IT+0xb2>
 8007d02:	237f      	movs	r3, #127	; 0x7f
 8007d04:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007d08:	e7ce      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
 8007d0a:	233f      	movs	r3, #63	; 0x3f
 8007d0c:	f8a0 3060 	strh.w	r3, [r0, #96]	; 0x60
 8007d10:	e7ca      	b.n	8007ca8 <UART_Start_Receive_IT+0x50>
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007d12:	f8b0 3068 	ldrh.w	r3, [r0, #104]	; 0x68
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d8dc      	bhi.n	8007cd4 <UART_Start_Receive_IT+0x7c>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d1a:	6883      	ldr	r3, [r0, #8]
 8007d1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d20:	d019      	beq.n	8007d56 <UART_Start_Receive_IT+0xfe>
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007d22:	4b19      	ldr	r3, [pc, #100]	; (8007d88 <UART_Start_Receive_IT+0x130>)
 8007d24:	6743      	str	r3, [r0, #116]	; 0x74
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007d26:	6903      	ldr	r3, [r0, #16]
 8007d28:	b143      	cbz	r3, 8007d3c <UART_Start_Receive_IT+0xe4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d2a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2c:	e852 3f00 	ldrex	r3, [r2]
 8007d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	e842 3100 	strex	r1, r3, [r2]
 8007d38:	2900      	cmp	r1, #0
 8007d3a:	d1f6      	bne.n	8007d2a <UART_Start_Receive_IT+0xd2>
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d3c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3e:	f102 0308 	add.w	r3, r2, #8
 8007d42:	e853 3f00 	ldrex	r3, [r3]
 8007d46:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4a:	3208      	adds	r2, #8
 8007d4c:	e842 3100 	strex	r1, r3, [r2]
 8007d50:	2900      	cmp	r1, #0
 8007d52:	d1f3      	bne.n	8007d3c <UART_Start_Receive_IT+0xe4>
 8007d54:	e7d0      	b.n	8007cf8 <UART_Start_Receive_IT+0xa0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d56:	6903      	ldr	r3, [r0, #16]
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d1e2      	bne.n	8007d22 <UART_Start_Receive_IT+0xca>
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007d5c:	4b0b      	ldr	r3, [pc, #44]	; (8007d8c <UART_Start_Receive_IT+0x134>)
 8007d5e:	6743      	str	r3, [r0, #116]	; 0x74
 8007d60:	e7e1      	b.n	8007d26 <UART_Start_Receive_IT+0xce>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d62:	6903      	ldr	r3, [r0, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1b9      	bne.n	8007cdc <UART_Start_Receive_IT+0x84>
      huart->RxISR = UART_RxISR_16BIT;
 8007d68:	4b09      	ldr	r3, [pc, #36]	; (8007d90 <UART_Start_Receive_IT+0x138>)
 8007d6a:	6743      	str	r3, [r0, #116]	; 0x74
 8007d6c:	e7b8      	b.n	8007ce0 <UART_Start_Receive_IT+0x88>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d6e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	e852 3f00 	ldrex	r3, [r2]
 8007d74:	f043 0320 	orr.w	r3, r3, #32
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d78:	e842 3100 	strex	r1, r3, [r2]
 8007d7c:	2900      	cmp	r1, #0
 8007d7e:	d1f6      	bne.n	8007d6e <UART_Start_Receive_IT+0x116>
 8007d80:	e7ba      	b.n	8007cf8 <UART_Start_Receive_IT+0xa0>
 8007d82:	bf00      	nop
 8007d84:	080071c1 	.word	0x080071c1
 8007d88:	08007375 	.word	0x08007375
 8007d8c:	08007541 	.word	0x08007541
 8007d90:	0800729d 	.word	0x0800729d

08007d94 <HAL_UART_Receive_IT>:
{
 8007d94:	b538      	push	{r3, r4, r5, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d96:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d117      	bne.n	8007dce <HAL_UART_Receive_IT+0x3a>
    if ((pData == NULL) || (Size == 0U))
 8007d9e:	b1c1      	cbz	r1, 8007dd2 <HAL_UART_Receive_IT+0x3e>
 8007da0:	b1ca      	cbz	r2, 8007dd6 <HAL_UART_Receive_IT+0x42>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007da2:	2300      	movs	r3, #0
 8007da4:	66c3      	str	r3, [r0, #108]	; 0x6c
    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007da6:	6803      	ldr	r3, [r0, #0]
 8007da8:	4c0c      	ldr	r4, [pc, #48]	; (8007ddc <HAL_UART_Receive_IT+0x48>)
 8007daa:	42a3      	cmp	r3, r4
 8007dac:	d00c      	beq.n	8007dc8 <HAL_UART_Receive_IT+0x34>
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007dae:	685b      	ldr	r3, [r3, #4]
 8007db0:	f413 0f00 	tst.w	r3, #8388608	; 0x800000
 8007db4:	d008      	beq.n	8007dc8 <HAL_UART_Receive_IT+0x34>
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007db6:	6804      	ldr	r4, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007db8:	e854 3f00 	ldrex	r3, [r4]
 8007dbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc0:	e844 3500 	strex	r5, r3, [r4]
 8007dc4:	2d00      	cmp	r5, #0
 8007dc6:	d1f6      	bne.n	8007db6 <HAL_UART_Receive_IT+0x22>
    return (UART_Start_Receive_IT(huart, pData, Size));
 8007dc8:	f7ff ff46 	bl	8007c58 <UART_Start_Receive_IT>
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_Receive_IT+0x3c>
    return HAL_BUSY;
 8007dce:	2002      	movs	r0, #2
}
 8007dd0:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007dd2:	2001      	movs	r0, #1
 8007dd4:	e7fc      	b.n	8007dd0 <HAL_UART_Receive_IT+0x3c>
 8007dd6:	2001      	movs	r0, #1
 8007dd8:	e7fa      	b.n	8007dd0 <HAL_UART_Receive_IT+0x3c>
 8007dda:	bf00      	nop
 8007ddc:	40008000 	.word	0x40008000

08007de0 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8007de0:	b082      	sub	sp, #8
 8007de2:	ab02      	add	r3, sp, #8
 8007de4:	e903 0006 	stmdb	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8007de8:	6802      	ldr	r2, [r0, #0]
 8007dea:	6853      	ldr	r3, [r2, #4]
 8007dec:	f023 0310 	bic.w	r3, r3, #16
 8007df0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8007df4:	430b      	orrs	r3, r1
 8007df6:	6053      	str	r3, [r2, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 8007df8:	6802      	ldr	r2, [r0, #0]
 8007dfa:	6853      	ldr	r3, [r2, #4]
 8007dfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007e00:	f89d 1006 	ldrb.w	r1, [sp, #6]
 8007e04:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8007e08:	6053      	str	r3, [r2, #4]
}
 8007e0a:	b002      	add	sp, #8
 8007e0c:	4770      	bx	lr
	...

08007e10 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e10:	6e43      	ldr	r3, [r0, #100]	; 0x64
 8007e12:	b92b      	cbnz	r3, 8007e20 <UARTEx_SetNbDataToProcess+0x10>
  {
    huart->NbTxDataToProcess = 1U;
 8007e14:	2301      	movs	r3, #1
 8007e16:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e1a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
 8007e1e:	4770      	bx	lr
{
 8007e20:	b430      	push	{r4, r5}
  }
  else
  {
    rx_fifo_depth = RX_FIFO_DEPTH;
    tx_fifo_depth = TX_FIFO_DEPTH;
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e22:	6803      	ldr	r3, [r0, #0]
 8007e24:	689a      	ldr	r2, [r3, #8]
 8007e26:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e2a:	6899      	ldr	r1, [r3, #8]
 8007e2c:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e2e:	4d09      	ldr	r5, [pc, #36]	; (8007e54 <UARTEx_SetNbDataToProcess+0x44>)
 8007e30:	5c6b      	ldrb	r3, [r5, r1]
 8007e32:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e34:	4c08      	ldr	r4, [pc, #32]	; (8007e58 <UARTEx_SetNbDataToProcess+0x48>)
 8007e36:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e38:	fb93 f3f1 	sdiv	r3, r3, r1
 8007e3c:	f8a0 306a 	strh.w	r3, [r0, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e40:	5cab      	ldrb	r3, [r5, r2]
 8007e42:	00db      	lsls	r3, r3, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e44:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e46:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e4a:	f8a0 3068 	strh.w	r3, [r0, #104]	; 0x68
  }
}
 8007e4e:	bc30      	pop	{r4, r5}
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	080145d8 	.word	0x080145d8
 8007e58:	080145d0 	.word	0x080145d0

08007e5c <HAL_UARTEx_WakeupCallback>:
}
 8007e5c:	4770      	bx	lr

08007e5e <HAL_UARTEx_RxFifoFullCallback>:
}
 8007e5e:	4770      	bx	lr

08007e60 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8007e60:	4770      	bx	lr

08007e62 <HAL_UARTEx_StopModeWakeUpSourceConfig>:
{
 8007e62:	b510      	push	{r4, lr}
 8007e64:	b084      	sub	sp, #16
 8007e66:	ab04      	add	r3, sp, #16
 8007e68:	e903 0006 	stmdb	r3, {r1, r2}
  __HAL_LOCK(huart);
 8007e6c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007e70:	2b01      	cmp	r3, #1
 8007e72:	d035      	beq.n	8007ee0 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7e>
 8007e74:	4604      	mov	r4, r0
 8007e76:	2301      	movs	r3, #1
 8007e78:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007e7c:	2324      	movs	r3, #36	; 0x24
 8007e7e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  __HAL_UART_DISABLE(huart);
 8007e82:	6802      	ldr	r2, [r0, #0]
 8007e84:	6813      	ldr	r3, [r2, #0]
 8007e86:	f023 0301 	bic.w	r3, r3, #1
 8007e8a:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 8007e8c:	6801      	ldr	r1, [r0, #0]
 8007e8e:	688b      	ldr	r3, [r1, #8]
 8007e90:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8007e94:	9a02      	ldr	r2, [sp, #8]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	608b      	str	r3, [r1, #8]
  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8007e9a:	b1aa      	cbz	r2, 8007ec8 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  __HAL_UART_ENABLE(huart);
 8007e9c:	6822      	ldr	r2, [r4, #0]
 8007e9e:	6813      	ldr	r3, [r2, #0]
 8007ea0:	f043 0301 	orr.w	r3, r3, #1
 8007ea4:	6013      	str	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8007ea6:	f7f9 fedd 	bl	8001c64 <HAL_GetTick>
 8007eaa:	4603      	mov	r3, r0
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007eac:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8007eb0:	9200      	str	r2, [sp, #0]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f7ff fdf0 	bl	8007a9e <UART_WaitOnFlagUntilTimeout>
 8007ebe:	b948      	cbnz	r0, 8007ed4 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x72>
    huart->gState = HAL_UART_STATE_READY;
 8007ec0:	2320      	movs	r3, #32
 8007ec2:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8007ec6:	e006      	b.n	8007ed6 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x74>
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8007ec8:	ab04      	add	r3, sp, #16
 8007eca:	e913 0006 	ldmdb	r3, {r1, r2}
 8007ece:	f7ff ff87 	bl	8007de0 <UARTEx_Wakeup_AddressConfig>
 8007ed2:	e7e3      	b.n	8007e9c <HAL_UARTEx_StopModeWakeUpSourceConfig+0x3a>
    status = HAL_TIMEOUT;
 8007ed4:	2003      	movs	r0, #3
  __HAL_UNLOCK(huart);
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
}
 8007edc:	b004      	add	sp, #16
 8007ede:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007ee0:	2002      	movs	r0, #2
 8007ee2:	e7fb      	b.n	8007edc <HAL_UARTEx_StopModeWakeUpSourceConfig+0x7a>

08007ee4 <HAL_UARTEx_EnableStopMode>:
  __HAL_LOCK(huart);
 8007ee4:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d010      	beq.n	8007f0e <HAL_UARTEx_EnableStopMode+0x2a>
 8007eec:	2301      	movs	r3, #1
 8007eee:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 8007ef2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ef4:	e852 3f00 	ldrex	r3, [r2]
 8007ef8:	f043 0302 	orr.w	r3, r3, #2
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efc:	e842 3100 	strex	r1, r3, [r2]
 8007f00:	2900      	cmp	r1, #0
 8007f02:	d1f6      	bne.n	8007ef2 <HAL_UARTEx_EnableStopMode+0xe>
  __HAL_UNLOCK(huart);
 8007f04:	2300      	movs	r3, #0
 8007f06:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  return HAL_OK;
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	4770      	bx	lr
  __HAL_LOCK(huart);
 8007f0e:	2002      	movs	r0, #2
}
 8007f10:	4770      	bx	lr

08007f12 <HAL_UARTEx_EnableFifoMode>:
  __HAL_LOCK(huart);
 8007f12:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d01d      	beq.n	8007f56 <HAL_UARTEx_EnableFifoMode+0x44>
{
 8007f1a:	b510      	push	{r4, lr}
 8007f1c:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 8007f1e:	2301      	movs	r3, #1
 8007f20:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007f24:	2324      	movs	r3, #36	; 0x24
 8007f26:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f2a:	6802      	ldr	r2, [r0, #0]
 8007f2c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8007f2e:	6811      	ldr	r1, [r2, #0]
 8007f30:	f021 0101 	bic.w	r1, r1, #1
 8007f34:	6011      	str	r1, [r2, #0]
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 8007f3a:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007f3e:	6642      	str	r2, [r0, #100]	; 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f40:	6802      	ldr	r2, [r0, #0]
 8007f42:	6013      	str	r3, [r2, #0]
  UARTEx_SetNbDataToProcess(huart);
 8007f44:	f7ff ff64 	bl	8007e10 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 8007f48:	2320      	movs	r3, #32
 8007f4a:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007f4e:	2000      	movs	r0, #0
 8007f50:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007f54:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
 8007f56:	2002      	movs	r0, #2
}
 8007f58:	4770      	bx	lr

08007f5a <HAL_UARTEx_SetTxFifoThreshold>:
{
 8007f5a:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007f5c:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007f60:	2b01      	cmp	r3, #1
 8007f62:	d01d      	beq.n	8007fa0 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007f64:	4604      	mov	r4, r0
 8007f66:	2301      	movs	r3, #1
 8007f68:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007f6c:	2324      	movs	r3, #36	; 0x24
 8007f6e:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f72:	6803      	ldr	r3, [r0, #0]
 8007f74:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	f022 0201 	bic.w	r2, r2, #1
 8007f7c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f7e:	6802      	ldr	r2, [r0, #0]
 8007f80:	6893      	ldr	r3, [r2, #8]
 8007f82:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
 8007f86:	4319      	orrs	r1, r3
 8007f88:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007f8a:	f7ff ff41 	bl	8007e10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007f92:	2320      	movs	r3, #32
 8007f94:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007f98:	2000      	movs	r0, #0
 8007f9a:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007fa0:	2002      	movs	r0, #2
 8007fa2:	e7fc      	b.n	8007f9e <HAL_UARTEx_SetTxFifoThreshold+0x44>

08007fa4 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8007fa4:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(huart);
 8007fa6:	f890 3084 	ldrb.w	r3, [r0, #132]	; 0x84
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d01d      	beq.n	8007fea <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007fae:	4604      	mov	r4, r0
 8007fb0:	2301      	movs	r3, #1
 8007fb2:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  huart->gState = HAL_UART_STATE_BUSY;
 8007fb6:	2324      	movs	r3, #36	; 0x24
 8007fb8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007fbc:	6803      	ldr	r3, [r0, #0]
 8007fbe:	681d      	ldr	r5, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	f022 0201 	bic.w	r2, r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007fc8:	6802      	ldr	r2, [r0, #0]
 8007fca:	6893      	ldr	r3, [r2, #8]
 8007fcc:	f023 6360 	bic.w	r3, r3, #234881024	; 0xe000000
 8007fd0:	4319      	orrs	r1, r3
 8007fd2:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8007fd4:	f7ff ff1c 	bl	8007e10 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007fd8:	6823      	ldr	r3, [r4, #0]
 8007fda:	601d      	str	r5, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8007fdc:	2320      	movs	r3, #32
 8007fde:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
  __HAL_UNLOCK(huart);
 8007fe2:	2000      	movs	r0, #0
 8007fe4:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
}
 8007fe8:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(huart);
 8007fea:	2002      	movs	r0, #2
 8007fec:	e7fc      	b.n	8007fe8 <HAL_UARTEx_SetRxFifoThreshold+0x44>
	...

08007ff0 <LmHandlerPackageIsInitialized>:
    }
}

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007ff0:	2804      	cmp	r0, #4
 8007ff2:	d807      	bhi.n	8008004 <LmHandlerPackageIsInitialized+0x14>
{
 8007ff4:	b508      	push	{r3, lr}
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 8007ff6:	4b05      	ldr	r3, [pc, #20]	; (800800c <LmHandlerPackageIsInitialized+0x1c>)
 8007ff8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8007ffc:	689b      	ldr	r3, [r3, #8]
 8007ffe:	b11b      	cbz	r3, 8008008 <LmHandlerPackageIsInitialized+0x18>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 8008000:	4798      	blx	r3
    }
    else
    {
        return false;
    }
}
 8008002:	bd08      	pop	{r3, pc}
        return false;
 8008004:	2000      	movs	r0, #0
}
 8008006:	4770      	bx	lr
        return false;
 8008008:	2000      	movs	r0, #0
 800800a:	e7fa      	b.n	8008002 <LmHandlerPackageIsInitialized+0x12>
 800800c:	20000784 	.word	0x20000784

08008010 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 8008010:	b570      	push	{r4, r5, r6, lr}
 8008012:	4605      	mov	r5, r0
 8008014:	460e      	mov	r6, r1
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008016:	2400      	movs	r4, #0
 8008018:	e005      	b.n	8008026 <LmHandlerPackagesNotify+0x16>
        {
            switch( notifyType )
            {
                case PACKAGE_MCPS_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800801a:	699b      	ldr	r3, [r3, #24]
 800801c:	b10b      	cbz	r3, 8008022 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t * ) params );
 800801e:	4630      	mov	r0, r6
 8008020:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008022:	3401      	adds	r4, #1
 8008024:	b264      	sxtb	r4, r4
 8008026:	2c04      	cmp	r4, #4
 8008028:	dc24      	bgt.n	8008074 <LmHandlerPackagesNotify+0x64>
        if( LmHandlerPackages[i] != NULL )
 800802a:	4b13      	ldr	r3, [pc, #76]	; (8008078 <LmHandlerPackagesNotify+0x68>)
 800802c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008030:	2b00      	cmp	r3, #0
 8008032:	d0f6      	beq.n	8008022 <LmHandlerPackagesNotify+0x12>
            switch( notifyType )
 8008034:	2d03      	cmp	r5, #3
 8008036:	d8f4      	bhi.n	8008022 <LmHandlerPackagesNotify+0x12>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <LmHandlerPackagesNotify+0x30>)
 800803a:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 800803e:	bf00      	nop
 8008040:	0800801b 	.word	0x0800801b
 8008044:	08008051 	.word	0x08008051
 8008048:	0800805d 	.word	0x0800805d
 800804c:	08008069 	.word	0x08008069
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                        if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                            ( ( LmHandlerPackages[i]->Port == ( ( McpsIndication_t * )params )->Port ) ||
                              ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ) ) ) )
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
                        if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 8008050:	69db      	ldr	r3, [r3, #28]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0e5      	beq.n	8008022 <LmHandlerPackagesNotify+0x12>
#endif /* LORAMAC_VERSION */
                        {
                            LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t * )params );
 8008056:	4630      	mov	r0, r6
 8008058:	4798      	blx	r3
 800805a:	e7e2      	b.n	8008022 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_CONFIRM:
                    {
                        if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d0df      	beq.n	8008022 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t * )params );
 8008062:	4630      	mov	r0, r6
 8008064:	4798      	blx	r3
 8008066:	e7dc      	b.n	8008022 <LmHandlerPackagesNotify+0x12>
                        }
                        break;
                    }
                case PACKAGE_MLME_INDICATION:
                    {
                        if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 8008068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800806a:	2b00      	cmp	r3, #0
 800806c:	d0d9      	beq.n	8008022 <LmHandlerPackagesNotify+0x12>
                        {
                            LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800806e:	4630      	mov	r0, r6
 8008070:	4798      	blx	r3
 8008072:	e7d6      	b.n	8008022 <LmHandlerPackagesNotify+0x12>
                        break;
                    }
            }
        }
    }
}
 8008074:	bd70      	pop	{r4, r5, r6, pc}
 8008076:	bf00      	nop
 8008078:	20000784 	.word	0x20000784

0800807c <MlmeIndication>:
{
 800807c:	b510      	push	{r4, lr}
 800807e:	4604      	mov	r4, r0
    RxParams.IsMcpsIndication = 0;
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <MlmeIndication+0x4c>)
 8008082:	2200      	movs	r2, #0
 8008084:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 8008086:	7842      	ldrb	r2, [r0, #1]
 8008088:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800808a:	f990 2002 	ldrsb.w	r2, [r0, #2]
 800808e:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008090:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008094:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008096:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800809a:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800809c:	78ca      	ldrb	r2, [r1, #3]
 800809e:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 80080a0:	6842      	ldr	r2, [r0, #4]
 80080a2:	60da      	str	r2, [r3, #12]
    if( ( LmHandlerCallbacks->OnRxData != NULL ) && ( mlmeIndication->MlmeIndication != MLME_BEACON ) && ( mlmeIndication->MlmeIndication != MLME_BEACON_LOST ) )
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <MlmeIndication+0x50>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080aa:	b13b      	cbz	r3, 80080bc <MlmeIndication+0x40>
 80080ac:	7802      	ldrb	r2, [r0, #0]
 80080ae:	2a0a      	cmp	r2, #10
 80080b0:	d004      	beq.n	80080bc <MlmeIndication+0x40>
 80080b2:	2a0e      	cmp	r2, #14
 80080b4:	d002      	beq.n	80080bc <MlmeIndication+0x40>
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 80080b6:	4904      	ldr	r1, [pc, #16]	; (80080c8 <MlmeIndication+0x4c>)
 80080b8:	2000      	movs	r0, #0
 80080ba:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 80080bc:	4621      	mov	r1, r4
 80080be:	2003      	movs	r0, #3
 80080c0:	f7ff ffa6 	bl	8008010 <LmHandlerPackagesNotify>
}
 80080c4:	bd10      	pop	{r4, pc}
 80080c6:	bf00      	nop
 80080c8:	20000090 	.word	0x20000090
 80080cc:	20000780 	.word	0x20000780

080080d0 <McpsConfirm>:
{
 80080d0:	b510      	push	{r4, lr}
 80080d2:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 1;
 80080d4:	4b0d      	ldr	r3, [pc, #52]	; (800810c <McpsConfirm+0x3c>)
 80080d6:	2201      	movs	r2, #1
 80080d8:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 80080da:	7842      	ldrb	r2, [r0, #1]
 80080dc:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 80080de:	f990 2002 	ldrsb.w	r2, [r0, #2]
 80080e2:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 80080e4:	68c2      	ldr	r2, [r0, #12]
 80080e6:	60da      	str	r2, [r3, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 80080e8:	f990 2003 	ldrsb.w	r2, [r0, #3]
 80080ec:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 80080ee:	6902      	ldr	r2, [r0, #16]
 80080f0:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 80080f2:	7902      	ldrb	r2, [r0, #4]
 80080f4:	725a      	strb	r2, [r3, #9]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80080f6:	4b06      	ldr	r3, [pc, #24]	; (8008110 <McpsConfirm+0x40>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080fc:	b10b      	cbz	r3, 8008102 <McpsConfirm+0x32>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80080fe:	4803      	ldr	r0, [pc, #12]	; (800810c <McpsConfirm+0x3c>)
 8008100:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 8008102:	4621      	mov	r1, r4
 8008104:	2000      	movs	r0, #0
 8008106:	f7ff ff83 	bl	8008010 <LmHandlerPackagesNotify>
}
 800810a:	bd10      	pop	{r4, pc}
 800810c:	200000a4 	.word	0x200000a4
 8008110:	20000780 	.word	0x20000780

08008114 <LmHandlerPackageIsTxPending>:

static bool LmHandlerPackageIsTxPending( void )
{
 8008114:	b510      	push	{r4, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008116:	2400      	movs	r4, #0
 8008118:	e001      	b.n	800811e <LmHandlerPackageIsTxPending+0xa>
 800811a:	3401      	adds	r4, #1
 800811c:	b264      	sxtb	r4, r4
 800811e:	2c04      	cmp	r4, #4
 8008120:	dc0a      	bgt.n	8008138 <LmHandlerPackageIsTxPending+0x24>
    {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        if( ( LmHandlerPackages[i] != NULL ) && ( i != PACKAGE_ID_COMPLIANCE ) )
#else
        if( LmHandlerPackages[i] != NULL )
 8008122:	4b07      	ldr	r3, [pc, #28]	; (8008140 <LmHandlerPackageIsTxPending+0x2c>)
 8008124:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d0f6      	beq.n	800811a <LmHandlerPackageIsTxPending+0x6>
#endif /* LORAMAC_VERSION */
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800812c:	68db      	ldr	r3, [r3, #12]
 800812e:	4798      	blx	r3
 8008130:	4603      	mov	r3, r0
 8008132:	2800      	cmp	r0, #0
 8008134:	d0f1      	beq.n	800811a <LmHandlerPackageIsTxPending+0x6>
 8008136:	e000      	b.n	800813a <LmHandlerPackageIsTxPending+0x26>
            {
                return true;
            }
        }
    }
    return false;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	bd10      	pop	{r4, pc}
 800813e:	bf00      	nop
 8008140:	20000784 	.word	0x20000784

08008144 <LmHandlerPackagesProcess>:

static void LmHandlerPackagesProcess( void )
{
 8008144:	b538      	push	{r3, r4, r5, lr}
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 8008146:	2400      	movs	r4, #0
 8008148:	e001      	b.n	800814e <LmHandlerPackagesProcess+0xa>
 800814a:	3401      	adds	r4, #1
 800814c:	b264      	sxtb	r4, r4
 800814e:	2c04      	cmp	r4, #4
 8008150:	dc12      	bgt.n	8008178 <LmHandlerPackagesProcess+0x34>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 8008152:	4b0a      	ldr	r3, [pc, #40]	; (800817c <LmHandlerPackagesProcess+0x38>)
 8008154:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d0f6      	beq.n	800814a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800815c:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800815e:	2b00      	cmp	r3, #0
 8008160:	d0f3      	beq.n	800814a <LmHandlerPackagesProcess+0x6>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 8008162:	b2e0      	uxtb	r0, r4
 8008164:	f7ff ff44 	bl	8007ff0 <LmHandlerPackageIsInitialized>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 8008168:	2800      	cmp	r0, #0
 800816a:	d0ee      	beq.n	800814a <LmHandlerPackagesProcess+0x6>
        {
            LmHandlerPackages[i]->Process( );
 800816c:	4b03      	ldr	r3, [pc, #12]	; (800817c <LmHandlerPackagesProcess+0x38>)
 800816e:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8008172:	691b      	ldr	r3, [r3, #16]
 8008174:	4798      	blx	r3
 8008176:	e7e8      	b.n	800814a <LmHandlerPackagesProcess+0x6>
        }
    }
}
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	bf00      	nop
 800817c:	20000784 	.word	0x20000784

08008180 <LmHandlerOnTxFrameCtrlChanged>:

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static void LmHandlerOnTxFrameCtrlChanged( LmHandlerMsgTypes_t isTxConfirmed )
{
 8008180:	b508      	push	{r3, lr}
    LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 8008182:	4b04      	ldr	r3, [pc, #16]	; (8008194 <LmHandlerOnTxFrameCtrlChanged+0x14>)
 8008184:	70d8      	strb	r0, [r3, #3]

    if (LmHandlerCallbacks->OnTxFrameCtrlChanged != NULL)
 8008186:	4b04      	ldr	r3, [pc, #16]	; (8008198 <LmHandlerOnTxFrameCtrlChanged+0x18>)
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	b103      	cbz	r3, 8008190 <LmHandlerOnTxFrameCtrlChanged+0x10>
    {
        LmHandlerCallbacks->OnTxFrameCtrlChanged( isTxConfirmed );
 800818e:	4798      	blx	r3
    }
}
 8008190:	bd08      	pop	{r3, pc}
 8008192:	bf00      	nop
 8008194:	20000798 	.word	0x20000798
 8008198:	20000780 	.word	0x20000780

0800819c <LmHandlerOnPingSlotPeriodicityChanged>:

static void LmHandlerOnPingSlotPeriodicityChanged( uint8_t pingSlotPeriodicity )
{
 800819c:	b508      	push	{r3, lr}
    LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800819e:	4b04      	ldr	r3, [pc, #16]	; (80081b0 <LmHandlerOnPingSlotPeriodicityChanged+0x14>)
 80081a0:	7418      	strb	r0, [r3, #16]

    if (LmHandlerCallbacks->OnPingSlotPeriodicityChanged != NULL)
 80081a2:	4b04      	ldr	r3, [pc, #16]	; (80081b4 <LmHandlerOnPingSlotPeriodicityChanged+0x18>)
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80081a8:	b103      	cbz	r3, 80081ac <LmHandlerOnPingSlotPeriodicityChanged+0x10>
    {
        LmHandlerCallbacks->OnPingSlotPeriodicityChanged( pingSlotPeriodicity );
 80081aa:	4798      	blx	r3
    }
}
 80081ac:	bd08      	pop	{r3, pc}
 80081ae:	bf00      	nop
 80081b0:	20000798 	.word	0x20000798
 80081b4:	20000780 	.word	0x20000780

080081b8 <LmHandlerJoin>:
{
 80081b8:	b530      	push	{r4, r5, lr}
 80081ba:	b091      	sub	sp, #68	; 0x44
 80081bc:	460c      	mov	r4, r1
    mlmeReq.Type = MLME_JOIN;
 80081be:	2301      	movs	r3, #1
 80081c0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 80081c4:	4b33      	ldr	r3, [pc, #204]	; (8008294 <LmHandlerJoin+0xdc>)
 80081c6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 80081ca:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
    mlmeReq.Req.Join.TxPower = LmHandlerParams.TxPower;
 80081ce:	f993 1005 	ldrsb.w	r1, [r3, #5]
 80081d2:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    if( mode == ACTIVATION_TYPE_OTAA )
 80081d6:	2802      	cmp	r0, #2
 80081d8:	d022      	beq.n	8008220 <LmHandlerJoin+0x68>
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 80081da:	2001      	movs	r0, #1
 80081dc:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 80081e0:	4b2d      	ldr	r3, [pc, #180]	; (8008298 <LmHandlerJoin+0xe0>)
 80081e2:	71d8      	strb	r0, [r3, #7]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 80081e4:	711a      	strb	r2, [r3, #4]
        JoinParams.TxPower = LmHandlerParams.TxPower;
 80081e6:	7159      	strb	r1, [r3, #5]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 80081e8:	2100      	movs	r1, #0
 80081ea:	7199      	strb	r1, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 80081ec:	721c      	strb	r4, [r3, #8]
        if( CtxRestoreDone == false )
 80081ee:	4b2b      	ldr	r3, [pc, #172]	; (800829c <LmHandlerJoin+0xe4>)
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	b1f3      	cbz	r3, 8008232 <LmHandlerJoin+0x7a>
        LoRaMacStart();
 80081f4:	f003 fb0c 	bl	800b810 <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 80081f8:	2301      	movs	r3, #1
 80081fa:	f88d 3004 	strb.w	r3, [sp, #4]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 80081fe:	f88d 3008 	strb.w	r3, [sp, #8]
        LoRaMacMibSetRequestConfirm( &mibReq );
 8008202:	a801      	add	r0, sp, #4
 8008204:	f003 fd42 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    if( ( CtxRestoreDone == false ) || ( forceRejoin == true ) )
 8008208:	4b24      	ldr	r3, [pc, #144]	; (800829c <LmHandlerJoin+0xe4>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	b103      	cbz	r3, 8008210 <LmHandlerJoin+0x58>
 800820e:	b114      	cbz	r4, 8008216 <LmHandlerJoin+0x5e>
        LoRaMacMlmeRequest( &mlmeReq );
 8008210:	a80b      	add	r0, sp, #44	; 0x2c
 8008212:	f003 ffef 	bl	800c1f4 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 8008216:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008218:	4b21      	ldr	r3, [pc, #132]	; (80082a0 <LmHandlerJoin+0xe8>)
 800821a:	601a      	str	r2, [r3, #0]
}
 800821c:	b011      	add	sp, #68	; 0x44
 800821e:	bd30      	pop	{r4, r5, pc}
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8008220:	2202      	movs	r2, #2
 8008222:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 8008226:	4b1c      	ldr	r3, [pc, #112]	; (8008298 <LmHandlerJoin+0xe0>)
 8008228:	71da      	strb	r2, [r3, #7]
        JoinParams.forceRejoin = forceRejoin;
 800822a:	721c      	strb	r4, [r3, #8]
        LoRaMacStart();
 800822c:	f003 faf0 	bl	800b810 <LoRaMacStart>
 8008230:	e7ea      	b.n	8008208 <LmHandlerJoin+0x50>
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 8008232:	231f      	movs	r3, #31
 8008234:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 8008238:	f88d 2008 	strb.w	r2, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800823c:	a801      	add	r0, sp, #4
 800823e:	f003 fd25 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DATARATE;
 8008242:	2320      	movs	r3, #32
 8008244:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 8008248:	4d12      	ldr	r5, [pc, #72]	; (8008294 <LmHandlerJoin+0xdc>)
 800824a:	f995 3004 	ldrsb.w	r3, [r5, #4]
 800824e:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008252:	a801      	add	r0, sp, #4
 8008254:	f003 fd1a 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_DEFAULT_TX_POWER;
 8008258:	2322      	movs	r3, #34	; 0x22
 800825a:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsDefaultTxPower = LmHandlerParams.TxPower;
 800825e:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008262:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 8008266:	a801      	add	r0, sp, #4
 8008268:	f003 fd10 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_CHANNELS_TX_POWER;
 800826c:	2321      	movs	r3, #33	; 0x21
 800826e:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.ChannelsTxPower = LmHandlerParams.TxPower;
 8008272:	f995 3005 	ldrsb.w	r3, [r5, #5]
 8008276:	f88d 3008 	strb.w	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800827a:	a801      	add	r0, sp, #4
 800827c:	f003 fd06 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 8008280:	2329      	movs	r3, #41	; 0x29
 8008282:	f88d 3004 	strb.w	r3, [sp, #4]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 8008286:	4b07      	ldr	r3, [pc, #28]	; (80082a4 <LmHandlerJoin+0xec>)
 8008288:	9302      	str	r3, [sp, #8]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800828a:	a801      	add	r0, sp, #4
 800828c:	f003 fcfe 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 8008290:	e7b0      	b.n	80081f4 <LmHandlerJoin+0x3c>
 8008292:	bf00      	nop
 8008294:	20000798 	.word	0x20000798
 8008298:	20000084 	.word	0x20000084
 800829c:	20000774 	.word	0x20000774
 80082a0:	20000778 	.word	0x20000778
 80082a4:	01000400 	.word	0x01000400

080082a8 <LmHandlerDeviceTimeReq>:
{
 80082a8:	b500      	push	{lr}
 80082aa:	b087      	sub	sp, #28
    mlmeReq.Type = MLME_DEVICE_TIME;
 80082ac:	2309      	movs	r3, #9
 80082ae:	f88d 3004 	strb.w	r3, [sp, #4]
    status = LoRaMacMlmeRequest( &mlmeReq );
 80082b2:	a801      	add	r0, sp, #4
 80082b4:	f003 ff9e 	bl	800c1f4 <LoRaMacMlmeRequest>
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 80082b8:	9a05      	ldr	r2, [sp, #20]
 80082ba:	4b04      	ldr	r3, [pc, #16]	; (80082cc <LmHandlerDeviceTimeReq+0x24>)
 80082bc:	601a      	str	r2, [r3, #0]
    if( status == LORAMAC_STATUS_OK )
 80082be:	b910      	cbnz	r0, 80082c6 <LmHandlerDeviceTimeReq+0x1e>
}
 80082c0:	b007      	add	sp, #28
 80082c2:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80082c6:	f04f 30ff 	mov.w	r0, #4294967295
 80082ca:	e7f9      	b.n	80082c0 <LmHandlerDeviceTimeReq+0x18>
 80082cc:	20000778 	.word	0x20000778

080082d0 <LmHandlerGetDutyCycleWaitTime>:
}
 80082d0:	4b01      	ldr	r3, [pc, #4]	; (80082d8 <LmHandlerGetDutyCycleWaitTime+0x8>)
 80082d2:	6818      	ldr	r0, [r3, #0]
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000778 	.word	0x20000778

080082dc <LmHandlerJoinStatus>:
{
 80082dc:	b500      	push	{lr}
 80082de:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_NETWORK_ACTIVATION;
 80082e0:	2301      	movs	r3, #1
 80082e2:	f88d 3000 	strb.w	r3, [sp]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 80082e6:	4668      	mov	r0, sp
 80082e8:	f003 fb5c 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
    if( status == LORAMAC_STATUS_OK )
 80082ec:	b920      	cbnz	r0, 80082f8 <LmHandlerJoinStatus+0x1c>
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 80082ee:	f89d 0004 	ldrb.w	r0, [sp, #4]
 80082f2:	b110      	cbz	r0, 80082fa <LmHandlerJoinStatus+0x1e>
            return LORAMAC_HANDLER_SET;
 80082f4:	2001      	movs	r0, #1
 80082f6:	e000      	b.n	80082fa <LmHandlerJoinStatus+0x1e>
        return LORAMAC_HANDLER_RESET;
 80082f8:	2000      	movs	r0, #0
}
 80082fa:	b00b      	add	sp, #44	; 0x2c
 80082fc:	f85d fb04 	ldr.w	pc, [sp], #4

08008300 <LmHandlerIsBusy>:
{
 8008300:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == true )
 8008302:	f003 f833 	bl	800b36c <LoRaMacIsBusy>
 8008306:	b100      	cbz	r0, 800830a <LmHandlerIsBusy+0xa>
}
 8008308:	bd08      	pop	{r3, pc}
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800830a:	f7ff ffe7 	bl	80082dc <LmHandlerJoinStatus>
 800830e:	2801      	cmp	r0, #1
 8008310:	d006      	beq.n	8008320 <LmHandlerIsBusy+0x20>
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 8008312:	4b05      	ldr	r3, [pc, #20]	; (8008328 <LmHandlerIsBusy+0x28>)
 8008314:	7a19      	ldrb	r1, [r3, #8]
 8008316:	79d8      	ldrb	r0, [r3, #7]
 8008318:	f7ff ff4e 	bl	80081b8 <LmHandlerJoin>
        return true;
 800831c:	2001      	movs	r0, #1
 800831e:	e7f3      	b.n	8008308 <LmHandlerIsBusy+0x8>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008320:	f7ff fef8 	bl	8008114 <LmHandlerPackageIsTxPending>
 8008324:	e7f0      	b.n	8008308 <LmHandlerIsBusy+0x8>
 8008326:	bf00      	nop
 8008328:	20000084 	.word	0x20000084

0800832c <LmHandlerSend>:
{
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	b086      	sub	sp, #24
 8008330:	4604      	mov	r4, r0
 8008332:	460d      	mov	r5, r1
 8008334:	4616      	mov	r6, r2
    if( LoRaMacIsBusy() == true )
 8008336:	f003 f819 	bl	800b36c <LoRaMacIsBusy>
 800833a:	2800      	cmp	r0, #0
 800833c:	d168      	bne.n	8008410 <LmHandlerSend+0xe4>
    if( LoRaMacIsStopped() == true )
 800833e:	f003 f833 	bl	800b3a8 <LoRaMacIsStopped>
 8008342:	2800      	cmp	r0, #0
 8008344:	d167      	bne.n	8008416 <LmHandlerSend+0xea>
    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 8008346:	f7ff ffc9 	bl	80082dc <LmHandlerJoinStatus>
 800834a:	2801      	cmp	r0, #1
 800834c:	d137      	bne.n	80083be <LmHandlerSend+0x92>
    TxParams.MsgType = isTxConfirmed;
 800834e:	4b35      	ldr	r3, [pc, #212]	; (8008424 <LmHandlerSend+0xf8>)
 8008350:	721d      	strb	r5, [r3, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 8008352:	3d00      	subs	r5, #0
 8008354:	bf18      	it	ne
 8008356:	2501      	movne	r5, #1
 8008358:	f88d 5004 	strb.w	r5, [sp, #4]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800835c:	4b32      	ldr	r3, [pc, #200]	; (8008428 <LmHandlerSend+0xfc>)
 800835e:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8008362:	f88d 3012 	strb.w	r3, [sp, #18]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 8008366:	4669      	mov	r1, sp
 8008368:	7860      	ldrb	r0, [r4, #1]
 800836a:	f003 fab1 	bl	800b8d0 <LoRaMacQueryTxPossible>
 800836e:	b370      	cbz	r0, 80083ce <LmHandlerSend+0xa2>
        mcpsReq.Type = MCPS_UNCONFIRMED;
 8008370:	2300      	movs	r3, #0
 8008372:	f88d 3004 	strb.w	r3, [sp, #4]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 8008376:	9303      	str	r3, [sp, #12]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 8008378:	f8ad 3010 	strh.w	r3, [sp, #16]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800837c:	f06f 0506 	mvn.w	r5, #6
    TxParams.AppData = *appData;
 8008380:	4b28      	ldr	r3, [pc, #160]	; (8008424 <LmHandlerSend+0xf8>)
 8008382:	f103 0c10 	add.w	ip, r3, #16
 8008386:	e894 0003 	ldmia.w	r4, {r0, r1}
 800838a:	e88c 0003 	stmia.w	ip, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800838e:	4a26      	ldr	r2, [pc, #152]	; (8008428 <LmHandlerSend+0xfc>)
 8008390:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008394:	729a      	strb	r2, [r3, #10]
    status = LoRaMacMcpsRequest( &mcpsReq, allowDelayedTx );
 8008396:	4631      	mov	r1, r6
 8008398:	a801      	add	r0, sp, #4
 800839a:	f004 f82f 	bl	800c3fc <LoRaMacMcpsRequest>
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800839e:	9a05      	ldr	r2, [sp, #20]
 80083a0:	4b22      	ldr	r3, [pc, #136]	; (800842c <LmHandlerSend+0x100>)
 80083a2:	601a      	str	r2, [r3, #0]
    switch( status )
 80083a4:	2811      	cmp	r0, #17
 80083a6:	d830      	bhi.n	800840a <LmHandlerSend+0xde>
 80083a8:	e8df f000 	tbb	[pc, r0]
 80083ac:	2f2f1c21 	.word	0x2f2f1c21
 80083b0:	382f2f2f 	.word	0x382f2f2f
 80083b4:	2c2f2f2f 	.word	0x2c2f2f2f
 80083b8:	1c1c2f2f 	.word	0x1c1c2f2f
 80083bc:	291c      	.short	0x291c
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 80083be:	4b1c      	ldr	r3, [pc, #112]	; (8008430 <LmHandlerSend+0x104>)
 80083c0:	7a19      	ldrb	r1, [r3, #8]
 80083c2:	79d8      	ldrb	r0, [r3, #7]
 80083c4:	f7ff fef8 	bl	80081b8 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 80083c8:	f06f 0502 	mvn.w	r5, #2
 80083cc:	e00c      	b.n	80083e8 <LmHandlerSend+0xbc>
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 80083ce:	7823      	ldrb	r3, [r4, #0]
 80083d0:	f88d 3008 	strb.w	r3, [sp, #8]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 80083d4:	7863      	ldrb	r3, [r4, #1]
 80083d6:	f8ad 3010 	strh.w	r3, [sp, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 80083da:	6863      	ldr	r3, [r4, #4]
 80083dc:	9303      	str	r3, [sp, #12]
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 80083de:	f04f 35ff 	mov.w	r5, #4294967295
 80083e2:	e7cd      	b.n	8008380 <LmHandlerSend+0x54>
    switch( status )
 80083e4:	f06f 0501 	mvn.w	r5, #1
}
 80083e8:	4628      	mov	r0, r5
 80083ea:	b006      	add	sp, #24
 80083ec:	bd70      	pop	{r4, r5, r6, pc}
            IsUplinkTxPending = false;
 80083ee:	4b11      	ldr	r3, [pc, #68]	; (8008434 <LmHandlerSend+0x108>)
 80083f0:	2200      	movs	r2, #0
 80083f2:	701a      	strb	r2, [r3, #0]
            if( lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED )
 80083f4:	f115 0f07 	cmn.w	r5, #7
 80083f8:	d0f6      	beq.n	80083e8 <LmHandlerSend+0xbc>
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 80083fa:	2500      	movs	r5, #0
 80083fc:	e7f4      	b.n	80083e8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 80083fe:	f06f 0504 	mvn.w	r5, #4
            break;
 8008402:	e7f1      	b.n	80083e8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 8008404:	f06f 0505 	mvn.w	r5, #5
            break;
 8008408:	e7ee      	b.n	80083e8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800840a:	f04f 35ff 	mov.w	r5, #4294967295
            break;
 800840e:	e7eb      	b.n	80083e8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_BUSY_ERROR;
 8008410:	f06f 0501 	mvn.w	r5, #1
 8008414:	e7e8      	b.n	80083e8 <LmHandlerSend+0xbc>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008416:	f06f 0502 	mvn.w	r5, #2
 800841a:	e7e5      	b.n	80083e8 <LmHandlerSend+0xbc>
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800841c:	f06f 0502 	mvn.w	r5, #2
 8008420:	e7e2      	b.n	80083e8 <LmHandlerSend+0xbc>
 8008422:	bf00      	nop
 8008424:	200000a4 	.word	0x200000a4
 8008428:	20000798 	.word	0x20000798
 800842c:	20000778 	.word	0x20000778
 8008430:	20000084 	.word	0x20000084
 8008434:	2000077c 	.word	0x2000077c

08008438 <LmHandlerProcess>:
{
 8008438:	b500      	push	{lr}
 800843a:	b083      	sub	sp, #12
    LoRaMacProcess( );
 800843c:	f002 ffc0 	bl	800b3c0 <LoRaMacProcess>
    LmHandlerPackagesProcess( );
 8008440:	f7ff fe80 	bl	8008144 <LmHandlerPackagesProcess>
    if( LmHandlerPackageIsTxPending( ) == true )
 8008444:	f7ff fe66 	bl	8008114 <LmHandlerPackageIsTxPending>
 8008448:	b910      	cbnz	r0, 8008450 <LmHandlerProcess+0x18>
    if( IsUplinkTxPending == true )
 800844a:	4b0b      	ldr	r3, [pc, #44]	; (8008478 <LmHandlerProcess+0x40>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b913      	cbnz	r3, 8008456 <LmHandlerProcess+0x1e>
}
 8008450:	b003      	add	sp, #12
 8008452:	f85d fb04 	ldr.w	pc, [sp], #4
        LmHandlerAppData_t appData =
 8008456:	2200      	movs	r2, #0
 8008458:	f88d 2000 	strb.w	r2, [sp]
 800845c:	f88d 2001 	strb.w	r2, [sp, #1]
 8008460:	9201      	str	r2, [sp, #4]
        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 8008462:	4b06      	ldr	r3, [pc, #24]	; (800847c <LmHandlerProcess+0x44>)
 8008464:	78d9      	ldrb	r1, [r3, #3]
 8008466:	4668      	mov	r0, sp
 8008468:	f7ff ff60 	bl	800832c <LmHandlerSend>
 800846c:	2800      	cmp	r0, #0
 800846e:	d1ef      	bne.n	8008450 <LmHandlerProcess+0x18>
            IsUplinkTxPending = false;
 8008470:	4b01      	ldr	r3, [pc, #4]	; (8008478 <LmHandlerProcess+0x40>)
 8008472:	2200      	movs	r2, #0
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e7eb      	b.n	8008450 <LmHandlerProcess+0x18>
 8008478:	2000077c 	.word	0x2000077c
 800847c:	20000798 	.word	0x20000798

08008480 <LmHandlerRequestClass>:
{
 8008480:	b510      	push	{r4, lr}
 8008482:	b08a      	sub	sp, #40	; 0x28
 8008484:	4604      	mov	r4, r0
    if( LoRaMacIsBusy() == true )
 8008486:	f002 ff71 	bl	800b36c <LoRaMacIsBusy>
 800848a:	bbb0      	cbnz	r0, 80084fa <LmHandlerRequestClass+0x7a>
    if( LmHandlerJoinStatus() != LORAMAC_HANDLER_SET )
 800848c:	f7ff ff26 	bl	80082dc <LmHandlerJoinStatus>
 8008490:	2801      	cmp	r0, #1
 8008492:	d135      	bne.n	8008500 <LmHandlerRequestClass+0x80>
    mibReq.Type = MIB_DEVICE_CLASS;
 8008494:	2300      	movs	r3, #0
 8008496:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800849a:	4668      	mov	r0, sp
 800849c:	f003 fa82 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
 80084a0:	bb88      	cbnz	r0, 8008506 <LmHandlerRequestClass+0x86>
    currentClass = mibReq.Param.Class;
 80084a2:	f89d 3004 	ldrb.w	r3, [sp, #4]
    if( currentClass != newClass )
 80084a6:	42a3      	cmp	r3, r4
 80084a8:	d030      	beq.n	800850c <LmHandlerRequestClass+0x8c>
        switch( newClass )
 80084aa:	2c01      	cmp	r4, #1
 80084ac:	d030      	beq.n	8008510 <LmHandlerRequestClass+0x90>
 80084ae:	2c02      	cmp	r4, #2
 80084b0:	d014      	beq.n	80084dc <LmHandlerRequestClass+0x5c>
 80084b2:	b114      	cbz	r4, 80084ba <LmHandlerRequestClass+0x3a>
 80084b4:	2000      	movs	r0, #0
}
 80084b6:	b00a      	add	sp, #40	; 0x28
 80084b8:	bd10      	pop	{r4, pc}
                    if( currentClass != CLASS_A )
 80084ba:	b90b      	cbnz	r3, 80084c0 <LmHandlerRequestClass+0x40>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80084bc:	2000      	movs	r0, #0
 80084be:	e7fa      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                        mibReq.Param.Class = newClass;
 80084c0:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80084c4:	4668      	mov	r0, sp
 80084c6:	f003 fbe1 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 80084ca:	bb20      	cbnz	r0, 8008516 <LmHandlerRequestClass+0x96>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80084cc:	4b18      	ldr	r3, [pc, #96]	; (8008530 <LmHandlerRequestClass+0xb0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084d2:	b31b      	cbz	r3, 800851c <LmHandlerRequestClass+0x9c>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80084d4:	4620      	mov	r0, r4
 80084d6:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80084d8:	2000      	movs	r0, #0
 80084da:	e7ec      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                    if( currentClass != CLASS_A )
 80084dc:	bb03      	cbnz	r3, 8008520 <LmHandlerRequestClass+0xa0>
                        mibReq.Param.Class = newClass;
 80084de:	f88d 4004 	strb.w	r4, [sp, #4]
                        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80084e2:	4668      	mov	r0, sp
 80084e4:	f003 fbd2 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 80084e8:	b9e8      	cbnz	r0, 8008526 <LmHandlerRequestClass+0xa6>
                            if( LmHandlerCallbacks->OnClassChange != NULL )
 80084ea:	4b11      	ldr	r3, [pc, #68]	; (8008530 <LmHandlerRequestClass+0xb0>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084f0:	b1e3      	cbz	r3, 800852c <LmHandlerRequestClass+0xac>
                                LmHandlerCallbacks->OnClassChange( newClass );
 80084f2:	4620      	mov	r0, r4
 80084f4:	4798      	blx	r3
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 80084f6:	2000      	movs	r0, #0
 80084f8:	e7dd      	b.n	80084b6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_BUSY_ERROR;
 80084fa:	f06f 0001 	mvn.w	r0, #1
 80084fe:	e7da      	b.n	80084b6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 8008500:	f06f 0002 	mvn.w	r0, #2
 8008504:	e7d7      	b.n	80084b6 <LmHandlerRequestClass+0x36>
        return LORAMAC_HANDLER_ERROR;
 8008506:	f04f 30ff 	mov.w	r0, #4294967295
 800850a:	e7d4      	b.n	80084b6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800850c:	2000      	movs	r0, #0
 800850e:	e7d2      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	e7cf      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008516:	f04f 30ff 	mov.w	r0, #4294967295
 800851a:	e7cc      	b.n	80084b6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800851c:	2000      	movs	r0, #0
 800851e:	e7ca      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e7c7      	b.n	80084b6 <LmHandlerRequestClass+0x36>
                            errorStatus = LORAMAC_HANDLER_ERROR;
 8008526:	f04f 30ff 	mov.w	r0, #4294967295
 800852a:	e7c4      	b.n	80084b6 <LmHandlerRequestClass+0x36>
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800852c:	2000      	movs	r0, #0
 800852e:	e7c2      	b.n	80084b6 <LmHandlerRequestClass+0x36>
 8008530:	20000780 	.word	0x20000780

08008534 <LmHandlerGetCurrentClass>:
    if( deviceClass == NULL )
 8008534:	b170      	cbz	r0, 8008554 <LmHandlerGetCurrentClass+0x20>
{
 8008536:	b510      	push	{r4, lr}
 8008538:	b08a      	sub	sp, #40	; 0x28
 800853a:	4604      	mov	r4, r0
    mibReq.Type = MIB_DEVICE_CLASS;
 800853c:	2300      	movs	r3, #0
 800853e:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 8008542:	4668      	mov	r0, sp
 8008544:	f003 fa2e 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
 8008548:	b938      	cbnz	r0, 800855a <LmHandlerGetCurrentClass+0x26>
    *deviceClass = mibReq.Param.Class;
 800854a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800854e:	7023      	strb	r3, [r4, #0]
}
 8008550:	b00a      	add	sp, #40	; 0x28
 8008552:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008558:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800855a:	f04f 30ff 	mov.w	r0, #4294967295
 800855e:	e7f7      	b.n	8008550 <LmHandlerGetCurrentClass+0x1c>

08008560 <McpsIndication>:
{
 8008560:	b510      	push	{r4, lr}
 8008562:	b084      	sub	sp, #16
    DeviceClass_t deviceClass = CLASS_A;
 8008564:	2300      	movs	r3, #0
 8008566:	f88d 3007 	strb.w	r3, [sp, #7]
    RxParams.IsMcpsIndication = 1;
 800856a:	4a1d      	ldr	r2, [pc, #116]	; (80085e0 <McpsIndication+0x80>)
 800856c:	2301      	movs	r3, #1
 800856e:	7013      	strb	r3, [r2, #0]
    RxParams.Status = mcpsIndication->Status;
 8008570:	7843      	ldrb	r3, [r0, #1]
 8008572:	7053      	strb	r3, [r2, #1]
    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 8008574:	2b00      	cmp	r3, #0
 8008576:	d131      	bne.n	80085dc <McpsIndication+0x7c>
 8008578:	4604      	mov	r4, r0
    RxParams.Datarate = mcpsIndication->RxDatarate;
 800857a:	f990 2004 	ldrsb.w	r2, [r0, #4]
 800857e:	4b18      	ldr	r3, [pc, #96]	; (80085e0 <McpsIndication+0x80>)
 8008580:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 8008582:	f9b1 2000 	ldrsh.w	r2, [r1]
 8008586:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 8008588:	f991 2002 	ldrsb.w	r2, [r1, #2]
 800858c:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800858e:	78ca      	ldrb	r2, [r1, #3]
 8008590:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 8008592:	6902      	ldr	r2, [r0, #16]
 8008594:	60da      	str	r2, [r3, #12]
    appData.Port = mcpsIndication->Port;
 8008596:	78c3      	ldrb	r3, [r0, #3]
 8008598:	f88d 3008 	strb.w	r3, [sp, #8]
    appData.BufferSize = mcpsIndication->BufferSize;
 800859c:	7b03      	ldrb	r3, [r0, #12]
 800859e:	f88d 3009 	strb.w	r3, [sp, #9]
    appData.Buffer = mcpsIndication->Buffer;
 80085a2:	6883      	ldr	r3, [r0, #8]
 80085a4:	9303      	str	r3, [sp, #12]
    if( LmHandlerCallbacks->OnRxData != NULL )
 80085a6:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <McpsIndication+0x84>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	b113      	cbz	r3, 80085b4 <McpsIndication+0x54>
        LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 80085ae:	490c      	ldr	r1, [pc, #48]	; (80085e0 <McpsIndication+0x80>)
 80085b0:	a802      	add	r0, sp, #8
 80085b2:	4798      	blx	r3
    if( ( LmHandlerCallbacks->OnSysTimeUpdate != NULL ) && ( mcpsIndication->DeviceTimeAnsReceived == true ) )
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <McpsIndication+0x84>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	b113      	cbz	r3, 80085c2 <McpsIndication+0x62>
 80085bc:	7e22      	ldrb	r2, [r4, #24]
 80085be:	b102      	cbz	r2, 80085c2 <McpsIndication+0x62>
        LmHandlerCallbacks->OnSysTimeUpdate( );
 80085c0:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 80085c2:	4621      	mov	r1, r4
 80085c4:	2001      	movs	r0, #1
 80085c6:	f7ff fd23 	bl	8008010 <LmHandlerPackagesNotify>
    LmHandlerGetCurrentClass( &deviceClass );
 80085ca:	f10d 0007 	add.w	r0, sp, #7
 80085ce:	f7ff ffb1 	bl	8008534 <LmHandlerGetCurrentClass>
    if( mcpsIndication->IsUplinkTxPending != 0 )
 80085d2:	7963      	ldrb	r3, [r4, #5]
 80085d4:	b113      	cbz	r3, 80085dc <McpsIndication+0x7c>
        IsUplinkTxPending = true;
 80085d6:	4b04      	ldr	r3, [pc, #16]	; (80085e8 <McpsIndication+0x88>)
 80085d8:	2201      	movs	r2, #1
 80085da:	701a      	strb	r2, [r3, #0]
}
 80085dc:	b004      	add	sp, #16
 80085de:	bd10      	pop	{r4, pc}
 80085e0:	20000090 	.word	0x20000090
 80085e4:	20000780 	.word	0x20000780
 80085e8:	2000077c 	.word	0x2000077c

080085ec <LmHandlerGetTxDatarate>:
    if( txDatarate == NULL )
 80085ec:	b180      	cbz	r0, 8008610 <LmHandlerGetTxDatarate+0x24>
{
 80085ee:	b510      	push	{r4, lr}
 80085f0:	b08a      	sub	sp, #40	; 0x28
 80085f2:	4604      	mov	r4, r0
    mibGet.Type = MIB_CHANNELS_DATARATE;
 80085f4:	2320      	movs	r3, #32
 80085f6:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK )
 80085fa:	4668      	mov	r0, sp
 80085fc:	f003 f9d2 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
 8008600:	b948      	cbnz	r0, 8008616 <LmHandlerGetTxDatarate+0x2a>
    *txDatarate = mibGet.Param.ChannelsDatarate;
 8008602:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8008606:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 8008608:	4a04      	ldr	r2, [pc, #16]	; (800861c <LmHandlerGetTxDatarate+0x30>)
 800860a:	7113      	strb	r3, [r2, #4]
}
 800860c:	b00a      	add	sp, #40	; 0x28
 800860e:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008610:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008614:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008616:	f04f 30ff 	mov.w	r0, #4294967295
 800861a:	e7f7      	b.n	800860c <LmHandlerGetTxDatarate+0x20>
 800861c:	20000798 	.word	0x20000798

08008620 <LmHandlerSetSystemMaxRxError>:
{
 8008620:	b500      	push	{lr}
 8008622:	b08b      	sub	sp, #44	; 0x2c
    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 8008624:	2323      	movs	r3, #35	; 0x23
 8008626:	f88d 3000 	strb.w	r3, [sp]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800862a:	9001      	str	r0, [sp, #4]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800862c:	4668      	mov	r0, sp
 800862e:	f003 fb2d 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 8008632:	b910      	cbnz	r0, 800863a <LmHandlerSetSystemMaxRxError+0x1a>
}
 8008634:	b00b      	add	sp, #44	; 0x2c
 8008636:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 800863a:	f04f 30ff 	mov.w	r0, #4294967295
 800863e:	e7f9      	b.n	8008634 <LmHandlerSetSystemMaxRxError+0x14>

08008640 <LmHandlerConfigure>:
{
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	b08e      	sub	sp, #56	; 0x38
 8008644:	4601      	mov	r1, r0
    memcpy1( ( void * )&LmHandlerParams, ( const void * )handlerParams, sizeof( LmHandlerParams_t ) );
 8008646:	4c6d      	ldr	r4, [pc, #436]	; (80087fc <LmHandlerConfigure+0x1bc>)
 8008648:	2218      	movs	r2, #24
 800864a:	4620      	mov	r0, r4
 800864c:	f008 ff55 	bl	80114fa <memcpy1>
    IsUplinkTxPending = false;
 8008650:	4b6b      	ldr	r3, [pc, #428]	; (8008800 <LmHandlerConfigure+0x1c0>)
 8008652:	2200      	movs	r2, #0
 8008654:	701a      	strb	r2, [r3, #0]
    loraInfo = LoraInfo_GetPtr();
 8008656:	f7fa fb97 	bl	8002d88 <LoraInfo_GetPtr>
    if( 0U == ( ( 1 << ( LmHandlerParams.ActiveRegion ) ) & ( loraInfo->Region ) ) )
 800865a:	7822      	ldrb	r2, [r4, #0]
 800865c:	2301      	movs	r3, #1
 800865e:	4093      	lsls	r3, r2
 8008660:	6841      	ldr	r1, [r0, #4]
 8008662:	420b      	tst	r3, r1
 8008664:	d106      	bne.n	8008674 <LmHandlerConfigure+0x34>
        MW_LOG( TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n" );
 8008666:	4b67      	ldr	r3, [pc, #412]	; (8008804 <LmHandlerConfigure+0x1c4>)
 8008668:	2201      	movs	r2, #1
 800866a:	2100      	movs	r1, #0
 800866c:	4608      	mov	r0, r1
 800866e:	f00a fe23 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        while( 1 ) {} /* error: Region is not defined in the MW */
 8008672:	e7fe      	b.n	8008672 <LmHandlerConfigure+0x32>
    if( LoRaMacInitialization( &LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion ) != LORAMAC_STATUS_OK )
 8008674:	4964      	ldr	r1, [pc, #400]	; (8008808 <LmHandlerConfigure+0x1c8>)
 8008676:	4865      	ldr	r0, [pc, #404]	; (800880c <LmHandlerConfigure+0x1cc>)
 8008678:	f002 feea 	bl	800b450 <LoRaMacInitialization>
 800867c:	2800      	cmp	r0, #0
 800867e:	f040 80b7 	bne.w	80087f0 <LmHandlerConfigure+0x1b0>
    mibReq.Type = MIB_NVM_CTXS;
 8008682:	2327      	movs	r3, #39	; 0x27
 8008684:	f88d 3010 	strb.w	r3, [sp, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 8008688:	a804      	add	r0, sp, #16
 800868a:	f003 faff 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 800868e:	2800      	cmp	r0, #0
 8008690:	d17c      	bne.n	800878c <LmHandlerConfigure+0x14c>
        CtxRestoreDone = true;
 8008692:	4b5f      	ldr	r3, [pc, #380]	; (8008810 <LmHandlerConfigure+0x1d0>)
 8008694:	2201      	movs	r2, #1
 8008696:	701a      	strb	r2, [r3, #0]
    if( CtxRestoreDone == true )
 8008698:	4b5d      	ldr	r3, [pc, #372]	; (8008810 <LmHandlerConfigure+0x1d0>)
 800869a:	781b      	ldrb	r3, [r3, #0]
 800869c:	2b00      	cmp	r3, #0
 800869e:	f000 809e 	beq.w	80087de <LmHandlerConfigure+0x19e>
        if( LmHandlerCallbacks->OnNvmDataChange != NULL )
 80086a2:	4b5c      	ldr	r3, [pc, #368]	; (8008814 <LmHandlerConfigure+0x1d4>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	69db      	ldr	r3, [r3, #28]
 80086a8:	b10b      	cbz	r3, 80086ae <LmHandlerConfigure+0x6e>
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 80086aa:	2000      	movs	r0, #0
 80086ac:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80086ae:	2327      	movs	r3, #39	; 0x27
 80086b0:	f88d 3010 	strb.w	r3, [sp, #16]
        LoRaMacMibGetRequestConfirm( &mibReq );
 80086b4:	a804      	add	r0, sp, #16
 80086b6:	f003 f975 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
        LoRaMacNvmData_t *current_nvm = mibReq.Param.Contexts;
 80086ba:	9a05      	ldr	r2, [sp, #20]
        LmHandlerParams.ActiveRegion = current_nvm->MacGroup2.Region;
 80086bc:	f892 1048 	ldrb.w	r1, [r2, #72]	; 0x48
 80086c0:	4b4e      	ldr	r3, [pc, #312]	; (80087fc <LmHandlerConfigure+0x1bc>)
 80086c2:	7019      	strb	r1, [r3, #0]
        LmHandlerParams.DefaultClass = current_nvm->MacGroup2.DeviceClass;
 80086c4:	f892 1118 	ldrb.w	r1, [r2, #280]	; 0x118
 80086c8:	7059      	strb	r1, [r3, #1]
        LmHandlerParams.AdrEnable = current_nvm->MacGroup2.AdrCtrlOn;
 80086ca:	f892 211a 	ldrb.w	r2, [r2, #282]	; 0x11a
 80086ce:	709a      	strb	r2, [r3, #2]
    if( SecureElementInitMcuID( LoRaMacCallbacks.GetUniqueId, LoRaMacCallbacks.GetDevAddress ) != SECURE_ELEMENT_SUCCESS )
 80086d0:	4b4d      	ldr	r3, [pc, #308]	; (8008808 <LmHandlerConfigure+0x1c8>)
 80086d2:	68d9      	ldr	r1, [r3, #12]
 80086d4:	6898      	ldr	r0, [r3, #8]
 80086d6:	f008 fe23 	bl	8011320 <SecureElementInitMcuID>
 80086da:	2800      	cmp	r0, #0
 80086dc:	f040 808b 	bne.w	80087f6 <LmHandlerConfigure+0x1b6>
    mibReq.Type = MIB_DEV_ADDR;
 80086e0:	2306      	movs	r3, #6
 80086e2:	f88d 3010 	strb.w	r3, [sp, #16]
    LoRaMacMibGetRequestConfirm( &mibReq );
 80086e6:	a804      	add	r0, sp, #16
 80086e8:	f003 f95c 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80086ec:	4c4a      	ldr	r4, [pc, #296]	; (8008818 <LmHandlerConfigure+0x1d8>)
 80086ee:	9b05      	ldr	r3, [sp, #20]
 80086f0:	6163      	str	r3, [r4, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 80086f2:	a804      	add	r0, sp, #16
 80086f4:	f003 faca 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_DEV_EUI;
 80086f8:	2302      	movs	r3, #2
 80086fa:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.DevEui = CommissioningParams.DevEui;
 80086fe:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008700:	a804      	add	r0, sp, #16
 8008702:	f003 f94f 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
    mibReq.Type = MIB_JOIN_EUI;
 8008706:	2303      	movs	r3, #3
 8008708:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.JoinEui = CommissioningParams.JoinEui;
 800870c:	3408      	adds	r4, #8
 800870e:	9405      	str	r4, [sp, #20]
    LoRaMacMibGetRequestConfirm( &mibReq );
 8008710:	a804      	add	r0, sp, #16
 8008712:	f003 f947 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
    SecureElementPrintKeys();
 8008716:	f008 fe9d 	bl	8011454 <SecureElementPrintKeys>
    mibReq.Type = MIB_PUBLIC_NETWORK;
 800871a:	260f      	movs	r6, #15
 800871c:	f88d 6010 	strb.w	r6, [sp, #16]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 8008720:	2301      	movs	r3, #1
 8008722:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008726:	a804      	add	r0, sp, #16
 8008728:	f003 fab0 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_REPEATER_SUPPORT;
 800872c:	2310      	movs	r3, #16
 800872e:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 8008732:	2500      	movs	r5, #0
 8008734:	f88d 5014 	strb.w	r5, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 8008738:	eb0d 0003 	add.w	r0, sp, r3
 800873c:	f003 faa6 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_ADR;
 8008740:	2304      	movs	r3, #4
 8008742:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 8008746:	4c2d      	ldr	r4, [pc, #180]	; (80087fc <LmHandlerConfigure+0x1bc>)
 8008748:	78a3      	ldrb	r3, [r4, #2]
 800874a:	f88d 3014 	strb.w	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800874e:	a804      	add	r0, sp, #16
 8008750:	f003 fa9c 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    mibReq.Type = MIB_RXB_C_TIMEOUT;
 8008754:	233a      	movs	r3, #58	; 0x3a
 8008756:	f88d 3010 	strb.w	r3, [sp, #16]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800875a:	6963      	ldr	r3, [r4, #20]
 800875c:	9305      	str	r3, [sp, #20]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800875e:	a804      	add	r0, sp, #16
 8008760:	f003 fa94 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8008764:	f88d 6008 	strb.w	r6, [sp, #8]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 8008768:	a902      	add	r1, sp, #8
 800876a:	7820      	ldrb	r0, [r4, #0]
 800876c:	f004 fff2 	bl	800d754 <RegionGetPhyParam>
 8008770:	9001      	str	r0, [sp, #4]
    LmHandlerParams.DutyCycleEnabled = ( bool ) phyParam.Value;
 8008772:	1b43      	subs	r3, r0, r5
 8008774:	bf18      	it	ne
 8008776:	2301      	movne	r3, #1
 8008778:	71e3      	strb	r3, [r4, #7]
    LmHandlerSetSystemMaxRxError( 20 );
 800877a:	2014      	movs	r0, #20
 800877c:	f7ff ff50 	bl	8008620 <LmHandlerSetSystemMaxRxError>
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 8008780:	79e0      	ldrb	r0, [r4, #7]
 8008782:	f003 ff29 	bl	800c5d8 <LoRaMacTestSetDutyCycleOn>
    return LORAMAC_HANDLER_SUCCESS;
 8008786:	4628      	mov	r0, r5
}
 8008788:	b00e      	add	sp, #56	; 0x38
 800878a:	bd70      	pop	{r4, r5, r6, pc}
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800878c:	2328      	movs	r3, #40	; 0x28
 800878e:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LmHandlerCallbacks->OnRestoreContextRequest != NULL )
 8008792:	4b20      	ldr	r3, [pc, #128]	; (8008814 <LmHandlerConfigure+0x1d4>)
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	b14b      	cbz	r3, 80087ae <LmHandlerConfigure+0x16e>
            LoRaMacMibGetRequestConfirm( &mibReq );
 800879a:	a804      	add	r0, sp, #16
 800879c:	f003 f902 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest( mibReq.Param.BackupContexts, sizeof( LoRaMacNvmData_t ) );
 80087a0:	4b1c      	ldr	r3, [pc, #112]	; (8008814 <LmHandlerConfigure+0x1d4>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	691b      	ldr	r3, [r3, #16]
 80087a6:	f240 51cc 	movw	r1, #1484	; 0x5cc
 80087aa:	9805      	ldr	r0, [sp, #20]
 80087ac:	4798      	blx	r3
        mibReq.Type = MIB_NVM_CTXS;
 80087ae:	2327      	movs	r3, #39	; 0x27
 80087b0:	f88d 3010 	strb.w	r3, [sp, #16]
        if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 80087b4:	a804      	add	r0, sp, #16
 80087b6:	f003 fa69 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 80087ba:	2800      	cmp	r0, #0
 80087bc:	f47f af6c 	bne.w	8008698 <LmHandlerConfigure+0x58>
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 80087c0:	2301      	movs	r3, #1
 80087c2:	f88d 3010 	strb.w	r3, [sp, #16]
            LoRaMacMibGetRequestConfirm( &mibReq );
 80087c6:	a804      	add	r0, sp, #16
 80087c8:	f003 f8ec 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
            if( mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE )
 80087cc:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	f43f af61 	beq.w	8008698 <LmHandlerConfigure+0x58>
                CtxRestoreDone = true;
 80087d6:	4b0e      	ldr	r3, [pc, #56]	; (8008810 <LmHandlerConfigure+0x1d0>)
 80087d8:	2201      	movs	r2, #1
 80087da:	701a      	strb	r2, [r3, #0]
 80087dc:	e75c      	b.n	8008698 <LmHandlerConfigure+0x58>
        mibReq.Type = MIB_NET_ID;
 80087de:	2305      	movs	r3, #5
 80087e0:	f88d 3010 	strb.w	r3, [sp, #16]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 80087e4:	2300      	movs	r3, #0
 80087e6:	9305      	str	r3, [sp, #20]
        LoRaMacMibSetRequestConfirm( &mibReq );
 80087e8:	a804      	add	r0, sp, #16
 80087ea:	f003 fa4f 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
 80087ee:	e76f      	b.n	80086d0 <LmHandlerConfigure+0x90>
        return LORAMAC_HANDLER_ERROR;
 80087f0:	f04f 30ff 	mov.w	r0, #4294967295
 80087f4:	e7c8      	b.n	8008788 <LmHandlerConfigure+0x148>
        return LORAMAC_HANDLER_ERROR;
 80087f6:	f04f 30ff 	mov.w	r0, #4294967295
 80087fa:	e7c5      	b.n	8008788 <LmHandlerConfigure+0x148>
 80087fc:	20000798 	.word	0x20000798
 8008800:	2000077c 	.word	0x2000077c
 8008804:	080145e0 	.word	0x080145e0
 8008808:	200007c0 	.word	0x200007c0
 800880c:	200007d8 	.word	0x200007d8
 8008810:	20000774 	.word	0x20000774
 8008814:	20000780 	.word	0x20000780
 8008818:	2000075c 	.word	0x2000075c

0800881c <LmHandlerPackageRegister>:
{
 800881c:	b530      	push	{r4, r5, lr}
 800881e:	b083      	sub	sp, #12
 8008820:	460d      	mov	r5, r1
    LmhPackage_t *package = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	9301      	str	r3, [sp, #4]
    switch( id )
 8008826:	4604      	mov	r4, r0
 8008828:	b9d8      	cbnz	r0, 8008862 <LmHandlerPackageRegister+0x46>
                package = LmhpCompliancePackageFactory( );
 800882a:	f000 fc1b 	bl	8009064 <LmhpCompliancePackageFactory>
 800882e:	9001      	str	r0, [sp, #4]
    if( package != NULL )
 8008830:	9b01      	ldr	r3, [sp, #4]
 8008832:	b1f3      	cbz	r3, 8008872 <LmHandlerPackageRegister+0x56>
        LmHandlerPackages[id] = package;
 8008834:	4a10      	ldr	r2, [pc, #64]	; (8008878 <LmHandlerPackageRegister+0x5c>)
 8008836:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800883a:	4a10      	ldr	r2, [pc, #64]	; (800887c <LmHandlerPackageRegister+0x60>)
 800883c:	629a      	str	r2, [r3, #40]	; 0x28
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800883e:	4a10      	ldr	r2, [pc, #64]	; (8008880 <LmHandlerPackageRegister+0x64>)
 8008840:	6812      	ldr	r2, [r2, #0]
 8008842:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8008844:	6319      	str	r1, [r3, #48]	; 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 8008846:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8008848:	6359      	str	r1, [r3, #52]	; 0x34
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800884a:	490e      	ldr	r1, [pc, #56]	; (8008884 <LmHandlerPackageRegister+0x68>)
 800884c:	62d9      	str	r1, [r3, #44]	; 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800884e:	6992      	ldr	r2, [r2, #24]
 8008850:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 8008852:	685b      	ldr	r3, [r3, #4]
 8008854:	22f2      	movs	r2, #242	; 0xf2
 8008856:	490c      	ldr	r1, [pc, #48]	; (8008888 <LmHandlerPackageRegister+0x6c>)
 8008858:	4628      	mov	r0, r5
 800885a:	4798      	blx	r3
        return LORAMAC_HANDLER_SUCCESS;
 800885c:	2000      	movs	r0, #0
}
 800885e:	b003      	add	sp, #12
 8008860:	bd30      	pop	{r4, r5, pc}
                if( LORAMAC_HANDLER_SUCCESS != LmhpPackagesRegister( id, &package ) )
 8008862:	a901      	add	r1, sp, #4
 8008864:	f000 fc04 	bl	8009070 <LmhpPackagesRegister>
 8008868:	2800      	cmp	r0, #0
 800886a:	d0e1      	beq.n	8008830 <LmHandlerPackageRegister+0x14>
                    return LORAMAC_HANDLER_ERROR;
 800886c:	f04f 30ff 	mov.w	r0, #4294967295
 8008870:	e7f5      	b.n	800885e <LmHandlerPackageRegister+0x42>
        return LORAMAC_HANDLER_ERROR;
 8008872:	f04f 30ff 	mov.w	r0, #4294967295
 8008876:	e7f2      	b.n	800885e <LmHandlerPackageRegister+0x42>
 8008878:	20000784 	.word	0x20000784
 800887c:	080081b9 	.word	0x080081b9
 8008880:	20000780 	.word	0x20000780
 8008884:	080082a9 	.word	0x080082a9
 8008888:	20000668 	.word	0x20000668

0800888c <LmHandlerInit>:
{
 800888c:	b500      	push	{lr}
 800888e:	b083      	sub	sp, #12
 8008890:	9101      	str	r1, [sp, #4]
    LmHandlerCallbacks = handlerCallbacks;
 8008892:	4b19      	ldr	r3, [pc, #100]	; (80088f8 <LmHandlerInit+0x6c>)
 8008894:	6018      	str	r0, [r3, #0]
    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 8008896:	4b19      	ldr	r3, [pc, #100]	; (80088fc <LmHandlerInit+0x70>)
 8008898:	4a19      	ldr	r2, [pc, #100]	; (8008900 <LmHandlerInit+0x74>)
 800889a:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800889c:	4a19      	ldr	r2, [pc, #100]	; (8008904 <LmHandlerInit+0x78>)
 800889e:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 80088a0:	4a19      	ldr	r2, [pc, #100]	; (8008908 <LmHandlerInit+0x7c>)
 80088a2:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 80088a4:	4a19      	ldr	r2, [pc, #100]	; (800890c <LmHandlerInit+0x80>)
 80088a6:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 80088a8:	6802      	ldr	r2, [r0, #0]
 80088aa:	4b19      	ldr	r3, [pc, #100]	; (8008910 <LmHandlerInit+0x84>)
 80088ac:	601a      	str	r2, [r3, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 80088ae:	6842      	ldr	r2, [r0, #4]
 80088b0:	605a      	str	r2, [r3, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 80088b2:	6882      	ldr	r2, [r0, #8]
 80088b4:	609a      	str	r2, [r3, #8]
    LoRaMacCallbacks.GetDevAddress = LmHandlerCallbacks->GetDevAddr;
 80088b6:	68c2      	ldr	r2, [r0, #12]
 80088b8:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 80088ba:	4a16      	ldr	r2, [pc, #88]	; (8008914 <LmHandlerInit+0x88>)
 80088bc:	611a      	str	r2, [r3, #16]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 80088be:	6982      	ldr	r2, [r0, #24]
 80088c0:	615a      	str	r2, [r3, #20]
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 80088c2:	4b15      	ldr	r3, [pc, #84]	; (8008918 <LmHandlerInit+0x8c>)
 80088c4:	6019      	str	r1, [r3, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 80088c6:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80088c8:	605a      	str	r2, [r3, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerOnTxFrameCtrlChanged;
 80088ca:	4a14      	ldr	r2, [pc, #80]	; (800891c <LmHandlerInit+0x90>)
 80088cc:	609a      	str	r2, [r3, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerOnPingSlotPeriodicityChanged;
 80088ce:	4a14      	ldr	r2, [pc, #80]	; (8008920 <LmHandlerInit+0x94>)
 80088d0:	60da      	str	r2, [r3, #12]
    if( LmHandlerPackageRegister( PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams ) != LORAMAC_HANDLER_SUCCESS )
 80088d2:	4619      	mov	r1, r3
 80088d4:	2000      	movs	r0, #0
 80088d6:	f7ff ffa1 	bl	800881c <LmHandlerPackageRegister>
 80088da:	b930      	cbnz	r0, 80088ea <LmHandlerInit+0x5e>
    if( LmhpPackagesRegistrationInit( ( Version_t * )&fwVersion ) != LORAMAC_HANDLER_SUCCESS )
 80088dc:	a801      	add	r0, sp, #4
 80088de:	f000 fbc5 	bl	800906c <LmhpPackagesRegistrationInit>
 80088e2:	b928      	cbnz	r0, 80088f0 <LmHandlerInit+0x64>
}
 80088e4:	b003      	add	sp, #12
 80088e6:	f85d fb04 	ldr.w	pc, [sp], #4
        return LORAMAC_HANDLER_ERROR;
 80088ea:	f04f 30ff 	mov.w	r0, #4294967295
 80088ee:	e7f9      	b.n	80088e4 <LmHandlerInit+0x58>
        return LORAMAC_HANDLER_ERROR;
 80088f0:	f04f 30ff 	mov.w	r0, #4294967295
 80088f4:	e7f6      	b.n	80088e4 <LmHandlerInit+0x58>
 80088f6:	bf00      	nop
 80088f8:	20000780 	.word	0x20000780
 80088fc:	200007d8 	.word	0x200007d8
 8008900:	080080d1 	.word	0x080080d1
 8008904:	08008561 	.word	0x08008561
 8008908:	080089a5 	.word	0x080089a5
 800890c:	0800807d 	.word	0x0800807d
 8008910:	200007c0 	.word	0x200007c0
 8008914:	0800d6f5 	.word	0x0800d6f5
 8008918:	200007b0 	.word	0x200007b0
 800891c:	08008181 	.word	0x08008181
 8008920:	0800819d 	.word	0x0800819d

08008924 <LmHandlerGetVersion>:
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion( LmHandlerVersionType_t lmhType, uint32_t *featureVersion )
{
    if( featureVersion == NULL )
 8008924:	b161      	cbz	r1, 8008940 <LmHandlerGetVersion+0x1c>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    switch( lmhType )
 8008926:	b118      	cbz	r0, 8008930 <LmHandlerGetVersion+0xc>
 8008928:	2801      	cmp	r0, #1
 800892a:	d005      	beq.n	8008938 <LmHandlerGetVersion+0x14>
 800892c:	2000      	movs	r0, #0
 800892e:	4770      	bx	lr
    {
        case LORAMAC_HANDLER_L2_VERSION:
            *featureVersion = LORAMAC_VERSION;
 8008930:	4a05      	ldr	r2, [pc, #20]	; (8008948 <LmHandlerGetVersion+0x24>)
 8008932:	600a      	str	r2, [r1, #0]
            break;
        default:
            break;
    }

    return LORAMAC_HANDLER_SUCCESS;
 8008934:	2000      	movs	r0, #0
            break;
 8008936:	4770      	bx	lr
            *featureVersion = REGION_VERSION;
 8008938:	4a04      	ldr	r2, [pc, #16]	; (800894c <LmHandlerGetVersion+0x28>)
 800893a:	600a      	str	r2, [r1, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800893c:	2000      	movs	r0, #0
            break;
 800893e:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 8008940:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008944:	4770      	bx	lr
 8008946:	bf00      	nop
 8008948:	01000400 	.word	0x01000400
 800894c:	02010001 	.word	0x02010001

08008950 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop( void )
{
 8008950:	b508      	push	{r3, lr}
    if( LoRaMacDeInitialization() == LORAMAC_STATUS_OK )
 8008952:	f003 fe5f 	bl	800c614 <LoRaMacDeInitialization>
 8008956:	b900      	cbnz	r0, 800895a <LmHandlerStop+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8008958:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800895a:	f06f 0001 	mvn.w	r0, #1
 800895e:	e7fb      	b.n	8008958 <LmHandlerStop+0x8>

08008960 <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt( void )
{
 8008960:	b508      	push	{r3, lr}
    if( LoRaMacHalt() == LORAMAC_STATUS_OK )
 8008962:	f002 ff83 	bl	800b86c <LoRaMacHalt>
 8008966:	b900      	cbnz	r0, 800896a <LmHandlerHalt+0xa>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}
 8008968:	bd08      	pop	{r3, pc}
        return LORAMAC_HANDLER_BUSY_ERROR;
 800896a:	f06f 0001 	mvn.w	r0, #1
 800896e:	e7fb      	b.n	8008968 <LmHandlerHalt+0x8>

08008970 <LmHandlerGetTxPower>:
}

LmHandlerErrorStatus_t LmHandlerGetTxPower( int8_t *txPower )
{
    MibRequestConfirm_t mibReq;
    if( txPower == NULL )
 8008970:	b180      	cbz	r0, 8008994 <LmHandlerGetTxPower+0x24>
{
 8008972:	b510      	push	{r4, lr}
 8008974:	b08a      	sub	sp, #40	; 0x28
 8008976:	4604      	mov	r4, r0
    {
        return LORAMAC_HANDLER_ERROR;
    }

    mibReq.Type = MIB_CHANNELS_TX_POWER;
 8008978:	2321      	movs	r3, #33	; 0x21
 800897a:	f88d 3000 	strb.w	r3, [sp]
    if( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800897e:	4668      	mov	r0, sp
 8008980:	f003 f810 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
 8008984:	b948      	cbnz	r0, 800899a <LmHandlerGetTxPower+0x2a>
    {
        return LORAMAC_HANDLER_ERROR;
    }

    *txPower = mibReq.Param.ChannelsTxPower;
 8008986:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 800898a:	7023      	strb	r3, [r4, #0]
    LmHandlerParams.TxPower = *txPower;
 800898c:	4a04      	ldr	r2, [pc, #16]	; (80089a0 <LmHandlerGetTxPower+0x30>)
 800898e:	7153      	strb	r3, [r2, #5]
    return LORAMAC_HANDLER_SUCCESS;
}
 8008990:	b00a      	add	sp, #40	; 0x28
 8008992:	bd10      	pop	{r4, pc}
        return LORAMAC_HANDLER_ERROR;
 8008994:	f04f 30ff 	mov.w	r0, #4294967295
}
 8008998:	4770      	bx	lr
        return LORAMAC_HANDLER_ERROR;
 800899a:	f04f 30ff 	mov.w	r0, #4294967295
 800899e:	e7f7      	b.n	8008990 <LmHandlerGetTxPower+0x20>
 80089a0:	20000798 	.word	0x20000798

080089a4 <MlmeConfirm>:
{
 80089a4:	b510      	push	{r4, lr}
 80089a6:	b08a      	sub	sp, #40	; 0x28
 80089a8:	4604      	mov	r4, r0
    TxParams.IsMcpsConfirm = 0;
 80089aa:	4b2c      	ldr	r3, [pc, #176]	; (8008a5c <MlmeConfirm+0xb8>)
 80089ac:	2200      	movs	r2, #0
 80089ae:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 80089b0:	7842      	ldrb	r2, [r0, #1]
 80089b2:	705a      	strb	r2, [r3, #1]
    if( LmHandlerCallbacks->OnTxData != NULL )
 80089b4:	4b2a      	ldr	r3, [pc, #168]	; (8008a60 <MlmeConfirm+0xbc>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ba:	b10b      	cbz	r3, 80089c0 <MlmeConfirm+0x1c>
        LmHandlerCallbacks->OnTxData( &TxParams );
 80089bc:	4827      	ldr	r0, [pc, #156]	; (8008a5c <MlmeConfirm+0xb8>)
 80089be:	4798      	blx	r3
    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 80089c0:	4621      	mov	r1, r4
 80089c2:	2002      	movs	r0, #2
 80089c4:	f7ff fb24 	bl	8008010 <LmHandlerPackagesNotify>
    switch( mlmeConfirm->MlmeRequest )
 80089c8:	7823      	ldrb	r3, [r4, #0]
 80089ca:	2b05      	cmp	r3, #5
 80089cc:	d037      	beq.n	8008a3e <MlmeConfirm+0x9a>
 80089ce:	2b0b      	cmp	r3, #11
 80089d0:	d03d      	beq.n	8008a4e <MlmeConfirm+0xaa>
 80089d2:	2b01      	cmp	r3, #1
 80089d4:	d001      	beq.n	80089da <MlmeConfirm+0x36>
}
 80089d6:	b00a      	add	sp, #40	; 0x28
 80089d8:	bd10      	pop	{r4, pc}
                mibReq.Type = MIB_DEV_ADDR;
 80089da:	2306      	movs	r3, #6
 80089dc:	f88d 3000 	strb.w	r3, [sp]
                LoRaMacMibGetRequestConfirm( &mibReq );
 80089e0:	4668      	mov	r0, sp
 80089e2:	f002 ffdf 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
                if( SecureElementSetDevAddr( JoinParams.Mode, mibReq.Param.DevAddr ) == SECURE_ELEMENT_SUCCESS )
 80089e6:	9901      	ldr	r1, [sp, #4]
 80089e8:	4b1e      	ldr	r3, [pc, #120]	; (8008a64 <MlmeConfirm+0xc0>)
 80089ea:	79d8      	ldrb	r0, [r3, #7]
 80089ec:	f008 fc76 	bl	80112dc <SecureElementSetDevAddr>
 80089f0:	b910      	cbnz	r0, 80089f8 <MlmeConfirm+0x54>
                    CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 80089f2:	9a01      	ldr	r2, [sp, #4]
 80089f4:	4b1c      	ldr	r3, [pc, #112]	; (8008a68 <MlmeConfirm+0xc4>)
 80089f6:	615a      	str	r2, [r3, #20]
                LmHandlerGetTxDatarate( &JoinParams.Datarate );
 80089f8:	4c1a      	ldr	r4, [pc, #104]	; (8008a64 <MlmeConfirm+0xc0>)
 80089fa:	1d20      	adds	r0, r4, #4
 80089fc:	f7ff fdf6 	bl	80085ec <LmHandlerGetTxDatarate>
                LmHandlerGetTxPower( &JoinParams.TxPower );
 8008a00:	1d60      	adds	r0, r4, #5
 8008a02:	f7ff ffb5 	bl	8008970 <LmHandlerGetTxPower>
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008a06:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <MlmeConfirm+0xb8>)
 8008a08:	785b      	ldrb	r3, [r3, #1]
 8008a0a:	b18b      	cbz	r3, 8008a30 <MlmeConfirm+0x8c>
                    JoinParams.Status = LORAMAC_HANDLER_ERROR;
 8008a0c:	4b15      	ldr	r3, [pc, #84]	; (8008a64 <MlmeConfirm+0xc0>)
 8008a0e:	22ff      	movs	r2, #255	; 0xff
 8008a10:	719a      	strb	r2, [r3, #6]
                if( LmHandlerCallbacks->OnJoinRequest != NULL )
 8008a12:	4b13      	ldr	r3, [pc, #76]	; (8008a60 <MlmeConfirm+0xbc>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a18:	b10b      	cbz	r3, 8008a1e <MlmeConfirm+0x7a>
                    LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 8008a1a:	4812      	ldr	r0, [pc, #72]	; (8008a64 <MlmeConfirm+0xc0>)
 8008a1c:	4798      	blx	r3
                if( TxParams.Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008a1e:	4b0f      	ldr	r3, [pc, #60]	; (8008a5c <MlmeConfirm+0xb8>)
 8008a20:	785b      	ldrb	r3, [r3, #1]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d1d7      	bne.n	80089d6 <MlmeConfirm+0x32>
                    SecureElementPrintSessionKeys( JoinParams.Mode );
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <MlmeConfirm+0xc0>)
 8008a28:	79d8      	ldrb	r0, [r3, #7]
 8008a2a:	f008 fd25 	bl	8011478 <SecureElementPrintSessionKeys>
            break;
 8008a2e:	e7d2      	b.n	80089d6 <MlmeConfirm+0x32>
                    JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 8008a30:	2200      	movs	r2, #0
 8008a32:	71a2      	strb	r2, [r4, #6]
                    LmHandlerRequestClass( LmHandlerParams.DefaultClass );
 8008a34:	4b0d      	ldr	r3, [pc, #52]	; (8008a6c <MlmeConfirm+0xc8>)
 8008a36:	7858      	ldrb	r0, [r3, #1]
 8008a38:	f7ff fd22 	bl	8008480 <LmHandlerRequestClass>
 8008a3c:	e7e9      	b.n	8008a12 <MlmeConfirm+0x6e>
                RxParams.LinkCheck = true;
 8008a3e:	4b0c      	ldr	r3, [pc, #48]	; (8008a70 <MlmeConfirm+0xcc>)
 8008a40:	2201      	movs	r2, #1
 8008a42:	745a      	strb	r2, [r3, #17]
                RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 8008a44:	7a22      	ldrb	r2, [r4, #8]
 8008a46:	749a      	strb	r2, [r3, #18]
                RxParams.NbGateways = mlmeConfirm->NbGateways;
 8008a48:	7a62      	ldrb	r2, [r4, #9]
 8008a4a:	74da      	strb	r2, [r3, #19]
            break;
 8008a4c:	e7c3      	b.n	80089d6 <MlmeConfirm+0x32>
                if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 8008a4e:	7863      	ldrb	r3, [r4, #1]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d0c0      	beq.n	80089d6 <MlmeConfirm+0x32>
                    LmHandlerDeviceTimeReq( );
 8008a54:	f7ff fc28 	bl	80082a8 <LmHandlerDeviceTimeReq>
}
 8008a58:	e7bd      	b.n	80089d6 <MlmeConfirm+0x32>
 8008a5a:	bf00      	nop
 8008a5c:	200000a4 	.word	0x200000a4
 8008a60:	20000780 	.word	0x20000780
 8008a64:	20000084 	.word	0x20000084
 8008a68:	2000075c 	.word	0x2000075c
 8008a6c:	20000798 	.word	0x20000798
 8008a70:	20000090 	.word	0x20000090

08008a74 <LmHandlerNvmDataStore>:

    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 8008a74:	b510      	push	{r4, lr}
 8008a76:	b08a      	sub	sp, #40	; 0x28
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
    int32_t status = NVM_DATA_OK;

    lmhStatus = LmHandlerHalt();
 8008a78:	f7ff ff72 	bl	8008960 <LmHandlerHalt>

    if( lmhStatus == LORAMAC_HANDLER_SUCCESS )
 8008a7c:	4604      	mov	r4, r0
 8008a7e:	b148      	cbz	r0, 8008a94 <LmHandlerNvmDataStore+0x20>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
        }
    }

    if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) && ( LmHandlerCallbacks->OnNvmDataChange != NULL ) )
 8008a80:	b92c      	cbnz	r4, 8008a8e <LmHandlerNvmDataStore+0x1a>
 8008a82:	4b18      	ldr	r3, [pc, #96]	; (8008ae4 <LmHandlerNvmDataStore+0x70>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	69db      	ldr	r3, [r3, #28]
 8008a88:	b10b      	cbz	r3, 8008a8e <LmHandlerNvmDataStore+0x1a>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	4798      	blx	r3

    return lmhStatus;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 8008a8e:	4620      	mov	r0, r4
 8008a90:	b00a      	add	sp, #40	; 0x28
 8008a92:	bd10      	pop	{r4, pc}
        status = NvmDataMgmtStoreBegin();
 8008a94:	f004 fe36 	bl	800d704 <NvmDataMgmtStoreBegin>
        if( status == NVM_DATA_NO_UPDATED_DATA )
 8008a98:	f110 0f02 	cmn.w	r0, #2
 8008a9c:	d012      	beq.n	8008ac4 <LmHandlerNvmDataStore+0x50>
        else if( ( status != NVM_DATA_OK ) || ( LmHandlerCallbacks->OnStoreContextRequest == NULL ) )
 8008a9e:	b9d0      	cbnz	r0, 8008ad6 <LmHandlerNvmDataStore+0x62>
 8008aa0:	4b10      	ldr	r3, [pc, #64]	; (8008ae4 <LmHandlerNvmDataStore+0x70>)
 8008aa2:	681b      	ldr	r3, [r3, #0]
 8008aa4:	695b      	ldr	r3, [r3, #20]
 8008aa6:	b1cb      	cbz	r3, 8008adc <LmHandlerNvmDataStore+0x68>
            mibReq.Type = MIB_NVM_CTXS;
 8008aa8:	2327      	movs	r3, #39	; 0x27
 8008aaa:	f88d 3000 	strb.w	r3, [sp]
            LoRaMacMibGetRequestConfirm( &mibReq );
 8008aae:	4668      	mov	r0, sp
 8008ab0:	f002 ff78 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnStoreContextRequest( nvm, nvm_size );
 8008ab4:	4b0b      	ldr	r3, [pc, #44]	; (8008ae4 <LmHandlerNvmDataStore+0x70>)
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	695b      	ldr	r3, [r3, #20]
 8008aba:	f44f 61ba 	mov.w	r1, #1488	; 0x5d0
 8008abe:	9801      	ldr	r0, [sp, #4]
 8008ac0:	4798      	blx	r3
 8008ac2:	e001      	b.n	8008ac8 <LmHandlerNvmDataStore+0x54>
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 8008ac4:	f06f 0407 	mvn.w	r4, #7
        if( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 8008ac8:	f004 fe2c 	bl	800d724 <NvmDataMgmtStoreEnd>
 8008acc:	2800      	cmp	r0, #0
 8008ace:	d0d7      	beq.n	8008a80 <LmHandlerNvmDataStore+0xc>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008ad0:	f04f 34ff 	mov.w	r4, #4294967295
 8008ad4:	e7db      	b.n	8008a8e <LmHandlerNvmDataStore+0x1a>
            lmhStatus = LORAMAC_HANDLER_ERROR;
 8008ad6:	f04f 34ff 	mov.w	r4, #4294967295
 8008ada:	e7f5      	b.n	8008ac8 <LmHandlerNvmDataStore+0x54>
 8008adc:	f04f 34ff 	mov.w	r4, #4294967295
 8008ae0:	e7f2      	b.n	8008ac8 <LmHandlerNvmDataStore+0x54>
 8008ae2:	bf00      	nop
 8008ae4:	20000780 	.word	0x20000780

08008ae8 <LmhpComplianceIsInitialized>:
}

static bool LmhpComplianceIsInitialized( void )
{
    return ComplianceTestState.Initialized;
}
 8008ae8:	4b01      	ldr	r3, [pc, #4]	; (8008af0 <LmhpComplianceIsInitialized+0x8>)
 8008aea:	7818      	ldrb	r0, [r3, #0]
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	200007ec 	.word	0x200007ec

08008af4 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
    return ComplianceTestState.IsTxPending;
}
 8008af4:	4b01      	ldr	r3, [pc, #4]	; (8008afc <LmhpComplianceIsTxPending+0x8>)
 8008af6:	7858      	ldrb	r0, [r3, #1]
 8008af8:	4770      	bx	lr
 8008afa:	bf00      	nop
 8008afc:	200007ec 	.word	0x200007ec

08008b00 <LmhpComplianceOnMlmeConfirm>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008b00:	4770      	bx	lr

08008b02 <LmhpComplianceOnMlmeIndication>:
            }
#endif /* CLASS_B not available */
        default:
            break;
    }
}
 8008b02:	4770      	bx	lr

08008b04 <OnProcessTimer>:
    }
}
#endif /* CLASS_B not available */

static void OnProcessTimer( void *context )
{
 8008b04:	b508      	push	{r3, lr}
    if( ComplianceTestState.DataBufferSize != 0 )
 8008b06:	4b05      	ldr	r3, [pc, #20]	; (8008b1c <OnProcessTimer+0x18>)
 8008b08:	7a9b      	ldrb	r3, [r3, #10]
 8008b0a:	b113      	cbz	r3, 8008b12 <OnProcessTimer+0xe>
    {
        ComplianceTestState.IsTxPending = true;
 8008b0c:	4b03      	ldr	r3, [pc, #12]	; (8008b1c <OnProcessTimer+0x18>)
 8008b0e:	2201      	movs	r2, #1
 8008b10:	705a      	strb	r2, [r3, #1]
    }
    if( CompliancePackage.OnPackageProcessEvent != NULL )
 8008b12:	4b03      	ldr	r3, [pc, #12]	; (8008b20 <OnProcessTimer+0x1c>)
 8008b14:	695b      	ldr	r3, [r3, #20]
 8008b16:	b103      	cbz	r3, 8008b1a <OnProcessTimer+0x16>
    {
        CompliancePackage.OnPackageProcessEvent();
 8008b18:	4798      	blx	r3
    }
}
 8008b1a:	bd08      	pop	{r3, pc}
 8008b1c:	200007ec 	.word	0x200007ec
 8008b20:	200000c0 	.word	0x200000c0

08008b24 <LmhpComplianceOnMcpsIndication>:
    if( ComplianceTestState.Initialized == false )
 8008b24:	4b8c      	ldr	r3, [pc, #560]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f000 8205 	beq.w	8008f38 <LmhpComplianceOnMcpsIndication+0x414>
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 8008b2e:	78c3      	ldrb	r3, [r0, #3]
 8008b30:	b90b      	cbnz	r3, 8008b36 <LmhpComplianceOnMcpsIndication+0x12>
 8008b32:	7b83      	ldrb	r3, [r0, #14]
 8008b34:	b11b      	cbz	r3, 8008b3e <LmhpComplianceOnMcpsIndication+0x1a>
        ComplianceTestState.RxAppCnt++;
 8008b36:	4a88      	ldr	r2, [pc, #544]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008b38:	8a13      	ldrh	r3, [r2, #16]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	8213      	strh	r3, [r2, #16]
    if( mcpsIndication->RxData == false )
 8008b3e:	7b43      	ldrb	r3, [r0, #13]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	f000 81f9 	beq.w	8008f38 <LmhpComplianceOnMcpsIndication+0x414>
    if( mcpsIndication->Port != COMPLIANCE_PORT )
 8008b46:	78c3      	ldrb	r3, [r0, #3]
 8008b48:	2be0      	cmp	r3, #224	; 0xe0
 8008b4a:	f040 81f5 	bne.w	8008f38 <LmhpComplianceOnMcpsIndication+0x414>
{
 8008b4e:	b570      	push	{r4, r5, r6, lr}
 8008b50:	b096      	sub	sp, #88	; 0x58
    ComplianceTestState.DataBufferSize = 0;
 8008b52:	4b81      	ldr	r3, [pc, #516]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008b54:	2200      	movs	r2, #0
 8008b56:	729a      	strb	r2, [r3, #10]
    switch( mcpsIndication->Buffer[cmdIndex++] )
 8008b58:	6884      	ldr	r4, [r0, #8]
 8008b5a:	7823      	ldrb	r3, [r4, #0]
 8008b5c:	2b7f      	cmp	r3, #127	; 0x7f
 8008b5e:	f200 8093 	bhi.w	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
 8008b62:	e8df f013 	tbh	[pc, r3, lsl #1]
 8008b66:	0080      	.short	0x0080
 8008b68:	00a2009d 	.word	0x00a2009d
 8008b6c:	00b200aa 	.word	0x00b200aa
 8008b70:	00c600bf 	.word	0x00c600bf
 8008b74:	00f000df 	.word	0x00f000df
 8008b78:	0131011d 	.word	0x0131011d
 8008b7c:	00910091 	.word	0x00910091
 8008b80:	00910091 	.word	0x00910091
 8008b84:	00910091 	.word	0x00910091
 8008b88:	00910091 	.word	0x00910091
 8008b8c:	00910091 	.word	0x00910091
 8008b90:	00910091 	.word	0x00910091
 8008b94:	00910091 	.word	0x00910091
 8008b98:	00910091 	.word	0x00910091
 8008b9c:	00910091 	.word	0x00910091
 8008ba0:	00910091 	.word	0x00910091
 8008ba4:	01350091 	.word	0x01350091
 8008ba8:	0140013c 	.word	0x0140013c
 8008bac:	00910091 	.word	0x00910091
 8008bb0:	00910091 	.word	0x00910091
 8008bb4:	00910091 	.word	0x00910091
 8008bb8:	00910091 	.word	0x00910091
 8008bbc:	00910091 	.word	0x00910091
 8008bc0:	00910091 	.word	0x00910091
 8008bc4:	00910091 	.word	0x00910091
 8008bc8:	00910091 	.word	0x00910091
 8008bcc:	00910091 	.word	0x00910091
 8008bd0:	00910091 	.word	0x00910091
 8008bd4:	00910091 	.word	0x00910091
 8008bd8:	00910091 	.word	0x00910091
 8008bdc:	00910091 	.word	0x00910091
 8008be0:	00910091 	.word	0x00910091
 8008be4:	00910091 	.word	0x00910091
 8008be8:	00910091 	.word	0x00910091
 8008bec:	00910091 	.word	0x00910091
 8008bf0:	00910091 	.word	0x00910091
 8008bf4:	00910091 	.word	0x00910091
 8008bf8:	00910091 	.word	0x00910091
 8008bfc:	00910091 	.word	0x00910091
 8008c00:	00910091 	.word	0x00910091
 8008c04:	00910091 	.word	0x00910091
 8008c08:	00910091 	.word	0x00910091
 8008c0c:	00910091 	.word	0x00910091
 8008c10:	00910091 	.word	0x00910091
 8008c14:	00910091 	.word	0x00910091
 8008c18:	00910091 	.word	0x00910091
 8008c1c:	00910091 	.word	0x00910091
 8008c20:	00910091 	.word	0x00910091
 8008c24:	00910091 	.word	0x00910091
 8008c28:	00910091 	.word	0x00910091
 8008c2c:	00910091 	.word	0x00910091
 8008c30:	00910091 	.word	0x00910091
 8008c34:	00910091 	.word	0x00910091
 8008c38:	00910091 	.word	0x00910091
 8008c3c:	00910091 	.word	0x00910091
 8008c40:	00910091 	.word	0x00910091
 8008c44:	00910091 	.word	0x00910091
 8008c48:	00910091 	.word	0x00910091
 8008c4c:	00910091 	.word	0x00910091
 8008c50:	00910091 	.word	0x00910091
 8008c54:	00910091 	.word	0x00910091
 8008c58:	00910091 	.word	0x00910091
 8008c5c:	00910091 	.word	0x00910091
 8008c60:	016c014b 	.word	0x016c014b
 8008c64:	017a      	.short	0x017a
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 8008c66:	4b3c      	ldr	r3, [pc, #240]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	2101      	movs	r1, #1
 8008c6c:	7299      	strb	r1, [r3, #10]
 8008c6e:	2000      	movs	r0, #0
 8008c70:	7010      	strb	r0, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 8008c72:	68d8      	ldr	r0, [r3, #12]
 8008c74:	7a9a      	ldrb	r2, [r3, #10]
 8008c76:	1854      	adds	r4, r2, r1
 8008c78:	729c      	strb	r4, [r3, #10]
 8008c7a:	2406      	movs	r4, #6
 8008c7c:	5484      	strb	r4, [r0, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 8008c7e:	68d8      	ldr	r0, [r3, #12]
 8008c80:	7a9a      	ldrb	r2, [r3, #10]
 8008c82:	1854      	adds	r4, r2, r1
 8008c84:	729c      	strb	r4, [r3, #10]
 8008c86:	5481      	strb	r1, [r0, r2]
    if( ComplianceTestState.DataBufferSize != 0 )
 8008c88:	4b33      	ldr	r3, [pc, #204]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008c8a:	7a9b      	ldrb	r3, [r3, #10]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	f000 814c 	beq.w	8008f2a <LmhpComplianceOnMcpsIndication+0x406>
        if( ProcessTimer.IsRunning == 0U)
 8008c92:	4b32      	ldr	r3, [pc, #200]	; (8008d5c <LmhpComplianceOnMcpsIndication+0x238>)
 8008c94:	7a5b      	ldrb	r3, [r3, #9]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	f000 813d 	beq.w	8008f16 <LmhpComplianceOnMcpsIndication+0x3f2>
}
 8008c9c:	b016      	add	sp, #88	; 0x58
 8008c9e:	bd70      	pop	{r4, r5, r6, pc}
                ComplianceTestState.IsResetCmdPending = true;
 8008ca0:	4b2d      	ldr	r3, [pc, #180]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8008ca8:	e7ee      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                if( CompliancePackage.OnJoinRequest != NULL )
 8008caa:	4b2d      	ldr	r3, [pc, #180]	; (8008d60 <LmhpComplianceOnMcpsIndication+0x23c>)
 8008cac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d0ea      	beq.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                    CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 8008cb2:	2101      	movs	r1, #1
 8008cb4:	2002      	movs	r0, #2
 8008cb6:	4798      	blx	r3
 8008cb8:	e7e6      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 8008cba:	7862      	ldrb	r2, [r4, #1]
 8008cbc:	4b26      	ldr	r3, [pc, #152]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008cbe:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                ComplianceTestState.IsClassReqCmdPending = true;
 8008cc2:	2201      	movs	r2, #1
 8008cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
                break;
 8008cc8:	e7de      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type            = MIB_ADR;
 8008cca:	2304      	movs	r3, #4
 8008ccc:	f88d 3004 	strb.w	r3, [sp, #4]
                mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 8008cd0:	7863      	ldrb	r3, [r4, #1]
 8008cd2:	3b00      	subs	r3, #0
 8008cd4:	bf18      	it	ne
 8008cd6:	2301      	movne	r3, #1
 8008cd8:	f88d 3008 	strb.w	r3, [sp, #8]
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008cdc:	a801      	add	r0, sp, #4
 8008cde:	f002 ffd5 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
                break;
 8008ce2:	e7d1      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 8008ce4:	7860      	ldrb	r0, [r4, #1]
 8008ce6:	3800      	subs	r0, #0
 8008ce8:	bf18      	it	ne
 8008cea:	2001      	movne	r0, #1
 8008cec:	f003 fc74 	bl	800c5d8 <LoRaMacTestSetDutyCycleOn>
                break;
 8008cf0:	e7ca      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 8008cf2:	ad01      	add	r5, sp, #4
 8008cf4:	4e1b      	ldr	r6, [pc, #108]	; (8008d64 <LmhpComplianceOnMcpsIndication+0x240>)
 8008cf6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008cf8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cfa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8008cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008cfe:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8008d02:	e885 0007 	stmia.w	r5, {r0, r1, r2}
                uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 8008d06:	7863      	ldrb	r3, [r4, #1]
                if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 8008d08:	2b0a      	cmp	r3, #10
 8008d0a:	d8bd      	bhi.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                    if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 8008d0c:	4a16      	ldr	r2, [pc, #88]	; (8008d68 <LmhpComplianceOnMcpsIndication+0x244>)
 8008d0e:	6812      	ldr	r2, [r2, #0]
 8008d10:	6852      	ldr	r2, [r2, #4]
 8008d12:	2a00      	cmp	r2, #0
 8008d14:	d0b8      	beq.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 8008d16:	a916      	add	r1, sp, #88	; 0x58
 8008d18:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008d1c:	f853 0c54 	ldr.w	r0, [r3, #-84]
 8008d20:	4790      	blx	r2
                break;
 8008d22:	e7b1      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 8008d24:	7862      	ldrb	r2, [r4, #1]
                if( ( frameType == 1 ) || ( frameType == 2 ) )
 8008d26:	1e53      	subs	r3, r2, #1
 8008d28:	b2db      	uxtb	r3, r3
 8008d2a:	2b01      	cmp	r3, #1
 8008d2c:	d8ac      	bhi.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 8008d2e:	1e50      	subs	r0, r2, #1
 8008d30:	bf18      	it	ne
 8008d32:	2001      	movne	r0, #1
 8008d34:	4b08      	ldr	r3, [pc, #32]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008d36:	7218      	strb	r0, [r3, #8]
                    if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 8008d38:	4b0b      	ldr	r3, [pc, #44]	; (8008d68 <LmhpComplianceOnMcpsIndication+0x244>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d0a2      	beq.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                        ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 8008d42:	4798      	blx	r3
 8008d44:	e7a0      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 8008d46:	4b04      	ldr	r3, [pc, #16]	; (8008d58 <LmhpComplianceOnMcpsIndication+0x234>)
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	2101      	movs	r1, #1
 8008d4c:	7299      	strb	r1, [r3, #10]
 8008d4e:	2308      	movs	r3, #8
 8008d50:	7013      	strb	r3, [r2, #0]
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8008d52:	460b      	mov	r3, r1
 8008d54:	e01b      	b.n	8008d8e <LmhpComplianceOnMcpsIndication+0x26a>
 8008d56:	bf00      	nop
 8008d58:	200007ec 	.word	0x200007ec
 8008d5c:	20000824 	.word	0x20000824
 8008d60:	200000c0 	.word	0x200000c0
 8008d64:	08013fac 	.word	0x08013fac
 8008d68:	200007e8 	.word	0x200007e8
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8008d6c:	6882      	ldr	r2, [r0, #8]
 8008d6e:	f101 0c01 	add.w	ip, r1, #1
 8008d72:	5c52      	ldrb	r2, [r2, r1]
 8008d74:	4971      	ldr	r1, [pc, #452]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008d76:	68cd      	ldr	r5, [r1, #12]
 8008d78:	7a8c      	ldrb	r4, [r1, #10]
 8008d7a:	f104 0e01 	add.w	lr, r4, #1
 8008d7e:	f881 e00a 	strb.w	lr, [r1, #10]
 8008d82:	3201      	adds	r2, #1
 8008d84:	552a      	strb	r2, [r5, r4]
                     i++ )
 8008d86:	3301      	adds	r3, #1
 8008d88:	b2db      	uxtb	r3, r3
                    ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 8008d8a:	fa5f f18c 	uxtb.w	r1, ip
                for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 8008d8e:	4a6b      	ldr	r2, [pc, #428]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008d90:	7a52      	ldrb	r2, [r2, #9]
 8008d92:	7b04      	ldrb	r4, [r0, #12]
 8008d94:	42a2      	cmp	r2, r4
 8008d96:	bf28      	it	cs
 8008d98:	4622      	movcs	r2, r4
 8008d9a:	429a      	cmp	r2, r3
 8008d9c:	d8e6      	bhi.n	8008d6c <LmhpComplianceOnMcpsIndication+0x248>
 8008d9e:	e773      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 8008da0:	4b66      	ldr	r3, [pc, #408]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008da2:	68da      	ldr	r2, [r3, #12]
 8008da4:	2101      	movs	r1, #1
 8008da6:	7299      	strb	r1, [r3, #10]
 8008da8:	2109      	movs	r1, #9
 8008daa:	7011      	strb	r1, [r2, #0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 8008dac:	8a18      	ldrh	r0, [r3, #16]
 8008dae:	68d9      	ldr	r1, [r3, #12]
 8008db0:	7a9a      	ldrb	r2, [r3, #10]
 8008db2:	1c54      	adds	r4, r2, #1
 8008db4:	729c      	strb	r4, [r3, #10]
 8008db6:	5488      	strb	r0, [r1, r2]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 8008db8:	8a1a      	ldrh	r2, [r3, #16]
 8008dba:	68d8      	ldr	r0, [r3, #12]
 8008dbc:	7a99      	ldrb	r1, [r3, #10]
 8008dbe:	1c4c      	adds	r4, r1, #1
 8008dc0:	729c      	strb	r4, [r3, #10]
 8008dc2:	0a13      	lsrs	r3, r2, #8
 8008dc4:	5443      	strb	r3, [r0, r1]
                break;
 8008dc6:	e75f      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.RxAppCnt = 0;
 8008dc8:	4b5c      	ldr	r3, [pc, #368]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	821a      	strh	r2, [r3, #16]
                break;
 8008dce:	e75b      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                mlmeReq.Type = MLME_LINK_CHECK;
 8008dd0:	2305      	movs	r3, #5
 8008dd2:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMlmeRequest( &mlmeReq );
 8008dd6:	a801      	add	r0, sp, #4
 8008dd8:	f003 fa0c 	bl	800c1f4 <LoRaMacMlmeRequest>
                break;
 8008ddc:	e754      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                CompliancePackage.OnDeviceTimeRequest( );
 8008dde:	4b58      	ldr	r3, [pc, #352]	; (8008f40 <LmhpComplianceOnMcpsIndication+0x41c>)
 8008de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de2:	4798      	blx	r3
                break;
 8008de4:	e750      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 8008de6:	7860      	ldrb	r0, [r4, #1]
 8008de8:	4b54      	ldr	r3, [pc, #336]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008dea:	7558      	strb	r0, [r3, #21]
                if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 8008dec:	4b55      	ldr	r3, [pc, #340]	; (8008f44 <LmhpComplianceOnMcpsIndication+0x420>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	f43f af48 	beq.w	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                    ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 8008df8:	4798      	blx	r3
 8008dfa:	e745      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                if( mcpsIndication->BufferSize == 7 )
 8008dfc:	7b03      	ldrb	r3, [r0, #12]
 8008dfe:	2b07      	cmp	r3, #7
 8008e00:	f47f af42 	bne.w	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                    mlmeReq.Type = MLME_TXCW;
 8008e04:	2306      	movs	r3, #6
 8008e06:	f88d 3004 	strb.w	r3, [sp, #4]
                        ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 8008e0a:	7863      	ldrb	r3, [r4, #1]
 8008e0c:	78a2      	ldrb	r2, [r4, #2]
 8008e0e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                    mlmeReq.Req.TxCw.Timeout =
 8008e12:	f8ad 3008 	strh.w	r3, [sp, #8]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008e16:	78e3      	ldrb	r3, [r4, #3]
 8008e18:	7922      	ldrb	r2, [r4, #4]
 8008e1a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008e1e:	7962      	ldrb	r2, [r4, #5]
                        ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 8008e20:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
                                      ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 8008e24:	2264      	movs	r2, #100	; 0x64
 8008e26:	fb02 f303 	mul.w	r3, r2, r3
                    mlmeReq.Req.TxCw.Frequency =
 8008e2a:	9303      	str	r3, [sp, #12]
                    mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 8008e2c:	6883      	ldr	r3, [r0, #8]
 8008e2e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8008e32:	f88d 3010 	strb.w	r3, [sp, #16]
                    LoRaMacMlmeRequest( &mlmeReq );
 8008e36:	a801      	add	r0, sp, #4
 8008e38:	f003 f9dc 	bl	800c1f4 <LoRaMacMlmeRequest>
                break;
 8008e3c:	e724      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_IS_CERT_FPORT_ON;
 8008e3e:	233b      	movs	r3, #59	; 0x3b
 8008e40:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
                mibReq.Param.IsCertPortOn = false;
 8008e44:	2300      	movs	r3, #0
 8008e46:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
                LoRaMacMibSetRequestConfirm( &mibReq );
 8008e4a:	a80c      	add	r0, sp, #48	; 0x30
 8008e4c:	f002 ff1e 	bl	800bc8c <LoRaMacMibSetRequestConfirm>
                ComplianceTestState.IsResetCmdPending = true;
 8008e50:	4b3a      	ldr	r3, [pc, #232]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                break;
 8008e58:	e716      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
                mibReq.Type = MIB_LORAWAN_VERSION;
 8008e5a:	232a      	movs	r3, #42	; 0x2a
 8008e5c:	f88d 3004 	strb.w	r3, [sp, #4]
                LoRaMacMibGetRequestConfirm( &mibReq );
 8008e60:	a801      	add	r0, sp, #4
 8008e62:	f002 fd9f 	bl	800b9a4 <LoRaMacMibGetRequestConfirm>
                lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 8008e66:	9902      	ldr	r1, [sp, #8]
                lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 8008e68:	9a03      	ldr	r2, [sp, #12]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 8008e6a:	4b34      	ldr	r3, [pc, #208]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008e6c:	68dc      	ldr	r4, [r3, #12]
 8008e6e:	7a98      	ldrb	r0, [r3, #10]
 8008e70:	1c45      	adds	r5, r0, #1
 8008e72:	729d      	strb	r5, [r3, #10]
 8008e74:	257f      	movs	r5, #127	; 0x7f
 8008e76:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 8008e78:	4832      	ldr	r0, [pc, #200]	; (8008f44 <LmhpComplianceOnMcpsIndication+0x420>)
 8008e7a:	6800      	ldr	r0, [r0, #0]
 8008e7c:	68dd      	ldr	r5, [r3, #12]
 8008e7e:	7a9c      	ldrb	r4, [r3, #10]
 8008e80:	1c66      	adds	r6, r4, #1
 8008e82:	729e      	strb	r6, [r3, #10]
 8008e84:	78c6      	ldrb	r6, [r0, #3]
 8008e86:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 8008e88:	68dd      	ldr	r5, [r3, #12]
 8008e8a:	7a9c      	ldrb	r4, [r3, #10]
 8008e8c:	1c66      	adds	r6, r4, #1
 8008e8e:	729e      	strb	r6, [r3, #10]
 8008e90:	7886      	ldrb	r6, [r0, #2]
 8008e92:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 8008e94:	68dd      	ldr	r5, [r3, #12]
 8008e96:	7a9c      	ldrb	r4, [r3, #10]
 8008e98:	1c66      	adds	r6, r4, #1
 8008e9a:	729e      	strb	r6, [r3, #10]
 8008e9c:	7846      	ldrb	r6, [r0, #1]
 8008e9e:	552e      	strb	r6, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 8008ea0:	68dd      	ldr	r5, [r3, #12]
 8008ea2:	7a9c      	ldrb	r4, [r3, #10]
 8008ea4:	1c66      	adds	r6, r4, #1
 8008ea6:	729e      	strb	r6, [r3, #10]
 8008ea8:	7800      	ldrb	r0, [r0, #0]
 8008eaa:	5528      	strb	r0, [r5, r4]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 8008eac:	68dc      	ldr	r4, [r3, #12]
 8008eae:	7a98      	ldrb	r0, [r3, #10]
 8008eb0:	1c45      	adds	r5, r0, #1
 8008eb2:	729d      	strb	r5, [r3, #10]
 8008eb4:	f3c1 6507 	ubfx	r5, r1, #24, #8
 8008eb8:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 8008eba:	68dc      	ldr	r4, [r3, #12]
 8008ebc:	7a98      	ldrb	r0, [r3, #10]
 8008ebe:	1c45      	adds	r5, r0, #1
 8008ec0:	729d      	strb	r5, [r3, #10]
 8008ec2:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8008ec6:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 8008ec8:	68dc      	ldr	r4, [r3, #12]
 8008eca:	7a98      	ldrb	r0, [r3, #10]
 8008ecc:	1c45      	adds	r5, r0, #1
 8008ece:	729d      	strb	r5, [r3, #10]
 8008ed0:	f3c1 2507 	ubfx	r5, r1, #8, #8
 8008ed4:	5425      	strb	r5, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 8008ed6:	68dc      	ldr	r4, [r3, #12]
 8008ed8:	7a98      	ldrb	r0, [r3, #10]
 8008eda:	1c45      	adds	r5, r0, #1
 8008edc:	729d      	strb	r5, [r3, #10]
 8008ede:	5421      	strb	r1, [r4, r0]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 8008ee0:	68d8      	ldr	r0, [r3, #12]
 8008ee2:	7a99      	ldrb	r1, [r3, #10]
 8008ee4:	1c4c      	adds	r4, r1, #1
 8008ee6:	729c      	strb	r4, [r3, #10]
 8008ee8:	f3c2 6407 	ubfx	r4, r2, #24, #8
 8008eec:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 8008eee:	68d8      	ldr	r0, [r3, #12]
 8008ef0:	7a99      	ldrb	r1, [r3, #10]
 8008ef2:	1c4c      	adds	r4, r1, #1
 8008ef4:	729c      	strb	r4, [r3, #10]
 8008ef6:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8008efa:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 8008efc:	68d8      	ldr	r0, [r3, #12]
 8008efe:	7a99      	ldrb	r1, [r3, #10]
 8008f00:	1c4c      	adds	r4, r1, #1
 8008f02:	729c      	strb	r4, [r3, #10]
 8008f04:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8008f08:	5444      	strb	r4, [r0, r1]
                ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 8008f0a:	68d8      	ldr	r0, [r3, #12]
 8008f0c:	7a99      	ldrb	r1, [r3, #10]
 8008f0e:	1c4c      	adds	r4, r1, #1
 8008f10:	729c      	strb	r4, [r3, #10]
 8008f12:	5442      	strb	r2, [r0, r1]
                break;
 8008f14:	e6b8      	b.n	8008c88 <LmhpComplianceOnMcpsIndication+0x164>
            TimerSetValue( &ProcessTimer, 1000 );
 8008f16:	4c0c      	ldr	r4, [pc, #48]	; (8008f48 <LmhpComplianceOnMcpsIndication+0x424>)
 8008f18:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008f1c:	4620      	mov	r0, r4
 8008f1e:	f00a fdbf 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
            TimerStart( &ProcessTimer );
 8008f22:	4620      	mov	r0, r4
 8008f24:	f00a fd76 	bl	8013a14 <UTIL_TIMER_Start>
 8008f28:	e6b8      	b.n	8008c9c <LmhpComplianceOnMcpsIndication+0x178>
        TimerStop( &ProcessTimer );
 8008f2a:	4807      	ldr	r0, [pc, #28]	; (8008f48 <LmhpComplianceOnMcpsIndication+0x424>)
 8008f2c:	f00a fd18 	bl	8013960 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 8008f30:	4b02      	ldr	r3, [pc, #8]	; (8008f3c <LmhpComplianceOnMcpsIndication+0x418>)
 8008f32:	2200      	movs	r2, #0
 8008f34:	705a      	strb	r2, [r3, #1]
 8008f36:	e6b1      	b.n	8008c9c <LmhpComplianceOnMcpsIndication+0x178>
 8008f38:	4770      	bx	lr
 8008f3a:	bf00      	nop
 8008f3c:	200007ec 	.word	0x200007ec
 8008f40:	200000c0 	.word	0x200000c0
 8008f44:	200007e8 	.word	0x200007e8
 8008f48:	20000824 	.word	0x20000824

08008f4c <LmhpComplianceProcess>:
{
 8008f4c:	b530      	push	{r4, r5, lr}
 8008f4e:	b083      	sub	sp, #12
    if( ComplianceTestState.IsTxPending == true )
 8008f50:	4b27      	ldr	r3, [pc, #156]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f52:	785b      	ldrb	r3, [r3, #1]
 8008f54:	b993      	cbnz	r3, 8008f7c <LmhpComplianceProcess+0x30>
        if( ComplianceTestState.IsClassReqCmdPending == true )
 8008f56:	4b26      	ldr	r3, [pc, #152]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d13d      	bne.n	8008fdc <LmhpComplianceProcess+0x90>
    if( ComplianceTestState.IsResetCmdPending == true )
 8008f60:	4b23      	ldr	r3, [pc, #140]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008f66:	b13b      	cbz	r3, 8008f78 <LmhpComplianceProcess+0x2c>
        ComplianceTestState.IsResetCmdPending = false;
 8008f68:	4b21      	ldr	r3, [pc, #132]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        if( CompliancePackage.OnSystemReset != NULL )
 8008f70:	4b20      	ldr	r3, [pc, #128]	; (8008ff4 <LmhpComplianceProcess+0xa8>)
 8008f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f74:	b103      	cbz	r3, 8008f78 <LmhpComplianceProcess+0x2c>
            CompliancePackage.OnSystemReset( );
 8008f76:	4798      	blx	r3
}
 8008f78:	b003      	add	sp, #12
 8008f7a:	bd30      	pop	{r4, r5, pc}
        TimerTime_t now = TimerGetCurrentTime( );
 8008f7c:	f00a fcb0 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 8008f80:	4604      	mov	r4, r0
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 8008f82:	4b1b      	ldr	r3, [pc, #108]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f84:	685d      	ldr	r5, [r3, #4]
 8008f86:	f7ff f9a3 	bl	80082d0 <LmHandlerGetDutyCycleWaitTime>
 8008f8a:	4405      	add	r5, r0
 8008f8c:	42a5      	cmp	r5, r4
 8008f8e:	d2e7      	bcs.n	8008f60 <LmhpComplianceProcess+0x14>
            if( ComplianceTestState.DataBufferSize != 0 )
 8008f90:	4b17      	ldr	r3, [pc, #92]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008f92:	7a9b      	ldrb	r3, [r3, #10]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d0e3      	beq.n	8008f60 <LmhpComplianceProcess+0x14>
                LmHandlerAppData_t appData =
 8008f98:	22e0      	movs	r2, #224	; 0xe0
 8008f9a:	f88d 2000 	strb.w	r2, [sp]
 8008f9e:	f88d 3001 	strb.w	r3, [sp, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 8008fa2:	4b13      	ldr	r3, [pc, #76]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008fa4:	68da      	ldr	r2, [r3, #12]
                LmHandlerAppData_t appData =
 8008fa6:	9201      	str	r2, [sp, #4]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 8008fa8:	2201      	movs	r2, #1
 8008faa:	7a19      	ldrb	r1, [r3, #8]
 8008fac:	4668      	mov	r0, sp
 8008fae:	f7ff f9bd 	bl	800832c <LmHandlerSend>
                if( ( lmhStatus == LORAMAC_HANDLER_SUCCESS ) || ( lmhStatus == LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED ) )
 8008fb2:	b110      	cbz	r0, 8008fba <LmhpComplianceProcess+0x6e>
 8008fb4:	f110 0f07 	cmn.w	r0, #7
 8008fb8:	d106      	bne.n	8008fc8 <LmhpComplianceProcess+0x7c>
                    ComplianceTestState.IsTxPending = false;
 8008fba:	4b0d      	ldr	r3, [pc, #52]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 8008fc0:	729a      	strb	r2, [r3, #10]
                ComplianceTestState.TxPendingTimestamp = now;
 8008fc2:	4b0b      	ldr	r3, [pc, #44]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008fc4:	605c      	str	r4, [r3, #4]
 8008fc6:	e7cb      	b.n	8008f60 <LmhpComplianceProcess+0x14>
                    TimerSetValue( &ProcessTimer, 1500 );
 8008fc8:	4d0b      	ldr	r5, [pc, #44]	; (8008ff8 <LmhpComplianceProcess+0xac>)
 8008fca:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f00a fd66 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &ProcessTimer );
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	f00a fd1d 	bl	8013a14 <UTIL_TIMER_Start>
 8008fda:	e7f2      	b.n	8008fc2 <LmhpComplianceProcess+0x76>
            ComplianceTestState.IsClassReqCmdPending = false;
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <LmhpComplianceProcess+0xa4>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 8008fe4:	f893 0036 	ldrb.w	r0, [r3, #54]	; 0x36
 8008fe8:	f7ff fa4a 	bl	8008480 <LmHandlerRequestClass>
 8008fec:	e7b8      	b.n	8008f60 <LmhpComplianceProcess+0x14>
 8008fee:	bf00      	nop
 8008ff0:	200007ec 	.word	0x200007ec
 8008ff4:	200000c0 	.word	0x200000c0
 8008ff8:	20000824 	.word	0x20000824

08008ffc <LmhpComplianceInit>:
{
 8008ffc:	b530      	push	{r4, r5, lr}
 8008ffe:	b083      	sub	sp, #12
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 8009000:	b188      	cbz	r0, 8009026 <LmhpComplianceInit+0x2a>
 8009002:	4603      	mov	r3, r0
 8009004:	b179      	cbz	r1, 8009026 <LmhpComplianceInit+0x2a>
        ComplianceParams                      = ( LmhpComplianceParams_t * ) params;
 8009006:	4813      	ldr	r0, [pc, #76]	; (8009054 <LmhpComplianceInit+0x58>)
 8009008:	6003      	str	r3, [r0, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800900a:	4b13      	ldr	r3, [pc, #76]	; (8009058 <LmhpComplianceInit+0x5c>)
 800900c:	60d9      	str	r1, [r3, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800900e:	725a      	strb	r2, [r3, #9]
        ComplianceTestState.Initialized       = true;
 8009010:	2201      	movs	r2, #1
 8009012:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 8009014:	2200      	movs	r2, #0
 8009016:	9200      	str	r2, [sp, #0]
 8009018:	4b10      	ldr	r3, [pc, #64]	; (800905c <LmhpComplianceInit+0x60>)
 800901a:	f04f 31ff 	mov.w	r1, #4294967295
 800901e:	4810      	ldr	r0, [pc, #64]	; (8009060 <LmhpComplianceInit+0x64>)
 8009020:	f00a fc40 	bl	80138a4 <UTIL_TIMER_Create>
 8009024:	e004      	b.n	8009030 <LmhpComplianceInit+0x34>
        ComplianceParams                = NULL;
 8009026:	2300      	movs	r3, #0
 8009028:	4a0a      	ldr	r2, [pc, #40]	; (8009054 <LmhpComplianceInit+0x58>)
 800902a:	6013      	str	r3, [r2, #0]
        ComplianceTestState.Initialized = false;
 800902c:	4a0a      	ldr	r2, [pc, #40]	; (8009058 <LmhpComplianceInit+0x5c>)
 800902e:	7013      	strb	r3, [r2, #0]
    ComplianceTestState.RxAppCnt = 0;
 8009030:	4c09      	ldr	r4, [pc, #36]	; (8009058 <LmhpComplianceInit+0x5c>)
 8009032:	2500      	movs	r5, #0
 8009034:	8225      	strh	r5, [r4, #16]
    memset1( ( uint8_t * ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 8009036:	2220      	movs	r2, #32
 8009038:	4629      	mov	r1, r5
 800903a:	f104 0014 	add.w	r0, r4, #20
 800903e:	f008 fa74 	bl	801152a <memset1>
    ComplianceTestState.IsTxPending = false;
 8009042:	7065      	strb	r5, [r4, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 8009044:	74a5      	strb	r5, [r4, #18]
    ComplianceTestState.IsResetCmdPending = false;
 8009046:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800904a:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 800904e:	b003      	add	sp, #12
 8009050:	bd30      	pop	{r4, r5, pc}
 8009052:	bf00      	nop
 8009054:	200007e8 	.word	0x200007e8
 8009058:	200007ec 	.word	0x200007ec
 800905c:	08008b05 	.word	0x08008b05
 8009060:	20000824 	.word	0x20000824

08009064 <LmhpCompliancePackageFactory>:
}
 8009064:	4800      	ldr	r0, [pc, #0]	; (8009068 <LmhpCompliancePackageFactory+0x4>)
 8009066:	4770      	bx	lr
 8009068:	200000c0 	.word	0x200000c0

0800906c <LmhpPackagesRegistrationInit>:
    }
#endif /* LORAWAN_PACKAGES_VERSION */
#endif /* LORAWAN_DATA_DISTRIB_MGT */

    return LORAMAC_HANDLER_SUCCESS;
}
 800906c:	2000      	movs	r0, #0
 800906e:	4770      	bx	lr

08009070 <LmhpPackagesRegister>:
    }
    return LORAMAC_HANDLER_SUCCESS;
#else
    return LORAMAC_HANDLER_ERROR;
#endif /* LORAWAN_DATA_DISTRIB_MGT */
}
 8009070:	f04f 30ff 	mov.w	r0, #4294967295
 8009074:	4770      	bx	lr
	...

08009078 <UpdateRxSlotIdleState>:
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
}

static void UpdateRxSlotIdleState( void )
{
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009078:	4b07      	ldr	r3, [pc, #28]	; (8009098 <UpdateRxSlotIdleState+0x20>)
 800907a:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800907e:	2b02      	cmp	r3, #2
 8009080:	d004      	beq.n	800908c <UpdateRxSlotIdleState+0x14>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 8009082:	4b06      	ldr	r3, [pc, #24]	; (800909c <UpdateRxSlotIdleState+0x24>)
 8009084:	2206      	movs	r2, #6
 8009086:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
 800908a:	4770      	bx	lr
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800908c:	4b03      	ldr	r3, [pc, #12]	; (800909c <UpdateRxSlotIdleState+0x24>)
 800908e:	2202      	movs	r2, #2
 8009090:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
    }
}
 8009094:	4770      	bx	lr
 8009096:	bf00      	nop
 8009098:	20008000 	.word	0x20008000
 800909c:	20000840 	.word	0x20000840

080090a0 <LoRaMacEnableRequests>:
    return false;
}

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
    MacCtx.AllowRequests = requestState;
 80090a0:	4b01      	ldr	r3, [pc, #4]	; (80090a8 <LoRaMacEnableRequests+0x8>)
 80090a2:	f883 0492 	strb.w	r0, [r3, #1170]	; 0x492
}
 80090a6:	4770      	bx	lr
 80090a8:	20000840 	.word	0x20000840

080090ac <LoRaMacHandleIndicationEvents>:
        MacCtx.MacFlags.Bits.MacDone = 0;
    }
}

static void LoRaMacHandleIndicationEvents( void )
{
 80090ac:	b508      	push	{r3, lr}
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 80090ae:	4b15      	ldr	r3, [pc, #84]	; (8009104 <LoRaMacHandleIndicationEvents+0x58>)
 80090b0:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80090b4:	f013 0f08 	tst.w	r3, #8
 80090b8:	d00e      	beq.n	80090d8 <LoRaMacHandleIndicationEvents+0x2c>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 80090ba:	4812      	ldr	r0, [pc, #72]	; (8009104 <LoRaMacHandleIndicationEvents+0x58>)
 80090bc:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 80090c0:	f36f 03c3 	bfc	r3, #3, #1
 80090c4:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 80090c8:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80090cc:	68db      	ldr	r3, [r3, #12]
 80090ce:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 80090d2:	f500 608d 	add.w	r0, r0, #1128	; 0x468
 80090d6:	4798      	blx	r3
    }

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 80090d8:	4b0a      	ldr	r3, [pc, #40]	; (8009104 <LoRaMacHandleIndicationEvents+0x58>)
 80090da:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 80090de:	f013 0f02 	tst.w	r3, #2
 80090e2:	d00e      	beq.n	8009102 <LoRaMacHandleIndicationEvents+0x56>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 80090e4:	4807      	ldr	r0, [pc, #28]	; (8009104 <LoRaMacHandleIndicationEvents+0x58>)
 80090e6:	f890 3491 	ldrb.w	r3, [r0, #1169]	; 0x491
 80090ea:	f36f 0341 	bfc	r3, #1, #1
 80090ee:	f880 3491 	strb.w	r3, [r0, #1169]	; 0x491
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 80090f2:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 80090f6:	685b      	ldr	r3, [r3, #4]
 80090f8:	f200 418c 	addw	r1, r0, #1164	; 0x48c
 80090fc:	f500 6084 	add.w	r0, r0, #1056	; 0x420
 8009100:	4798      	blx	r3
    }
}
 8009102:	bd08      	pop	{r3, pc}
 8009104:	20000840 	.word	0x20000840

08009108 <CheckForMinimumAbpDatarate>:
}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
    if( ( adr == true ) &&
 8009108:	b110      	cbz	r0, 8009110 <CheckForMinimumAbpDatarate+0x8>
 800910a:	2901      	cmp	r1, #1
 800910c:	d001      	beq.n	8009112 <CheckForMinimumAbpDatarate+0xa>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
    {
        return true;
    }
    return false;
 800910e:	2000      	movs	r0, #0
}
 8009110:	4770      	bx	lr
        ( activation == ACTIVATION_TYPE_ABP ) &&
 8009112:	2a00      	cmp	r2, #0
 8009114:	d0fc      	beq.n	8009110 <CheckForMinimumAbpDatarate+0x8>
    return false;
 8009116:	2000      	movs	r0, #0
 8009118:	4770      	bx	lr
	...

0800911c <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800911c:	4b07      	ldr	r3, [pc, #28]	; (800913c <LoRaMacCheckForRxAbort+0x20>)
 800911e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009122:	f013 0f80 	tst.w	r3, #128	; 0x80
 8009126:	d008      	beq.n	800913a <LoRaMacCheckForRxAbort+0x1e>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 8009128:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 800912c:	4a03      	ldr	r2, [pc, #12]	; (800913c <LoRaMacCheckForRxAbort+0x20>)
 800912e:	f8c2 1340 	str.w	r1, [r2, #832]	; 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009132:	f023 0382 	bic.w	r3, r3, #130	; 0x82
 8009136:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
    }
}
 800913a:	4770      	bx	lr
 800913c:	20000840 	.word	0x20000840

08009140 <CalculateBackOff>:

static void CalculateBackOff( void )
{
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8009140:	4b06      	ldr	r3, [pc, #24]	; (800915c <CalculateBackOff+0x1c>)
 8009142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009144:	b94b      	cbnz	r3, 800915a <CalculateBackOff+0x1a>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8009146:	4a05      	ldr	r2, [pc, #20]	; (800915c <CalculateBackOff+0x1c>)
 8009148:	f8b2 3120 	ldrh.w	r3, [r2, #288]	; 0x120
 800914c:	4904      	ldr	r1, [pc, #16]	; (8009160 <CalculateBackOff+0x20>)
 800914e:	f8d1 141c 	ldr.w	r1, [r1, #1052]	; 0x41c
 8009152:	3b01      	subs	r3, #1
 8009154:	fb01 f303 	mul.w	r3, r1, r3
 8009158:	6313      	str	r3, [r2, #48]	; 0x30
    }
}
 800915a:	4770      	bx	lr
 800915c:	20008000 	.word	0x20008000
 8009160:	20000840 	.word	0x20000840

08009164 <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 8009164:	b508      	push	{r3, lr}
 8009166:	4684      	mov	ip, r0
 8009168:	4608      	mov	r0, r1
 800916a:	4611      	mov	r1, r2
    Radio.SetTxContinuousWave( frequency, power, timeout );
 800916c:	4b06      	ldr	r3, [pc, #24]	; (8009188 <SetTxContinuousWave+0x24>)
 800916e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009170:	4662      	mov	r2, ip
 8009172:	b249      	sxtb	r1, r1
 8009174:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 8009176:	4a05      	ldr	r2, [pc, #20]	; (800918c <SetTxContinuousWave+0x28>)
 8009178:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 8009184:	2000      	movs	r0, #0
 8009186:	bd08      	pop	{r3, pc}
 8009188:	08014d7c 	.word	0x08014d7c
 800918c:	20000840 	.word	0x20000840

08009190 <DetermineFrameType>:
    return LORAMAC_STATUS_OK;
}

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8009190:	4602      	mov	r2, r0
 8009192:	b1f8      	cbz	r0, 80091d4 <DetermineFrameType+0x44>
 8009194:	b301      	cbz	r1, 80091d8 <DetermineFrameType+0x48>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8009196:	7b03      	ldrb	r3, [r0, #12]
 8009198:	f013 030f 	ands.w	r3, r3, #15
 800919c:	d005      	beq.n	80091aa <DetermineFrameType+0x1a>
 800919e:	f890 0020 	ldrb.w	r0, [r0, #32]
 80091a2:	b110      	cbz	r0, 80091aa <DetermineFrameType+0x1a>
    {
        *fType = FRAME_TYPE_A;
 80091a4:	2000      	movs	r0, #0
 80091a6:	7008      	strb	r0, [r1, #0]
 80091a8:	4770      	bx	lr
    }
    else if( macMsg->FRMPayloadSize == 0 )
 80091aa:	f892 0028 	ldrb.w	r0, [r2, #40]	; 0x28
 80091ae:	b910      	cbnz	r0, 80091b6 <DetermineFrameType+0x26>
    {
        *fType = FRAME_TYPE_B;
 80091b0:	2301      	movs	r3, #1
 80091b2:	700b      	strb	r3, [r1, #0]
 80091b4:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 80091b6:	b92b      	cbnz	r3, 80091c4 <DetermineFrameType+0x34>
 80091b8:	f892 0020 	ldrb.w	r0, [r2, #32]
 80091bc:	b910      	cbnz	r0, 80091c4 <DetermineFrameType+0x34>
    {
        *fType = FRAME_TYPE_C;
 80091be:	2302      	movs	r3, #2
 80091c0:	700b      	strb	r3, [r1, #0]
 80091c2:	4770      	bx	lr
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 80091c4:	b953      	cbnz	r3, 80091dc <DetermineFrameType+0x4c>
 80091c6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80091ca:	b14a      	cbz	r2, 80091e0 <DetermineFrameType+0x50>
    {
        *fType = FRAME_TYPE_D;
 80091cc:	2203      	movs	r2, #3
 80091ce:	700a      	strb	r2, [r1, #0]
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
    }

    return LORAMAC_STATUS_OK;
 80091d0:	4618      	mov	r0, r3
        *fType = FRAME_TYPE_D;
 80091d2:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80091d4:	2003      	movs	r0, #3
 80091d6:	4770      	bx	lr
 80091d8:	2003      	movs	r0, #3
 80091da:	4770      	bx	lr
        return LORAMAC_STATUS_ERROR;
 80091dc:	2018      	movs	r0, #24
 80091de:	4770      	bx	lr
 80091e0:	2018      	movs	r0, #24
}
 80091e2:	4770      	bx	lr

080091e4 <CheckRetrans>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
    if( counter >= limit )
 80091e4:	4288      	cmp	r0, r1
 80091e6:	d201      	bcs.n	80091ec <CheckRetrans+0x8>
    {
        return true;
    }
    return false;
 80091e8:	2000      	movs	r0, #0
 80091ea:	4770      	bx	lr
        return true;
 80091ec:	2001      	movs	r0, #1
}
 80091ee:	4770      	bx	lr

080091f0 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 80091f0:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 80091f2:	4b0b      	ldr	r3, [pc, #44]	; (8009220 <CheckRetransUnconfirmedUplink+0x30>)
 80091f4:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80091f8:	4b0a      	ldr	r3, [pc, #40]	; (8009224 <CheckRetransUnconfirmedUplink+0x34>)
 80091fa:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 80091fe:	f7ff fff1 	bl	80091e4 <CheckRetrans>
 8009202:	b950      	cbnz	r0, 800921a <CheckRetransUnconfirmedUplink+0x2a>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8009204:	4b07      	ldr	r3, [pc, #28]	; (8009224 <CheckRetransUnconfirmedUplink+0x34>)
 8009206:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800920a:	f013 0f02 	tst.w	r3, #2
 800920e:	d004      	beq.n	800921a <CheckRetransUnconfirmedUplink+0x2a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009210:	4b04      	ldr	r3, [pc, #16]	; (8009224 <CheckRetransUnconfirmedUplink+0x34>)
 8009212:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 8009216:	2b01      	cmp	r3, #1
 8009218:	d900      	bls.n	800921c <CheckRetransUnconfirmedUplink+0x2c>
        {
            return true;
        }
    }
    return false;
}
 800921a:	bd08      	pop	{r3, pc}
            return true;
 800921c:	2001      	movs	r0, #1
 800921e:	e7fc      	b.n	800921a <CheckRetransUnconfirmedUplink+0x2a>
 8009220:	20008000 	.word	0x20008000
 8009224:	20000840 	.word	0x20000840

08009228 <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8009228:	b508      	push	{r3, lr}
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 800922a:	4b09      	ldr	r3, [pc, #36]	; (8009250 <CheckRetransConfirmedUplink+0x28>)
 800922c:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 8009230:	4b08      	ldr	r3, [pc, #32]	; (8009254 <CheckRetransConfirmedUplink+0x2c>)
 8009232:	f893 0418 	ldrb.w	r0, [r3, #1048]	; 0x418
 8009236:	f7ff ffd5 	bl	80091e4 <CheckRetrans>
 800923a:	b940      	cbnz	r0, 800924e <CheckRetransConfirmedUplink+0x26>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800923c:	4b05      	ldr	r3, [pc, #20]	; (8009254 <CheckRetransConfirmedUplink+0x2c>)
 800923e:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 8009242:	f013 0f02 	tst.w	r3, #2
 8009246:	d002      	beq.n	800924e <CheckRetransConfirmedUplink+0x26>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <CheckRetransConfirmedUplink+0x2c>)
 800924a:	f893 0444 	ldrb.w	r0, [r3, #1092]	; 0x444
        {
            return true;
        }
    }
    return false;
}
 800924e:	bd08      	pop	{r3, pc}
 8009250:	20008000 	.word	0x20008000
 8009254:	20000840 	.word	0x20000840

08009258 <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
    if( counter < ADR_ACK_COUNTER_MAX )
 8009258:	f1b0 3fff 	cmp.w	r0, #4294967295
 800925c:	d000      	beq.n	8009260 <IncreaseAdrAckCounter+0x8>
    {
        counter++;
 800925e:	3001      	adds	r0, #1
    }
    return counter;
}
 8009260:	4770      	bx	lr
	...

08009264 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8009264:	b510      	push	{r4, lr}
            }
        }
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009266:	4b12      	ldr	r3, [pc, #72]	; (80092b0 <StopRetransmission+0x4c>)
 8009268:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800926c:	f013 0f02 	tst.w	r3, #2
 8009270:	d004      	beq.n	800927c <StopRetransmission+0x18>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8009272:	4b0f      	ldr	r3, [pc, #60]	; (80092b0 <StopRetransmission+0x4c>)
 8009274:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8009278:	2b01      	cmp	r3, #1
 800927a:	d908      	bls.n	800928e <StopRetransmission+0x2a>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <StopRetransmission+0x50>)
 800927e:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 8009282:	b123      	cbz	r3, 800928e <StopRetransmission+0x2a>
        {
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8009284:	4c0b      	ldr	r4, [pc, #44]	; (80092b4 <StopRetransmission+0x50>)
 8009286:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8009288:	f7ff ffe6 	bl	8009258 <IncreaseAdrAckCounter>
 800928c:	62a0      	str	r0, [r4, #40]	; 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 800928e:	4b08      	ldr	r3, [pc, #32]	; (80092b0 <StopRetransmission+0x4c>)
 8009290:	2200      	movs	r2, #0
 8009292:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
    MacCtx.NodeAckRequested = false;
 8009296:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    MacCtx.RetransmitTimeoutRetry = false;
 800929a:	f883 2419 	strb.w	r2, [r3, #1049]	; 0x419
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800929e:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80092a2:	f022 0202 	bic.w	r2, r2, #2
 80092a6:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340

    return true;
}
 80092aa:	2001      	movs	r0, #1
 80092ac:	bd10      	pop	{r4, pc}
 80092ae:	bf00      	nop
 80092b0:	20000840 	.word	0x20000840
 80092b4:	20008000 	.word	0x20008000

080092b8 <OnMacProcessNotify>:

static void OnMacProcessNotify( void )
{
 80092b8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 80092ba:	4b04      	ldr	r3, [pc, #16]	; (80092cc <OnMacProcessNotify+0x14>)
 80092bc:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80092c0:	b113      	cbz	r3, 80092c8 <OnMacProcessNotify+0x10>
 80092c2:	695b      	ldr	r3, [r3, #20]
 80092c4:	b103      	cbz	r3, 80092c8 <OnMacProcessNotify+0x10>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 80092c6:	4798      	blx	r3
    }
}
 80092c8:	bd08      	pop	{r3, pc}
 80092ca:	bf00      	nop
 80092cc:	20000840 	.word	0x20000840

080092d0 <OnRadioRxError>:
{
 80092d0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxError = 1;
 80092d2:	4a04      	ldr	r2, [pc, #16]	; (80092e4 <OnRadioRxError+0x14>)
 80092d4:	7813      	ldrb	r3, [r2, #0]
 80092d6:	f043 0304 	orr.w	r3, r3, #4
 80092da:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 80092dc:	f7ff ffec 	bl	80092b8 <OnMacProcessNotify>
}
 80092e0:	bd08      	pop	{r3, pc}
 80092e2:	bf00      	nop
 80092e4:	2000083c 	.word	0x2000083c

080092e8 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 80092e8:	b508      	push	{r3, lr}
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 80092ea:	4b04      	ldr	r3, [pc, #16]	; (80092fc <CallNvmDataChangeCallback+0x14>)
 80092ec:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80092f0:	b113      	cbz	r3, 80092f8 <CallNvmDataChangeCallback+0x10>
 80092f2:	691b      	ldr	r3, [r3, #16]
 80092f4:	b103      	cbz	r3, 80092f8 <CallNvmDataChangeCallback+0x10>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 80092f6:	4798      	blx	r3
    }
}
 80092f8:	bd08      	pop	{r3, pc}
 80092fa:	bf00      	nop
 80092fc:	20000840 	.word	0x20000840

08009300 <IsRequestPending>:
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8009300:	4b04      	ldr	r3, [pc, #16]	; (8009314 <IsRequestPending+0x14>)
 8009302:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
 8009306:	f010 0005 	ands.w	r0, r0, #5
 800930a:	d100      	bne.n	800930e <IsRequestPending+0xe>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
    {
        return 1;
    }
    return 0;
}
 800930c:	4770      	bx	lr
        return 1;
 800930e:	2001      	movs	r0, #1
 8009310:	e7fc      	b.n	800930c <IsRequestPending+0xc>
 8009312:	bf00      	nop
 8009314:	20000840 	.word	0x20000840

08009318 <GetMaxAppPayloadWithoutFOptsLength>:
{
 8009318:	b500      	push	{lr}
 800931a:	b085      	sub	sp, #20
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800931c:	4b0d      	ldr	r3, [pc, #52]	; (8009354 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 800931e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 8009322:	f88d 200a 	strb.w	r2, [sp, #10]
    getPhy.Datarate = datarate;
 8009326:	f88d 0009 	strb.w	r0, [sp, #9]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800932a:	220d      	movs	r2, #13
 800932c:	f88d 2008 	strb.w	r2, [sp, #8]
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009330:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009334:	b113      	cbz	r3, 800933c <GetMaxAppPayloadWithoutFOptsLength+0x24>
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009336:	230e      	movs	r3, #14
 8009338:	f88d 3008 	strb.w	r3, [sp, #8]
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800933c:	a902      	add	r1, sp, #8
 800933e:	4b05      	ldr	r3, [pc, #20]	; (8009354 <GetMaxAppPayloadWithoutFOptsLength+0x3c>)
 8009340:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009344:	f004 fa06 	bl	800d754 <RegionGetPhyParam>
 8009348:	9001      	str	r0, [sp, #4]
}
 800934a:	b2c0      	uxtb	r0, r0
 800934c:	b005      	add	sp, #20
 800934e:	f85d fb04 	ldr.w	pc, [sp], #4
 8009352:	bf00      	nop
 8009354:	20008000 	.word	0x20008000

08009358 <ValidatePayloadLength>:
{
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	4605      	mov	r5, r0
 800935c:	4614      	mov	r4, r2
    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800935e:	4608      	mov	r0, r1
 8009360:	f7ff ffda 	bl	8009318 <GetMaxAppPayloadWithoutFOptsLength>
 8009364:	b283      	uxth	r3, r0
    payloadSize = ( lenN + fOptsLen );
 8009366:	1962      	adds	r2, r4, r5
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 8009368:	4293      	cmp	r3, r2
 800936a:	d303      	bcc.n	8009374 <ValidatePayloadLength+0x1c>
 800936c:	2aff      	cmp	r2, #255	; 0xff
 800936e:	d903      	bls.n	8009378 <ValidatePayloadLength+0x20>
    return false;
 8009370:	2000      	movs	r0, #0
 8009372:	e000      	b.n	8009376 <ValidatePayloadLength+0x1e>
 8009374:	2000      	movs	r0, #0
}
 8009376:	bd38      	pop	{r3, r4, r5, pc}
        return true;
 8009378:	2001      	movs	r0, #1
 800937a:	e7fc      	b.n	8009376 <ValidatePayloadLength+0x1e>

0800937c <ProcessRadioTxDone>:
{
 800937c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800937e:	b08f      	sub	sp, #60	; 0x3c
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 8009380:	4b3b      	ldr	r3, [pc, #236]	; (8009470 <ProcessRadioTxDone+0xf4>)
 8009382:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009386:	2b02      	cmp	r3, #2
 8009388:	d002      	beq.n	8009390 <ProcessRadioTxDone+0x14>
        Radio.Sleep( );
 800938a:	4b3a      	ldr	r3, [pc, #232]	; (8009474 <ProcessRadioTxDone+0xf8>)
 800938c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800938e:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009390:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8009394:	b672      	cpsid	i
    uint32_t offset = TimerGetCurrentTime( ) - TxDoneParams.CurTime;
 8009396:	f00a faa3 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 800939a:	4b37      	ldr	r3, [pc, #220]	; (8009478 <ProcessRadioTxDone+0xfc>)
 800939c:	681d      	ldr	r5, [r3, #0]
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay - offset );
 800939e:	4c37      	ldr	r4, [pc, #220]	; (800947c <ProcessRadioTxDone+0x100>)
 80093a0:	f8d4 13b0 	ldr.w	r1, [r4, #944]	; 0x3b0
 80093a4:	1a2d      	subs	r5, r5, r0
 80093a6:	f504 7660 	add.w	r6, r4, #896	; 0x380
 80093aa:	4429      	add	r1, r5
 80093ac:	4630      	mov	r0, r6
 80093ae:	f00a fb77 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 80093b2:	4630      	mov	r0, r6
 80093b4:	f00a fb2e 	bl	8013a14 <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay - offset );
 80093b8:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 80093bc:	f504 7666 	add.w	r6, r4, #920	; 0x398
 80093c0:	4429      	add	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f00a fb6c 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 80093c8:	4630      	mov	r0, r6
 80093ca:	f00a fb23 	bl	8013a14 <UTIL_TIMER_Start>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093ce:	f387 8810 	msr	PRIMASK, r7
    if( MacCtx.NodeAckRequested == true )
 80093d2:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d134      	bne.n	8009444 <ProcessRadioTxDone+0xc8>
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 80093da:	4b28      	ldr	r3, [pc, #160]	; (800947c <ProcessRadioTxDone+0x100>)
 80093dc:	2200      	movs	r2, #0
 80093de:	f883 2441 	strb.w	r2, [r3, #1089]	; 0x441
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 80093e2:	4b25      	ldr	r3, [pc, #148]	; (8009478 <ProcessRadioTxDone+0xfc>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4c22      	ldr	r4, [pc, #136]	; (8009470 <ProcessRadioTxDone+0xf4>)
 80093e8:	62e3      	str	r3, [r4, #44]	; 0x2c
    txDone.Channel = MacCtx.Channel;
 80093ea:	4f24      	ldr	r7, [pc, #144]	; (800947c <ProcessRadioTxDone+0x100>)
 80093ec:	f897 241b 	ldrb.w	r2, [r7, #1051]	; 0x41b
 80093f0:	f88d 2010 	strb.w	r2, [sp, #16]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 80093f4:	9305      	str	r3, [sp, #20]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 80093f6:	ae0c      	add	r6, sp, #48	; 0x30
 80093f8:	4630      	mov	r0, r6
 80093fa:	f00a f9e5 	bl	80137c8 <SysTimeGetMcuTime>
 80093fe:	ad02      	add	r5, sp, #8
 8009400:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
 8009404:	9300      	str	r3, [sp, #0]
 8009406:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800940a:	e896 0006 	ldmia.w	r6, {r1, r2}
 800940e:	4628      	mov	r0, r5
 8009410:	f00a f977 	bl	8013702 <SysTimeSub>
 8009414:	ab07      	add	r3, sp, #28
 8009416:	e895 0003 	ldmia.w	r5, {r0, r1}
 800941a:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800941e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 8009422:	9306      	str	r3, [sp, #24]
    txDone.Joined  = true;
 8009424:	2301      	movs	r3, #1
 8009426:	f88d 3011 	strb.w	r3, [sp, #17]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800942a:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800942e:	b90b      	cbnz	r3, 8009434 <ProcessRadioTxDone+0xb8>
        txDone.Joined  = false;
 8009430:	f88d 3011 	strb.w	r3, [sp, #17]
    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 8009434:	a904      	add	r1, sp, #16
 8009436:	4b0e      	ldr	r3, [pc, #56]	; (8009470 <ProcessRadioTxDone+0xf4>)
 8009438:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800943c:	f004 f9a8 	bl	800d790 <RegionSetBandTxDone>
}
 8009440:	b00f      	add	sp, #60	; 0x3c
 8009442:	bdf0      	pop	{r4, r5, r6, r7, pc}
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 8009444:	2315      	movs	r3, #21
 8009446:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800944a:	a90a      	add	r1, sp, #40	; 0x28
 800944c:	4b08      	ldr	r3, [pc, #32]	; (8009470 <ProcessRadioTxDone+0xf4>)
 800944e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009452:	f004 f97f 	bl	800d754 <RegionGetPhyParam>
 8009456:	9009      	str	r0, [sp, #36]	; 0x24
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 8009458:	f8d4 13b4 	ldr.w	r1, [r4, #948]	; 0x3b4
 800945c:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8009460:	4401      	add	r1, r0
 8009462:	4620      	mov	r0, r4
 8009464:	f00a fb1c 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 8009468:	4620      	mov	r0, r4
 800946a:	f00a fad3 	bl	8013a14 <UTIL_TIMER_Start>
 800946e:	e7b8      	b.n	80093e2 <ProcessRadioTxDone+0x66>
 8009470:	20008000 	.word	0x20008000
 8009474:	08014d7c 	.word	0x08014d7c
 8009478:	20000dfc 	.word	0x20000dfc
 800947c:	20000840 	.word	0x20000840

08009480 <OnRetransmitTimeoutTimerEvent>:
{
 8009480:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 8009482:	4c07      	ldr	r4, [pc, #28]	; (80094a0 <OnRetransmitTimeoutTimerEvent+0x20>)
 8009484:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 8009488:	f00a fa6a 	bl	8013960 <UTIL_TIMER_Stop>
    if( MacCtx.NodeAckRequested == true )
 800948c:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 8009490:	b113      	cbz	r3, 8009498 <OnRetransmitTimeoutTimerEvent+0x18>
        MacCtx.RetransmitTimeoutRetry = true;
 8009492:	2201      	movs	r2, #1
 8009494:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    OnMacProcessNotify( );
 8009498:	f7ff ff0e 	bl	80092b8 <OnMacProcessNotify>
}
 800949c:	bd10      	pop	{r4, pc}
 800949e:	bf00      	nop
 80094a0:	20000840 	.word	0x20000840

080094a4 <PrepareRxDoneAbort>:
{
 80094a4:	b508      	push	{r3, lr}
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 80094a6:	4b0e      	ldr	r3, [pc, #56]	; (80094e0 <PrepareRxDoneAbort+0x3c>)
 80094a8:	f8d3 2340 	ldr.w	r2, [r3, #832]	; 0x340
 80094ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094b0:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    if( MacCtx.NodeAckRequested == true )
 80094b4:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 80094b8:	b973      	cbnz	r3, 80094d8 <PrepareRxDoneAbort+0x34>
    MacCtx.MacFlags.Bits.McpsInd = 1;
 80094ba:	4b09      	ldr	r3, [pc, #36]	; (80094e0 <PrepareRxDoneAbort+0x3c>)
 80094bc:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 80094c0:	f042 0202 	orr.w	r2, r2, #2
 80094c4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    MacCtx.MacFlags.Bits.MacDone = 1;
 80094c8:	b2d2      	uxtb	r2, r2
 80094ca:	f042 0210 	orr.w	r2, r2, #16
 80094ce:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 80094d2:	f7ff fdd1 	bl	8009078 <UpdateRxSlotIdleState>
}
 80094d6:	bd08      	pop	{r3, pc}
        OnRetransmitTimeoutTimerEvent( NULL );
 80094d8:	2000      	movs	r0, #0
 80094da:	f7ff ffd1 	bl	8009480 <OnRetransmitTimeoutTimerEvent>
 80094de:	e7ec      	b.n	80094ba <PrepareRxDoneAbort+0x16>
 80094e0:	20000840 	.word	0x20000840

080094e4 <LoRaMacCheckForBeaconAcquisition>:
{
 80094e4:	b508      	push	{r3, lr}
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80094e6:	200b      	movs	r0, #11
 80094e8:	f003 fbb6 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 80094ec:	b188      	cbz	r0, 8009512 <LoRaMacCheckForBeaconAcquisition+0x2e>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 80094ee:	4b0b      	ldr	r3, [pc, #44]	; (800951c <LoRaMacCheckForBeaconAcquisition+0x38>)
 80094f0:	f893 0491 	ldrb.w	r0, [r3, #1169]	; 0x491
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 80094f4:	f010 0f01 	tst.w	r0, #1
 80094f8:	d10d      	bne.n	8009516 <LoRaMacCheckForBeaconAcquisition+0x32>
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 80094fa:	f010 0004 	ands.w	r0, r0, #4
 80094fe:	d009      	beq.n	8009514 <LoRaMacCheckForBeaconAcquisition+0x30>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8009500:	461a      	mov	r2, r3
 8009502:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 8009506:	f023 0302 	bic.w	r3, r3, #2
 800950a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
            return 0x01;
 800950e:	2001      	movs	r0, #1
 8009510:	e000      	b.n	8009514 <LoRaMacCheckForBeaconAcquisition+0x30>
    return 0x00;
 8009512:	2000      	movs	r0, #0
}
 8009514:	bd08      	pop	{r3, pc}
    return 0x00;
 8009516:	2000      	movs	r0, #0
 8009518:	e7fc      	b.n	8009514 <LoRaMacCheckForBeaconAcquisition+0x30>
 800951a:	bf00      	nop
 800951c:	20000840 	.word	0x20000840

08009520 <GetFCntDown>:
{
 8009520:	b538      	push	{r3, r4, r5, lr}
 8009522:	9c04      	ldr	r4, [sp, #16]
 8009524:	9d05      	ldr	r5, [sp, #20]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 8009526:	b1f2      	cbz	r2, 8009566 <GetFCntDown+0x46>
 8009528:	4694      	mov	ip, r2
 800952a:	b1f4      	cbz	r4, 800956a <GetFCntDown+0x4a>
 800952c:	b1fd      	cbz	r5, 800956e <GetFCntDown+0x4e>
    switch( addrID )
 800952e:	b188      	cbz	r0, 8009554 <GetFCntDown+0x34>
 8009530:	2801      	cmp	r0, #1
 8009532:	d11e      	bne.n	8009572 <GetFCntDown+0x52>
            if( lrWanVersion.Fields.Minor == 1 )
 8009534:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8009538:	2b01      	cmp	r3, #1
 800953a:	d002      	beq.n	8009542 <GetFCntDown+0x22>
                *fCntID = FCNT_DOWN;
 800953c:	2303      	movs	r3, #3
 800953e:	7023      	strb	r3, [r4, #0]
 8009540:	e00a      	b.n	8009558 <GetFCntDown+0x38>
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 8009542:	b121      	cbz	r1, 800954e <GetFCntDown+0x2e>
 8009544:	2903      	cmp	r1, #3
 8009546:	d002      	beq.n	800954e <GetFCntDown+0x2e>
                    *fCntID = N_FCNT_DOWN;
 8009548:	2301      	movs	r3, #1
 800954a:	7023      	strb	r3, [r4, #0]
 800954c:	e004      	b.n	8009558 <GetFCntDown+0x38>
                    *fCntID = A_FCNT_DOWN;
 800954e:	2302      	movs	r3, #2
 8009550:	7023      	strb	r3, [r4, #0]
 8009552:	e001      	b.n	8009558 <GetFCntDown+0x38>
            *fCntID = MC_FCNT_DOWN_0;
 8009554:	2304      	movs	r3, #4
 8009556:	7023      	strb	r3, [r4, #0]
    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 8009558:	462a      	mov	r2, r5
 800955a:	f8bc 100e 	ldrh.w	r1, [ip, #14]
 800955e:	7820      	ldrb	r0, [r4, #0]
 8009560:	f003 fda4 	bl	800d0ac <LoRaMacCryptoGetFCntDown>
}
 8009564:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 8009566:	2009      	movs	r0, #9
 8009568:	e7fc      	b.n	8009564 <GetFCntDown+0x44>
 800956a:	2009      	movs	r0, #9
 800956c:	e7fa      	b.n	8009564 <GetFCntDown+0x44>
 800956e:	2009      	movs	r0, #9
 8009570:	e7f8      	b.n	8009564 <GetFCntDown+0x44>
    switch( addrID )
 8009572:	2005      	movs	r0, #5
 8009574:	e7f6      	b.n	8009564 <GetFCntDown+0x44>

08009576 <RemoveMacCommands>:
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8009576:	2801      	cmp	r0, #1
 8009578:	d900      	bls.n	800957c <RemoveMacCommands+0x6>
 800957a:	4770      	bx	lr
{
 800957c:	b508      	push	{r3, lr}
        if( request == MCPS_CONFIRMED )
 800957e:	2a01      	cmp	r2, #1
 8009580:	d105      	bne.n	800958e <RemoveMacCommands+0x18>
            if( fCtrl.Bits.Ack == 1 )
 8009582:	f011 0f20 	tst.w	r1, #32
 8009586:	d004      	beq.n	8009592 <RemoveMacCommands+0x1c>
                LoRaMacCommandsRemoveStickyAnsCmds( );
 8009588:	f003 fa12 	bl	800c9b0 <LoRaMacCommandsRemoveStickyAnsCmds>
 800958c:	e001      	b.n	8009592 <RemoveMacCommands+0x1c>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 800958e:	f003 fa0f 	bl	800c9b0 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8009592:	bd08      	pop	{r3, pc}

08009594 <ProcessMacCommands>:
{
 8009594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	b08f      	sub	sp, #60	; 0x3c
 800959a:	4698      	mov	r8, r3
    uint8_t status = 0;
 800959c:	2300      	movs	r3, #0
 800959e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 80095a2:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 80095a6:	f89d 3060 	ldrb.w	r3, [sp, #96]	; 0x60
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	f200 82da 	bhi.w	8009b64 <ProcessMacCommands+0x5d0>
 80095b0:	4605      	mov	r5, r0
 80095b2:	460c      	mov	r4, r1
 80095b4:	4617      	mov	r7, r2
    bool adrBlockFound = false;
 80095b6:	f04f 0900 	mov.w	r9, #0
    while( macIndex < commandsSize )
 80095ba:	42bc      	cmp	r4, r7
 80095bc:	f080 82d2 	bcs.w	8009b64 <ProcessMacCommands+0x5d0>
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 80095c0:	5d28      	ldrb	r0, [r5, r4]
 80095c2:	f003 fa4d 	bl	800ca60 <LoRaMacCommandsGetCmdSize>
 80095c6:	4420      	add	r0, r4
 80095c8:	42b8      	cmp	r0, r7
 80095ca:	f300 82cb 	bgt.w	8009b64 <ProcessMacCommands+0x5d0>
        switch( payload[macIndex++] )
 80095ce:	1c66      	adds	r6, r4, #1
 80095d0:	b2f6      	uxtb	r6, r6
 80095d2:	5d2b      	ldrb	r3, [r5, r4]
 80095d4:	3b02      	subs	r3, #2
 80095d6:	2b11      	cmp	r3, #17
 80095d8:	f200 82c4 	bhi.w	8009b64 <ProcessMacCommands+0x5d0>
 80095dc:	e8df f013 	tbh	[pc, r3, lsl #1]
 80095e0:	00280012 	.word	0x00280012
 80095e4:	00c000ad 	.word	0x00c000ad
 80095e8:	011e0106 	.word	0x011e0106
 80095ec:	01740157 	.word	0x01740157
 80095f0:	02c201c0 	.word	0x02c201c0
 80095f4:	01f002c2 	.word	0x01f002c2
 80095f8:	02c202c2 	.word	0x02c202c2
 80095fc:	02690252 	.word	0x02690252
 8009600:	02a20288 	.word	0x02a20288
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 8009604:	2005      	movs	r0, #5
 8009606:	f003 fb27 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 800960a:	b908      	cbnz	r0, 8009610 <ProcessMacCommands+0x7c>
        switch( payload[macIndex++] )
 800960c:	4634      	mov	r4, r6
 800960e:	e7d4      	b.n	80095ba <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 8009610:	2105      	movs	r1, #5
 8009612:	2000      	movs	r0, #0
 8009614:	f003 fad4 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 8009618:	1ca3      	adds	r3, r4, #2
 800961a:	b2db      	uxtb	r3, r3
 800961c:	5da9      	ldrb	r1, [r5, r6]
 800961e:	4aa7      	ldr	r2, [pc, #668]	; (80098bc <ProcessMacCommands+0x328>)
 8009620:	f882 145c 	strb.w	r1, [r2, #1116]	; 0x45c
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 8009624:	3403      	adds	r4, #3
 8009626:	b2e4      	uxtb	r4, r4
 8009628:	5ceb      	ldrb	r3, [r5, r3]
 800962a:	f882 345d 	strb.w	r3, [r2, #1117]	; 0x45d
 800962e:	e7c4      	b.n	80095ba <ProcessMacCommands+0x26>
                int8_t linkAdrDatarate = DR_0;
 8009630:	2300      	movs	r3, #0
 8009632:	f88d 300a 	strb.w	r3, [sp, #10]
                int8_t linkAdrTxPower = TX_POWER_0;
 8009636:	f88d 300b 	strb.w	r3, [sp, #11]
                uint8_t linkAdrNbRep = 0;
 800963a:	f88d 300c 	strb.w	r3, [sp, #12]
                uint8_t linkAdrNbBytesParsed = 0;
 800963e:	f88d 3014 	strb.w	r3, [sp, #20]
                if( adrBlockFound == false )
 8009642:	f1b9 0f00 	cmp.w	r9, #0
 8009646:	d036      	beq.n	80096b6 <ProcessMacCommands+0x122>
                    macIndex += 4;
 8009648:	3405      	adds	r4, #5
 800964a:	b2e4      	uxtb	r4, r4
 800964c:	e7b5      	b.n	80095ba <ProcessMacCommands+0x26>
                            linkAdrReq.PayloadSize = 5;
 800964e:	2305      	movs	r3, #5
 8009650:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 8009654:	e050      	b.n	80096f8 <ProcessMacCommands+0x164>
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 8009656:	4b9a      	ldr	r3, [pc, #616]	; (80098c0 <ProcessMacCommands+0x32c>)
 8009658:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800965c:	f99d 200a 	ldrsb.w	r2, [sp, #10]
 8009660:	4293      	cmp	r3, r2
 8009662:	da03      	bge.n	800966c <ProcessMacCommands+0xd8>
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 8009664:	4b96      	ldr	r3, [pc, #600]	; (80098c0 <ProcessMacCommands+0x32c>)
 8009666:	2101      	movs	r1, #1
 8009668:	f883 111d 	strb.w	r1, [r3, #285]	; 0x11d
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800966c:	4b94      	ldr	r3, [pc, #592]	; (80098c0 <ProcessMacCommands+0x32c>)
 800966e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 8009672:	f89d 200b 	ldrb.w	r2, [sp, #11]
 8009676:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800967a:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800967e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
 8009682:	e04d      	b.n	8009720 <ProcessMacCommands+0x18c>
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 8009684:	2201      	movs	r2, #1
 8009686:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
 800968a:	2003      	movs	r0, #3
 800968c:	f003 f91c 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 8009690:	3401      	adds	r4, #1
 8009692:	b2e4      	uxtb	r4, r4
 8009694:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8009698:	498a      	ldr	r1, [pc, #552]	; (80098c4 <ProcessMacCommands+0x330>)
 800969a:	fba1 2103 	umull	r2, r1, r1, r3
 800969e:	ebb4 0f91 	cmp.w	r4, r1, lsr #2
 80096a2:	d3ef      	bcc.n	8009684 <ProcessMacCommands+0xf0>
                        macIndex += linkAdrNbBytesParsed - 1;
 80096a4:	441e      	add	r6, r3
 80096a6:	b2f6      	uxtb	r6, r6
 80096a8:	1e74      	subs	r4, r6, #1
 80096aa:	b2e4      	uxtb	r4, r4
                        if( macIndex >= commandsSize )
 80096ac:	42a7      	cmp	r7, r4
 80096ae:	d93a      	bls.n	8009726 <ProcessMacCommands+0x192>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 80096b0:	5d2b      	ldrb	r3, [r5, r4]
 80096b2:	2b03      	cmp	r3, #3
 80096b4:	d136      	bne.n	8009724 <ProcessMacCommands+0x190>
                        linkAdrReq.Payload = &payload[macIndex - 1];
 80096b6:	1e73      	subs	r3, r6, #1
 80096b8:	442b      	add	r3, r5
 80096ba:	9308      	str	r3, [sp, #32]
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 80096bc:	4b80      	ldr	r3, [pc, #512]	; (80098c0 <ProcessMacCommands+0x32c>)
 80096be:	f893 211a 	ldrb.w	r2, [r3, #282]	; 0x11a
 80096c2:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80096c6:	f893 107c 	ldrb.w	r1, [r3, #124]	; 0x7c
 80096ca:	f88d 1025 	strb.w	r1, [sp, #37]	; 0x25
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80096ce:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 80096d2:	f88d 1027 	strb.w	r1, [sp, #39]	; 0x27
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80096d6:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 80096da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 80096de:	f893 1068 	ldrb.w	r1, [r3, #104]	; 0x68
 80096e2:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 80096e6:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 80096ea:	9307      	str	r3, [sp, #28]
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d0ae      	beq.n	800964e <ProcessMacCommands+0xba>
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 80096f0:	1bbb      	subs	r3, r7, r6
 80096f2:	3301      	adds	r3, #1
 80096f4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 80096f8:	ab05      	add	r3, sp, #20
 80096fa:	9301      	str	r3, [sp, #4]
 80096fc:	ab03      	add	r3, sp, #12
 80096fe:	9300      	str	r3, [sp, #0]
 8009700:	f10d 030b 	add.w	r3, sp, #11
 8009704:	f10d 020a 	add.w	r2, sp, #10
 8009708:	a907      	add	r1, sp, #28
 800970a:	486d      	ldr	r0, [pc, #436]	; (80098c0 <ProcessMacCommands+0x32c>)
 800970c:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8009710:	f004 f8e9 	bl	800d8e6 <RegionLinkAdrReq>
 8009714:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                        if( ( status & 0x07 ) == 0x07 )
 8009718:	f000 0007 	and.w	r0, r0, #7
 800971c:	2807      	cmp	r0, #7
 800971e:	d09a      	beq.n	8009656 <ProcessMacCommands+0xc2>
{
 8009720:	2400      	movs	r4, #0
 8009722:	e7b7      	b.n	8009694 <ProcessMacCommands+0x100>
                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 8009724:	4634      	mov	r4, r6
                    if( macIndex < commandsSize )
 8009726:	42bc      	cmp	r4, r7
 8009728:	d204      	bcs.n	8009734 <ProcessMacCommands+0x1a0>
                        macIndex--;
 800972a:	3c01      	subs	r4, #1
 800972c:	b2e4      	uxtb	r4, r4
                    adrBlockFound = true;
 800972e:	f04f 0901 	mov.w	r9, #1
 8009732:	e742      	b.n	80095ba <ProcessMacCommands+0x26>
 8009734:	f04f 0901 	mov.w	r9, #1
                break;
 8009738:	e73f      	b.n	80095ba <ProcessMacCommands+0x26>
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800973a:	3402      	adds	r4, #2
 800973c:	b2e4      	uxtb	r4, r4
 800973e:	5dab      	ldrb	r3, [r5, r6]
 8009740:	f003 030f 	and.w	r3, r3, #15
 8009744:	495e      	ldr	r1, [pc, #376]	; (80098c0 <ProcessMacCommands+0x32c>)
 8009746:	f881 311b 	strb.w	r3, [r1, #283]	; 0x11b
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800974a:	2201      	movs	r2, #1
 800974c:	fa02 f303 	lsl.w	r3, r2, r3
 8009750:	f8a1 3120 	strh.w	r3, [r1, #288]	; 0x120
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 8009754:	2200      	movs	r2, #0
 8009756:	a90b      	add	r1, sp, #44	; 0x2c
 8009758:	2004      	movs	r0, #4
 800975a:	f003 f8b5 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 800975e:	e72c      	b.n	80095ba <ProcessMacCommands+0x26>
                status = 0x07;
 8009760:	2307      	movs	r3, #7
 8009762:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 8009766:	5dab      	ldrb	r3, [r5, r6]
 8009768:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800976c:	f88d 301d 	strb.w	r3, [sp, #29]
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 8009770:	57ab      	ldrsb	r3, [r5, r6]
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	f88d 301c 	strb.w	r3, [sp, #28]
                macIndex++;
 800977a:	1ca3      	adds	r3, r4, #2
 800977c:	b2db      	uxtb	r3, r3
                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800977e:	1ce1      	adds	r1, r4, #3
 8009780:	b2c9      	uxtb	r1, r1
 8009782:	5ceb      	ldrb	r3, [r5, r3]
 8009784:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009786:	1d22      	adds	r2, r4, #4
 8009788:	b2d2      	uxtb	r2, r2
 800978a:	5c69      	ldrb	r1, [r5, r1]
 800978c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009790:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009792:	3405      	adds	r4, #5
 8009794:	b2e4      	uxtb	r4, r4
 8009796:	5caa      	ldrb	r2, [r5, r2]
 8009798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800979c:	9308      	str	r3, [sp, #32]
                rxParamSetupReq.Frequency *= 100;
 800979e:	2264      	movs	r2, #100	; 0x64
 80097a0:	fb02 f303 	mul.w	r3, r2, r3
 80097a4:	9308      	str	r3, [sp, #32]
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 80097a6:	a907      	add	r1, sp, #28
 80097a8:	4b45      	ldr	r3, [pc, #276]	; (80098c0 <ProcessMacCommands+0x32c>)
 80097aa:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80097ae:	f004 f8bf 	bl	800d930 <RegionRxParamSetupReq>
 80097b2:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
                if( ( status & 0x07 ) == 0x07 )
 80097b6:	f000 0307 	and.w	r3, r0, #7
 80097ba:	2b07      	cmp	r3, #7
 80097bc:	d007      	beq.n	80097ce <ProcessMacCommands+0x23a>
                macCmdPayload[0] = status;
 80097be:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 80097c2:	2201      	movs	r2, #1
 80097c4:	a90b      	add	r1, sp, #44	; 0x2c
 80097c6:	2005      	movs	r0, #5
 80097c8:	f003 f87e 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 80097cc:	e6f5      	b.n	80095ba <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 80097ce:	f89d 201c 	ldrb.w	r2, [sp, #28]
 80097d2:	4b3b      	ldr	r3, [pc, #236]	; (80098c0 <ProcessMacCommands+0x32c>)
 80097d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 80097d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 80097dc:	9a08      	ldr	r2, [sp, #32]
 80097de:	66da      	str	r2, [r3, #108]	; 0x6c
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 80097e0:	675a      	str	r2, [r3, #116]	; 0x74
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 80097e2:	f89d 201d 	ldrb.w	r2, [sp, #29]
 80097e6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
 80097ea:	e7e8      	b.n	80097be <ProcessMacCommands+0x22a>
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 80097ec:	4b33      	ldr	r3, [pc, #204]	; (80098bc <ProcessMacCommands+0x328>)
 80097ee:	f8d3 3348 	ldr.w	r3, [r3, #840]	; 0x348
 80097f2:	b17b      	cbz	r3, 8009814 <ProcessMacCommands+0x280>
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	b17b      	cbz	r3, 8009818 <ProcessMacCommands+0x284>
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 80097f8:	4798      	blx	r3
                macCmdPayload[0] = batteryLevel;
 80097fa:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 80097fe:	f008 033f 	and.w	r3, r8, #63	; 0x3f
 8009802:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 8009806:	2202      	movs	r2, #2
 8009808:	a90b      	add	r1, sp, #44	; 0x2c
 800980a:	2006      	movs	r0, #6
 800980c:	f003 f85c 	bl	800c8c8 <LoRaMacCommandsAddCmd>
        switch( payload[macIndex++] )
 8009810:	4634      	mov	r4, r6
                break;
 8009812:	e6d2      	b.n	80095ba <ProcessMacCommands+0x26>
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 8009814:	20ff      	movs	r0, #255	; 0xff
 8009816:	e7f0      	b.n	80097fa <ProcessMacCommands+0x266>
 8009818:	20ff      	movs	r0, #255	; 0xff
 800981a:	e7ee      	b.n	80097fa <ProcessMacCommands+0x266>
                status = 0x03;
 800981c:	2303      	movs	r3, #3
 800981e:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                newChannelReq.ChannelId = payload[macIndex++];
 8009822:	1ca3      	adds	r3, r4, #2
 8009824:	b2db      	uxtb	r3, r3
 8009826:	57aa      	ldrsb	r2, [r5, r6]
 8009828:	f88d 2018 	strb.w	r2, [sp, #24]
                newChannelReq.NewChannel = &chParam;
 800982c:	aa07      	add	r2, sp, #28
 800982e:	9205      	str	r2, [sp, #20]
                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 8009830:	1ce2      	adds	r2, r4, #3
 8009832:	b2d2      	uxtb	r2, r2
 8009834:	5ceb      	ldrb	r3, [r5, r3]
 8009836:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009838:	1d21      	adds	r1, r4, #4
 800983a:	b2c9      	uxtb	r1, r1
 800983c:	5caa      	ldrb	r2, [r5, r2]
 800983e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009842:	9307      	str	r3, [sp, #28]
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009844:	1d62      	adds	r2, r4, #5
 8009846:	b2d2      	uxtb	r2, r2
 8009848:	5c69      	ldrb	r1, [r5, r1]
 800984a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800984e:	9307      	str	r3, [sp, #28]
                chParam.Frequency *= 100;
 8009850:	2164      	movs	r1, #100	; 0x64
 8009852:	fb01 f303 	mul.w	r3, r1, r3
 8009856:	9307      	str	r3, [sp, #28]
                chParam.Rx1Frequency = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	9308      	str	r3, [sp, #32]
                chParam.DrRange.Value = payload[macIndex++];
 800985c:	3406      	adds	r4, #6
 800985e:	b2e4      	uxtb	r4, r4
 8009860:	56ab      	ldrsb	r3, [r5, r2]
 8009862:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 8009866:	a905      	add	r1, sp, #20
 8009868:	4b15      	ldr	r3, [pc, #84]	; (80098c0 <ProcessMacCommands+0x32c>)
 800986a:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800986e:	f004 f873 	bl	800d958 <RegionNewChannelReq>
 8009872:	b2c3      	uxtb	r3, r0
 8009874:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 8009878:	2800      	cmp	r0, #0
 800987a:	f6ff ae9e 	blt.w	80095ba <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 800987e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 8009882:	2201      	movs	r2, #1
 8009884:	a90b      	add	r1, sp, #44	; 0x2c
 8009886:	2007      	movs	r0, #7
 8009888:	f003 f81e 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 800988c:	e695      	b.n	80095ba <ProcessMacCommands+0x26>
                uint8_t delay = payload[macIndex++] & 0x0F;
 800988e:	3402      	adds	r4, #2
 8009890:	b2e4      	uxtb	r4, r4
 8009892:	5dab      	ldrb	r3, [r5, r6]
                if( delay == 0 )
 8009894:	f013 030f 	ands.w	r3, r3, #15
 8009898:	d100      	bne.n	800989c <ProcessMacCommands+0x308>
                    delay++;
 800989a:	3301      	adds	r3, #1
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800989c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80098a0:	fb02 f303 	mul.w	r3, r2, r3
 80098a4:	4a06      	ldr	r2, [pc, #24]	; (80098c0 <ProcessMacCommands+0x32c>)
 80098a6:	6593      	str	r3, [r2, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 80098a8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80098ac:	65d3      	str	r3, [r2, #92]	; 0x5c
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 80098ae:	2200      	movs	r2, #0
 80098b0:	a90b      	add	r1, sp, #44	; 0x2c
 80098b2:	2008      	movs	r0, #8
 80098b4:	f003 f808 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 80098b8:	e67f      	b.n	80095ba <ProcessMacCommands+0x26>
 80098ba:	bf00      	nop
 80098bc:	20000840 	.word	0x20000840
 80098c0:	20008000 	.word	0x20008000
 80098c4:	cccccccd 	.word	0xcccccccd
                uint8_t eirpDwellTime = payload[macIndex++];
 80098c8:	3402      	adds	r4, #2
 80098ca:	b2e4      	uxtb	r4, r4
 80098cc:	5dab      	ldrb	r3, [r5, r6]
                txParamSetupReq.UplinkDwellTime = 0;
 80098ce:	2200      	movs	r2, #0
 80098d0:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.DownlinkDwellTime = 0;
 80098d4:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 80098d8:	f013 0f20 	tst.w	r3, #32
 80098dc:	d002      	beq.n	80098e4 <ProcessMacCommands+0x350>
                    txParamSetupReq.DownlinkDwellTime = 1;
 80098de:	2201      	movs	r2, #1
 80098e0:	f88d 200d 	strb.w	r2, [sp, #13]
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 80098e4:	f013 0f10 	tst.w	r3, #16
 80098e8:	d002      	beq.n	80098f0 <ProcessMacCommands+0x35c>
                    txParamSetupReq.UplinkDwellTime = 1;
 80098ea:	2201      	movs	r2, #1
 80098ec:	f88d 200c 	strb.w	r2, [sp, #12]
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 80098f0:	f003 030f 	and.w	r3, r3, #15
 80098f4:	f88d 300e 	strb.w	r3, [sp, #14]
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 80098f8:	a903      	add	r1, sp, #12
 80098fa:	4b9c      	ldr	r3, [pc, #624]	; (8009b6c <ProcessMacCommands+0x5d8>)
 80098fc:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009900:	f004 f83e 	bl	800d980 <RegionTxParamSetupReq>
 8009904:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009908:	f43f ae57 	beq.w	80095ba <ProcessMacCommands+0x26>
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800990c:	f89d a00c 	ldrb.w	sl, [sp, #12]
 8009910:	4e96      	ldr	r6, [pc, #600]	; (8009b6c <ProcessMacCommands+0x5d8>)
 8009912:	f886 a07c 	strb.w	sl, [r6, #124]	; 0x7c
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 8009916:	f89d 300d 	ldrb.w	r3, [sp, #13]
 800991a:	f886 307d 	strb.w	r3, [r6, #125]	; 0x7d
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800991e:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8009922:	4a93      	ldr	r2, [pc, #588]	; (8009b70 <ProcessMacCommands+0x5dc>)
 8009924:	5cd0      	ldrb	r0, [r2, r3]
 8009926:	f7f6 ff51 	bl	80007cc <__aeabi_ui2f>
 800992a:	f8c6 0080 	str.w	r0, [r6, #128]	; 0x80
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800992e:	2302      	movs	r3, #2
 8009930:	f88d 301c 	strb.w	r3, [sp, #28]
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8009934:	f88d a01e 	strb.w	sl, [sp, #30]
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009938:	a907      	add	r1, sp, #28
 800993a:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800993e:	f003 ff09 	bl	800d754 <RegionGetPhyParam>
 8009942:	9005      	str	r0, [sp, #20]
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 8009944:	b240      	sxtb	r0, r0
 8009946:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800994a:	4298      	cmp	r0, r3
 800994c:	bfb8      	it	lt
 800994e:	4618      	movlt	r0, r3
 8009950:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 8009954:	2200      	movs	r2, #0
 8009956:	a90b      	add	r1, sp, #44	; 0x2c
 8009958:	2009      	movs	r0, #9
 800995a:	f002 ffb5 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 800995e:	e62c      	b.n	80095ba <ProcessMacCommands+0x26>
                status = 0x03;
 8009960:	2303      	movs	r3, #3
 8009962:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                dlChannelReq.ChannelId = payload[macIndex++];
 8009966:	1ca3      	adds	r3, r4, #2
 8009968:	b2db      	uxtb	r3, r3
 800996a:	5daa      	ldrb	r2, [r5, r6]
 800996c:	f88d 201c 	strb.w	r2, [sp, #28]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 8009970:	1ce1      	adds	r1, r4, #3
 8009972:	b2c9      	uxtb	r1, r1
 8009974:	5ceb      	ldrb	r3, [r5, r3]
 8009976:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 8009978:	1d22      	adds	r2, r4, #4
 800997a:	b2d2      	uxtb	r2, r2
 800997c:	5c69      	ldrb	r1, [r5, r1]
 800997e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009982:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 8009984:	3405      	adds	r4, #5
 8009986:	b2e4      	uxtb	r4, r4
 8009988:	5caa      	ldrb	r2, [r5, r2]
 800998a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800998e:	9308      	str	r3, [sp, #32]
                dlChannelReq.Rx1Frequency *= 100;
 8009990:	2264      	movs	r2, #100	; 0x64
 8009992:	fb02 f303 	mul.w	r3, r2, r3
 8009996:	9308      	str	r3, [sp, #32]
                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 8009998:	a907      	add	r1, sp, #28
 800999a:	4b74      	ldr	r3, [pc, #464]	; (8009b6c <ProcessMacCommands+0x5d8>)
 800999c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 80099a0:	f004 f802 	bl	800d9a8 <RegionDlChannelReq>
 80099a4:	b2c3      	uxtb	r3, r0
 80099a6:	f88d 302f 	strb.w	r3, [sp, #47]	; 0x2f
                if( ( int8_t )status >= 0 )
 80099aa:	2800      	cmp	r0, #0
 80099ac:	f6ff ae05 	blt.w	80095ba <ProcessMacCommands+0x26>
                    macCmdPayload[0] = status;
 80099b0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 80099b4:	2201      	movs	r2, #1
 80099b6:	a90b      	add	r1, sp, #44	; 0x2c
 80099b8:	200a      	movs	r0, #10
 80099ba:	f002 ff85 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 80099be:	e5fc      	b.n	80095ba <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 80099c0:	2009      	movs	r0, #9
 80099c2:	f003 f949 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 80099c6:	b928      	cbnz	r0, 80099d4 <ProcessMacCommands+0x440>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 80099c8:	4b6a      	ldr	r3, [pc, #424]	; (8009b74 <ProcessMacCommands+0x5e0>)
 80099ca:	2200      	movs	r2, #0
 80099cc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
        switch( payload[macIndex++] )
 80099d0:	4634      	mov	r4, r6
 80099d2:	e5f2      	b.n	80095ba <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 80099d4:	2109      	movs	r1, #9
 80099d6:	2000      	movs	r0, #0
 80099d8:	f003 f8f2 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
                    SysTime_t gpsEpochTime = { 0 };
 80099dc:	a803      	add	r0, sp, #12
 80099de:	2300      	movs	r3, #0
 80099e0:	9303      	str	r3, [sp, #12]
 80099e2:	9304      	str	r3, [sp, #16]
                    SysTime_t sysTime = { 0 };
 80099e4:	f10d 0a14 	add.w	sl, sp, #20
 80099e8:	9305      	str	r3, [sp, #20]
 80099ea:	9306      	str	r3, [sp, #24]
                    SysTime_t sysTimeCurrent = { 0 };
 80099ec:	f10d 0b1c 	add.w	fp, sp, #28
 80099f0:	9307      	str	r3, [sp, #28]
 80099f2:	9308      	str	r3, [sp, #32]
                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 80099f4:	1ca1      	adds	r1, r4, #2
 80099f6:	b2c9      	uxtb	r1, r1
 80099f8:	5dab      	ldrb	r3, [r5, r6]
 80099fa:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 80099fc:	1ce2      	adds	r2, r4, #3
 80099fe:	b2d2      	uxtb	r2, r2
 8009a00:	5c69      	ldrb	r1, [r5, r1]
 8009a02:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8009a06:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 8009a08:	1d21      	adds	r1, r4, #4
 8009a0a:	b2c9      	uxtb	r1, r1
 8009a0c:	5caa      	ldrb	r2, [r5, r2]
 8009a0e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009a12:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 8009a14:	1d62      	adds	r2, r4, #5
 8009a16:	b2d2      	uxtb	r2, r2
 8009a18:	5c69      	ldrb	r1, [r5, r1]
 8009a1a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8009a1e:	9303      	str	r3, [sp, #12]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 8009a20:	3406      	adds	r4, #6
 8009a22:	b2e4      	uxtb	r4, r4
 8009a24:	5caa      	ldrb	r2, [r5, r2]
 8009a26:	f8ad 2010 	strh.w	r2, [sp, #16]
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 8009a2a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009a2e:	fb01 f202 	mul.w	r2, r1, r2
 8009a32:	0a12      	lsrs	r2, r2, #8
 8009a34:	f8ad 2010 	strh.w	r2, [sp, #16]
                    sysTime = gpsEpochTime;
 8009a38:	c803      	ldmia	r0, {r0, r1}
 8009a3a:	e88a 0003 	stmia.w	sl, {r0, r1}
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 8009a3e:	4a4e      	ldr	r2, [pc, #312]	; (8009b78 <ProcessMacCommands+0x5e4>)
 8009a40:	441a      	add	r2, r3
 8009a42:	9205      	str	r2, [sp, #20]
                    sysTimeCurrent = SysTimeGet( );
 8009a44:	4658      	mov	r0, fp
 8009a46:	f009 fe9d 	bl	8013784 <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 8009a4a:	4e4a      	ldr	r6, [pc, #296]	; (8009b74 <ProcessMacCommands+0x5e0>)
 8009a4c:	f8d6 333c 	ldr.w	r3, [r6, #828]	; 0x33c
 8009a50:	9300      	str	r3, [sp, #0]
 8009a52:	f8d6 3338 	ldr.w	r3, [r6, #824]	; 0x338
 8009a56:	e89a 0006 	ldmia.w	sl, {r1, r2}
 8009a5a:	a80c      	add	r0, sp, #48	; 0x30
 8009a5c:	f009 fe51 	bl	8013702 <SysTimeSub>
 8009a60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009a62:	9300      	str	r3, [sp, #0]
 8009a64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009a66:	e89b 0006 	ldmia.w	fp, {r1, r2}
 8009a6a:	4650      	mov	r0, sl
 8009a6c:	f009 fe2a 	bl	80136c4 <SysTimeAdd>
                    SysTimeSet( sysTime );
 8009a70:	e89a 0003 	ldmia.w	sl, {r0, r1}
 8009a74:	f009 fe64 	bl	8013740 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 8009a78:	f002 fe88 	bl	800c78c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 8009a7c:	2301      	movs	r3, #1
 8009a7e:	f886 3438 	strb.w	r3, [r6, #1080]	; 0x438
 8009a82:	e59a      	b.n	80095ba <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 8009a84:	200c      	movs	r0, #12
 8009a86:	f003 f8e7 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 8009a8a:	b908      	cbnz	r0, 8009a90 <ProcessMacCommands+0x4fc>
        switch( payload[macIndex++] )
 8009a8c:	4634      	mov	r4, r6
 8009a8e:	e594      	b.n	80095ba <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 8009a90:	210c      	movs	r1, #12
 8009a92:	2000      	movs	r0, #0
 8009a94:	f003 f894 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 8009a98:	4b36      	ldr	r3, [pc, #216]	; (8009b74 <ProcessMacCommands+0x5e0>)
 8009a9a:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8009a9e:	3b04      	subs	r3, #4
 8009aa0:	b2db      	uxtb	r3, r3
 8009aa2:	2b01      	cmp	r3, #1
 8009aa4:	d801      	bhi.n	8009aaa <ProcessMacCommands+0x516>
        switch( payload[macIndex++] )
 8009aa6:	4634      	mov	r4, r6
 8009aa8:	e587      	b.n	80095ba <ProcessMacCommands+0x26>
                        LoRaMacClassBPingSlotInfoAns( );
 8009aaa:	f002 fe6b 	bl	800c784 <LoRaMacClassBPingSlotInfoAns>
        switch( payload[macIndex++] )
 8009aae:	4634      	mov	r4, r6
 8009ab0:	e583      	b.n	80095ba <ProcessMacCommands+0x26>
                frequency = ( uint32_t )payload[macIndex++];
 8009ab2:	1ca2      	adds	r2, r4, #2
 8009ab4:	b2d2      	uxtb	r2, r2
 8009ab6:	5dab      	ldrb	r3, [r5, r6]
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009ab8:	1ce1      	adds	r1, r4, #3
 8009aba:	b2c9      	uxtb	r1, r1
 8009abc:	5caa      	ldrb	r2, [r5, r2]
 8009abe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009ac2:	1d22      	adds	r2, r4, #4
 8009ac4:	b2d2      	uxtb	r2, r2
 8009ac6:	5c69      	ldrb	r1, [r5, r1]
 8009ac8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
                datarate = payload[macIndex++] & 0x0F;
 8009acc:	3405      	adds	r4, #5
 8009ace:	b2e4      	uxtb	r4, r4
 8009ad0:	5ca8      	ldrb	r0, [r5, r2]
                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 8009ad2:	2164      	movs	r1, #100	; 0x64
 8009ad4:	fb03 f101 	mul.w	r1, r3, r1
 8009ad8:	f000 000f 	and.w	r0, r0, #15
 8009adc:	f002 fe53 	bl	800c786 <LoRaMacClassBPingSlotChannelReq>
                macCmdPayload[0] = status;
 8009ae0:	f88d 002c 	strb.w	r0, [sp, #44]	; 0x2c
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 8009ae4:	2201      	movs	r2, #1
 8009ae6:	a90b      	add	r1, sp, #44	; 0x2c
 8009ae8:	2011      	movs	r0, #17
 8009aea:	f002 feed 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 8009aee:	e564      	b.n	80095ba <ProcessMacCommands+0x26>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 8009af0:	200d      	movs	r0, #13
 8009af2:	f003 f8b1 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 8009af6:	b908      	cbnz	r0, 8009afc <ProcessMacCommands+0x568>
        switch( payload[macIndex++] )
 8009af8:	4634      	mov	r4, r6
 8009afa:	e55e      	b.n	80095ba <ProcessMacCommands+0x26>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 8009afc:	210d      	movs	r1, #13
 8009afe:	2000      	movs	r0, #0
 8009b00:	f003 f85e 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 8009b04:	1ca2      	adds	r2, r4, #2
 8009b06:	b2d2      	uxtb	r2, r2
 8009b08:	5da8      	ldrb	r0, [r5, r6]
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 8009b0a:	1ce3      	adds	r3, r4, #3
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	5cae      	ldrb	r6, [r5, r2]
                    beaconTimingChannel = payload[macIndex++];
 8009b10:	3404      	adds	r4, #4
 8009b12:	b2e4      	uxtb	r4, r4
                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 8009b14:	4a19      	ldr	r2, [pc, #100]	; (8009b7c <ProcessMacCommands+0x5e8>)
 8009b16:	6812      	ldr	r2, [r2, #0]
 8009b18:	5ce9      	ldrb	r1, [r5, r3]
 8009b1a:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8009b1e:	f002 fe34 	bl	800c78a <LoRaMacClassBBeaconTimingAns>
 8009b22:	e54a      	b.n	80095ba <ProcessMacCommands+0x26>
                    frequency = ( uint32_t )payload[macIndex++];
 8009b24:	1ca1      	adds	r1, r4, #2
 8009b26:	b2c9      	uxtb	r1, r1
 8009b28:	5dab      	ldrb	r3, [r5, r6]
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 8009b2a:	1ce2      	adds	r2, r4, #3
 8009b2c:	b2d2      	uxtb	r2, r2
 8009b2e:	5c68      	ldrb	r0, [r5, r1]
 8009b30:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 8009b34:	3404      	adds	r4, #4
 8009b36:	b2e4      	uxtb	r4, r4
 8009b38:	5ca8      	ldrb	r0, [r5, r2]
 8009b3a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 8009b3e:	2064      	movs	r0, #100	; 0x64
 8009b40:	fb03 f000 	mul.w	r0, r3, r0
 8009b44:	f002 fe23 	bl	800c78e <LoRaMacClassBBeaconFreqReq>
 8009b48:	b140      	cbz	r0, 8009b5c <ProcessMacCommands+0x5c8>
                        macCmdPayload[0] = 1;
 8009b4a:	2301      	movs	r3, #1
 8009b4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 8009b50:	2201      	movs	r2, #1
 8009b52:	a90b      	add	r1, sp, #44	; 0x2c
 8009b54:	2013      	movs	r0, #19
 8009b56:	f002 feb7 	bl	800c8c8 <LoRaMacCommandsAddCmd>
                break;
 8009b5a:	e52e      	b.n	80095ba <ProcessMacCommands+0x26>
                        macCmdPayload[0] = 0;
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 8009b62:	e7f5      	b.n	8009b50 <ProcessMacCommands+0x5bc>
}
 8009b64:	b00f      	add	sp, #60	; 0x3c
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	bf00      	nop
 8009b6c:	20008000 	.word	0x20008000
 8009b70:	0801466c 	.word	0x0801466c
 8009b74:	20000840 	.word	0x20000840
 8009b78:	12d53d80 	.word	0x12d53d80
 8009b7c:	20000dec 	.word	0x20000dec

08009b80 <ProcessRadioRxDone>:
{
 8009b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b84:	b0a5      	sub	sp, #148	; 0x94
    uint8_t *payload = RxDoneParams.Payload;
 8009b86:	4ba5      	ldr	r3, [pc, #660]	; (8009e1c <ProcessRadioRxDone+0x29c>)
 8009b88:	685e      	ldr	r6, [r3, #4]
    uint16_t size = RxDoneParams.Size;
 8009b8a:	891d      	ldrh	r5, [r3, #8]
    int16_t rssi = RxDoneParams.Rssi;
 8009b8c:	f9b3 800a 	ldrsh.w	r8, [r3, #10]
    int8_t snr = RxDoneParams.Snr;
 8009b90:	f993 700c 	ldrsb.w	r7, [r3, #12]
    uint32_t downLinkCounter = 0;
 8009b94:	2300      	movs	r3, #0
 8009b96:	9307      	str	r3, [sp, #28]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 8009b98:	4aa1      	ldr	r2, [pc, #644]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009b9a:	f8d2 90e4 	ldr.w	r9, [r2, #228]	; 0xe4
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 8009b9e:	4aa1      	ldr	r2, [pc, #644]	; (8009e24 <ProcessRadioRxDone+0x2a4>)
 8009ba0:	7811      	ldrb	r1, [r2, #0]
 8009ba2:	f363 0100 	bfi	r1, r3, #0, #1
 8009ba6:	7011      	strb	r1, [r2, #0]
    MacCtx.McpsConfirm.AckReceived = false;
 8009ba8:	4c9f      	ldr	r4, [pc, #636]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009baa:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    MacCtx.RxStatus.Rssi = rssi;
 8009bae:	f8a4 848c 	strh.w	r8, [r4, #1164]	; 0x48c
    MacCtx.RxStatus.Snr = snr;
 8009bb2:	f884 748e 	strb.w	r7, [r4, #1166]	; 0x48e
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 8009bb6:	f894 2490 	ldrb.w	r2, [r4, #1168]	; 0x490
 8009bba:	f884 248f 	strb.w	r2, [r4, #1167]	; 0x48f
    MacCtx.McpsIndication.Port = 0;
 8009bbe:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
    MacCtx.McpsIndication.Multicast = 0;
 8009bc2:	f884 3422 	strb.w	r3, [r4, #1058]	; 0x422
    MacCtx.McpsIndication.IsUplinkTxPending = 0;
 8009bc6:	f884 3425 	strb.w	r3, [r4, #1061]	; 0x425
    MacCtx.McpsIndication.Buffer = NULL;
 8009bca:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
    MacCtx.McpsIndication.BufferSize = 0;
 8009bce:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
    MacCtx.McpsIndication.RxData = false;
 8009bd2:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
    MacCtx.McpsIndication.AckReceived = false;
 8009bd6:	f884 342e 	strb.w	r3, [r4, #1070]	; 0x42e
    MacCtx.McpsIndication.DownLinkCounter = 0;
 8009bda:	f8c4 3430 	str.w	r3, [r4, #1072]	; 0x430
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 8009bde:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
    MacCtx.McpsIndication.DevAddress = 0;
 8009be2:	f8c4 3434 	str.w	r3, [r4, #1076]	; 0x434
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 8009be6:	f884 3438 	strb.w	r3, [r4, #1080]	; 0x438
    MacCtx.McpsIndication.ResponseTimeout = 0;
 8009bea:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
    Radio.Sleep( );
 8009bee:	4b8f      	ldr	r3, [pc, #572]	; (8009e2c <ProcessRadioRxDone+0x2ac>)
 8009bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bf2:	4798      	blx	r3
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 8009bf4:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 8009bf8:	b1d3      	cbz	r3, 8009c30 <ProcessRadioRxDone+0xb0>
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 8009bfa:	4629      	mov	r1, r5
 8009bfc:	4630      	mov	r0, r6
 8009bfe:	f002 fdae 	bl	800c75e <LoRaMacClassBRxBeacon>
 8009c02:	b9d0      	cbnz	r0, 8009c3a <ProcessRadioRxDone+0xba>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009c04:	4b86      	ldr	r3, [pc, #536]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009c06:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009c0a:	2b01      	cmp	r3, #1
 8009c0c:	d01d      	beq.n	8009c4a <ProcessRadioRxDone+0xca>
    if( size == 0 )
 8009c0e:	2d00      	cmp	r5, #0
 8009c10:	d038      	beq.n	8009c84 <ProcessRadioRxDone+0x104>
    macHdr.Value = payload[pktHeaderLen++];
 8009c12:	7834      	ldrb	r4, [r6, #0]
    switch( macHdr.Bits.MType )
 8009c14:	0963      	lsrs	r3, r4, #5
 8009c16:	3b01      	subs	r3, #1
 8009c18:	2b06      	cmp	r3, #6
 8009c1a:	f200 82fc 	bhi.w	800a216 <ProcessRadioRxDone+0x696>
 8009c1e:	e8df f013 	tbh	[pc, r3, lsl #1]
 8009c22:	0038      	.short	0x0038
 8009c24:	00d102fa 	.word	0x00d102fa
 8009c28:	00cd02fa 	.word	0x00cd02fa
 8009c2c:	02cc02fa 	.word	0x02cc02fa
        TimerStop( &MacCtx.RxWindowTimer2 );
 8009c30:	f504 7066 	add.w	r0, r4, #920	; 0x398
 8009c34:	f009 fe94 	bl	8013960 <UTIL_TIMER_Stop>
 8009c38:	e7df      	b.n	8009bfa <ProcessRadioRxDone+0x7a>
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 8009c3a:	4b7b      	ldr	r3, [pc, #492]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009c3c:	f8a3 847e 	strh.w	r8, [r3, #1150]	; 0x47e
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 8009c40:	f883 7480 	strb.w	r7, [r3, #1152]	; 0x480
}
 8009c44:	b025      	add	sp, #148	; 0x94
 8009c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 8009c4a:	f002 fd8c 	bl	800c766 <LoRaMacClassBIsPingExpected>
 8009c4e:	b150      	cbz	r0, 8009c66 <ProcessRadioRxDone+0xe6>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009c50:	2000      	movs	r0, #0
 8009c52:	f002 fd7d 	bl	800c750 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 8009c56:	2000      	movs	r0, #0
 8009c58:	f002 fd7f 	bl	800c75a <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009c5c:	4b72      	ldr	r3, [pc, #456]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009c5e:	2204      	movs	r2, #4
 8009c60:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8009c64:	e7d3      	b.n	8009c0e <ProcessRadioRxDone+0x8e>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009c66:	f002 fd80 	bl	800c76a <LoRaMacClassBIsMulticastExpected>
 8009c6a:	2800      	cmp	r0, #0
 8009c6c:	d0cf      	beq.n	8009c0e <ProcessRadioRxDone+0x8e>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009c6e:	2000      	movs	r0, #0
 8009c70:	f002 fd6f 	bl	800c752 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009c74:	2000      	movs	r0, #0
 8009c76:	f002 fd71 	bl	800c75c <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009c7a:	4b6b      	ldr	r3, [pc, #428]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009c7c:	2205      	movs	r2, #5
 8009c7e:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
 8009c82:	e7c4      	b.n	8009c0e <ProcessRadioRxDone+0x8e>
        MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009c84:	4b68      	ldr	r3, [pc, #416]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009c86:	2201      	movs	r2, #1
 8009c88:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
        PrepareRxDoneAbort( );
 8009c8c:	f7ff fc0a 	bl	80094a4 <PrepareRxDoneAbort>
        return;
 8009c90:	e7d8      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 8009c92:	2d10      	cmp	r5, #16
 8009c94:	d92e      	bls.n	8009cf4 <ProcessRadioRxDone+0x174>
            macMsgJoinAccept.Buffer = payload;
 8009c96:	9608      	str	r6, [sp, #32]
            macMsgJoinAccept.BufSize = size;
 8009c98:	b2ed      	uxtb	r5, r5
 8009c9a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 8009c9e:	4b60      	ldr	r3, [pc, #384]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009ca0:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 8009ca4:	bb6b      	cbnz	r3, 8009d02 <ProcessRadioRxDone+0x182>
            SecureElementGetJoinEui( joinEui );
 8009ca6:	a804      	add	r0, sp, #16
 8009ca8:	f007 fb0a 	bl	80112c0 <SecureElementGetJoinEui>
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, joinEui, &macMsgJoinAccept );
 8009cac:	aa08      	add	r2, sp, #32
 8009cae:	a904      	add	r1, sp, #16
 8009cb0:	20ff      	movs	r0, #255	; 0xff
 8009cb2:	f003 fb4d 	bl	800d350 <LoRaMacCryptoHandleJoinAccept>
 8009cb6:	4604      	mov	r4, r0
            verifyRxDr.DatarateParams.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009cb8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009cbc:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009cc0:	f88d 300c 	strb.w	r3, [sp, #12]
            verifyRxDr.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009cc4:	4b56      	ldr	r3, [pc, #344]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009cc6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009cca:	f88d 200d 	strb.w	r2, [sp, #13]
            rxDrValid = RegionVerify( Nvm.MacGroup2.Region, &verifyRxDr, PHY_RX_DR );
 8009cce:	2207      	movs	r2, #7
 8009cd0:	a903      	add	r1, sp, #12
 8009cd2:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009cd6:	f003 fd81 	bl	800d7dc <RegionVerify>
            if( ( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus ) && ( rxDrValid == true ) )
 8009cda:	b904      	cbnz	r4, 8009cde <ProcessRadioRxDone+0x15e>
 8009cdc:	b9c0      	cbnz	r0, 8009d10 <ProcessRadioRxDone+0x190>
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 8009cde:	2001      	movs	r0, #1
 8009ce0:	f002 ffba 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 8009ce4:	2800      	cmp	r0, #0
 8009ce6:	f000 8282 	beq.w	800a1ee <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 8009cea:	2101      	movs	r1, #1
 8009cec:	2007      	movs	r0, #7
 8009cee:	f002 ff67 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
 8009cf2:	e27c      	b.n	800a1ee <ProcessRadioRxDone+0x66e>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009cf4:	4b4c      	ldr	r3, [pc, #304]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009cfc:	f7ff fbd2 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009d00:	e7a0      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009d02:	4b49      	ldr	r3, [pc, #292]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009d04:	2201      	movs	r2, #1
 8009d06:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009d0a:	f7ff fbcb 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009d0e:	e799      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 8009d10:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
 8009d14:	4c42      	ldr	r4, [pc, #264]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009d16:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 8009d1a:	f89d 202a 	ldrb.w	r2, [sp, #42]	; 0x2a
 8009d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8009d22:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 8009d26:	f89d 202b 	ldrb.w	r2, [sp, #43]	; 0x2b
 8009d2a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009d2e:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 8009d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d34:	f8c4 10e4 	str.w	r1, [r4, #228]	; 0xe4
                SecureElementSetDevAddr( ACTIVATION_TYPE_OTAA, Nvm.MacGroup2.DevAddr );
 8009d38:	2002      	movs	r0, #2
 8009d3a:	f007 facf 	bl	80112dc <SecureElementSetDevAddr>
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 8009d3e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 8009d42:	f3c3 1202 	ubfx	r2, r3, #4, #3
 8009d46:	f884 2069 	strb.w	r2, [r4, #105]	; 0x69
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009d4a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8009d4e:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 8009d52:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 8009d56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
 8009d5a:	65a3      	str	r3, [r4, #88]	; 0x58
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 8009d5c:	b90b      	cbnz	r3, 8009d62 <ProcessRadioRxDone+0x1e2>
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 8009d5e:	2201      	movs	r2, #1
 8009d60:	65a2      	str	r2, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 8009d62:	4c2f      	ldr	r4, [pc, #188]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009d64:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009d6a:	fb02 f303 	mul.w	r3, r2, r3
 8009d6e:	65a3      	str	r3, [r4, #88]	; 0x58
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 8009d70:	4413      	add	r3, r2
 8009d72:	65e3      	str	r3, [r4, #92]	; 0x5c
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = 1;
 8009d74:	2601      	movs	r6, #1
 8009d76:	f884 6068 	strb.w	r6, [r4, #104]	; 0x68
                Nvm.MacGroup2.Version.Fields.Minor = 0;
 8009d7a:	2300      	movs	r3, #0
 8009d7c:	f884 312e 	strb.w	r3, [r4, #302]	; 0x12e
                applyCFList.Payload = macMsgJoinAccept.CFList;
 8009d80:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 8009d84:	9322      	str	r3, [sp, #136]	; 0x88
                applyCFList.Size = size - 17;
 8009d86:	3d11      	subs	r5, #17
 8009d88:	f88d 508c 	strb.w	r5, [sp, #140]	; 0x8c
                applyCFList.JoinChannel = MacCtx.Channel;
 8009d8c:	4b26      	ldr	r3, [pc, #152]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009d8e:	f893 341b 	ldrb.w	r3, [r3, #1051]	; 0x41b
 8009d92:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 8009d96:	a921      	add	r1, sp, #132	; 0x84
 8009d98:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 8009d9c:	f003 fd33 	bl	800d806 <RegionApplyCFList>
                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 8009da0:	2302      	movs	r3, #2
 8009da2:	f884 3130 	strb.w	r3, [r4, #304]	; 0x130
                if( LoRaMacConfirmQueueIsCmdActive( joinType ) == true )
 8009da6:	4630      	mov	r0, r6
 8009da8:	f002 ff56 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 8009dac:	2800      	cmp	r0, #0
 8009dae:	f000 821e 	beq.w	800a1ee <ProcessRadioRxDone+0x66e>
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, joinType );
 8009db2:	4631      	mov	r1, r6
 8009db4:	2000      	movs	r0, #0
 8009db6:	f002 ff03 	bl	800cbc0 <LoRaMacConfirmQueueSetStatus>
 8009dba:	e218      	b.n	800a1ee <ProcessRadioRxDone+0x66e>
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 8009dbc:	4b1a      	ldr	r3, [pc, #104]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8009dc4:	4b16      	ldr	r3, [pc, #88]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009dc6:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 8009dca:	f88d 207e 	strb.w	r2, [sp, #126]	; 0x7e
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 8009dce:	4a16      	ldr	r2, [pc, #88]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009dd0:	f992 2424 	ldrsb.w	r2, [r2, #1060]	; 0x424
 8009dd4:	f88d 207d 	strb.w	r2, [sp, #125]	; 0x7d
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 8009dd8:	220d      	movs	r2, #13
 8009dda:	f88d 207c 	strb.w	r2, [sp, #124]	; 0x7c
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 8009dde:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009de2:	b113      	cbz	r3, 8009dea <ProcessRadioRxDone+0x26a>
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 8009de4:	230e      	movs	r3, #14
 8009de6:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8009dea:	a91f      	add	r1, sp, #124	; 0x7c
 8009dec:	4b0c      	ldr	r3, [pc, #48]	; (8009e20 <ProcessRadioRxDone+0x2a0>)
 8009dee:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 8009df2:	f003 fcaf 	bl	800d754 <RegionGetPhyParam>
 8009df6:	901e      	str	r0, [sp, #120]	; 0x78
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 8009df8:	f1a5 030d 	sub.w	r3, r5, #13
 8009dfc:	b21b      	sxth	r3, r3
 8009dfe:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009e02:	b200      	sxth	r0, r0
 8009e04:	4283      	cmp	r3, r0
 8009e06:	dc01      	bgt.n	8009e0c <ProcessRadioRxDone+0x28c>
 8009e08:	2d0b      	cmp	r5, #11
 8009e0a:	d811      	bhi.n	8009e30 <ProcessRadioRxDone+0x2b0>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009e0c:	4b06      	ldr	r3, [pc, #24]	; (8009e28 <ProcessRadioRxDone+0x2a8>)
 8009e0e:	2201      	movs	r2, #1
 8009e10:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009e14:	f7ff fb46 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009e18:	e714      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
 8009e1a:	bf00      	nop
 8009e1c:	20000dec 	.word	0x20000dec
 8009e20:	20008000 	.word	0x20008000
 8009e24:	2000083c 	.word	0x2000083c
 8009e28:	20000840 	.word	0x20000840
 8009e2c:	08014d7c 	.word	0x08014d7c
            macMsgData.Buffer = payload;
 8009e30:	9612      	str	r6, [sp, #72]	; 0x48
            macMsgData.BufSize = size;
 8009e32:	f88d 504c 	strb.w	r5, [sp, #76]	; 0x4c
            macMsgData.FRMPayload = MacCtx.RxPayload;
 8009e36:	4bb8      	ldr	r3, [pc, #736]	; (800a118 <ProcessRadioRxDone+0x598>)
 8009e38:	931b      	str	r3, [sp, #108]	; 0x6c
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 8009e3a:	23ff      	movs	r3, #255	; 0xff
 8009e3c:	f88d 3070 	strb.w	r3, [sp, #112]	; 0x70
            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 8009e40:	a812      	add	r0, sp, #72	; 0x48
 8009e42:	f003 fb53 	bl	800d4ec <LoRaMacParserData>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	d142      	bne.n	8009ed0 <ProcessRadioRxDone+0x350>
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 8009e4a:	4bb4      	ldr	r3, [pc, #720]	; (800a11c <ProcessRadioRxDone+0x59c>)
 8009e4c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d044      	beq.n	8009ede <ProcessRadioRxDone+0x35e>
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 8009e54:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009e56:	4bb2      	ldr	r3, [pc, #712]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009e58:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 8009e5c:	a904      	add	r1, sp, #16
 8009e5e:	a812      	add	r0, sp, #72	; 0x48
 8009e60:	f7ff f996 	bl	8009190 <DetermineFrameType>
 8009e64:	4605      	mov	r5, r0
 8009e66:	2800      	cmp	r0, #0
 8009e68:	d164      	bne.n	8009f34 <ProcessRadioRxDone+0x3b4>
            downLinkCounter = 0;
 8009e6a:	2300      	movs	r3, #0
 8009e6c:	9307      	str	r3, [sp, #28]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009e6e:	4603      	mov	r3, r0
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d066      	beq.n	8009f42 <ProcessRadioRxDone+0x3c2>
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 8009e74:	2601      	movs	r6, #1
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 8009e76:	2d01      	cmp	r5, #1
 8009e78:	d10a      	bne.n	8009e90 <ProcessRadioRxDone+0x310>
 8009e7a:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8009e7e:	2b03      	cmp	r3, #3
 8009e80:	f040 808d 	bne.w	8009f9e <ProcessRadioRxDone+0x41e>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 8009e84:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 8009e88:	f013 0f60 	tst.w	r3, #96	; 0x60
 8009e8c:	f040 8087 	bne.w	8009f9e <ProcessRadioRxDone+0x41e>
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 8009e90:	ab07      	add	r3, sp, #28
 8009e92:	9301      	str	r3, [sp, #4]
 8009e94:	f10d 031b 	add.w	r3, sp, #27
 8009e98:	9300      	str	r3, [sp, #0]
 8009e9a:	4ba0      	ldr	r3, [pc, #640]	; (800a11c <ProcessRadioRxDone+0x59c>)
 8009e9c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 8009ea0:	aa12      	add	r2, sp, #72	; 0x48
 8009ea2:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8009ea6:	4630      	mov	r0, r6
 8009ea8:	f7ff fb3a 	bl	8009520 <GetFCntDown>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009eac:	2800      	cmp	r0, #0
 8009eae:	f000 8082 	beq.w	8009fb6 <ProcessRadioRxDone+0x436>
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 8009eb2:	2807      	cmp	r0, #7
 8009eb4:	d07a      	beq.n	8009fac <ProcessRadioRxDone+0x42c>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009eb6:	4b9a      	ldr	r3, [pc, #616]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009ebe:	9a07      	ldr	r2, [sp, #28]
 8009ec0:	4b97      	ldr	r3, [pc, #604]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009ec2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009ec6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
                PrepareRxDoneAbort( );
 8009eca:	f7ff faeb 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009ece:	e6b9      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009ed0:	4b93      	ldr	r3, [pc, #588]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009ed8:	f7ff fae4 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009edc:	e6b2      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                if( LoRaMacClassBIsPingExpected( ) == true )
 8009ede:	f002 fc42 	bl	800c766 <LoRaMacClassBIsPingExpected>
 8009ee2:	b188      	cbz	r0, 8009f08 <ProcessRadioRxDone+0x388>
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009ee4:	2000      	movs	r0, #0
 8009ee6:	f002 fc33 	bl	800c750 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 8009eea:	2000      	movs	r0, #0
 8009eec:	f002 fc35 	bl	800c75a <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 8009ef0:	4b8b      	ldr	r3, [pc, #556]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009ef2:	2204      	movs	r2, #4
 8009ef4:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009ef8:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8009efc:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009f00:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009f02:	f002 fc49 	bl	800c798 <LoRaMacClassBSetFPendingBit>
 8009f06:	e7a5      	b.n	8009e54 <ProcessRadioRxDone+0x2d4>
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 8009f08:	f002 fc2f 	bl	800c76a <LoRaMacClassBIsMulticastExpected>
 8009f0c:	2800      	cmp	r0, #0
 8009f0e:	d0a1      	beq.n	8009e54 <ProcessRadioRxDone+0x2d4>
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 8009f10:	2000      	movs	r0, #0
 8009f12:	f002 fc1e 	bl	800c752 <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 8009f16:	2000      	movs	r0, #0
 8009f18:	f002 fc20 	bl	800c75c <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 8009f1c:	4b80      	ldr	r3, [pc, #512]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009f1e:	2205      	movs	r2, #5
 8009f20:	f883 248f 	strb.w	r2, [r3, #1167]	; 0x48f
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 8009f24:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 8009f28:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8009f2c:	9814      	ldr	r0, [sp, #80]	; 0x50
 8009f2e:	f002 fc33 	bl	800c798 <LoRaMacClassBSetFPendingBit>
 8009f32:	e78f      	b.n	8009e54 <ProcessRadioRxDone+0x2d4>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009f34:	4b7a      	ldr	r3, [pc, #488]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009f36:	2201      	movs	r2, #1
 8009f38:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009f3c:	f7ff fab2 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009f40:	e680      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009f42:	461e      	mov	r6, r3
 8009f44:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8009f48:	4974      	ldr	r1, [pc, #464]	; (800a11c <ProcessRadioRxDone+0x59c>)
 8009f4a:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 8009f4e:	f8d2 20ec 	ldr.w	r2, [r2, #236]	; 0xec
 8009f52:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009f54:	428a      	cmp	r2, r1
 8009f56:	d002      	beq.n	8009f5e <ProcessRadioRxDone+0x3de>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8009f58:	3301      	adds	r3, #1
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	e788      	b.n	8009e70 <ProcessRadioRxDone+0x2f0>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 8009f5e:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8009f62:	486e      	ldr	r0, [pc, #440]	; (800a11c <ProcessRadioRxDone+0x59c>)
 8009f64:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 8009f68:	f891 10e9 	ldrb.w	r1, [r1, #233]	; 0xe9
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	d0f3      	beq.n	8009f58 <ProcessRadioRxDone+0x3d8>
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 8009f70:	2330      	movs	r3, #48	; 0x30
 8009f72:	fb03 0306 	mla	r3, r3, r6, r0
 8009f76:	f893 60ea 	ldrb.w	r6, [r3, #234]	; 0xea
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 8009f7a:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 8009f7e:	681b      	ldr	r3, [r3, #0]
 8009f80:	9307      	str	r3, [sp, #28]
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 8009f82:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	d002      	beq.n	8009f90 <ProcessRadioRxDone+0x410>
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009f8a:	4691      	mov	r9, r2
                    multicast = 1;
 8009f8c:	2501      	movs	r5, #1
 8009f8e:	e772      	b.n	8009e76 <ProcessRadioRxDone+0x2f6>
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 8009f90:	4b63      	ldr	r3, [pc, #396]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009f92:	2103      	movs	r1, #3
 8009f94:	f883 148f 	strb.w	r1, [r3, #1167]	; 0x48f
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 8009f98:	4691      	mov	r9, r2
                    multicast = 1;
 8009f9a:	2501      	movs	r5, #1
 8009f9c:	e76b      	b.n	8009e76 <ProcessRadioRxDone+0x2f6>
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8009f9e:	4b60      	ldr	r3, [pc, #384]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 8009fa6:	f7ff fa7d 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 8009faa:	e64b      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 8009fac:	4b5c      	ldr	r3, [pc, #368]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009fae:	2208      	movs	r2, #8
 8009fb0:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 8009fb4:	e783      	b.n	8009ebe <ProcessRadioRxDone+0x33e>
            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 8009fb6:	ab12      	add	r3, sp, #72	; 0x48
 8009fb8:	9300      	str	r3, [sp, #0]
 8009fba:	9b07      	ldr	r3, [sp, #28]
 8009fbc:	f89d 201b 	ldrb.w	r2, [sp, #27]
 8009fc0:	4649      	mov	r1, r9
 8009fc2:	4630      	mov	r0, r6
 8009fc4:	f003 f91c 	bl	800d200 <LoRaMacCryptoUnsecureMessage>
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 8009fc8:	2800      	cmp	r0, #0
 8009fca:	d14a      	bne.n	800a062 <ProcessRadioRxDone+0x4e2>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009fcc:	4b54      	ldr	r3, [pc, #336]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 8009fce:	2100      	movs	r1, #0
 8009fd0:	f883 1421 	strb.w	r1, [r3, #1057]	; 0x421
            MacCtx.McpsIndication.Multicast = multicast;
 8009fd4:	f883 5422 	strb.w	r5, [r3, #1058]	; 0x422
            MacCtx.McpsIndication.Buffer = NULL;
 8009fd8:	f8c3 1428 	str.w	r1, [r3, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = 0;
 8009fdc:	f883 142c 	strb.w	r1, [r3, #1068]	; 0x42c
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 8009fe0:	9a07      	ldr	r2, [sp, #28]
 8009fe2:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 8009fe6:	f8c3 246c 	str.w	r2, [r3, #1132]	; 0x46c
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009fea:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 8009fee:	f3c2 1240 	ubfx	r2, r2, #5, #1
 8009ff2:	f883 242e 	strb.w	r2, [r3, #1070]	; 0x42e
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8009ff6:	f883 1441 	strb.w	r1, [r3, #1089]	; 0x441
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 8009ffa:	f883 2444 	strb.w	r2, [r3, #1092]	; 0x444
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8009ffe:	f893 048f 	ldrb.w	r0, [r3, #1167]	; 0x48f
 800a002:	2801      	cmp	r0, #1
 800a004:	d93b      	bls.n	800a07e <ProcessRadioRxDone+0x4fe>
            if( multicast == 1 )
 800a006:	2d01      	cmp	r5, #1
 800a008:	d03f      	beq.n	800a08a <ProcessRadioRxDone+0x50a>
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800a00a:	f004 04e0 	and.w	r4, r4, #224	; 0xe0
 800a00e:	2ca0      	cmp	r4, #160	; 0xa0
 800a010:	d040      	beq.n	800a094 <ProcessRadioRxDone+0x514>
                    Nvm.MacGroup1.SrvAckRequested = false;
 800a012:	2300      	movs	r3, #0
 800a014:	4a41      	ldr	r2, [pc, #260]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a016:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800a01a:	4a41      	ldr	r2, [pc, #260]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a01c:	f882 3420 	strb.w	r3, [r2, #1056]	; 0x420
            if( ( ( Nvm.MacGroup1.SrvAckRequested == true ) || ( macMsgData.FHDR.FCtrl.Bits.FPending > 0 ) ) && ( Nvm.MacGroup2.DeviceClass == CLASS_A ) )
 800a020:	4b3e      	ldr	r3, [pc, #248]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a022:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800a026:	b923      	cbnz	r3, 800a032 <ProcessRadioRxDone+0x4b2>
 800a028:	f89d 3054 	ldrb.w	r3, [sp, #84]	; 0x54
 800a02c:	f013 0f10 	tst.w	r3, #16
 800a030:	d007      	beq.n	800a042 <ProcessRadioRxDone+0x4c2>
 800a032:	4b3a      	ldr	r3, [pc, #232]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a034:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a038:	b91b      	cbnz	r3, 800a042 <ProcessRadioRxDone+0x4c2>
                MacCtx.McpsIndication.IsUplinkTxPending = 1;
 800a03a:	4b39      	ldr	r3, [pc, #228]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a03c:	2201      	movs	r2, #1
 800a03e:	f883 2425 	strb.w	r2, [r3, #1061]	; 0x425
            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800a042:	4b37      	ldr	r3, [pc, #220]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a044:	f893 2440 	ldrb.w	r2, [r3, #1088]	; 0x440
 800a048:	f89d 1054 	ldrb.w	r1, [sp, #84]	; 0x54
 800a04c:	f7ff fa93 	bl	8009576 <RemoveMacCommands>
            switch( fType )
 800a050:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800a054:	2b03      	cmp	r3, #3
 800a056:	f200 8099 	bhi.w	800a18c <ProcessRadioRxDone+0x60c>
 800a05a:	e8df f003 	tbb	[pc, r3]
 800a05e:	6536      	.short	0x6536
 800a060:	8777      	.short	0x8777
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800a062:	2802      	cmp	r0, #2
 800a064:	d006      	beq.n	800a074 <ProcessRadioRxDone+0x4f4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800a066:	4b2e      	ldr	r3, [pc, #184]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a068:	220b      	movs	r2, #11
 800a06a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                PrepareRxDoneAbort( );
 800a06e:	f7ff fa19 	bl	80094a4 <PrepareRxDoneAbort>
                return;
 800a072:	e5e7      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800a074:	4b2a      	ldr	r3, [pc, #168]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a076:	220a      	movs	r2, #10
 800a078:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
 800a07c:	e7f7      	b.n	800a06e <ProcessRadioRxDone+0x4ee>
                Nvm.MacGroup1.AdrAckCounter = 0;
 800a07e:	4b27      	ldr	r3, [pc, #156]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a080:	6299      	str	r1, [r3, #40]	; 0x28
                Nvm.MacGroup2.DownlinkReceived = true;
 800a082:	2201      	movs	r2, #1
 800a084:	f883 211e 	strb.w	r2, [r3, #286]	; 0x11e
 800a088:	e7bd      	b.n	800a006 <ProcessRadioRxDone+0x486>
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800a08a:	4b25      	ldr	r3, [pc, #148]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a08c:	2202      	movs	r2, #2
 800a08e:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
 800a092:	e7c5      	b.n	800a020 <ProcessRadioRxDone+0x4a0>
                    Nvm.MacGroup1.SrvAckRequested = true;
 800a094:	4b21      	ldr	r3, [pc, #132]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a096:	2201      	movs	r2, #1
 800a098:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800a09c:	f893 312e 	ldrb.w	r3, [r3, #302]	; 0x12e
 800a0a0:	b913      	cbnz	r3, 800a0a8 <ProcessRadioRxDone+0x528>
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800a0a2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a0a4:	4b1d      	ldr	r3, [pc, #116]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a0a6:	635a      	str	r2, [r3, #52]	; 0x34
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800a0a8:	4b1d      	ldr	r3, [pc, #116]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	f883 2420 	strb.w	r2, [r3, #1056]	; 0x420
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800a0b0:	4290      	cmp	r0, r2
 800a0b2:	d9b5      	bls.n	800a020 <ProcessRadioRxDone+0x4a0>
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800a0b4:	4b19      	ldr	r3, [pc, #100]	; (800a11c <ProcessRadioRxDone+0x59c>)
 800a0b6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a0ba:	4b19      	ldr	r3, [pc, #100]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a0bc:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800a0c0:	4a18      	ldr	r2, [pc, #96]	; (800a124 <ProcessRadioRxDone+0x5a4>)
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	f8c3 2498 	str.w	r2, [r3, #1176]	; 0x498
 800a0c8:	e7aa      	b.n	800a020 <ProcessRadioRxDone+0x4a0>
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a0ca:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a0ce:	4c14      	ldr	r4, [pc, #80]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a0d0:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a0d4:	9300      	str	r3, [sp, #0]
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	f002 020f 	and.w	r2, r2, #15
 800a0dc:	2100      	movs	r1, #0
 800a0de:	a816      	add	r0, sp, #88	; 0x58
 800a0e0:	f7ff fa58 	bl	8009594 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a0e4:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a0e8:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a0ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0ee:	f8c4 3428 	str.w	r3, [r4, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a0f2:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
 800a0f6:	f884 342c 	strb.w	r3, [r4, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	f884 342d 	strb.w	r3, [r4, #1069]	; 0x42d
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a100:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a104:	2be0      	cmp	r3, #224	; 0xe0
 800a106:	d048      	beq.n	800a19a <ProcessRadioRxDone+0x61a>
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a108:	4a05      	ldr	r2, [pc, #20]	; (800a120 <ProcessRadioRxDone+0x5a0>)
 800a10a:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a10e:	f043 0302 	orr.w	r3, r3, #2
 800a112:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
            break;
 800a116:	e06a      	b.n	800a1ee <ProcessRadioRxDone+0x66e>
 800a118:	20000a78 	.word	0x20000a78
 800a11c:	20008000 	.word	0x20008000
 800a120:	20000840 	.word	0x20000840
 800a124:	20000dec 	.word	0x20000dec
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800a128:	f89d 2054 	ldrb.w	r2, [sp, #84]	; 0x54
 800a12c:	4c44      	ldr	r4, [pc, #272]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a12e:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a132:	9300      	str	r3, [sp, #0]
 800a134:	463b      	mov	r3, r7
 800a136:	f002 020f 	and.w	r2, r2, #15
 800a13a:	2100      	movs	r1, #0
 800a13c:	a816      	add	r0, sp, #88	; 0x58
 800a13e:	f7ff fa29 	bl	8009594 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a142:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a146:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800a14a:	e7d9      	b.n	800a100 <ProcessRadioRxDone+0x580>
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800a14c:	4c3c      	ldr	r4, [pc, #240]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a14e:	f894 348f 	ldrb.w	r3, [r4, #1167]	; 0x48f
 800a152:	9300      	str	r3, [sp, #0]
 800a154:	463b      	mov	r3, r7
 800a156:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a15a:	2100      	movs	r1, #0
 800a15c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a15e:	f7ff fa19 	bl	8009594 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a162:	f89d 3068 	ldrb.w	r3, [sp, #104]	; 0x68
 800a166:	f884 3423 	strb.w	r3, [r4, #1059]	; 0x423
                    break;
 800a16a:	e7c9      	b.n	800a100 <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a16c:	f89d 2068 	ldrb.w	r2, [sp, #104]	; 0x68
 800a170:	4b33      	ldr	r3, [pc, #204]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a172:	f883 2423 	strb.w	r2, [r3, #1059]	; 0x423
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800a176:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a178:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800a17c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 800a180:	f883 242c 	strb.w	r2, [r3, #1068]	; 0x42c
                    MacCtx.McpsIndication.RxData = true;
 800a184:	2201      	movs	r2, #1
 800a186:	f883 242d 	strb.w	r2, [r3, #1069]	; 0x42d
                    break;
 800a18a:	e7b9      	b.n	800a100 <ProcessRadioRxDone+0x580>
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a18c:	4b2c      	ldr	r3, [pc, #176]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a18e:	2201      	movs	r2, #1
 800a190:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
                    PrepareRxDoneAbort( );
 800a194:	f7ff f986 	bl	80094a4 <PrepareRxDoneAbort>
                    break;
 800a198:	e7b2      	b.n	800a100 <ProcessRadioRxDone+0x580>
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800a19a:	4a2a      	ldr	r2, [pc, #168]	; (800a244 <ProcessRadioRxDone+0x6c4>)
 800a19c:	f892 211f 	ldrb.w	r2, [r2, #287]	; 0x11f
 800a1a0:	2a00      	cmp	r2, #0
 800a1a2:	d1b1      	bne.n	800a108 <ProcessRadioRxDone+0x588>
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800a1a4:	4a26      	ldr	r2, [pc, #152]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a1a6:	f882 3423 	strb.w	r3, [r2, #1059]	; 0x423
                MacCtx.McpsIndication.Buffer = NULL;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	f8c2 3428 	str.w	r3, [r2, #1064]	; 0x428
                MacCtx.McpsIndication.BufferSize = 0;
 800a1b0:	f882 342c 	strb.w	r3, [r2, #1068]	; 0x42c
                MacCtx.McpsIndication.RxData = false;
 800a1b4:	f882 342d 	strb.w	r3, [r2, #1069]	; 0x42d
 800a1b8:	e7a6      	b.n	800a108 <ProcessRadioRxDone+0x588>
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800a1ba:	1e6a      	subs	r2, r5, #1
 800a1bc:	4c20      	ldr	r4, [pc, #128]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a1be:	f504 770e 	add.w	r7, r4, #568	; 0x238
 800a1c2:	b292      	uxth	r2, r2
 800a1c4:	1c71      	adds	r1, r6, #1
 800a1c6:	4638      	mov	r0, r7
 800a1c8:	f007 f997 	bl	80114fa <memcpy1>
            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800a1cc:	2303      	movs	r3, #3
 800a1ce:	f884 3420 	strb.w	r3, [r4, #1056]	; 0x420
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	f884 3421 	strb.w	r3, [r4, #1057]	; 0x421
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800a1d8:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800a1dc:	3d01      	subs	r5, #1
 800a1de:	f884 542c 	strb.w	r5, [r4, #1068]	; 0x42c
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800a1e2:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800a1e6:	f043 0302 	orr.w	r3, r3, #2
 800a1ea:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800a1ee:	4b14      	ldr	r3, [pc, #80]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a1f0:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800a1f4:	2b01      	cmp	r3, #1
 800a1f6:	d915      	bls.n	800a224 <ProcessRadioRxDone+0x6a4>
    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800a1f8:	4b11      	ldr	r3, [pc, #68]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a1fa:	f893 348f 	ldrb.w	r3, [r3, #1167]	; 0x48f
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d006      	beq.n	800a210 <ProcessRadioRxDone+0x690>
        MacCtx.MacFlags.Bits.MacDone = 1;
 800a202:	4a0f      	ldr	r2, [pc, #60]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a204:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a208:	f043 0310 	orr.w	r3, r3, #16
 800a20c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800a210:	f7fe ff32 	bl	8009078 <UpdateRxSlotIdleState>
 800a214:	e516      	b.n	8009c44 <ProcessRadioRxDone+0xc4>
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a216:	4b0a      	ldr	r3, [pc, #40]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a218:	2201      	movs	r2, #1
 800a21a:	f883 2421 	strb.w	r2, [r3, #1057]	; 0x421
            PrepareRxDoneAbort( );
 800a21e:	f7ff f941 	bl	80094a4 <PrepareRxDoneAbort>
            break;
 800a222:	e7e4      	b.n	800a1ee <ProcessRadioRxDone+0x66e>
        if( MacCtx.NodeAckRequested == true )
 800a224:	4b06      	ldr	r3, [pc, #24]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a226:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d0e4      	beq.n	800a1f8 <ProcessRadioRxDone+0x678>
            if( MacCtx.McpsConfirm.AckReceived == true )
 800a22e:	4b04      	ldr	r3, [pc, #16]	; (800a240 <ProcessRadioRxDone+0x6c0>)
 800a230:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
 800a234:	2b00      	cmp	r3, #0
 800a236:	d0df      	beq.n	800a1f8 <ProcessRadioRxDone+0x678>
                OnRetransmitTimeoutTimerEvent( NULL );
 800a238:	2000      	movs	r0, #0
 800a23a:	f7ff f921 	bl	8009480 <OnRetransmitTimeoutTimerEvent>
 800a23e:	e7db      	b.n	800a1f8 <ProcessRadioRxDone+0x678>
 800a240:	20000840 	.word	0x20000840
 800a244:	20008000 	.word	0x20008000

0800a248 <ProcessRadioTxTimeout>:
{
 800a248:	b510      	push	{r4, lr}
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a24a:	4b0f      	ldr	r3, [pc, #60]	; (800a288 <ProcessRadioTxTimeout+0x40>)
 800a24c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a250:	2b02      	cmp	r3, #2
 800a252:	d002      	beq.n	800a25a <ProcessRadioTxTimeout+0x12>
        Radio.Sleep( );
 800a254:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <ProcessRadioTxTimeout+0x44>)
 800a256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a258:	4798      	blx	r3
    UpdateRxSlotIdleState( );
 800a25a:	f7fe ff0d 	bl	8009078 <UpdateRxSlotIdleState>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800a25e:	4c0c      	ldr	r4, [pc, #48]	; (800a290 <ProcessRadioTxTimeout+0x48>)
 800a260:	2002      	movs	r0, #2
 800a262:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800a266:	f002 fcd9 	bl	800cc1c <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800a26a:	f894 341a 	ldrb.w	r3, [r4, #1050]	; 0x41a
 800a26e:	b113      	cbz	r3, 800a276 <ProcessRadioTxTimeout+0x2e>
        MacCtx.RetransmitTimeoutRetry = true;
 800a270:	2201      	movs	r2, #1
 800a272:	f884 2419 	strb.w	r2, [r4, #1049]	; 0x419
    MacCtx.MacFlags.Bits.MacDone = 1;
 800a276:	4a06      	ldr	r2, [pc, #24]	; (800a290 <ProcessRadioTxTimeout+0x48>)
 800a278:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a27c:	f043 0310 	orr.w	r3, r3, #16
 800a280:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
}
 800a284:	bd10      	pop	{r4, pc}
 800a286:	bf00      	nop
 800a288:	20008000 	.word	0x20008000
 800a28c:	08014d7c 	.word	0x08014d7c
 800a290:	20000840 	.word	0x20000840

0800a294 <CheckForClassBCollision>:
{
 800a294:	b508      	push	{r3, lr}
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a296:	f002 fa64 	bl	800c762 <LoRaMacClassBIsBeaconExpected>
 800a29a:	b978      	cbnz	r0, 800a2bc <CheckForClassBCollision+0x28>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a29c:	4b09      	ldr	r3, [pc, #36]	; (800a2c4 <CheckForClassBCollision+0x30>)
 800a29e:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a2a2:	2b01      	cmp	r3, #1
 800a2a4:	d001      	beq.n	800a2aa <CheckForClassBCollision+0x16>
    return LORAMAC_STATUS_OK;
 800a2a6:	2000      	movs	r0, #0
}
 800a2a8:	bd08      	pop	{r3, pc}
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a2aa:	f002 fa5c 	bl	800c766 <LoRaMacClassBIsPingExpected>
 800a2ae:	b938      	cbnz	r0, 800a2c0 <CheckForClassBCollision+0x2c>
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a2b0:	f002 fa5b 	bl	800c76a <LoRaMacClassBIsMulticastExpected>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	d0f7      	beq.n	800a2a8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a2b8:	200f      	movs	r0, #15
 800a2ba:	e7f5      	b.n	800a2a8 <CheckForClassBCollision+0x14>
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800a2bc:	200e      	movs	r0, #14
 800a2be:	e7f3      	b.n	800a2a8 <CheckForClassBCollision+0x14>
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800a2c0:	200f      	movs	r0, #15
 800a2c2:	e7f1      	b.n	800a2a8 <CheckForClassBCollision+0x14>
 800a2c4:	20008000 	.word	0x20008000

0800a2c8 <HandleRadioRxErrorTimeout>:
{
 800a2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ca:	4605      	mov	r5, r0
 800a2cc:	460c      	mov	r4, r1
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800a2ce:	4b34      	ldr	r3, [pc, #208]	; (800a3a0 <HandleRadioRxErrorTimeout+0xd8>)
 800a2d0:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a2d4:	2b02      	cmp	r3, #2
 800a2d6:	d002      	beq.n	800a2de <HandleRadioRxErrorTimeout+0x16>
        Radio.Sleep( );
 800a2d8:	4b32      	ldr	r3, [pc, #200]	; (800a3a4 <HandleRadioRxErrorTimeout+0xdc>)
 800a2da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2dc:	4798      	blx	r3
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800a2de:	f002 fa40 	bl	800c762 <LoRaMacClassBIsBeaconExpected>
 800a2e2:	4606      	mov	r6, r0
 800a2e4:	bb50      	cbnz	r0, 800a33c <HandleRadioRxErrorTimeout+0x74>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a2e6:	4b2e      	ldr	r3, [pc, #184]	; (800a3a0 <HandleRadioRxErrorTimeout+0xd8>)
 800a2e8:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d02c      	beq.n	800a34a <HandleRadioRxErrorTimeout+0x82>
    if( classBRx == false )
 800a2f0:	2e00      	cmp	r6, #0
 800a2f2:	d152      	bne.n	800a39a <HandleRadioRxErrorTimeout+0xd2>
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800a2f4:	4b2c      	ldr	r3, [pc, #176]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a2f6:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d13c      	bne.n	800a378 <HandleRadioRxErrorTimeout+0xb0>
            if( MacCtx.NodeAckRequested == true )
 800a2fe:	4b2a      	ldr	r3, [pc, #168]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a300:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a304:	b113      	cbz	r3, 800a30c <HandleRadioRxErrorTimeout+0x44>
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800a306:	4b28      	ldr	r3, [pc, #160]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a308:	f883 5441 	strb.w	r5, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800a30c:	4628      	mov	r0, r5
 800a30e:	f002 fc85 	bl	800cc1c <LoRaMacConfirmQueueSetStatusCmn>
            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800a312:	4b23      	ldr	r3, [pc, #140]	; (800a3a0 <HandleRadioRxErrorTimeout+0xd8>)
 800a314:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800a316:	f009 faed 	bl	80138f4 <UTIL_TIMER_GetElapsedTime>
 800a31a:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a31c:	f8d3 33b4 	ldr.w	r3, [r3, #948]	; 0x3b4
 800a320:	4298      	cmp	r0, r3
 800a322:	d33a      	bcc.n	800a39a <HandleRadioRxErrorTimeout+0xd2>
                TimerStop( &MacCtx.RxWindowTimer2 );
 800a324:	4c20      	ldr	r4, [pc, #128]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a326:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800a32a:	f009 fb19 	bl	8013960 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800a32e:	f894 3491 	ldrb.w	r3, [r4, #1169]	; 0x491
 800a332:	f043 0310 	orr.w	r3, r3, #16
 800a336:	f884 3491 	strb.w	r3, [r4, #1169]	; 0x491
 800a33a:	e02e      	b.n	800a39a <HandleRadioRxErrorTimeout+0xd2>
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800a33c:	2002      	movs	r0, #2
 800a33e:	f002 fa06 	bl	800c74e <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800a342:	2000      	movs	r0, #0
 800a344:	f002 fa08 	bl	800c758 <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800a348:	e7cd      	b.n	800a2e6 <HandleRadioRxErrorTimeout+0x1e>
        if( LoRaMacClassBIsPingExpected( ) == true )
 800a34a:	f002 fa0c 	bl	800c766 <LoRaMacClassBIsPingExpected>
 800a34e:	4607      	mov	r7, r0
 800a350:	b950      	cbnz	r0, 800a368 <HandleRadioRxErrorTimeout+0xa0>
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800a352:	f002 fa0a 	bl	800c76a <LoRaMacClassBIsMulticastExpected>
 800a356:	2800      	cmp	r0, #0
 800a358:	d0ca      	beq.n	800a2f0 <HandleRadioRxErrorTimeout+0x28>
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a35a:	2000      	movs	r0, #0
 800a35c:	f002 f9f9 	bl	800c752 <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800a360:	2000      	movs	r0, #0
 800a362:	f002 f9fb 	bl	800c75c <LoRaMacClassBMulticastSlotTimerEvent>
    if( classBRx == false )
 800a366:	e018      	b.n	800a39a <HandleRadioRxErrorTimeout+0xd2>
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800a368:	2000      	movs	r0, #0
 800a36a:	f002 f9f1 	bl	800c750 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800a36e:	2000      	movs	r0, #0
 800a370:	f002 f9f3 	bl	800c75a <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800a374:	463e      	mov	r6, r7
 800a376:	e7ec      	b.n	800a352 <HandleRadioRxErrorTimeout+0x8a>
            if( MacCtx.NodeAckRequested == true )
 800a378:	4b0b      	ldr	r3, [pc, #44]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a37a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 800a37e:	b113      	cbz	r3, 800a386 <HandleRadioRxErrorTimeout+0xbe>
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800a380:	4b09      	ldr	r3, [pc, #36]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a382:	f883 4441 	strb.w	r4, [r3, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800a386:	4620      	mov	r0, r4
 800a388:	f002 fc48 	bl	800cc1c <LoRaMacConfirmQueueSetStatusCmn>
            MacCtx.MacFlags.Bits.MacDone = 1;
 800a38c:	4a06      	ldr	r2, [pc, #24]	; (800a3a8 <HandleRadioRxErrorTimeout+0xe0>)
 800a38e:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a392:	f043 0310 	orr.w	r3, r3, #16
 800a396:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    UpdateRxSlotIdleState( );
 800a39a:	f7fe fe6d 	bl	8009078 <UpdateRxSlotIdleState>
}
 800a39e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a3a0:	20008000 	.word	0x20008000
 800a3a4:	08014d7c 	.word	0x08014d7c
 800a3a8:	20000840 	.word	0x20000840

0800a3ac <ProcessRadioRxError>:
{
 800a3ac:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800a3ae:	2106      	movs	r1, #6
 800a3b0:	2005      	movs	r0, #5
 800a3b2:	f7ff ff89 	bl	800a2c8 <HandleRadioRxErrorTimeout>
}
 800a3b6:	bd08      	pop	{r3, pc}

0800a3b8 <ProcessRadioRxTimeout>:
{
 800a3b8:	b508      	push	{r3, lr}
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800a3ba:	2104      	movs	r1, #4
 800a3bc:	2003      	movs	r0, #3
 800a3be:	f7ff ff83 	bl	800a2c8 <HandleRadioRxErrorTimeout>
}
 800a3c2:	bd08      	pop	{r3, pc}

0800a3c4 <LoRaMacHandleIrqEvents>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a3c4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800a3c8:	b672      	cpsid	i
    events = LoRaMacRadioEvents;
 800a3ca:	4a14      	ldr	r2, [pc, #80]	; (800a41c <LoRaMacHandleIrqEvents+0x58>)
 800a3cc:	6813      	ldr	r3, [r2, #0]
    LoRaMacRadioEvents.Value = 0;
 800a3ce:	2000      	movs	r0, #0
 800a3d0:	6010      	str	r0, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a3d2:	f381 8810 	msr	PRIMASK, r1
    if( events.Value != 0 )
 800a3d6:	b303      	cbz	r3, 800a41a <LoRaMacHandleIrqEvents+0x56>
{
 800a3d8:	b510      	push	{r4, lr}
        if( events.Events.TxDone == 1 )
 800a3da:	b2dc      	uxtb	r4, r3
 800a3dc:	f013 0f20 	tst.w	r3, #32
 800a3e0:	d10c      	bne.n	800a3fc <LoRaMacHandleIrqEvents+0x38>
        if( events.Events.RxDone == 1 )
 800a3e2:	f014 0f10 	tst.w	r4, #16
 800a3e6:	d10c      	bne.n	800a402 <LoRaMacHandleIrqEvents+0x3e>
        if( events.Events.TxTimeout == 1 )
 800a3e8:	f014 0f08 	tst.w	r4, #8
 800a3ec:	d10c      	bne.n	800a408 <LoRaMacHandleIrqEvents+0x44>
        if( events.Events.RxError == 1 )
 800a3ee:	f014 0f04 	tst.w	r4, #4
 800a3f2:	d10c      	bne.n	800a40e <LoRaMacHandleIrqEvents+0x4a>
        if( events.Events.RxTimeout == 1 )
 800a3f4:	f014 0f02 	tst.w	r4, #2
 800a3f8:	d10c      	bne.n	800a414 <LoRaMacHandleIrqEvents+0x50>
}
 800a3fa:	bd10      	pop	{r4, pc}
            ProcessRadioTxDone( );
 800a3fc:	f7fe ffbe 	bl	800937c <ProcessRadioTxDone>
 800a400:	e7ef      	b.n	800a3e2 <LoRaMacHandleIrqEvents+0x1e>
            ProcessRadioRxDone( );
 800a402:	f7ff fbbd 	bl	8009b80 <ProcessRadioRxDone>
 800a406:	e7ef      	b.n	800a3e8 <LoRaMacHandleIrqEvents+0x24>
            ProcessRadioTxTimeout( );
 800a408:	f7ff ff1e 	bl	800a248 <ProcessRadioTxTimeout>
 800a40c:	e7ef      	b.n	800a3ee <LoRaMacHandleIrqEvents+0x2a>
            ProcessRadioRxError( );
 800a40e:	f7ff ffcd 	bl	800a3ac <ProcessRadioRxError>
 800a412:	e7ef      	b.n	800a3f4 <LoRaMacHandleIrqEvents+0x30>
            ProcessRadioRxTimeout( );
 800a414:	f7ff ffd0 	bl	800a3b8 <ProcessRadioRxTimeout>
}
 800a418:	e7ef      	b.n	800a3fa <LoRaMacHandleIrqEvents+0x36>
 800a41a:	4770      	bx	lr
 800a41c:	2000083c 	.word	0x2000083c

0800a420 <LoRaMacHandleResponseTimeout>:
    if( startTimeInMs != 0 )
 800a420:	b909      	cbnz	r1, 800a426 <LoRaMacHandleResponseTimeout+0x6>
    return false;
 800a422:	2000      	movs	r0, #0
}
 800a424:	4770      	bx	lr
{
 800a426:	b510      	push	{r4, lr}
 800a428:	4604      	mov	r4, r0
 800a42a:	4608      	mov	r0, r1
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800a42c:	f009 fa62 	bl	80138f4 <UTIL_TIMER_GetElapsedTime>
        if( elapsedTime > timeoutInMs )
 800a430:	42a0      	cmp	r0, r4
 800a432:	d801      	bhi.n	800a438 <LoRaMacHandleResponseTimeout+0x18>
    return false;
 800a434:	2000      	movs	r0, #0
}
 800a436:	bd10      	pop	{r4, pc}
            Nvm.MacGroup1.SrvAckRequested = false;
 800a438:	4b02      	ldr	r3, [pc, #8]	; (800a444 <LoRaMacHandleResponseTimeout+0x24>)
 800a43a:	2200      	movs	r2, #0
 800a43c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
            return true;
 800a440:	2001      	movs	r0, #1
 800a442:	e7f8      	b.n	800a436 <LoRaMacHandleResponseTimeout+0x16>
 800a444:	20008000 	.word	0x20008000

0800a448 <LoRaMacHandleMlmeRequest>:
{
 800a448:	b508      	push	{r3, lr}
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a44a:	4b14      	ldr	r3, [pc, #80]	; (800a49c <LoRaMacHandleMlmeRequest+0x54>)
 800a44c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a450:	f013 0f04 	tst.w	r3, #4
 800a454:	d100      	bne.n	800a458 <LoRaMacHandleMlmeRequest+0x10>
}
 800a456:	bd08      	pop	{r3, pc}
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800a458:	2001      	movs	r0, #1
 800a45a:	f002 fbfd 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 800a45e:	b178      	cbz	r0, 800a480 <LoRaMacHandleMlmeRequest+0x38>
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800a460:	2001      	movs	r0, #1
 800a462:	f002 fbc3 	bl	800cbec <LoRaMacConfirmQueueGetStatus>
 800a466:	b918      	cbnz	r0, 800a470 <LoRaMacHandleMlmeRequest+0x28>
                MacCtx.ChannelsNbTransCounter = 0;
 800a468:	4b0c      	ldr	r3, [pc, #48]	; (800a49c <LoRaMacHandleMlmeRequest+0x54>)
 800a46a:	2200      	movs	r2, #0
 800a46c:	f883 2418 	strb.w	r2, [r3, #1048]	; 0x418
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a470:	4a0a      	ldr	r2, [pc, #40]	; (800a49c <LoRaMacHandleMlmeRequest+0x54>)
 800a472:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a476:	f023 0302 	bic.w	r3, r3, #2
 800a47a:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
 800a47e:	e7ea      	b.n	800a456 <LoRaMacHandleMlmeRequest+0xe>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800a480:	2006      	movs	r0, #6
 800a482:	f002 fbe9 	bl	800cc58 <LoRaMacConfirmQueueIsCmdActive>
 800a486:	2800      	cmp	r0, #0
 800a488:	d0e5      	beq.n	800a456 <LoRaMacHandleMlmeRequest+0xe>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800a48a:	4a04      	ldr	r2, [pc, #16]	; (800a49c <LoRaMacHandleMlmeRequest+0x54>)
 800a48c:	f8d2 3340 	ldr.w	r3, [r2, #832]	; 0x340
 800a490:	f023 0302 	bic.w	r3, r3, #2
 800a494:	f8c2 3340 	str.w	r3, [r2, #832]	; 0x340
}
 800a498:	e7dd      	b.n	800a456 <LoRaMacHandleMlmeRequest+0xe>
 800a49a:	bf00      	nop
 800a49c:	20000840 	.word	0x20000840

0800a4a0 <SerializeTxFrame>:
{
 800a4a0:	b508      	push	{r3, lr}
    switch( MacCtx.TxMsg.Type )
 800a4a2:	4b0f      	ldr	r3, [pc, #60]	; (800a4e0 <SerializeTxFrame+0x40>)
 800a4a4:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a4a8:	b11b      	cbz	r3, 800a4b2 <SerializeTxFrame+0x12>
 800a4aa:	2b04      	cmp	r3, #4
 800a4ac:	d00a      	beq.n	800a4c4 <SerializeTxFrame+0x24>
 800a4ae:	2003      	movs	r0, #3
}
 800a4b0:	bd08      	pop	{r3, pc}
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a4b2:	480c      	ldr	r0, [pc, #48]	; (800a4e4 <SerializeTxFrame+0x44>)
 800a4b4:	f003 f879 	bl	800d5aa <LoRaMacSerializerJoinRequest>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a4b8:	b968      	cbnz	r0, 800a4d6 <SerializeTxFrame+0x36>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a4ba:	4b09      	ldr	r3, [pc, #36]	; (800a4e0 <SerializeTxFrame+0x40>)
 800a4bc:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a4c0:	801a      	strh	r2, [r3, #0]
            break;
 800a4c2:	e7f5      	b.n	800a4b0 <SerializeTxFrame+0x10>
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800a4c4:	4807      	ldr	r0, [pc, #28]	; (800a4e4 <SerializeTxFrame+0x44>)
 800a4c6:	f003 f8a6 	bl	800d616 <LoRaMacSerializerData>
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800a4ca:	b930      	cbnz	r0, 800a4da <SerializeTxFrame+0x3a>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a4cc:	4b04      	ldr	r3, [pc, #16]	; (800a4e0 <SerializeTxFrame+0x40>)
 800a4ce:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a4d2:	801a      	strh	r2, [r3, #0]
            break;
 800a4d4:	e7ec      	b.n	800a4b0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4d6:	2011      	movs	r0, #17
 800a4d8:	e7ea      	b.n	800a4b0 <SerializeTxFrame+0x10>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a4da:	2011      	movs	r0, #17
 800a4dc:	e7e8      	b.n	800a4b0 <SerializeTxFrame+0x10>
 800a4de:	bf00      	nop
 800a4e0:	20000840 	.word	0x20000840
 800a4e4:	20000948 	.word	0x20000948

0800a4e8 <ComputeRxWindowParameters>:
{
 800a4e8:	b570      	push	{r4, r5, r6, lr}
 800a4ea:	b082      	sub	sp, #8
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a4ec:	4c1e      	ldr	r4, [pc, #120]	; (800a568 <ComputeRxWindowParameters+0x80>)
 800a4ee:	f894 6048 	ldrb.w	r6, [r4, #72]	; 0x48
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800a4f2:	f994 3069 	ldrsb.w	r3, [r4, #105]	; 0x69
 800a4f6:	f994 2039 	ldrsb.w	r2, [r4, #57]	; 0x39
 800a4fa:	f894 107d 	ldrb.w	r1, [r4, #125]	; 0x7d
 800a4fe:	4630      	mov	r0, r6
 800a500:	f003 fa97 	bl	800da32 <RegionApplyDrOffset>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a504:	4d19      	ldr	r5, [pc, #100]	; (800a56c <ComputeRxWindowParameters+0x84>)
 800a506:	f505 736e 	add.w	r3, r5, #952	; 0x3b8
 800a50a:	9300      	str	r3, [sp, #0]
 800a50c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a50e:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a512:	b241      	sxtb	r1, r0
 800a514:	4630      	mov	r0, r6
 800a516:	f003 f99d 	bl	800d854 <RegionComputeRxWindowParameters>
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a51a:	f505 7374 	add.w	r3, r5, #976	; 0x3d0
 800a51e:	9300      	str	r3, [sp, #0]
 800a520:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a522:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a526:	f994 1070 	ldrsb.w	r1, [r4, #112]	; 0x70
 800a52a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a52e:	f003 f991 	bl	800d854 <RegionComputeRxWindowParameters>
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a534:	f8d5 13c4 	ldr.w	r1, [r5, #964]	; 0x3c4
 800a538:	440b      	add	r3, r1
 800a53a:	f8c5 33b0 	str.w	r3, [r5, #944]	; 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a53e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 800a540:	f8d5 23dc 	ldr.w	r2, [r5, #988]	; 0x3dc
 800a544:	4413      	add	r3, r2
 800a546:	f8c5 33b4 	str.w	r3, [r5, #948]	; 0x3b4
    if( MacCtx.TxMsg.Type != LORAMAC_MSG_TYPE_DATA )
 800a54a:	f895 3104 	ldrb.w	r3, [r5, #260]	; 0x104
 800a54e:	2b04      	cmp	r3, #4
 800a550:	d007      	beq.n	800a562 <ComputeRxWindowParameters+0x7a>
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800a552:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800a554:	4419      	add	r1, r3
 800a556:	f8c5 13b0 	str.w	r1, [r5, #944]	; 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800a55a:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800a55c:	440a      	add	r2, r1
 800a55e:	f8c5 23b4 	str.w	r2, [r5, #948]	; 0x3b4
}
 800a562:	b002      	add	sp, #8
 800a564:	bd70      	pop	{r4, r5, r6, pc}
 800a566:	bf00      	nop
 800a568:	20008000 	.word	0x20008000
 800a56c:	20000840 	.word	0x20000840

0800a570 <VerifyTxFrame>:
{
 800a570:	b510      	push	{r4, lr}
 800a572:	b082      	sub	sp, #8
    size_t macCmdsSize = 0;
 800a574:	2300      	movs	r3, #0
 800a576:	9301      	str	r3, [sp, #4]
    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800a578:	4b0d      	ldr	r3, [pc, #52]	; (800a5b0 <VerifyTxFrame+0x40>)
 800a57a:	f893 4130 	ldrb.w	r4, [r3, #304]	; 0x130
 800a57e:	b914      	cbnz	r4, 800a586 <VerifyTxFrame+0x16>
}
 800a580:	4620      	mov	r0, r4
 800a582:	b002      	add	sp, #8
 800a584:	bd10      	pop	{r4, pc}
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800a586:	a801      	add	r0, sp, #4
 800a588:	f002 fa2c 	bl	800c9e4 <LoRaMacCommandsGetSizeSerializedCmds>
 800a58c:	4604      	mov	r4, r0
 800a58e:	b968      	cbnz	r0, 800a5ac <VerifyTxFrame+0x3c>
        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800a590:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800a594:	4b06      	ldr	r3, [pc, #24]	; (800a5b0 <VerifyTxFrame+0x40>)
 800a596:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800a59a:	4b06      	ldr	r3, [pc, #24]	; (800a5b4 <VerifyTxFrame+0x44>)
 800a59c:	f893 0237 	ldrb.w	r0, [r3, #567]	; 0x237
 800a5a0:	f7fe feda 	bl	8009358 <ValidatePayloadLength>
 800a5a4:	2800      	cmp	r0, #0
 800a5a6:	d1eb      	bne.n	800a580 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_LENGTH_ERROR;
 800a5a8:	2408      	movs	r4, #8
 800a5aa:	e7e9      	b.n	800a580 <VerifyTxFrame+0x10>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800a5ac:	2413      	movs	r4, #19
 800a5ae:	e7e7      	b.n	800a580 <VerifyTxFrame+0x10>
 800a5b0:	20008000 	.word	0x20008000
 800a5b4:	20000840 	.word	0x20000840

0800a5b8 <SecureFrame>:
{
 800a5b8:	b530      	push	{r4, r5, lr}
 800a5ba:	b083      	sub	sp, #12
    uint32_t fCntUp = 0;
 800a5bc:	2300      	movs	r3, #0
 800a5be:	9301      	str	r3, [sp, #4]
    switch( MacCtx.TxMsg.Type )
 800a5c0:	4b18      	ldr	r3, [pc, #96]	; (800a624 <SecureFrame+0x6c>)
 800a5c2:	f893 3104 	ldrb.w	r3, [r3, #260]	; 0x104
 800a5c6:	b133      	cbz	r3, 800a5d6 <SecureFrame+0x1e>
 800a5c8:	4605      	mov	r5, r0
 800a5ca:	460c      	mov	r4, r1
 800a5cc:	2b04      	cmp	r3, #4
 800a5ce:	d00b      	beq.n	800a5e8 <SecureFrame+0x30>
 800a5d0:	2003      	movs	r0, #3
}
 800a5d2:	b003      	add	sp, #12
 800a5d4:	bd30      	pop	{r4, r5, pc}
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800a5d6:	4814      	ldr	r0, [pc, #80]	; (800a628 <SecureFrame+0x70>)
 800a5d8:	f002 fda8 	bl	800d12c <LoRaMacCryptoPrepareJoinRequest>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a5dc:	b9d8      	cbnz	r0, 800a616 <SecureFrame+0x5e>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800a5de:	4b11      	ldr	r3, [pc, #68]	; (800a624 <SecureFrame+0x6c>)
 800a5e0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a5e4:	801a      	strh	r2, [r3, #0]
            break;
 800a5e6:	e7f4      	b.n	800a5d2 <SecureFrame+0x1a>
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800a5e8:	a801      	add	r0, sp, #4
 800a5ea:	f002 fd53 	bl	800d094 <LoRaMacCryptoGetFCntUp>
 800a5ee:	b9a0      	cbnz	r0, 800a61a <SecureFrame+0x62>
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 800a5f0:	4b0c      	ldr	r3, [pc, #48]	; (800a624 <SecureFrame+0x6c>)
 800a5f2:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800a5f6:	b113      	cbz	r3, 800a5fe <SecureFrame+0x46>
                fCntUp -= 1;
 800a5f8:	9b01      	ldr	r3, [sp, #4]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	9301      	str	r3, [sp, #4]
            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 800a5fe:	4b0a      	ldr	r3, [pc, #40]	; (800a628 <SecureFrame+0x70>)
 800a600:	4622      	mov	r2, r4
 800a602:	4629      	mov	r1, r5
 800a604:	9801      	ldr	r0, [sp, #4]
 800a606:	f002 fdb7 	bl	800d178 <LoRaMacCryptoSecureMessage>
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 800a60a:	b940      	cbnz	r0, 800a61e <SecureFrame+0x66>
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800a60c:	4b05      	ldr	r3, [pc, #20]	; (800a624 <SecureFrame+0x6c>)
 800a60e:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
 800a612:	801a      	strh	r2, [r3, #0]
            break;
 800a614:	e7dd      	b.n	800a5d2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a616:	2011      	movs	r0, #17
 800a618:	e7db      	b.n	800a5d2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800a61a:	2012      	movs	r0, #18
 800a61c:	e7d9      	b.n	800a5d2 <SecureFrame+0x1a>
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800a61e:	2011      	movs	r0, #17
 800a620:	e7d7      	b.n	800a5d2 <SecureFrame+0x1a>
 800a622:	bf00      	nop
 800a624:	20000840 	.word	0x20000840
 800a628:	20000948 	.word	0x20000948

0800a62c <SendFrameOnChannel>:
{
 800a62c:	b570      	push	{r4, r5, r6, lr}
 800a62e:	b086      	sub	sp, #24
 800a630:	4606      	mov	r6, r0
    int8_t txPower = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	f88d 3007 	strb.w	r3, [sp, #7]
    txConfig.Channel = channel;
 800a638:	f88d 0008 	strb.w	r0, [sp, #8]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a63c:	4d36      	ldr	r5, [pc, #216]	; (800a718 <SendFrameOnChannel+0xec>)
 800a63e:	f995 3039 	ldrsb.w	r3, [r5, #57]	; 0x39
 800a642:	f88d 3009 	strb.w	r3, [sp, #9]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800a646:	f995 3038 	ldrsb.w	r3, [r5, #56]	; 0x38
 800a64a:	f88d 300a 	strb.w	r3, [sp, #10]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 800a64e:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
 800a652:	9303      	str	r3, [sp, #12]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800a654:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
 800a658:	9304      	str	r3, [sp, #16]
    txConfig.PktLen = MacCtx.PktBufferLen;
 800a65a:	4c30      	ldr	r4, [pc, #192]	; (800a71c <SendFrameOnChannel+0xf0>)
 800a65c:	8823      	ldrh	r3, [r4, #0]
 800a65e:	f8ad 3014 	strh.w	r3, [sp, #20]
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a662:	f895 3130 	ldrb.w	r3, [r5, #304]	; 0x130
 800a666:	f88d 3016 	strb.w	r3, [sp, #22]
    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 800a66a:	f204 431c 	addw	r3, r4, #1052	; 0x41c
 800a66e:	f10d 0207 	add.w	r2, sp, #7
 800a672:	a902      	add	r1, sp, #8
 800a674:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
 800a678:	f003 f91c 	bl	800d8b4 <RegionTxConfig>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800a67c:	2301      	movs	r3, #1
 800a67e:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a682:	f895 3039 	ldrb.w	r3, [r5, #57]	; 0x39
 800a686:	f884 3442 	strb.w	r3, [r4, #1090]	; 0x442
    MacCtx.McpsConfirm.TxPower = txPower;
 800a68a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800a68e:	f884 3443 	strb.w	r3, [r4, #1091]	; 0x443
    MacCtx.McpsConfirm.Channel = channel;
 800a692:	f8c4 6450 	str.w	r6, [r4, #1104]	; 0x450
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a696:	f8d4 341c 	ldr.w	r3, [r4, #1052]	; 0x41c
 800a69a:	f8c4 3448 	str.w	r3, [r4, #1096]	; 0x448
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 800a69e:	f8c4 3458 	str.w	r3, [r4, #1112]	; 0x458
    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 800a6a2:	f002 f864 	bl	800c76e <LoRaMacClassBIsBeaconModeActive>
 800a6a6:	bb60      	cbnz	r0, 800a702 <SendFrameOnChannel+0xd6>
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800a6a8:	4b1b      	ldr	r3, [pc, #108]	; (800a718 <SendFrameOnChannel+0xec>)
 800a6aa:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d02f      	beq.n	800a712 <SendFrameOnChannel+0xe6>
    LoRaMacClassBHaltBeaconing( );
 800a6b2:	f002 f85f 	bl	800c774 <LoRaMacClassBHaltBeaconing>
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 800a6b6:	4b18      	ldr	r3, [pc, #96]	; (800a718 <SendFrameOnChannel+0xec>)
 800a6b8:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800a6bc:	4b17      	ldr	r3, [pc, #92]	; (800a71c <SendFrameOnChannel+0xf0>)
 800a6be:	f893 141b 	ldrb.w	r1, [r3, #1051]	; 0x41b
 800a6c2:	b2c0      	uxtb	r0, r0
 800a6c4:	f7ff ff78 	bl	800a5b8 <SecureFrame>
    if( status != LORAMAC_STATUS_OK )
 800a6c8:	4604      	mov	r4, r0
 800a6ca:	b9b8      	cbnz	r0, 800a6fc <SendFrameOnChannel+0xd0>
    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 800a6cc:	4813      	ldr	r0, [pc, #76]	; (800a71c <SendFrameOnChannel+0xf0>)
 800a6ce:	f8d0 3340 	ldr.w	r3, [r0, #832]	; 0x340
 800a6d2:	f043 0302 	orr.w	r3, r3, #2
 800a6d6:	f8c0 3340 	str.w	r3, [r0, #832]	; 0x340
    MacCtx.ChannelsNbTransCounter++;
 800a6da:	f890 3418 	ldrb.w	r3, [r0, #1048]	; 0x418
 800a6de:	3301      	adds	r3, #1
 800a6e0:	b2db      	uxtb	r3, r3
 800a6e2:	f880 3418 	strb.w	r3, [r0, #1048]	; 0x418
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a6e6:	f880 3445 	strb.w	r3, [r0, #1093]	; 0x445
    MacCtx.ResponseTimeoutStartTime = 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	f8c0 3498 	str.w	r3, [r0, #1176]	; 0x498
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 800a6f0:	4b0b      	ldr	r3, [pc, #44]	; (800a720 <SendFrameOnChannel+0xf4>)
 800a6f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6f4:	f830 1b02 	ldrh.w	r1, [r0], #2
 800a6f8:	b2c9      	uxtb	r1, r1
 800a6fa:	4798      	blx	r3
}
 800a6fc:	4620      	mov	r0, r4
 800a6fe:	b006      	add	sp, #24
 800a700:	bd70      	pop	{r4, r5, r6, pc}
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 800a702:	f8d4 041c 	ldr.w	r0, [r4, #1052]	; 0x41c
 800a706:	f002 f844 	bl	800c792 <LoRaMacClassBIsUplinkCollision>
        if( collisionTime > 0 )
 800a70a:	2800      	cmp	r0, #0
 800a70c:	d0cc      	beq.n	800a6a8 <SendFrameOnChannel+0x7c>
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 800a70e:	2410      	movs	r4, #16
 800a710:	e7f4      	b.n	800a6fc <SendFrameOnChannel+0xd0>
        LoRaMacClassBStopRxSlots( );
 800a712:	f002 f840 	bl	800c796 <LoRaMacClassBStopRxSlots>
 800a716:	e7cc      	b.n	800a6b2 <SendFrameOnChannel+0x86>
 800a718:	20008000 	.word	0x20008000
 800a71c:	20000840 	.word	0x20000840
 800a720:	08014d7c 	.word	0x08014d7c

0800a724 <ScheduleTx>:
{
 800a724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a728:	b08c      	sub	sp, #48	; 0x30
 800a72a:	4605      	mov	r5, r0
    status = CheckForClassBCollision( );
 800a72c:	f7ff fdb2 	bl	800a294 <CheckForClassBCollision>
    if( status != LORAMAC_STATUS_OK )
 800a730:	4604      	mov	r4, r0
 800a732:	b118      	cbz	r0, 800a73c <ScheduleTx+0x18>
}
 800a734:	4620      	mov	r0, r4
 800a736:	b00c      	add	sp, #48	; 0x30
 800a738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    CalculateBackOff( );
 800a73c:	f7fe fd00 	bl	8009140 <CalculateBackOff>
    status = SerializeTxFrame( );
 800a740:	f7ff feae 	bl	800a4a0 <SerializeTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a744:	4604      	mov	r4, r0
 800a746:	2800      	cmp	r0, #0
 800a748:	d1f4      	bne.n	800a734 <ScheduleTx+0x10>
    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 800a74a:	4e36      	ldr	r6, [pc, #216]	; (800a824 <ScheduleTx+0x100>)
 800a74c:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800a74e:	9304      	str	r3, [sp, #16]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a750:	f996 3039 	ldrsb.w	r3, [r6, #57]	; 0x39
 800a754:	f88d 3018 	strb.w	r3, [sp, #24]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 800a758:	f896 311c 	ldrb.w	r3, [r6, #284]	; 0x11c
 800a75c:	f88d 301a 	strb.w	r3, [sp, #26]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800a760:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 800a764:	4640      	mov	r0, r8
 800a766:	f009 f82f 	bl	80137c8 <SysTimeGetMcuTime>
 800a76a:	af02      	add	r7, sp, #8
 800a76c:	f8d6 3128 	ldr.w	r3, [r6, #296]	; 0x128
 800a770:	9300      	str	r3, [sp, #0]
 800a772:	f8d6 3124 	ldr.w	r3, [r6, #292]	; 0x124
 800a776:	e898 0006 	ldmia.w	r8, {r1, r2}
 800a77a:	4638      	mov	r0, r7
 800a77c:	f008 ffc1 	bl	8013702 <SysTimeSub>
 800a780:	ab07      	add	r3, sp, #28
 800a782:	e897 0003 	ldmia.w	r7, {r0, r1}
 800a786:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 800a78a:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 800a78c:	9305      	str	r3, [sp, #20]
    nextChan.LastTxIsJoinRequest = false;
 800a78e:	2300      	movs	r3, #0
 800a790:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    nextChan.Joined = true;
 800a794:	2301      	movs	r3, #1
 800a796:	f88d 3019 	strb.w	r3, [sp, #25]
    nextChan.PktLen = MacCtx.PktBufferLen;
 800a79a:	4b23      	ldr	r3, [pc, #140]	; (800a828 <ScheduleTx+0x104>)
 800a79c:	881b      	ldrh	r3, [r3, #0]
 800a79e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800a7a2:	f896 3130 	ldrb.w	r3, [r6, #304]	; 0x130
 800a7a6:	b92b      	cbnz	r3, 800a7b4 <ScheduleTx+0x90>
        nextChan.LastTxIsJoinRequest = true;
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
        nextChan.Joined = false;
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	f88d 3019 	strb.w	r3, [sp, #25]
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 800a7b4:	4a1c      	ldr	r2, [pc, #112]	; (800a828 <ScheduleTx+0x104>)
 800a7b6:	481b      	ldr	r0, [pc, #108]	; (800a824 <ScheduleTx+0x100>)
 800a7b8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	f202 4394 	addw	r3, r2, #1172	; 0x494
 800a7c2:	f202 421b 	addw	r2, r2, #1051	; 0x41b
 800a7c6:	a904      	add	r1, sp, #16
 800a7c8:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 800a7cc:	f003 f915 	bl	800d9fa <RegionNextChannel>
    if( status != LORAMAC_STATUS_OK )
 800a7d0:	b1c0      	cbz	r0, 800a804 <ScheduleTx+0xe0>
        if( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED )
 800a7d2:	280b      	cmp	r0, #11
 800a7d4:	d124      	bne.n	800a820 <ScheduleTx+0xfc>
            if( MacCtx.DutyCycleWaitTime != 0 )
 800a7d6:	4a14      	ldr	r2, [pc, #80]	; (800a828 <ScheduleTx+0x104>)
 800a7d8:	f8d2 1494 	ldr.w	r1, [r2, #1172]	; 0x494
 800a7dc:	b191      	cbz	r1, 800a804 <ScheduleTx+0xe0>
                if( allowDelayedTx == true )
 800a7de:	b90d      	cbnz	r5, 800a7e4 <ScheduleTx+0xc0>
                return status;
 800a7e0:	4604      	mov	r4, r0
 800a7e2:	e7a7      	b.n	800a734 <ScheduleTx+0x10>
                    MacCtx.MacState |= LORAMAC_TX_DELAYED;
 800a7e4:	4615      	mov	r5, r2
 800a7e6:	f8d2 2340 	ldr.w	r2, [r2, #832]	; 0x340
 800a7ea:	f042 0220 	orr.w	r2, r2, #32
 800a7ee:	f8c5 2340 	str.w	r2, [r5, #832]	; 0x340
                    TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 800a7f2:	f505 755a 	add.w	r5, r5, #872	; 0x368
 800a7f6:	4628      	mov	r0, r5
 800a7f8:	f009 f952 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
                    TimerStart( &MacCtx.TxDelayedTimer );
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	f009 f909 	bl	8013a14 <UTIL_TIMER_Start>
                    return LORAMAC_STATUS_OK;
 800a802:	e797      	b.n	800a734 <ScheduleTx+0x10>
    ComputeRxWindowParameters( );
 800a804:	f7ff fe70 	bl	800a4e8 <ComputeRxWindowParameters>
    status = VerifyTxFrame( );
 800a808:	f7ff feb2 	bl	800a570 <VerifyTxFrame>
    if( status != LORAMAC_STATUS_OK )
 800a80c:	4604      	mov	r4, r0
 800a80e:	2800      	cmp	r0, #0
 800a810:	d190      	bne.n	800a734 <ScheduleTx+0x10>
    return SendFrameOnChannel( MacCtx.Channel );
 800a812:	4b05      	ldr	r3, [pc, #20]	; (800a828 <ScheduleTx+0x104>)
 800a814:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800a818:	f7ff ff08 	bl	800a62c <SendFrameOnChannel>
 800a81c:	4604      	mov	r4, r0
 800a81e:	e789      	b.n	800a734 <ScheduleTx+0x10>
            return status;
 800a820:	4604      	mov	r4, r0
 800a822:	e787      	b.n	800a734 <ScheduleTx+0x10>
 800a824:	20008000 	.word	0x20008000
 800a828:	20000840 	.word	0x20000840

0800a82c <OnTxDelayedTimerEvent>:
{
 800a82c:	b510      	push	{r4, lr}
    TimerStop( &MacCtx.TxDelayedTimer );
 800a82e:	4c16      	ldr	r4, [pc, #88]	; (800a888 <OnTxDelayedTimerEvent+0x5c>)
 800a830:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a834:	f009 f894 	bl	8013960 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a838:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a83c:	f023 0320 	bic.w	r3, r3, #32
 800a840:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800a844:	f8d4 1498 	ldr.w	r1, [r4, #1176]	; 0x498
 800a848:	4b10      	ldr	r3, [pc, #64]	; (800a88c <OnTxDelayedTimerEvent+0x60>)
 800a84a:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800a84e:	f7ff fde7 	bl	800a420 <LoRaMacHandleResponseTimeout>
 800a852:	b100      	cbz	r0, 800a856 <OnTxDelayedTimerEvent+0x2a>
}
 800a854:	bd10      	pop	{r4, pc}
    switch( ScheduleTx( true ) )
 800a856:	2001      	movs	r0, #1
 800a858:	f7ff ff64 	bl	800a724 <ScheduleTx>
 800a85c:	2800      	cmp	r0, #0
 800a85e:	d0f9      	beq.n	800a854 <OnTxDelayedTimerEvent+0x28>
 800a860:	280b      	cmp	r0, #11
 800a862:	d0f7      	beq.n	800a854 <OnTxDelayedTimerEvent+0x28>
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800a864:	4b09      	ldr	r3, [pc, #36]	; (800a88c <OnTxDelayedTimerEvent+0x60>)
 800a866:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 800a86a:	f884 2442 	strb.w	r2, [r4, #1090]	; 0x442
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800a86e:	f894 2418 	ldrb.w	r2, [r4, #1048]	; 0x418
 800a872:	f884 2445 	strb.w	r2, [r4, #1093]	; 0x445
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800a876:	2009      	movs	r0, #9
 800a878:	f884 0441 	strb.w	r0, [r4, #1089]	; 0x441
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800a87c:	f002 f9ce 	bl	800cc1c <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800a880:	f7fe fcf0 	bl	8009264 <StopRetransmission>
            break;
 800a884:	e7e6      	b.n	800a854 <OnTxDelayedTimerEvent+0x28>
 800a886:	bf00      	nop
 800a888:	20000840 	.word	0x20000840
 800a88c:	20008000 	.word	0x20008000

0800a890 <LoRaMacHandleMcpsRequest>:
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a890:	4b1c      	ldr	r3, [pc, #112]	; (800a904 <LoRaMacHandleMcpsRequest+0x74>)
 800a892:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a896:	f013 0f01 	tst.w	r3, #1
 800a89a:	d032      	beq.n	800a902 <LoRaMacHandleMcpsRequest+0x72>
{
 800a89c:	b510      	push	{r4, lr}
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800a89e:	4b19      	ldr	r3, [pc, #100]	; (800a904 <LoRaMacHandleMcpsRequest+0x74>)
 800a8a0:	f893 3440 	ldrb.w	r3, [r3, #1088]	; 0x440
 800a8a4:	b12b      	cbz	r3, 800a8b2 <LoRaMacHandleMcpsRequest+0x22>
 800a8a6:	2b03      	cmp	r3, #3
 800a8a8:	d003      	beq.n	800a8b2 <LoRaMacHandleMcpsRequest+0x22>
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d006      	beq.n	800a8bc <LoRaMacHandleMcpsRequest+0x2c>
        bool waitForRetransmission = false;
 800a8ae:	2000      	movs	r0, #0
 800a8b0:	e002      	b.n	800a8b8 <LoRaMacHandleMcpsRequest+0x28>
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800a8b2:	f7fe fc9d 	bl	80091f0 <CheckRetransUnconfirmedUplink>
        if( stopRetransmission == true )
 800a8b6:	b940      	cbnz	r0, 800a8ca <LoRaMacHandleMcpsRequest+0x3a>
        else if( waitForRetransmission == false )
 800a8b8:	b1b8      	cbz	r0, 800a8ea <LoRaMacHandleMcpsRequest+0x5a>
}
 800a8ba:	bd10      	pop	{r4, pc}
            if( MacCtx.RetransmitTimeoutRetry == true )
 800a8bc:	4b11      	ldr	r3, [pc, #68]	; (800a904 <LoRaMacHandleMcpsRequest+0x74>)
 800a8be:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
 800a8c2:	b183      	cbz	r3, 800a8e6 <LoRaMacHandleMcpsRequest+0x56>
                stopRetransmission = CheckRetransConfirmedUplink( );
 800a8c4:	f7fe fcb0 	bl	8009228 <CheckRetransConfirmedUplink>
 800a8c8:	e7f5      	b.n	800a8b6 <LoRaMacHandleMcpsRequest+0x26>
            TimerStop( &MacCtx.TxDelayedTimer );
 800a8ca:	4c0e      	ldr	r4, [pc, #56]	; (800a904 <LoRaMacHandleMcpsRequest+0x74>)
 800a8cc:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800a8d0:	f009 f846 	bl	8013960 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800a8d4:	f8d4 3340 	ldr.w	r3, [r4, #832]	; 0x340
 800a8d8:	f023 0320 	bic.w	r3, r3, #32
 800a8dc:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340
            StopRetransmission( );
 800a8e0:	f7fe fcc0 	bl	8009264 <StopRetransmission>
 800a8e4:	e7e9      	b.n	800a8ba <LoRaMacHandleMcpsRequest+0x2a>
                waitForRetransmission = true;
 800a8e6:	2001      	movs	r0, #1
 800a8e8:	e7e6      	b.n	800a8b8 <LoRaMacHandleMcpsRequest+0x28>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800a8ea:	4b06      	ldr	r3, [pc, #24]	; (800a904 <LoRaMacHandleMcpsRequest+0x74>)
 800a8ec:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a8f0:	f36f 1204 	bfc	r2, #4, #1
 800a8f4:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
            MacCtx.RetransmitTimeoutRetry = false;
 800a8f8:	f883 0419 	strb.w	r0, [r3, #1049]	; 0x419
            OnTxDelayedTimerEvent( NULL );
 800a8fc:	f7ff ff96 	bl	800a82c <OnTxDelayedTimerEvent>
}
 800a900:	e7db      	b.n	800a8ba <LoRaMacHandleMcpsRequest+0x2a>
 800a902:	4770      	bx	lr
 800a904:	20000840 	.word	0x20000840

0800a908 <LoRaMacHandleRequestEvents>:
{
 800a908:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState == LORAMAC_IDLE )
 800a90a:	4b22      	ldr	r3, [pc, #136]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a90c:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800a910:	bb7b      	cbnz	r3, 800a972 <LoRaMacHandleRequestEvents+0x6a>
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800a912:	4b20      	ldr	r3, [pc, #128]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a914:	f893 4491 	ldrb.w	r4, [r3, #1169]	; 0x491
 800a918:	f014 0501 	ands.w	r5, r4, #1
 800a91c:	d005      	beq.n	800a92a <LoRaMacHandleRequestEvents+0x22>
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800a91e:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a922:	f36f 0200 	bfc	r2, #0, #1
 800a926:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800a92a:	4b1a      	ldr	r3, [pc, #104]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a92c:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800a930:	f013 0f04 	tst.w	r3, #4
 800a934:	d006      	beq.n	800a944 <LoRaMacHandleRequestEvents+0x3c>
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800a936:	4b17      	ldr	r3, [pc, #92]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a938:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a93c:	f36f 0282 	bfc	r2, #2, #1
 800a940:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800a944:	2001      	movs	r0, #1
 800a946:	f7fe fbab 	bl	80090a0 <LoRaMacEnableRequests>
        if( reqEvents.Bits.McpsReq == 1 )
 800a94a:	b135      	cbz	r5, 800a95a <LoRaMacHandleRequestEvents+0x52>
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800a94c:	4811      	ldr	r0, [pc, #68]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a94e:	f8d0 3344 	ldr.w	r3, [r0, #836]	; 0x344
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	f500 6088 	add.w	r0, r0, #1088	; 0x440
 800a958:	4798      	blx	r3
        if( reqEvents.Bits.MlmeReq == 1 )
 800a95a:	f014 0f04 	tst.w	r4, #4
 800a95e:	d109      	bne.n	800a974 <LoRaMacHandleRequestEvents+0x6c>
        LoRaMacClassBResumeBeaconing( );
 800a960:	f001 ff09 	bl	800c776 <LoRaMacClassBResumeBeaconing>
        MacCtx.MacFlags.Bits.MacDone = 0;
 800a964:	4b0b      	ldr	r3, [pc, #44]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a966:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800a96a:	f36f 1204 	bfc	r2, #4, #1
 800a96e:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
}
 800a972:	bd38      	pop	{r3, r4, r5, pc}
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800a974:	4808      	ldr	r0, [pc, #32]	; (800a998 <LoRaMacHandleRequestEvents+0x90>)
 800a976:	f002 f97b 	bl	800cc70 <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800a97a:	f002 f9b1 	bl	800cce0 <LoRaMacConfirmQueueGetCnt>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d0ee      	beq.n	800a960 <LoRaMacHandleRequestEvents+0x58>
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800a982:	4a04      	ldr	r2, [pc, #16]	; (800a994 <LoRaMacHandleRequestEvents+0x8c>)
 800a984:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800a988:	f043 0304 	orr.w	r3, r3, #4
 800a98c:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800a990:	e7e6      	b.n	800a960 <LoRaMacHandleRequestEvents+0x58>
 800a992:	bf00      	nop
 800a994:	20000840 	.word	0x20000840
 800a998:	20000c94 	.word	0x20000c94

0800a99c <OpenContinuousRxCWindow>:
{
 800a99c:	b570      	push	{r4, r5, r6, lr}
 800a99e:	b082      	sub	sp, #8
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 800a9a0:	4c16      	ldr	r4, [pc, #88]	; (800a9fc <OpenContinuousRxCWindow+0x60>)
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800a9a2:	4d17      	ldr	r5, [pc, #92]	; (800aa00 <OpenContinuousRxCWindow+0x64>)
 800a9a4:	f505 767a 	add.w	r6, r5, #1000	; 0x3e8
 800a9a8:	9600      	str	r6, [sp, #0]
 800a9aa:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800a9ac:	f894 2050 	ldrb.w	r2, [r4, #80]	; 0x50
 800a9b0:	f994 1078 	ldrsb.w	r1, [r4, #120]	; 0x78
 800a9b4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a9b8:	f002 ff4c 	bl	800d854 <RegionComputeRxWindowParameters>
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800a9bc:	2302      	movs	r3, #2
 800a9be:	f885 33fb 	strb.w	r3, [r5, #1019]	; 0x3fb
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800a9c2:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800a9c6:	f885 33fc 	strb.w	r3, [r5, #1020]	; 0x3fc
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800a9ca:	2301      	movs	r3, #1
 800a9cc:	f885 33fa 	strb.w	r3, [r5, #1018]	; 0x3fa
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800a9d0:	f205 4224 	addw	r2, r5, #1060	; 0x424
 800a9d4:	4631      	mov	r1, r6
 800a9d6:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800a9da:	f002 ff56 	bl	800d88a <RegionRxConfig>
 800a9de:	b158      	cbz	r0, 800a9f8 <OpenContinuousRxCWindow+0x5c>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800a9e0:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800a9e4:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( 0 ); // Continuous mode
 800a9e8:	4b06      	ldr	r3, [pc, #24]	; (800aa04 <OpenContinuousRxCWindow+0x68>)
 800a9ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9ec:	2000      	movs	r0, #0
 800a9ee:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 800a9f0:	f895 33fb 	ldrb.w	r3, [r5, #1019]	; 0x3fb
 800a9f4:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800a9f8:	b002      	add	sp, #8
 800a9fa:	bd70      	pop	{r4, r5, r6, pc}
 800a9fc:	20008000 	.word	0x20008000
 800aa00:	20000840 	.word	0x20000840
 800aa04:	08014d7c 	.word	0x08014d7c

0800aa08 <RxWindowSetup>:
{
 800aa08:	b538      	push	{r3, r4, r5, lr}
 800aa0a:	460c      	mov	r4, r1
    TimerStop( rxTimer );
 800aa0c:	f008 ffa8 	bl	8013960 <UTIL_TIMER_Stop>
    Radio.Standby( );
 800aa10:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <RxWindowSetup+0x3c>)
 800aa12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa14:	4798      	blx	r3
    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 800aa16:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <RxWindowSetup+0x40>)
 800aa18:	4621      	mov	r1, r4
 800aa1a:	4b0c      	ldr	r3, [pc, #48]	; (800aa4c <RxWindowSetup+0x44>)
 800aa1c:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800aa20:	f002 ff33 	bl	800d88a <RegionRxConfig>
 800aa24:	b160      	cbz	r0, 800aa40 <RxWindowSetup+0x38>
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 800aa26:	4d0a      	ldr	r5, [pc, #40]	; (800aa50 <RxWindowSetup+0x48>)
 800aa28:	f895 3424 	ldrb.w	r3, [r5, #1060]	; 0x424
 800aa2c:	f885 346a 	strb.w	r3, [r5, #1130]	; 0x46a
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 800aa30:	4b04      	ldr	r3, [pc, #16]	; (800aa44 <RxWindowSetup+0x3c>)
 800aa32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa34:	4a05      	ldr	r2, [pc, #20]	; (800aa4c <RxWindowSetup+0x44>)
 800aa36:	6d50      	ldr	r0, [r2, #84]	; 0x54
 800aa38:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 800aa3a:	7ce3      	ldrb	r3, [r4, #19]
 800aa3c:	f885 3490 	strb.w	r3, [r5, #1168]	; 0x490
}
 800aa40:	bd38      	pop	{r3, r4, r5, pc}
 800aa42:	bf00      	nop
 800aa44:	08014d7c 	.word	0x08014d7c
 800aa48:	20000c64 	.word	0x20000c64
 800aa4c:	20008000 	.word	0x20008000
 800aa50:	20000840 	.word	0x20000840

0800aa54 <OnRxWindow2TimerEvent>:
{
 800aa54:	b508      	push	{r3, lr}
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800aa56:	4b13      	ldr	r3, [pc, #76]	; (800aaa4 <OnRxWindow2TimerEvent+0x50>)
 800aa58:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800aa5c:	b903      	cbnz	r3, 800aa60 <OnRxWindow2TimerEvent+0xc>
}
 800aa5e:	bd08      	pop	{r3, pc}
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800aa60:	4810      	ldr	r0, [pc, #64]	; (800aaa4 <OnRxWindow2TimerEvent+0x50>)
 800aa62:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800aa66:	f880 33d0 	strb.w	r3, [r0, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800aa6a:	4b0f      	ldr	r3, [pc, #60]	; (800aaa8 <OnRxWindow2TimerEvent+0x54>)
 800aa6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800aa6e:	f8c0 23d4 	str.w	r2, [r0, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aa72:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800aa76:	f880 23e0 	strb.w	r2, [r0, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aa7a:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800aa7e:	f880 23e1 	strb.w	r2, [r0, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aa82:	2200      	movs	r2, #0
 800aa84:	f880 23e2 	strb.w	r2, [r0, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aa88:	2201      	movs	r2, #1
 800aa8a:	f880 23e3 	strb.w	r2, [r0, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aa8e:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800aa92:	f880 33e4 	strb.w	r3, [r0, #996]	; 0x3e4
    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800aa96:	f500 7174 	add.w	r1, r0, #976	; 0x3d0
 800aa9a:	f500 7066 	add.w	r0, r0, #920	; 0x398
 800aa9e:	f7ff ffb3 	bl	800aa08 <RxWindowSetup>
 800aaa2:	e7dc      	b.n	800aa5e <OnRxWindow2TimerEvent+0xa>
 800aaa4:	20000840 	.word	0x20000840
 800aaa8:	20008000 	.word	0x20008000

0800aaac <OnRxWindow1TimerEvent>:
{
 800aaac:	b508      	push	{r3, lr}
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800aaae:	4811      	ldr	r0, [pc, #68]	; (800aaf4 <OnRxWindow1TimerEvent+0x48>)
 800aab0:	f890 341b 	ldrb.w	r3, [r0, #1051]	; 0x41b
 800aab4:	f880 33b8 	strb.w	r3, [r0, #952]	; 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800aab8:	4b0f      	ldr	r3, [pc, #60]	; (800aaf8 <OnRxWindow1TimerEvent+0x4c>)
 800aaba:	f993 2069 	ldrsb.w	r2, [r3, #105]	; 0x69
 800aabe:	f880 23bb 	strb.w	r2, [r0, #955]	; 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aac2:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800aac6:	f880 23c8 	strb.w	r2, [r0, #968]	; 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aaca:	f893 208c 	ldrb.w	r2, [r3, #140]	; 0x8c
 800aace:	f880 23c9 	strb.w	r2, [r0, #969]	; 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800aad2:	2200      	movs	r2, #0
 800aad4:	f880 23ca 	strb.w	r2, [r0, #970]	; 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800aad8:	f880 23cb 	strb.w	r2, [r0, #971]	; 0x3cb
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aadc:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800aae0:	f880 33cc 	strb.w	r3, [r0, #972]	; 0x3cc
    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800aae4:	f500 716e 	add.w	r1, r0, #952	; 0x3b8
 800aae8:	f500 7060 	add.w	r0, r0, #896	; 0x380
 800aaec:	f7ff ff8c 	bl	800aa08 <RxWindowSetup>
}
 800aaf0:	bd08      	pop	{r3, pc}
 800aaf2:	bf00      	nop
 800aaf4:	20000840 	.word	0x20000840
 800aaf8:	20008000 	.word	0x20008000

0800aafc <LoRaMacHandleNvm>:
{
 800aafc:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_IDLE )
 800aafe:	4b31      	ldr	r3, [pc, #196]	; (800abc4 <LoRaMacHandleNvm+0xc8>)
 800ab00:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800ab04:	b103      	cbz	r3, 800ab08 <LoRaMacHandleNvm+0xc>
}
 800ab06:	bd38      	pop	{r3, r4, r5, pc}
 800ab08:	4604      	mov	r4, r0
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800ab0a:	2124      	movs	r1, #36	; 0x24
 800ab0c:	f006 fd16 	bl	801153c <Crc32>
    if( crc != nvmData->Crypto.Crc32 )
 800ab10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ab12:	4283      	cmp	r3, r0
 800ab14:	d053      	beq.n	800abbe <LoRaMacHandleNvm+0xc2>
        nvmData->Crypto.Crc32 = crc;
 800ab16:	6260      	str	r0, [r4, #36]	; 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800ab18:	2501      	movs	r5, #1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800ab1a:	211c      	movs	r1, #28
 800ab1c:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800ab20:	f006 fd0c 	bl	801153c <Crc32>
    if( crc != nvmData->MacGroup1.Crc32 )
 800ab24:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800ab26:	4283      	cmp	r3, r0
 800ab28:	d002      	beq.n	800ab30 <LoRaMacHandleNvm+0x34>
        nvmData->MacGroup1.Crc32 = crc;
 800ab2a:	6460      	str	r0, [r4, #68]	; 0x44
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800ab2c:	f045 0502 	orr.w	r5, r5, #2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800ab30:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ab34:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800ab38:	f006 fd00 	bl	801153c <Crc32>
    if( crc != nvmData->MacGroup2.Crc32 )
 800ab3c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800ab40:	4283      	cmp	r3, r0
 800ab42:	d003      	beq.n	800ab4c <LoRaMacHandleNvm+0x50>
        nvmData->MacGroup2.Crc32 = crc;
 800ab44:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800ab48:	f045 0504 	orr.w	r5, r5, #4
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800ab4c:	21d4      	movs	r1, #212	; 0xd4
 800ab4e:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800ab52:	f006 fcf3 	bl	801153c <Crc32>
    if( crc != nvmData->SecureElement.Crc32 )
 800ab56:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800ab5a:	4283      	cmp	r3, r0
 800ab5c:	d003      	beq.n	800ab66 <LoRaMacHandleNvm+0x6a>
        nvmData->SecureElement.Crc32 = crc;
 800ab5e:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ab62:	f045 0508 	orr.w	r5, r5, #8
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ab66:	2110      	movs	r1, #16
 800ab68:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800ab6c:	f006 fce6 	bl	801153c <Crc32>
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ab70:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800ab74:	4283      	cmp	r3, r0
 800ab76:	d003      	beq.n	800ab80 <LoRaMacHandleNvm+0x84>
        nvmData->RegionGroup1.Crc32 = crc;
 800ab78:	f8c4 0234 	str.w	r0, [r4, #564]	; 0x234
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ab7c:	f045 0510 	orr.w	r5, r5, #16
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ab80:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ab84:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800ab88:	f006 fcd8 	bl	801153c <Crc32>
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ab8c:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800ab90:	4283      	cmp	r3, r0
 800ab92:	d003      	beq.n	800ab9c <LoRaMacHandleNvm+0xa0>
        nvmData->RegionGroup2.Crc32 = crc;
 800ab94:	f8c4 05b0 	str.w	r0, [r4, #1456]	; 0x5b0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ab98:	f045 0520 	orr.w	r5, r5, #32
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ab9c:	2114      	movs	r1, #20
 800ab9e:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800aba2:	f006 fccb 	bl	801153c <Crc32>
    if( crc != nvmData->ClassB.Crc32 )
 800aba6:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800abaa:	4283      	cmp	r3, r0
 800abac:	d003      	beq.n	800abb6 <LoRaMacHandleNvm+0xba>
        nvmData->ClassB.Crc32 = crc;
 800abae:	f8c4 05c8 	str.w	r0, [r4, #1480]	; 0x5c8
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800abb2:	f045 0540 	orr.w	r5, r5, #64	; 0x40
    CallNvmDataChangeCallback( notifyFlags );
 800abb6:	4628      	mov	r0, r5
 800abb8:	f7fe fb96 	bl	80092e8 <CallNvmDataChangeCallback>
 800abbc:	e7a3      	b.n	800ab06 <LoRaMacHandleNvm+0xa>
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800abbe:	2500      	movs	r5, #0
 800abc0:	e7ab      	b.n	800ab1a <LoRaMacHandleNvm+0x1e>
 800abc2:	bf00      	nop
 800abc4:	20000840 	.word	0x20000840

0800abc8 <RestoreNvmData>:
{
 800abc8:	b538      	push	{r3, r4, r5, lr}
    if( MacCtx.MacState != LORAMAC_STOPPED )
 800abca:	4b3d      	ldr	r3, [pc, #244]	; (800acc0 <RestoreNvmData+0xf8>)
 800abcc:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d001      	beq.n	800abd8 <RestoreNvmData+0x10>
        return LORAMAC_STATUS_BUSY;
 800abd4:	2001      	movs	r0, #1
}
 800abd6:	bd38      	pop	{r3, r4, r5, pc}
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 800abd8:	4c3a      	ldr	r4, [pc, #232]	; (800acc4 <RestoreNvmData+0xfc>)
 800abda:	2124      	movs	r1, #36	; 0x24
 800abdc:	4620      	mov	r0, r4
 800abde:	f006 fcad 	bl	801153c <Crc32>
    if( crc != NvmBackup.Crypto.Crc32 )
 800abe2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800abe4:	4283      	cmp	r3, r0
 800abe6:	d001      	beq.n	800abec <RestoreNvmData+0x24>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800abe8:	2017      	movs	r0, #23
 800abea:	e7f4      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 800abec:	211c      	movs	r1, #28
 800abee:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800abf2:	f006 fca3 	bl	801153c <Crc32>
    if( crc != NvmBackup.MacGroup1.Crc32 )
 800abf6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800abf8:	4283      	cmp	r3, r0
 800abfa:	d001      	beq.n	800ac00 <RestoreNvmData+0x38>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800abfc:	2017      	movs	r0, #23
 800abfe:	e7ea      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 800ac00:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ac04:	f104 0048 	add.w	r0, r4, #72	; 0x48
 800ac08:	f006 fc98 	bl	801153c <Crc32>
    if( crc != NvmBackup.MacGroup2.Crc32 )
 800ac0c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
 800ac10:	4283      	cmp	r3, r0
 800ac12:	d001      	beq.n	800ac18 <RestoreNvmData+0x50>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ac14:	2017      	movs	r0, #23
 800ac16:	e7de      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 800ac18:	21d4      	movs	r1, #212	; 0xd4
 800ac1a:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800ac1e:	f006 fc8d 	bl	801153c <Crc32>
    if( crc != NvmBackup.SecureElement.Crc32 )
 800ac22:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 800ac26:	4283      	cmp	r3, r0
 800ac28:	d001      	beq.n	800ac2e <RestoreNvmData+0x66>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ac2a:	2017      	movs	r0, #23
 800ac2c:	e7d3      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 800ac2e:	2110      	movs	r1, #16
 800ac30:	f504 7009 	add.w	r0, r4, #548	; 0x224
 800ac34:	f006 fc82 	bl	801153c <Crc32>
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 800ac38:	f8d4 3234 	ldr.w	r3, [r4, #564]	; 0x234
 800ac3c:	4283      	cmp	r3, r0
 800ac3e:	d001      	beq.n	800ac44 <RestoreNvmData+0x7c>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ac40:	2017      	movs	r0, #23
 800ac42:	e7c8      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup2), sizeof( NvmBackup.RegionGroup2 ) -
 800ac44:	f44f 715e 	mov.w	r1, #888	; 0x378
 800ac48:	f504 700e 	add.w	r0, r4, #568	; 0x238
 800ac4c:	f006 fc76 	bl	801153c <Crc32>
    if( crc != NvmBackup.RegionGroup2.Crc32 )
 800ac50:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	; 0x5b0
 800ac54:	4283      	cmp	r3, r0
 800ac56:	d001      	beq.n	800ac5c <RestoreNvmData+0x94>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ac58:	2017      	movs	r0, #23
 800ac5a:	e7bc      	b.n	800abd6 <RestoreNvmData+0xe>
    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 800ac5c:	2114      	movs	r1, #20
 800ac5e:	f204 50b4 	addw	r0, r4, #1460	; 0x5b4
 800ac62:	f006 fc6b 	bl	801153c <Crc32>
    if( crc != NvmBackup.ClassB.Crc32 )
 800ac66:	f8d4 35c8 	ldr.w	r3, [r4, #1480]	; 0x5c8
 800ac6a:	4283      	cmp	r3, r0
 800ac6c:	d001      	beq.n	800ac72 <RestoreNvmData+0xaa>
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 800ac6e:	2017      	movs	r0, #23
 800ac70:	e7b1      	b.n	800abd6 <RestoreNvmData+0xe>
    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 800ac72:	4625      	mov	r5, r4
 800ac74:	4c14      	ldr	r4, [pc, #80]	; (800acc8 <RestoreNvmData+0x100>)
 800ac76:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ac7a:	4629      	mov	r1, r5
 800ac7c:	4620      	mov	r0, r4
 800ac7e:	f006 fc3c 	bl	80114fa <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 800ac82:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800ac86:	2100      	movs	r1, #0
 800ac88:	4628      	mov	r0, r5
 800ac8a:	f006 fc4e 	bl	801152a <memset1>
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800ac8e:	4b0c      	ldr	r3, [pc, #48]	; (800acc0 <RestoreNvmData+0xf8>)
 800ac90:	f893 241b 	ldrb.w	r2, [r3, #1051]	; 0x41b
 800ac94:	f883 23e8 	strb.w	r2, [r3, #1000]	; 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800ac98:	6f62      	ldr	r2, [r4, #116]	; 0x74
 800ac9a:	f8c3 23ec 	str.w	r2, [r3, #1004]	; 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ac9e:	f894 207d 	ldrb.w	r2, [r4, #125]	; 0x7d
 800aca2:	f883 23f8 	strb.w	r2, [r3, #1016]	; 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800acac:	2202      	movs	r2, #2
 800acae:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800acb2:	4b06      	ldr	r3, [pc, #24]	; (800accc <RestoreNvmData+0x104>)
 800acb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acb6:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
 800acba:	4798      	blx	r3
    return LORAMAC_STATUS_OK;
 800acbc:	2000      	movs	r0, #0
 800acbe:	e78a      	b.n	800abd6 <RestoreNvmData+0xe>
 800acc0:	20000840 	.word	0x20000840
 800acc4:	200085cc 	.word	0x200085cc
 800acc8:	20008000 	.word	0x20008000
 800accc:	08014d7c 	.word	0x08014d7c

0800acd0 <OnRadioRxTimeout>:
{
 800acd0:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800acd2:	4a07      	ldr	r2, [pc, #28]	; (800acf0 <OnRadioRxTimeout+0x20>)
 800acd4:	7813      	ldrb	r3, [r2, #0]
 800acd6:	f043 0302 	orr.w	r3, r3, #2
 800acda:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800acdc:	f7fe faec 	bl	80092b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800ace0:	4b04      	ldr	r3, [pc, #16]	; (800acf4 <OnRadioRxTimeout+0x24>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	2100      	movs	r1, #0
 800ace6:	2002      	movs	r0, #2
 800ace8:	f008 fae6 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800acec:	bd08      	pop	{r3, pc}
 800acee:	bf00      	nop
 800acf0:	2000083c 	.word	0x2000083c
 800acf4:	0801462c 	.word	0x0801462c

0800acf8 <OnRadioTxTimeout>:
{
 800acf8:	b508      	push	{r3, lr}
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800acfa:	4a07      	ldr	r2, [pc, #28]	; (800ad18 <OnRadioTxTimeout+0x20>)
 800acfc:	7813      	ldrb	r3, [r2, #0]
 800acfe:	f043 0308 	orr.w	r3, r3, #8
 800ad02:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800ad04:	f7fe fad8 	bl	80092b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800ad08:	4b04      	ldr	r3, [pc, #16]	; (800ad1c <OnRadioTxTimeout+0x24>)
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2100      	movs	r1, #0
 800ad0e:	2002      	movs	r0, #2
 800ad10:	f008 fad2 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ad14:	bd08      	pop	{r3, pc}
 800ad16:	bf00      	nop
 800ad18:	2000083c 	.word	0x2000083c
 800ad1c:	0801463c 	.word	0x0801463c

0800ad20 <OnRadioRxDone>:
{
 800ad20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad24:	4680      	mov	r8, r0
 800ad26:	460f      	mov	r7, r1
 800ad28:	4616      	mov	r6, r2
 800ad2a:	461d      	mov	r5, r3
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800ad2c:	f008 fdd8 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 800ad30:	4c0c      	ldr	r4, [pc, #48]	; (800ad64 <OnRadioRxDone+0x44>)
 800ad32:	6020      	str	r0, [r4, #0]
    RxDoneParams.Payload = payload;
 800ad34:	f8c4 8004 	str.w	r8, [r4, #4]
    RxDoneParams.Size = size;
 800ad38:	8127      	strh	r7, [r4, #8]
    RxDoneParams.Rssi = rssi;
 800ad3a:	8166      	strh	r6, [r4, #10]
    RxDoneParams.Snr = snr;
 800ad3c:	7325      	strb	r5, [r4, #12]
    LoRaMacRadioEvents.Events.RxDone = 1;
 800ad3e:	4b0a      	ldr	r3, [pc, #40]	; (800ad68 <OnRadioRxDone+0x48>)
 800ad40:	781a      	ldrb	r2, [r3, #0]
 800ad42:	f042 0210 	orr.w	r2, r2, #16
 800ad46:	701a      	strb	r2, [r3, #0]
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800ad48:	b2d2      	uxtb	r2, r2
 800ad4a:	f042 0201 	orr.w	r2, r2, #1
 800ad4e:	701a      	strb	r2, [r3, #0]
    OnMacProcessNotify( );
 800ad50:	f7fe fab2 	bl	80092b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800ad54:	4b05      	ldr	r3, [pc, #20]	; (800ad6c <OnRadioRxDone+0x4c>)
 800ad56:	2201      	movs	r2, #1
 800ad58:	2100      	movs	r1, #0
 800ad5a:	2002      	movs	r0, #2
 800ad5c:	f008 faac 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ad60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad64:	20000dec 	.word	0x20000dec
 800ad68:	2000083c 	.word	0x2000083c
 800ad6c:	0801464c 	.word	0x0801464c

0800ad70 <OnRadioTxDone>:
{
 800ad70:	b510      	push	{r4, lr}
 800ad72:	b082      	sub	sp, #8
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800ad74:	f008 fdb4 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 800ad78:	4b0c      	ldr	r3, [pc, #48]	; (800adac <OnRadioTxDone+0x3c>)
 800ad7a:	6018      	str	r0, [r3, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800ad7c:	466c      	mov	r4, sp
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f008 fd00 	bl	8013784 <SysTimeGet>
 800ad84:	4b0a      	ldr	r3, [pc, #40]	; (800adb0 <OnRadioTxDone+0x40>)
 800ad86:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad8a:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacRadioEvents.Events.TxDone = 1;
 800ad8e:	4a09      	ldr	r2, [pc, #36]	; (800adb4 <OnRadioTxDone+0x44>)
 800ad90:	7813      	ldrb	r3, [r2, #0]
 800ad92:	f043 0320 	orr.w	r3, r3, #32
 800ad96:	7013      	strb	r3, [r2, #0]
    OnMacProcessNotify( );
 800ad98:	f7fe fa8e 	bl	80092b8 <OnMacProcessNotify>
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800ad9c:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <OnRadioTxDone+0x48>)
 800ad9e:	2201      	movs	r2, #1
 800ada0:	2100      	movs	r1, #0
 800ada2:	2002      	movs	r0, #2
 800ada4:	f008 fa88 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800ada8:	b002      	add	sp, #8
 800adaa:	bd10      	pop	{r4, pc}
 800adac:	20000dfc 	.word	0x20000dfc
 800adb0:	20000b78 	.word	0x20000b78
 800adb4:	2000083c 	.word	0x2000083c
 800adb8:	0801465c 	.word	0x0801465c

0800adbc <ResetMacParameters>:
{
 800adbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800adbe:	b091      	sub	sp, #68	; 0x44
    if( isRejoin == false )
 800adc0:	b918      	cbnz	r0, 800adca <ResetMacParameters+0xe>
        Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 800adc2:	4b61      	ldr	r3, [pc, #388]	; (800af48 <ResetMacParameters+0x18c>)
 800adc4:	2200      	movs	r2, #0
 800adc6:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
    Nvm.MacGroup1.AdrAckCounter = 0;
 800adca:	4c5f      	ldr	r4, [pc, #380]	; (800af48 <ResetMacParameters+0x18c>)
 800adcc:	2500      	movs	r5, #0
 800adce:	62a5      	str	r5, [r4, #40]	; 0x28
    MacCtx.ChannelsNbTransCounter = 0;
 800add0:	4e5e      	ldr	r6, [pc, #376]	; (800af4c <ResetMacParameters+0x190>)
 800add2:	f886 5418 	strb.w	r5, [r6, #1048]	; 0x418
    MacCtx.RetransmitTimeoutRetry = false;
 800add6:	f886 5419 	strb.w	r5, [r6, #1049]	; 0x419
    MacCtx.ResponseTimeoutStartTime = 0;
 800adda:	f8c6 5498 	str.w	r5, [r6, #1176]	; 0x498
    Nvm.MacGroup2.MaxDCycle = 0;
 800adde:	f884 511b 	strb.w	r5, [r4, #283]	; 0x11b
    Nvm.MacGroup2.AggregatedDCycle = 1;
 800ade2:	2701      	movs	r7, #1
 800ade4:	f8a4 7120 	strh.w	r7, [r4, #288]	; 0x120
    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800ade8:	f994 30dc 	ldrsb.w	r3, [r4, #220]	; 0xdc
 800adec:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800adf0:	f994 30dd 	ldrsb.w	r3, [r4, #221]	; 0xdd
 800adf4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 800adf8:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
 800adfc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800ae00:	f104 036c 	add.w	r3, r4, #108	; 0x6c
 800ae04:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 800ae08:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae0c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800ae10:	f104 0374 	add.w	r3, r4, #116	; 0x74
 800ae14:	f104 02bc 	add.w	r2, r4, #188	; 0xbc
 800ae18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ae1c:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 800ae20:	f894 30c4 	ldrb.w	r3, [r4, #196]	; 0xc4
 800ae24:	f884 307c 	strb.w	r3, [r4, #124]	; 0x7c
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 800ae28:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
 800ae2c:	f884 307d 	strb.w	r3, [r4, #125]	; 0x7d
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 800ae30:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
 800ae34:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800ae38:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
 800ae3c:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
    Nvm.MacGroup2.MacParams.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800ae40:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
 800ae44:	f8a4 3088 	strh.w	r3, [r4, #136]	; 0x88
    Nvm.MacGroup2.MacParams.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800ae48:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
 800ae4c:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
    MacCtx.NodeAckRequested = false;
 800ae50:	f886 541a 	strb.w	r5, [r6, #1050]	; 0x41a
    Nvm.MacGroup1.SrvAckRequested = false;
 800ae54:	f884 503a 	strb.w	r5, [r4, #58]	; 0x3a
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800ae58:	f884 511d 	strb.w	r5, [r4, #285]	; 0x11d
    Nvm.MacGroup2.DownlinkReceived = false;
 800ae5c:	f884 511e 	strb.w	r5, [r4, #286]	; 0x11e
    Nvm.MacGroup2.Rejoin0UplinksLimit = 0;
 800ae60:	f8c4 5134 	str.w	r5, [r4, #308]	; 0x134
    Nvm.MacGroup2.ForceRejoinMaxRetries = 0;
 800ae64:	f884 5138 	strb.w	r5, [r4, #312]	; 0x138
    Nvm.MacGroup2.ForceRejoinType = 0;
 800ae68:	f884 5139 	strb.w	r5, [r4, #313]	; 0x139
    Nvm.MacGroup2.Rejoin0CycleInSec = 0;
 800ae6c:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
    Nvm.MacGroup2.Rejoin1CycleInSec = 0;
 800ae70:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    Nvm.MacGroup2.IsRejoin0RequestQueued = 0;
 800ae74:	f884 5145 	strb.w	r5, [r4, #325]	; 0x145
    Nvm.MacGroup2.IsRejoin1RequestQueued = 0;
 800ae78:	f884 5146 	strb.w	r5, [r4, #326]	; 0x146
    Nvm.MacGroup2.IsRejoin2RequestQueued = 0;
 800ae7c:	f884 5147 	strb.w	r5, [r4, #327]	; 0x147
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 800ae80:	f88d 7010 	strb.w	r7, [sp, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800ae84:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800ae88:	9301      	str	r3, [sp, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800ae8a:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800ae8e:	9302      	str	r3, [sp, #8]
    params.Bands = &RegionBands;
 800ae90:	4b2f      	ldr	r3, [pc, #188]	; (800af50 <ResetMacParameters+0x194>)
 800ae92:	9303      	str	r3, [sp, #12]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800ae94:	a901      	add	r1, sp, #4
 800ae96:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800ae9a:	f002 fc8c 	bl	800d7b6 <RegionInitDefaults>
    MacCtx.Channel = 0;
 800ae9e:	f886 541b 	strb.w	r5, [r6, #1051]	; 0x41b
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800aea2:	f886 53d0 	strb.w	r5, [r6, #976]	; 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800aea6:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800aea8:	f8c6 33d4 	str.w	r3, [r6, #980]	; 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800aeac:	f894 307d 	ldrb.w	r3, [r4, #125]	; 0x7d
 800aeb0:	f886 33e0 	strb.w	r3, [r6, #992]	; 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800aeb4:	f894 308c 	ldrb.w	r3, [r4, #140]	; 0x8c
 800aeb8:	f886 33e1 	strb.w	r3, [r6, #993]	; 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800aebc:	f886 53e2 	strb.w	r5, [r6, #994]	; 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800aec0:	f886 73e3 	strb.w	r7, [r6, #995]	; 0x3e3
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800aec4:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800aec8:	f886 33e4 	strb.w	r3, [r6, #996]	; 0x3e4
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800aecc:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800aed0:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800aed4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800aed8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aeda:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800aede:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 800aee2:	f886 73fa 	strb.w	r7, [r6, #1018]	; 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800aee6:	2302      	movs	r3, #2
 800aee8:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
    classBCallbacks.GetTemperatureLevel = NULL;
 800aeec:	950e      	str	r5, [sp, #56]	; 0x38
    classBCallbacks.MacProcessNotify = NULL;
 800aeee:	950f      	str	r5, [sp, #60]	; 0x3c
    if( MacCtx.MacCallbacks != NULL )
 800aef0:	f8d6 3348 	ldr.w	r3, [r6, #840]	; 0x348
 800aef4:	b11b      	cbz	r3, 800aefe <ResetMacParameters+0x142>
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 800aef6:	685a      	ldr	r2, [r3, #4]
 800aef8:	920e      	str	r2, [sp, #56]	; 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 800aefa:	695b      	ldr	r3, [r3, #20]
 800aefc:	930f      	str	r3, [sp, #60]	; 0x3c
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 800aefe:	4b13      	ldr	r3, [pc, #76]	; (800af4c <ResetMacParameters+0x190>)
 800af00:	f503 628d 	add.w	r2, r3, #1128	; 0x468
 800af04:	9205      	str	r2, [sp, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 800af06:	f503 6284 	add.w	r2, r3, #1056	; 0x420
 800af0a:	9206      	str	r2, [sp, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 800af0c:	f203 4254 	addw	r2, r3, #1108	; 0x454
 800af10:	9207      	str	r2, [sp, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 800af12:	f203 4391 	addw	r3, r3, #1169	; 0x491
 800af16:	9308      	str	r3, [sp, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 800af18:	4a0b      	ldr	r2, [pc, #44]	; (800af48 <ResetMacParameters+0x18c>)
 800af1a:	f102 03e4 	add.w	r3, r2, #228	; 0xe4
 800af1e:	9309      	str	r3, [sp, #36]	; 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 800af20:	f102 0348 	add.w	r3, r2, #72	; 0x48
 800af24:	930a      	str	r3, [sp, #40]	; 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 800af26:	f102 034c 	add.w	r3, r2, #76	; 0x4c
 800af2a:	930b      	str	r3, [sp, #44]	; 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 800af2c:	f102 03e8 	add.w	r3, r2, #232	; 0xe8
 800af30:	930c      	str	r3, [sp, #48]	; 0x30
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 800af32:	f502 7398 	add.w	r3, r2, #304	; 0x130
 800af36:	930d      	str	r3, [sp, #52]	; 0x34
    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 800af38:	f202 52b4 	addw	r2, r2, #1460	; 0x5b4
 800af3c:	a90e      	add	r1, sp, #56	; 0x38
 800af3e:	a805      	add	r0, sp, #20
 800af40:	f001 fc04 	bl	800c74c <LoRaMacClassBInit>
}
 800af44:	b011      	add	sp, #68	; 0x44
 800af46:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800af48:	20008000 	.word	0x20008000
 800af4c:	20000840 	.word	0x20000840
 800af50:	20000d5c 	.word	0x20000d5c

0800af54 <SwitchClass>:
{
 800af54:	b570      	push	{r4, r5, r6, lr}
 800af56:	4604      	mov	r4, r0
    switch( Nvm.MacGroup2.DeviceClass )
 800af58:	4b46      	ldr	r3, [pc, #280]	; (800b074 <SwitchClass+0x120>)
 800af5a:	f893 5118 	ldrb.w	r5, [r3, #280]	; 0x118
 800af5e:	2d01      	cmp	r5, #1
 800af60:	d071      	beq.n	800b046 <SwitchClass+0xf2>
 800af62:	2d02      	cmp	r5, #2
 800af64:	d077      	beq.n	800b056 <SwitchClass+0x102>
 800af66:	b10d      	cbz	r5, 800af6c <SwitchClass+0x18>
 800af68:	2003      	movs	r0, #3
}
 800af6a:	bd70      	pop	{r4, r5, r6, pc}
            if( deviceClass == CLASS_A )
 800af6c:	bb58      	cbnz	r0, 800afc6 <SwitchClass+0x72>
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800af6e:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800af72:	336c      	adds	r3, #108	; 0x6c
 800af74:	e893 0003 	ldmia.w	r3, {r0, r1}
 800af78:	e882 0003 	stmia.w	r2, {r0, r1}
                status = LORAMAC_STATUS_OK;
 800af7c:	4620      	mov	r0, r4
            if( deviceClass == CLASS_B )
 800af7e:	2c01      	cmp	r4, #1
 800af80:	d023      	beq.n	800afca <SwitchClass+0x76>
            if( deviceClass == CLASS_C )
 800af82:	2c02      	cmp	r4, #2
 800af84:	d1f1      	bne.n	800af6a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800af86:	4b3b      	ldr	r3, [pc, #236]	; (800b074 <SwitchClass+0x120>)
 800af88:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800af8c:	4e3a      	ldr	r6, [pc, #232]	; (800b078 <SwitchClass+0x124>)
 800af8e:	f506 747a 	add.w	r4, r6, #1000	; 0x3e8
 800af92:	f506 7c74 	add.w	ip, r6, #976	; 0x3d0
 800af96:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800af9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800af9c:	e89c 0003 	ldmia.w	ip, {r0, r1}
 800afa0:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800afa4:	2302      	movs	r3, #2
 800afa6:	f886 33fb 	strb.w	r3, [r6, #1019]	; 0x3fb
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800afaa:	2300      	movs	r3, #0
 800afac:	2b00      	cmp	r3, #0
 800afae:	dd15      	ble.n	800afdc <SwitchClass+0x88>
                MacCtx.NodeAckRequested = false;
 800afb0:	4b31      	ldr	r3, [pc, #196]	; (800b078 <SwitchClass+0x124>)
 800afb2:	2200      	movs	r2, #0
 800afb4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
                Radio.Sleep( );
 800afb8:	4b30      	ldr	r3, [pc, #192]	; (800b07c <SwitchClass+0x128>)
 800afba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afbc:	4798      	blx	r3
                OpenContinuousRxCWindow( );
 800afbe:	f7ff fced 	bl	800a99c <OpenContinuousRxCWindow>
                status = LORAMAC_STATUS_OK;
 800afc2:	4628      	mov	r0, r5
 800afc4:	e7d1      	b.n	800af6a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800afc6:	2003      	movs	r0, #3
 800afc8:	e7d9      	b.n	800af7e <SwitchClass+0x2a>
                status = LoRaMacClassBSwitchClass( deviceClass );
 800afca:	4620      	mov	r0, r4
 800afcc:	f001 fbd4 	bl	800c778 <LoRaMacClassBSwitchClass>
                if( status == LORAMAC_STATUS_OK )
 800afd0:	2800      	cmp	r0, #0
 800afd2:	d1d6      	bne.n	800af82 <SwitchClass+0x2e>
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800afd4:	4b27      	ldr	r3, [pc, #156]	; (800b074 <SwitchClass+0x120>)
 800afd6:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800afda:	e7d2      	b.n	800af82 <SwitchClass+0x2e>
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800afdc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800afe0:	4924      	ldr	r1, [pc, #144]	; (800b074 <SwitchClass+0x120>)
 800afe2:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800afe6:	f892 20e9 	ldrb.w	r2, [r2, #233]	; 0xe9
 800afea:	b13a      	cbz	r2, 800affc <SwitchClass+0xa8>
                        ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Class == CLASS_C ) )
 800afec:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800aff0:	eb01 1202 	add.w	r2, r1, r2, lsl #4
 800aff4:	f892 2100 	ldrb.w	r2, [r2, #256]	; 0x100
                    if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) &&
 800aff8:	2a02      	cmp	r2, #2
 800affa:	d002      	beq.n	800b002 <SwitchClass+0xae>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800affc:	3301      	adds	r3, #1
 800affe:	b25b      	sxtb	r3, r3
 800b000:	e7d4      	b.n	800afac <SwitchClass+0x58>
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Frequency;
 800b002:	460a      	mov	r2, r1
 800b004:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800b008:	eb01 1303 	add.w	r3, r1, r3, lsl #4
 800b00c:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
 800b010:	6751      	str	r1, [r2, #116]	; 0x74
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.Params.ClassC.Datarate;
 800b012:	f893 3108 	ldrb.w	r3, [r3, #264]	; 0x108
 800b016:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800b01a:	4b17      	ldr	r3, [pc, #92]	; (800b078 <SwitchClass+0x124>)
 800b01c:	f893 041b 	ldrb.w	r0, [r3, #1051]	; 0x41b
 800b020:	f883 03e8 	strb.w	r0, [r3, #1000]	; 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800b024:	f8c3 13ec 	str.w	r1, [r3, #1004]	; 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800b028:	f892 107d 	ldrb.w	r1, [r2, #125]	; 0x7d
 800b02c:	f883 13f8 	strb.w	r1, [r3, #1016]	; 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800b030:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800b034:	f883 23f9 	strb.w	r2, [r3, #1017]	; 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800b038:	2203      	movs	r2, #3
 800b03a:	f883 23fb 	strb.w	r2, [r3, #1019]	; 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800b03e:	2201      	movs	r2, #1
 800b040:	f883 23fa 	strb.w	r2, [r3, #1018]	; 0x3fa
                        break;
 800b044:	e7b4      	b.n	800afb0 <SwitchClass+0x5c>
            status = LoRaMacClassBSwitchClass( deviceClass );
 800b046:	f001 fb97 	bl	800c778 <LoRaMacClassBSwitchClass>
            if( status == LORAMAC_STATUS_OK )
 800b04a:	2800      	cmp	r0, #0
 800b04c:	d18d      	bne.n	800af6a <SwitchClass+0x16>
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b04e:	4b09      	ldr	r3, [pc, #36]	; (800b074 <SwitchClass+0x120>)
 800b050:	f883 4118 	strb.w	r4, [r3, #280]	; 0x118
 800b054:	e789      	b.n	800af6a <SwitchClass+0x16>
            if( deviceClass == CLASS_A )
 800b056:	b958      	cbnz	r0, 800b070 <SwitchClass+0x11c>
                MacCtx.RxSlot = RX_SLOT_NONE;
 800b058:	4b07      	ldr	r3, [pc, #28]	; (800b078 <SwitchClass+0x124>)
 800b05a:	2206      	movs	r2, #6
 800b05c:	f883 2490 	strb.w	r2, [r3, #1168]	; 0x490
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800b060:	4b04      	ldr	r3, [pc, #16]	; (800b074 <SwitchClass+0x120>)
 800b062:	f883 0118 	strb.w	r0, [r3, #280]	; 0x118
                Radio.Sleep( );
 800b066:	4b05      	ldr	r3, [pc, #20]	; (800b07c <SwitchClass+0x128>)
 800b068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b06a:	4798      	blx	r3
                status = LORAMAC_STATUS_OK;
 800b06c:	4620      	mov	r0, r4
 800b06e:	e77c      	b.n	800af6a <SwitchClass+0x16>
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800b070:	2003      	movs	r0, #3
 800b072:	e77a      	b.n	800af6a <SwitchClass+0x16>
 800b074:	20008000 	.word	0x20008000
 800b078:	20000840 	.word	0x20000840
 800b07c:	08014d7c 	.word	0x08014d7c

0800b080 <SendReJoinReq>:
{
 800b080:	b538      	push	{r3, r4, r5, lr}
    switch( joinReqType )
 800b082:	28ff      	cmp	r0, #255	; 0xff
 800b084:	d003      	beq.n	800b08e <SendReJoinReq+0xe>
    bool allowDelayedTx = true;
 800b086:	2001      	movs	r0, #1
    status = ScheduleTx( allowDelayedTx );
 800b088:	f7ff fb4c 	bl	800a724 <ScheduleTx>
}
 800b08c:	bd38      	pop	{r3, r4, r5, pc}
            SwitchClass( CLASS_A );
 800b08e:	2000      	movs	r0, #0
 800b090:	f7ff ff60 	bl	800af54 <SwitchClass>
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800b094:	4d0a      	ldr	r5, [pc, #40]	; (800b0c0 <SendReJoinReq+0x40>)
 800b096:	2400      	movs	r4, #0
 800b098:	f885 4104 	strb.w	r4, [r5, #260]	; 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800b09c:	1cab      	adds	r3, r5, #2
 800b09e:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b0a2:	23ff      	movs	r3, #255	; 0xff
 800b0a4:	f885 310c 	strb.w	r3, [r5, #268]	; 0x10c
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800b0a8:	f885 410d 	strb.w	r4, [r5, #269]	; 0x10d
            SecureElementGetJoinEui( MacCtx.TxMsg.Message.JoinReq.JoinEUI );
 800b0ac:	f505 7087 	add.w	r0, r5, #270	; 0x10e
 800b0b0:	f006 f906 	bl	80112c0 <SecureElementGetJoinEui>
            SecureElementGetDevEui( MacCtx.TxMsg.Message.JoinReq.DevEUI );
 800b0b4:	f505 708b 	add.w	r0, r5, #278	; 0x116
 800b0b8:	f006 f8e4 	bl	8011284 <SecureElementGetDevEui>
            allowDelayedTx = false;
 800b0bc:	4620      	mov	r0, r4
            break;
 800b0be:	e7e3      	b.n	800b088 <SendReJoinReq+0x8>
 800b0c0:	20000840 	.word	0x20000840

0800b0c4 <PrepareFrame>:
{
 800b0c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b0c8:	b083      	sub	sp, #12
 800b0ca:	4605      	mov	r5, r0
 800b0cc:	460e      	mov	r6, r1
 800b0ce:	4617      	mov	r7, r2
 800b0d0:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    MacCtx.PktBufferLen = 0;
 800b0d4:	4959      	ldr	r1, [pc, #356]	; (800b23c <PrepareFrame+0x178>)
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	800a      	strh	r2, [r1, #0]
    MacCtx.NodeAckRequested = false;
 800b0da:	f881 241a 	strb.w	r2, [r1, #1050]	; 0x41a
    uint32_t fCntUp = 0;
 800b0de:	9201      	str	r2, [sp, #4]
    size_t macCmdsSize = 0;
 800b0e0:	9200      	str	r2, [sp, #0]
    if( fBuffer == NULL )
 800b0e2:	4698      	mov	r8, r3
 800b0e4:	b1cb      	cbz	r3, 800b11a <PrepareFrame+0x56>
    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 800b0e6:	f8df 9154 	ldr.w	r9, [pc, #340]	; 800b23c <PrepareFrame+0x178>
 800b0ea:	4622      	mov	r2, r4
 800b0ec:	4641      	mov	r1, r8
 800b0ee:	f509 709c 	add.w	r0, r9, #312	; 0x138
 800b0f2:	f006 fa02 	bl	80114fa <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 800b0f6:	b2e0      	uxtb	r0, r4
 800b0f8:	f889 0237 	strb.w	r0, [r9, #567]	; 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 800b0fc:	782b      	ldrb	r3, [r5, #0]
 800b0fe:	f889 3002 	strb.w	r3, [r9, #2]
    switch( macHdr->Bits.MType )
 800b102:	782b      	ldrb	r3, [r5, #0]
 800b104:	095b      	lsrs	r3, r3, #5
 800b106:	2b04      	cmp	r3, #4
 800b108:	d009      	beq.n	800b11e <PrepareFrame+0x5a>
 800b10a:	2b07      	cmp	r3, #7
 800b10c:	d079      	beq.n	800b202 <PrepareFrame+0x13e>
 800b10e:	2b02      	cmp	r3, #2
 800b110:	d009      	beq.n	800b126 <PrepareFrame+0x62>
 800b112:	2002      	movs	r0, #2
}
 800b114:	b003      	add	sp, #12
 800b116:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fBufferSize = 0;
 800b11a:	4614      	mov	r4, r2
 800b11c:	e7e3      	b.n	800b0e6 <PrepareFrame+0x22>
            MacCtx.NodeAckRequested = true;
 800b11e:	4b47      	ldr	r3, [pc, #284]	; (800b23c <PrepareFrame+0x178>)
 800b120:	2201      	movs	r2, #1
 800b122:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 800b126:	4b45      	ldr	r3, [pc, #276]	; (800b23c <PrepareFrame+0x178>)
 800b128:	2204      	movs	r2, #4
 800b12a:	f883 2104 	strb.w	r2, [r3, #260]	; 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 800b12e:	1c9a      	adds	r2, r3, #2
 800b130:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800b134:	22ff      	movs	r2, #255	; 0xff
 800b136:	f883 210c 	strb.w	r2, [r3, #268]	; 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 800b13a:	782a      	ldrb	r2, [r5, #0]
 800b13c:	f883 210d 	strb.w	r2, [r3, #269]	; 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 800b140:	f883 7128 	strb.w	r7, [r3, #296]	; 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 800b144:	4a3e      	ldr	r2, [pc, #248]	; (800b240 <PrepareFrame+0x17c>)
 800b146:	f8d2 20e4 	ldr.w	r2, [r2, #228]	; 0xe4
 800b14a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b14e:	7832      	ldrb	r2, [r6, #0]
 800b150:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 800b154:	f883 0130 	strb.w	r0, [r3, #304]	; 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 800b158:	f503 729c 	add.w	r2, r3, #312	; 0x138
 800b15c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 800b160:	a801      	add	r0, sp, #4
 800b162:	f001 ff97 	bl	800d094 <LoRaMacCryptoGetFCntUp>
 800b166:	2800      	cmp	r0, #0
 800b168:	d15c      	bne.n	800b224 <PrepareFrame+0x160>
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 800b16a:	9a01      	ldr	r2, [sp, #4]
 800b16c:	4b33      	ldr	r3, [pc, #204]	; (800b23c <PrepareFrame+0x178>)
 800b16e:	f8a3 2116 	strh.w	r2, [r3, #278]	; 0x116
            MacCtx.McpsConfirm.NbTrans = 0;
 800b172:	2100      	movs	r1, #0
 800b174:	f883 1445 	strb.w	r1, [r3, #1093]	; 0x445
            MacCtx.McpsConfirm.AckReceived = false;
 800b178:	f883 1444 	strb.w	r1, [r3, #1092]	; 0x444
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 800b17c:	f8c3 244c 	str.w	r2, [r3, #1100]	; 0x44c
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b180:	4668      	mov	r0, sp
 800b182:	f001 fc2f 	bl	800c9e4 <LoRaMacCommandsGetSizeSerializedCmds>
 800b186:	2800      	cmp	r0, #0
 800b188:	d14e      	bne.n	800b228 <PrepareFrame+0x164>
            if( macCmdsSize > 0 )
 800b18a:	9b00      	ldr	r3, [sp, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d0c1      	beq.n	800b114 <PrepareFrame+0x50>
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 800b190:	4b2b      	ldr	r3, [pc, #172]	; (800b240 <PrepareFrame+0x17c>)
 800b192:	f993 0039 	ldrsb.w	r0, [r3, #57]	; 0x39
 800b196:	f7fe f8bf 	bl	8009318 <GetMaxAppPayloadWithoutFOptsLength>
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b19a:	4b28      	ldr	r3, [pc, #160]	; (800b23c <PrepareFrame+0x178>)
 800b19c:	f893 3237 	ldrb.w	r3, [r3, #567]	; 0x237
 800b1a0:	b113      	cbz	r3, 800b1a8 <PrepareFrame+0xe4>
 800b1a2:	9a00      	ldr	r2, [sp, #0]
 800b1a4:	2a0f      	cmp	r2, #15
 800b1a6:	d915      	bls.n	800b1d4 <PrepareFrame+0x110>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 800b1a8:	b113      	cbz	r3, 800b1b0 <PrepareFrame+0xec>
 800b1aa:	9b00      	ldr	r3, [sp, #0]
 800b1ac:	2b0f      	cmp	r3, #15
 800b1ae:	d821      	bhi.n	800b1f4 <PrepareFrame+0x130>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b1b0:	4a24      	ldr	r2, [pc, #144]	; (800b244 <PrepareFrame+0x180>)
 800b1b2:	4669      	mov	r1, sp
 800b1b4:	f001 fc22 	bl	800c9fc <LoRaMacCommandsSerializeCmds>
 800b1b8:	2800      	cmp	r0, #0
 800b1ba:	d13b      	bne.n	800b234 <PrepareFrame+0x170>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 800b1bc:	4b1f      	ldr	r3, [pc, #124]	; (800b23c <PrepareFrame+0x178>)
 800b1be:	2200      	movs	r2, #0
 800b1c0:	f883 2128 	strb.w	r2, [r3, #296]	; 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 800b1c4:	f203 429c 	addw	r2, r3, #1180	; 0x49c
 800b1c8:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 800b1cc:	9a00      	ldr	r2, [sp, #0]
 800b1ce:	f883 2130 	strb.w	r2, [r3, #304]	; 0x130
 800b1d2:	e79f      	b.n	800b114 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 800b1d4:	4a1c      	ldr	r2, [pc, #112]	; (800b248 <PrepareFrame+0x184>)
 800b1d6:	4669      	mov	r1, sp
 800b1d8:	200f      	movs	r0, #15
 800b1da:	f001 fc0f 	bl	800c9fc <LoRaMacCommandsSerializeCmds>
 800b1de:	bb28      	cbnz	r0, 800b22c <PrepareFrame+0x168>
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 800b1e0:	7833      	ldrb	r3, [r6, #0]
 800b1e2:	9a00      	ldr	r2, [sp, #0]
 800b1e4:	f362 0303 	bfi	r3, r2, #0, #4
 800b1e8:	7033      	strb	r3, [r6, #0]
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 800b1ea:	b2da      	uxtb	r2, r3
 800b1ec:	4b13      	ldr	r3, [pc, #76]	; (800b23c <PrepareFrame+0x178>)
 800b1ee:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
 800b1f2:	e78f      	b.n	800b114 <PrepareFrame+0x50>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 800b1f4:	4a13      	ldr	r2, [pc, #76]	; (800b244 <PrepareFrame+0x180>)
 800b1f6:	4669      	mov	r1, sp
 800b1f8:	f001 fc00 	bl	800c9fc <LoRaMacCommandsSerializeCmds>
 800b1fc:	b1c0      	cbz	r0, 800b230 <PrepareFrame+0x16c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b1fe:	2013      	movs	r0, #19
 800b200:	e788      	b.n	800b114 <PrepareFrame+0x50>
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 800b202:	f1b8 0f00 	cmp.w	r8, #0
 800b206:	d017      	beq.n	800b238 <PrepareFrame+0x174>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d083      	beq.n	800b114 <PrepareFrame+0x50>
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 800b20c:	4c0b      	ldr	r4, [pc, #44]	; (800b23c <PrepareFrame+0x178>)
 800b20e:	b282      	uxth	r2, r0
 800b210:	4641      	mov	r1, r8
 800b212:	1ce0      	adds	r0, r4, #3
 800b214:	f006 f971 	bl	80114fa <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 800b218:	f894 3237 	ldrb.w	r3, [r4, #567]	; 0x237
 800b21c:	3301      	adds	r3, #1
 800b21e:	8023      	strh	r3, [r4, #0]
    return LORAMAC_STATUS_OK;
 800b220:	2000      	movs	r0, #0
 800b222:	e777      	b.n	800b114 <PrepareFrame+0x50>
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 800b224:	2012      	movs	r0, #18
 800b226:	e775      	b.n	800b114 <PrepareFrame+0x50>
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b228:	2013      	movs	r0, #19
 800b22a:	e773      	b.n	800b114 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b22c:	2013      	movs	r0, #19
 800b22e:	e771      	b.n	800b114 <PrepareFrame+0x50>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 800b230:	200a      	movs	r0, #10
 800b232:	e76f      	b.n	800b114 <PrepareFrame+0x50>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b234:	2013      	movs	r0, #19
 800b236:	e76d      	b.n	800b114 <PrepareFrame+0x50>
    return LORAMAC_STATUS_OK;
 800b238:	2000      	movs	r0, #0
 800b23a:	e76b      	b.n	800b114 <PrepareFrame+0x50>
 800b23c:	20000840 	.word	0x20000840
 800b240:	20008000 	.word	0x20008000
 800b244:	20000cdc 	.word	0x20000cdc
 800b248:	20000958 	.word	0x20000958

0800b24c <Send>:
{
 800b24c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b250:	b08a      	sub	sp, #40	; 0x28
 800b252:	4617      	mov	r7, r2
 800b254:	4698      	mov	r8, r3
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b256:	4c44      	ldr	r4, [pc, #272]	; (800b368 <Send+0x11c>)
 800b258:	f994 a039 	ldrsb.w	sl, [r4, #57]	; 0x39
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800b25c:	f994 9038 	ldrsb.w	r9, [r4, #56]	; 0x38
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b260:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800b262:	9208      	str	r2, [sp, #32]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800b264:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d07a      	beq.n	800b362 <Send+0x116>
 800b26c:	4605      	mov	r5, r0
 800b26e:	460e      	mov	r6, r1
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800b270:	f894 311b 	ldrb.w	r3, [r4, #283]	; 0x11b
 800b274:	b90b      	cbnz	r3, 800b27a <Send+0x2e>
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b276:	2100      	movs	r1, #0
 800b278:	6321      	str	r1, [r4, #48]	; 0x30
    fCtrl.Value = 0;
 800b27a:	2300      	movs	r3, #0
 800b27c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800b280:	4839      	ldr	r0, [pc, #228]	; (800b368 <Send+0x11c>)
 800b282:	f890 111a 	ldrb.w	r1, [r0, #282]	; 0x11a
 800b286:	f361 13c7 	bfi	r3, r1, #7, #1
 800b28a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800b28e:	f890 3118 	ldrb.w	r3, [r0, #280]	; 0x118
 800b292:	2b01      	cmp	r3, #1
 800b294:	d052      	beq.n	800b33c <Send+0xf0>
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800b296:	4b34      	ldr	r3, [pc, #208]	; (800b368 <Send+0x11c>)
 800b298:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b29c:	b12b      	cbz	r3, 800b2aa <Send+0x5e>
        fCtrl.Bits.Ack = 1;
 800b29e:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b2a2:	f043 0320 	orr.w	r3, r3, #32
 800b2a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    adrNext.UpdateChanMask = true;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	f88d 300c 	strb.w	r3, [sp, #12]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800b2b0:	f88d 100d 	strb.w	r1, [sp, #13]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b2b4:	9204      	str	r2, [sp, #16]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b2b6:	492c      	ldr	r1, [pc, #176]	; (800b368 <Send+0x11c>)
 800b2b8:	f8b1 3088 	ldrh.w	r3, [r1, #136]	; 0x88
 800b2bc:	f8ad 3014 	strh.w	r3, [sp, #20]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b2c0:	f8b1 308a 	ldrh.w	r3, [r1, #138]	; 0x8a
 800b2c4:	f8ad 3016 	strh.w	r3, [sp, #22]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b2c8:	f88d a018 	strb.w	sl, [sp, #24]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b2cc:	f88d 9019 	strb.w	r9, [sp, #25]
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b2d0:	f891 307c 	ldrb.w	r3, [r1, #124]	; 0x7c
 800b2d4:	f88d 301b 	strb.w	r3, [sp, #27]
    adrNext.Region = Nvm.MacGroup2.Region;
 800b2d8:	f891 3048 	ldrb.w	r3, [r1, #72]	; 0x48
 800b2dc:	f88d 301c 	strb.w	r3, [sp, #28]
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800b2e0:	460b      	mov	r3, r1
 800b2e2:	f813 2f68 	ldrb.w	r2, [r3, #104]!
 800b2e6:	f88d 201a 	strb.w	r2, [sp, #26]
    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800b2ea:	aa08      	add	r2, sp, #32
 800b2ec:	9200      	str	r2, [sp, #0]
 800b2ee:	f101 0238 	add.w	r2, r1, #56	; 0x38
 800b2f2:	3139      	adds	r1, #57	; 0x39
 800b2f4:	a803      	add	r0, sp, #12
 800b2f6:	f001 f9af 	bl	800c658 <LoRaMacAdrCalcNext>
 800b2fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b2fe:	f360 1386 	bfi	r3, r0, #6, #1
 800b302:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800b306:	f8cd 8000 	str.w	r8, [sp]
 800b30a:	463b      	mov	r3, r7
 800b30c:	4632      	mov	r2, r6
 800b30e:	a909      	add	r1, sp, #36	; 0x24
 800b310:	4628      	mov	r0, r5
 800b312:	f7ff fed7 	bl	800b0c4 <PrepareFrame>
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800b316:	4604      	mov	r4, r0
 800b318:	b108      	cbz	r0, 800b31e <Send+0xd2>
 800b31a:	280a      	cmp	r0, #10
 800b31c:	d104      	bne.n	800b328 <Send+0xdc>
        status = ScheduleTx( allowDelayedTx );
 800b31e:	f89d 0048 	ldrb.w	r0, [sp, #72]	; 0x48
 800b322:	f7ff f9ff 	bl	800a724 <ScheduleTx>
 800b326:	4604      	mov	r4, r0
    if( status != LORAMAC_STATUS_OK )
 800b328:	b17c      	cbz	r4, 800b34a <Send+0xfe>
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800b32a:	4b0f      	ldr	r3, [pc, #60]	; (800b368 <Send+0x11c>)
 800b32c:	f883 a039 	strb.w	sl, [r3, #57]	; 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800b330:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
}
 800b334:	4620      	mov	r0, r4
 800b336:	b00a      	add	sp, #40	; 0x28
 800b338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        fCtrl.Bits.FPending      = 1;
 800b33c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800b340:	f043 0310 	orr.w	r3, r3, #16
 800b344:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800b348:	e7a5      	b.n	800b296 <Send+0x4a>
        Nvm.MacGroup1.SrvAckRequested = false;
 800b34a:	4b07      	ldr	r3, [pc, #28]	; (800b368 <Send+0x11c>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800b352:	9a08      	ldr	r2, [sp, #32]
 800b354:	629a      	str	r2, [r3, #40]	; 0x28
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800b356:	f001 fb13 	bl	800c980 <LoRaMacCommandsRemoveNoneStickyCmds>
 800b35a:	2800      	cmp	r0, #0
 800b35c:	d0ea      	beq.n	800b334 <Send+0xe8>
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b35e:	2413      	movs	r4, #19
 800b360:	e7e8      	b.n	800b334 <Send+0xe8>
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800b362:	2407      	movs	r4, #7
 800b364:	e7e6      	b.n	800b334 <Send+0xe8>
 800b366:	bf00      	nop
 800b368:	20008000 	.word	0x20008000

0800b36c <LoRaMacIsBusy>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b36c:	4b0c      	ldr	r3, [pc, #48]	; (800b3a0 <LoRaMacIsBusy+0x34>)
 800b36e:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b372:	2b01      	cmp	r3, #1
 800b374:	d00c      	beq.n	800b390 <LoRaMacIsBusy+0x24>
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800b376:	4a0b      	ldr	r2, [pc, #44]	; (800b3a4 <LoRaMacIsBusy+0x38>)
 800b378:	7812      	ldrb	r2, [r2, #0]
 800b37a:	f012 0f01 	tst.w	r2, #1
 800b37e:	d109      	bne.n	800b394 <LoRaMacIsBusy+0x28>
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b380:	b953      	cbnz	r3, 800b398 <LoRaMacIsBusy+0x2c>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800b382:	4b07      	ldr	r3, [pc, #28]	; (800b3a0 <LoRaMacIsBusy+0x34>)
 800b384:	f893 3492 	ldrb.w	r3, [r3, #1170]	; 0x492
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800b388:	2b01      	cmp	r3, #1
 800b38a:	d007      	beq.n	800b39c <LoRaMacIsBusy+0x30>
    return true;
 800b38c:	2001      	movs	r0, #1
 800b38e:	4770      	bx	lr
        return false;
 800b390:	2000      	movs	r0, #0
 800b392:	4770      	bx	lr
        return true;
 800b394:	2001      	movs	r0, #1
 800b396:	4770      	bx	lr
    return true;
 800b398:	2001      	movs	r0, #1
 800b39a:	4770      	bx	lr
        return false;
 800b39c:	2000      	movs	r0, #0
}
 800b39e:	4770      	bx	lr
 800b3a0:	20000840 	.word	0x20000840
 800b3a4:	2000083c 	.word	0x2000083c

0800b3a8 <LoRaMacIsStopped>:
    if( MacCtx.MacState == LORAMAC_STOPPED )
 800b3a8:	4b04      	ldr	r3, [pc, #16]	; (800b3bc <LoRaMacIsStopped+0x14>)
 800b3aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b3ae:	2b01      	cmp	r3, #1
 800b3b0:	d001      	beq.n	800b3b6 <LoRaMacIsStopped+0xe>
    return false;
 800b3b2:	2000      	movs	r0, #0
 800b3b4:	4770      	bx	lr
        return true;
 800b3b6:	2001      	movs	r0, #1
}
 800b3b8:	4770      	bx	lr
 800b3ba:	bf00      	nop
 800b3bc:	20000840 	.word	0x20000840

0800b3c0 <LoRaMacProcess>:
{
 800b3c0:	b508      	push	{r3, lr}
    LoRaMacHandleIrqEvents( );
 800b3c2:	f7fe ffff 	bl	800a3c4 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800b3c6:	f001 f9e8 	bl	800c79a <LoRaMacClassBProcess>
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800b3ca:	4b1f      	ldr	r3, [pc, #124]	; (800b448 <LoRaMacProcess+0x88>)
 800b3cc:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b3d0:	f013 0f10 	tst.w	r3, #16
 800b3d4:	d10d      	bne.n	800b3f2 <LoRaMacProcess+0x32>
    LoRaMacHandleIndicationEvents( );
 800b3d6:	f7fd fe69 	bl	80090ac <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800b3da:	4b1b      	ldr	r3, [pc, #108]	; (800b448 <LoRaMacProcess+0x88>)
 800b3dc:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800b3e0:	2b02      	cmp	r3, #2
 800b3e2:	d022      	beq.n	800b42a <LoRaMacProcess+0x6a>
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800b3e4:	4b18      	ldr	r3, [pc, #96]	; (800b448 <LoRaMacProcess+0x88>)
 800b3e6:	f893 3491 	ldrb.w	r3, [r3, #1169]	; 0x491
 800b3ea:	f013 0f20 	tst.w	r3, #32
 800b3ee:	d11f      	bne.n	800b430 <LoRaMacProcess+0x70>
}
 800b3f0:	bd08      	pop	{r3, pc}
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800b3f2:	2000      	movs	r0, #0
 800b3f4:	f7fd fe54 	bl	80090a0 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800b3f8:	f7fd fe90 	bl	800911c <LoRaMacCheckForRxAbort>
        if( IsRequestPending( ) > 0 )
 800b3fc:	f7fd ff80 	bl	8009300 <IsRequestPending>
 800b400:	b110      	cbz	r0, 800b408 <LoRaMacProcess+0x48>
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800b402:	f7fe f86f 	bl	80094e4 <LoRaMacCheckForBeaconAcquisition>
        if( noTx == 0x00 )
 800b406:	b918      	cbnz	r0, 800b410 <LoRaMacProcess+0x50>
            LoRaMacHandleMlmeRequest( );
 800b408:	f7ff f81e 	bl	800a448 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800b40c:	f7ff fa40 	bl	800a890 <LoRaMacHandleMcpsRequest>
        LoRaMacHandleRequestEvents( );
 800b410:	f7ff fa7a 	bl	800a908 <LoRaMacHandleRequestEvents>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b414:	2001      	movs	r0, #1
 800b416:	f7fd fe43 	bl	80090a0 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800b41a:	4a0b      	ldr	r2, [pc, #44]	; (800b448 <LoRaMacProcess+0x88>)
 800b41c:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800b420:	f043 0320 	orr.w	r3, r3, #32
 800b424:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
 800b428:	e7d5      	b.n	800b3d6 <LoRaMacProcess+0x16>
        OpenContinuousRxCWindow( );
 800b42a:	f7ff fab7 	bl	800a99c <OpenContinuousRxCWindow>
 800b42e:	e7d9      	b.n	800b3e4 <LoRaMacProcess+0x24>
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800b430:	4b05      	ldr	r3, [pc, #20]	; (800b448 <LoRaMacProcess+0x88>)
 800b432:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800b436:	f36f 1245 	bfc	r2, #5, #1
 800b43a:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
        LoRaMacHandleNvm( &Nvm );
 800b43e:	4803      	ldr	r0, [pc, #12]	; (800b44c <LoRaMacProcess+0x8c>)
 800b440:	f7ff fb5c 	bl	800aafc <LoRaMacHandleNvm>
}
 800b444:	e7d4      	b.n	800b3f0 <LoRaMacProcess+0x30>
 800b446:	bf00      	nop
 800b448:	20000840 	.word	0x20000840
 800b44c:	20008000 	.word	0x20008000

0800b450 <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 800b450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b454:	b08d      	sub	sp, #52	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 800b456:	2800      	cmp	r0, #0
 800b458:	f000 81a3 	beq.w	800b7a2 <LoRaMacInitialization+0x352>
 800b45c:	4688      	mov	r8, r1
 800b45e:	4691      	mov	r9, r2
 800b460:	4607      	mov	r7, r0
 800b462:	2900      	cmp	r1, #0
 800b464:	f000 819f 	beq.w	800b7a6 <LoRaMacInitialization+0x356>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b468:	6803      	ldr	r3, [r0, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	f000 819d 	beq.w	800b7aa <LoRaMacInitialization+0x35a>
        ( primitives->MacMcpsIndication == NULL ) ||
 800b470:	6843      	ldr	r3, [r0, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 800b472:	2b00      	cmp	r3, #0
 800b474:	f000 819b 	beq.w	800b7ae <LoRaMacInitialization+0x35e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b478:	6883      	ldr	r3, [r0, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 800b47a:	2b00      	cmp	r3, #0
 800b47c:	f000 8199 	beq.w	800b7b2 <LoRaMacInitialization+0x362>
        ( primitives->MacMlmeIndication == NULL ) )
 800b480:	68c3      	ldr	r3, [r0, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 800b482:	2b00      	cmp	r3, #0
 800b484:	f000 8197 	beq.w	800b7b6 <LoRaMacInitialization+0x366>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 800b488:	4610      	mov	r0, r2
 800b48a:	f002 f955 	bl	800d738 <RegionIsActive>
 800b48e:	2800      	cmp	r0, #0
 800b490:	f000 8193 	beq.w	800b7ba <LoRaMacInitialization+0x36a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 800b494:	4638      	mov	r0, r7
 800b496:	f001 fb45 	bl	800cb24 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 800b49a:	4ccb      	ldr	r4, [pc, #812]	; (800b7c8 <LoRaMacInitialization+0x378>)
 800b49c:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b4a0:	2100      	movs	r1, #0
 800b4a2:	4620      	mov	r0, r4
 800b4a4:	f006 f841 	bl	801152a <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 800b4a8:	4ec8      	ldr	r6, [pc, #800]	; (800b7cc <LoRaMacInitialization+0x37c>)
 800b4aa:	f240 521c 	movw	r2, #1308	; 0x51c
 800b4ae:	2100      	movs	r1, #0
 800b4b0:	4630      	mov	r0, r6
 800b4b2:	f006 f83a 	bl	801152a <memset1>
    // Set non zero variables to its default value
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 800b4b6:	f884 9048 	strb.w	r9, [r4, #72]	; 0x48
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 800b4ba:	2500      	movs	r5, #0
 800b4bc:	f884 5118 	strb.w	r5, [r4, #280]	; 0x118
    Nvm.MacGroup2.MacParams.RepeaterSupport = false;
 800b4c0:	f884 508c 	strb.w	r5, [r4, #140]	; 0x8c

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 800b4c4:	4bc2      	ldr	r3, [pc, #776]	; (800b7d0 <LoRaMacInitialization+0x380>)
 800b4c6:	f8c4 312c 	str.w	r3, [r4, #300]	; 0x12c
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 800b4ca:	f88d 5020 	strb.w	r5, [sp, #32]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 800b4ce:	f504 7309 	add.w	r3, r4, #548	; 0x224
 800b4d2:	9305      	str	r3, [sp, #20]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 800b4d4:	f504 730e 	add.w	r3, r4, #568	; 0x238
 800b4d8:	9306      	str	r3, [sp, #24]
    params.Bands = &RegionBands;
 800b4da:	4bbe      	ldr	r3, [pc, #760]	; (800b7d4 <LoRaMacInitialization+0x384>)
 800b4dc:	9307      	str	r3, [sp, #28]
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800b4de:	a905      	add	r1, sp, #20
 800b4e0:	4648      	mov	r0, r9
 800b4e2:	f002 f968 	bl	800d7b6 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800b4e6:	230f      	movs	r3, #15
 800b4e8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b4ec:	a90a      	add	r1, sp, #40	; 0x28
 800b4ee:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b4f2:	f002 f92f 	bl	800d754 <RegionGetPhyParam>
 800b4f6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 800b4f8:	1b40      	subs	r0, r0, r5
 800b4fa:	bf18      	it	ne
 800b4fc:	2001      	movne	r0, #1
 800b4fe:	f884 011c 	strb.w	r0, [r4, #284]	; 0x11c

    getPhy.Attribute = PHY_DEF_TX_POWER;
 800b502:	f04f 0a0a 	mov.w	sl, #10
 800b506:	f88d a028 	strb.w	sl, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b50a:	a90a      	add	r1, sp, #40	; 0x28
 800b50c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b510:	f002 f920 	bl	800d754 <RegionGetPhyParam>
 800b514:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 800b516:	f884 00dc 	strb.w	r0, [r4, #220]	; 0xdc

    getPhy.Attribute = PHY_DEF_TX_DR;
 800b51a:	f04f 0906 	mov.w	r9, #6
 800b51e:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b522:	a90a      	add	r1, sp, #40	; 0x28
 800b524:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b528:	f002 f914 	bl	800d754 <RegionGetPhyParam>
 800b52c:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 800b52e:	f884 00dd 	strb.w	r0, [r4, #221]	; 0xdd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 800b532:	2310      	movs	r3, #16
 800b534:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b538:	a90a      	add	r1, sp, #40	; 0x28
 800b53a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b53e:	f002 f909 	bl	800d754 <RegionGetPhyParam>
 800b542:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 800b544:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 800b548:	2311      	movs	r3, #17
 800b54a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b54e:	a90a      	add	r1, sp, #40	; 0x28
 800b550:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b554:	f002 f8fe 	bl	800d754 <RegionGetPhyParam>
 800b558:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 800b55a:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 800b55e:	2312      	movs	r3, #18
 800b560:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b564:	a90a      	add	r1, sp, #40	; 0x28
 800b566:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b56a:	f002 f8f3 	bl	800d754 <RegionGetPhyParam>
 800b56e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 800b570:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 800b574:	2313      	movs	r3, #19
 800b576:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b57a:	a90a      	add	r1, sp, #40	; 0x28
 800b57c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b580:	f002 f8e8 	bl	800d754 <RegionGetPhyParam>
 800b584:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 800b586:	f8c4 00a8 	str.w	r0, [r4, #168]	; 0xa8

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 800b58a:	2314      	movs	r3, #20
 800b58c:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b590:	a90a      	add	r1, sp, #40	; 0x28
 800b592:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b596:	f002 f8dd 	bl	800d754 <RegionGetPhyParam>
 800b59a:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 800b59c:	f8c4 00ac 	str.w	r0, [r4, #172]	; 0xac

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 800b5a0:	2316      	movs	r3, #22
 800b5a2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5a6:	a90a      	add	r1, sp, #40	; 0x28
 800b5a8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b5ac:	f002 f8d2 	bl	800d754 <RegionGetPhyParam>
 800b5b0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 800b5b2:	f884 00b1 	strb.w	r0, [r4, #177]	; 0xb1

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 800b5b6:	2317      	movs	r3, #23
 800b5b8:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5bc:	a90a      	add	r1, sp, #40	; 0x28
 800b5be:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b5c2:	f002 f8c7 	bl	800d754 <RegionGetPhyParam>
 800b5c6:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 800b5c8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 800b5cc:	f8c4 00bc 	str.w	r0, [r4, #188]	; 0xbc

    getPhy.Attribute = PHY_DEF_RX2_DR;
 800b5d0:	2318      	movs	r3, #24
 800b5d2:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5d6:	a90a      	add	r1, sp, #40	; 0x28
 800b5d8:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b5dc:	f002 f8ba 	bl	800d754 <RegionGetPhyParam>
 800b5e0:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 800b5e2:	b2c0      	uxtb	r0, r0
 800b5e4:	f884 00b8 	strb.w	r0, [r4, #184]	; 0xb8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 800b5e8:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 800b5ec:	231d      	movs	r3, #29
 800b5ee:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b5f2:	a90a      	add	r1, sp, #40	; 0x28
 800b5f4:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b5f8:	f002 f8ac 	bl	800d754 <RegionGetPhyParam>
 800b5fc:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 800b5fe:	f884 00c4 	strb.w	r0, [r4, #196]	; 0xc4

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 800b602:	231e      	movs	r3, #30
 800b604:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b608:	a90a      	add	r1, sp, #40	; 0x28
 800b60a:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b60e:	f002 f8a1 	bl	800d754 <RegionGetPhyParam>
 800b612:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 800b614:	f884 00c5 	strb.w	r0, [r4, #197]	; 0xc5

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 800b618:	231f      	movs	r3, #31
 800b61a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b61e:	a90a      	add	r1, sp, #40	; 0x28
 800b620:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b624:	f002 f896 	bl	800d754 <RegionGetPhyParam>
 800b628:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 800b62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b62c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 800b630:	2320      	movs	r3, #32
 800b632:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b636:	a90a      	add	r1, sp, #40	; 0x28
 800b638:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b63c:	f002 f88a 	bl	800d754 <RegionGetPhyParam>
 800b640:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 800b642:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b644:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 800b648:	230b      	movs	r3, #11
 800b64a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b64e:	a90a      	add	r1, sp, #40	; 0x28
 800b650:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b654:	f002 f87e 	bl	800d754 <RegionGetPhyParam>
 800b658:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = phyParam.Value;
 800b65a:	f8a4 00d0 	strh.w	r0, [r4, #208]	; 0xd0

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 800b65e:	230c      	movs	r3, #12
 800b660:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800b664:	a90a      	add	r1, sp, #40	; 0x28
 800b666:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800b66a:	f002 f873 	bl	800d754 <RegionGetPhyParam>
 800b66e:	9009      	str	r0, [sp, #36]	; 0x24
    Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = phyParam.Value;
 800b670:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 800b674:	f04f 0b01 	mov.w	fp, #1
 800b678:	f884 b0b0 	strb.w	fp, [r4, #176]	; 0xb0
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 800b67c:	f8c4 a094 	str.w	sl, [r4, #148]	; 0x94
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 800b680:	f884 9098 	strb.w	r9, [r4, #152]	; 0x98

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 800b684:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 800b688:	f884 9050 	strb.w	r9, [r4, #80]	; 0x50
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 800b68c:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
 800b690:	6563      	str	r3, [r4, #84]	; 0x54
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 800b692:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
 800b696:	65a3      	str	r3, [r4, #88]	; 0x58
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 800b698:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800b69c:	65e3      	str	r3, [r4, #92]	; 0x5c
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 800b69e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
 800b6a2:	6623      	str	r3, [r4, #96]	; 0x60
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 800b6a4:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
 800b6a8:	6663      	str	r3, [r4, #100]	; 0x64
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 800b6aa:	f884 b068 	strb.w	fp, [r4, #104]	; 0x68
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 800b6ae:	f884 b11f 	strb.w	fp, [r4, #287]	; 0x11f
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 800b6b2:	f8c6 8348 	str.w	r8, [r6, #840]	; 0x348
    ResetMacParameters( false );
 800b6b6:	4628      	mov	r0, r5
 800b6b8:	f7ff fb80 	bl	800adbc <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 800b6bc:	f884 b119 	strb.w	fp, [r4, #281]	; 0x119

    MacCtx.MacPrimitives = primitives;
 800b6c0:	f8c6 7344 	str.w	r7, [r6, #836]	; 0x344
    MacCtx.MacFlags.Value = 0;
 800b6c4:	f886 5491 	strb.w	r5, [r6, #1169]	; 0x491
    MacCtx.MacState = LORAMAC_STOPPED;
 800b6c8:	f8c6 b340 	str.w	fp, [r6, #832]	; 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 800b6cc:	62e5      	str	r5, [r4, #44]	; 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 800b6ce:	6325      	str	r5, [r4, #48]	; 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 800b6d0:	9500      	str	r5, [sp, #0]
 800b6d2:	4b41      	ldr	r3, [pc, #260]	; (800b7d8 <LoRaMacInitialization+0x388>)
 800b6d4:	462a      	mov	r2, r5
 800b6d6:	f04f 31ff 	mov.w	r1, #4294967295
 800b6da:	f506 705a 	add.w	r0, r6, #872	; 0x368
 800b6de:	f008 f8e1 	bl	80138a4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 800b6e2:	9500      	str	r5, [sp, #0]
 800b6e4:	4b3d      	ldr	r3, [pc, #244]	; (800b7dc <LoRaMacInitialization+0x38c>)
 800b6e6:	462a      	mov	r2, r5
 800b6e8:	f04f 31ff 	mov.w	r1, #4294967295
 800b6ec:	f506 7060 	add.w	r0, r6, #896	; 0x380
 800b6f0:	f008 f8d8 	bl	80138a4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 800b6f4:	9500      	str	r5, [sp, #0]
 800b6f6:	4b3a      	ldr	r3, [pc, #232]	; (800b7e0 <LoRaMacInitialization+0x390>)
 800b6f8:	462a      	mov	r2, r5
 800b6fa:	f04f 31ff 	mov.w	r1, #4294967295
 800b6fe:	f506 7066 	add.w	r0, r6, #920	; 0x398
 800b702:	f008 f8cf 	bl	80138a4 <UTIL_TIMER_Create>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 800b706:	9500      	str	r5, [sp, #0]
 800b708:	4b36      	ldr	r3, [pc, #216]	; (800b7e4 <LoRaMacInitialization+0x394>)
 800b70a:	462a      	mov	r2, r5
 800b70c:	f04f 31ff 	mov.w	r1, #4294967295
 800b710:	f506 6080 	add.w	r0, r6, #1024	; 0x400
 800b714:	f008 f8c6 	bl	80138a4 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.Rejoin1CycleTimer, OnRejoin1CycleTimerEvent );
    TimerInit( &MacCtx.ForceRejoinReqCycleTimer, OnForceRejoinReqCycleTimerEvent );
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 800b718:	af02      	add	r7, sp, #8
 800b71a:	4638      	mov	r0, r7
 800b71c:	f008 f854 	bl	80137c8 <SysTimeGetMcuTime>
 800b720:	f504 7392 	add.w	r3, r4, #292	; 0x124
 800b724:	e897 0003 	ldmia.w	r7, {r0, r1}
 800b728:	e883 0003 	stmia.w	r3, {r0, r1}

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 800b72c:	4b2e      	ldr	r3, [pc, #184]	; (800b7e8 <LoRaMacInitialization+0x398>)
 800b72e:	601d      	str	r5, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 800b730:	4b2e      	ldr	r3, [pc, #184]	; (800b7ec <LoRaMacInitialization+0x39c>)
 800b732:	f8c6 334c 	str.w	r3, [r6, #844]	; 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 800b736:	4b2e      	ldr	r3, [pc, #184]	; (800b7f0 <LoRaMacInitialization+0x3a0>)
 800b738:	f8c6 3354 	str.w	r3, [r6, #852]	; 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 800b73c:	4b2d      	ldr	r3, [pc, #180]	; (800b7f4 <LoRaMacInitialization+0x3a4>)
 800b73e:	f8c6 335c 	str.w	r3, [r6, #860]	; 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 800b742:	4b2d      	ldr	r3, [pc, #180]	; (800b7f8 <LoRaMacInitialization+0x3a8>)
 800b744:	f8c6 3350 	str.w	r3, [r6, #848]	; 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 800b748:	4b2c      	ldr	r3, [pc, #176]	; (800b7fc <LoRaMacInitialization+0x3ac>)
 800b74a:	f8c6 3358 	str.w	r3, [r6, #856]	; 0x358
    Radio.Init( &MacCtx.RadioEvents );
 800b74e:	4b2c      	ldr	r3, [pc, #176]	; (800b800 <LoRaMacInitialization+0x3b0>)
 800b750:	681b      	ldr	r3, [r3, #0]
 800b752:	f506 7053 	add.w	r0, r6, #844	; 0x34c
 800b756:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement ) != SECURE_ELEMENT_SUCCESS )
 800b758:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
 800b75c:	f005 fbf8 	bl	8010f50 <SecureElementInit>
 800b760:	bb80      	cbnz	r0, 800b7c4 <LoRaMacInitialization+0x374>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 800b762:	4620      	mov	r0, r4
 800b764:	f001 fc76 	bl	800d054 <LoRaMacCryptoInit>
 800b768:	2800      	cmp	r0, #0
 800b76a:	d14b      	bne.n	800b804 <LoRaMacInitialization+0x3b4>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 800b76c:	f001 f89c 	bl	800c8a8 <LoRaMacCommandsInit>
 800b770:	2800      	cmp	r0, #0
 800b772:	d149      	bne.n	800b808 <LoRaMacInitialization+0x3b8>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 800b774:	f104 00e8 	add.w	r0, r4, #232	; 0xe8
 800b778:	f001 fcbe 	bl	800d0f8 <LoRaMacCryptoSetMulticastReference>
 800b77c:	4604      	mov	r4, r0
 800b77e:	2800      	cmp	r0, #0
 800b780:	d144      	bne.n	800b80c <LoRaMacInitialization+0x3bc>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 800b782:	4d1f      	ldr	r5, [pc, #124]	; (800b800 <LoRaMacInitialization+0x3b0>)
 800b784:	696b      	ldr	r3, [r5, #20]
 800b786:	4798      	blx	r3
 800b788:	f005 fea4 	bl	80114d4 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800b78c:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800b78e:	4a0e      	ldr	r2, [pc, #56]	; (800b7c8 <LoRaMacInitialization+0x378>)
 800b790:	f892 0119 	ldrb.w	r0, [r2, #281]	; 0x119
 800b794:	4798      	blx	r3
    Radio.Sleep( );
 800b796:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800b798:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800b79a:	4658      	mov	r0, fp
 800b79c:	f7fd fc80 	bl	80090a0 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 800b7a0:	e00c      	b.n	800b7bc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7a2:	2403      	movs	r4, #3
 800b7a4:	e00a      	b.n	800b7bc <LoRaMacInitialization+0x36c>
 800b7a6:	2403      	movs	r4, #3
 800b7a8:	e008      	b.n	800b7bc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b7aa:	2403      	movs	r4, #3
 800b7ac:	e006      	b.n	800b7bc <LoRaMacInitialization+0x36c>
 800b7ae:	2403      	movs	r4, #3
 800b7b0:	e004      	b.n	800b7bc <LoRaMacInitialization+0x36c>
 800b7b2:	2403      	movs	r4, #3
 800b7b4:	e002      	b.n	800b7bc <LoRaMacInitialization+0x36c>
 800b7b6:	2403      	movs	r4, #3
 800b7b8:	e000      	b.n	800b7bc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 800b7ba:	2409      	movs	r4, #9
}
 800b7bc:	4620      	mov	r0, r4
 800b7be:	b00d      	add	sp, #52	; 0x34
 800b7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b7c4:	2411      	movs	r4, #17
 800b7c6:	e7f9      	b.n	800b7bc <LoRaMacInitialization+0x36c>
 800b7c8:	20008000 	.word	0x20008000
 800b7cc:	20000840 	.word	0x20000840
 800b7d0:	01000400 	.word	0x01000400
 800b7d4:	20000d5c 	.word	0x20000d5c
 800b7d8:	0800a82d 	.word	0x0800a82d
 800b7dc:	0800aaad 	.word	0x0800aaad
 800b7e0:	0800aa55 	.word	0x0800aa55
 800b7e4:	08009481 	.word	0x08009481
 800b7e8:	2000083c 	.word	0x2000083c
 800b7ec:	0800ad71 	.word	0x0800ad71
 800b7f0:	0800ad21 	.word	0x0800ad21
 800b7f4:	080092d1 	.word	0x080092d1
 800b7f8:	0800acf9 	.word	0x0800acf9
 800b7fc:	0800acd1 	.word	0x0800acd1
 800b800:	08014d7c 	.word	0x08014d7c
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b804:	2411      	movs	r4, #17
 800b806:	e7d9      	b.n	800b7bc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b808:	2413      	movs	r4, #19
 800b80a:	e7d7      	b.n	800b7bc <LoRaMacInitialization+0x36c>
        return LORAMAC_STATUS_CRYPTO_ERROR;
 800b80c:	2411      	movs	r4, #17
 800b80e:	e7d5      	b.n	800b7bc <LoRaMacInitialization+0x36c>

0800b810 <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 800b810:	b510      	push	{r4, lr}
    MacCtx.MacState = LORAMAC_IDLE;
 800b812:	2400      	movs	r4, #0
 800b814:	4b03      	ldr	r3, [pc, #12]	; (800b824 <LoRaMacStart+0x14>)
 800b816:	f8c3 4340 	str.w	r4, [r3, #832]	; 0x340
    UpdateRxSlotIdleState();
 800b81a:	f7fd fc2d 	bl	8009078 <UpdateRxSlotIdleState>
    return LORAMAC_STATUS_OK;
}
 800b81e:	4620      	mov	r0, r4
 800b820:	bd10      	pop	{r4, pc}
 800b822:	bf00      	nop
 800b824:	20000840 	.word	0x20000840

0800b828 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 800b828:	b508      	push	{r3, lr}
    if( LoRaMacIsBusy( ) == false )
 800b82a:	f7ff fd9f 	bl	800b36c <LoRaMacIsBusy>
 800b82e:	b130      	cbz	r0, 800b83e <LoRaMacStop+0x16>
            Radio.Sleep( );
        }
        MacCtx.MacState = LORAMAC_STOPPED;
        return LORAMAC_STATUS_OK;
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 800b830:	4b0b      	ldr	r3, [pc, #44]	; (800b860 <LoRaMacStop+0x38>)
 800b832:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800b836:	2b01      	cmp	r3, #1
 800b838:	d010      	beq.n	800b85c <LoRaMacStop+0x34>
    {
        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_BUSY;
 800b83a:	2001      	movs	r0, #1
}
 800b83c:	bd08      	pop	{r3, pc}
        if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800b83e:	4b09      	ldr	r3, [pc, #36]	; (800b864 <LoRaMacStop+0x3c>)
 800b840:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800b844:	2b02      	cmp	r3, #2
 800b846:	d005      	beq.n	800b854 <LoRaMacStop+0x2c>
        MacCtx.MacState = LORAMAC_STOPPED;
 800b848:	4b05      	ldr	r3, [pc, #20]	; (800b860 <LoRaMacStop+0x38>)
 800b84a:	2201      	movs	r2, #1
 800b84c:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
        return LORAMAC_STATUS_OK;
 800b850:	2000      	movs	r0, #0
 800b852:	e7f3      	b.n	800b83c <LoRaMacStop+0x14>
            Radio.Sleep( );
 800b854:	4b04      	ldr	r3, [pc, #16]	; (800b868 <LoRaMacStop+0x40>)
 800b856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b858:	4798      	blx	r3
 800b85a:	e7f5      	b.n	800b848 <LoRaMacStop+0x20>
        return LORAMAC_STATUS_OK;
 800b85c:	2000      	movs	r0, #0
 800b85e:	e7ed      	b.n	800b83c <LoRaMacStop+0x14>
 800b860:	20000840 	.word	0x20000840
 800b864:	20008000 	.word	0x20008000
 800b868:	08014d7c 	.word	0x08014d7c

0800b86c <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 800b86c:	b570      	push	{r4, r5, r6, lr}
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 800b86e:	4c14      	ldr	r4, [pc, #80]	; (800b8c0 <LoRaMacHalt+0x54>)
 800b870:	f504 705a 	add.w	r0, r4, #872	; 0x368
 800b874:	f008 f874 	bl	8013960 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 800b878:	f504 7060 	add.w	r0, r4, #896	; 0x380
 800b87c:	f008 f870 	bl	8013960 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 800b880:	f504 7066 	add.w	r0, r4, #920	; 0x398
 800b884:	f008 f86c 	bl	8013960 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800b888:	f504 6080 	add.w	r0, r4, #1024	; 0x400
 800b88c:	f008 f868 	bl	8013960 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 800b890:	f000 ff70 	bl	800c774 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 800b894:	4b0b      	ldr	r3, [pc, #44]	; (800b8c4 <LoRaMacHalt+0x58>)
 800b896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b898:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 800b89a:	2500      	movs	r5, #0
 800b89c:	f8c4 5340 	str.w	r5, [r4, #832]	; 0x340

#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
    LoRaMacHandleNvm( &Nvm );
 800b8a0:	4e09      	ldr	r6, [pc, #36]	; (800b8c8 <LoRaMacHalt+0x5c>)
 800b8a2:	4630      	mov	r0, r6
 800b8a4:	f7ff f92a 	bl	800aafc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 800b8a8:	f240 52cc 	movw	r2, #1484	; 0x5cc
 800b8ac:	4631      	mov	r1, r6
 800b8ae:	4807      	ldr	r0, [pc, #28]	; (800b8cc <LoRaMacHalt+0x60>)
 800b8b0:	f005 fe23 	bl	80114fa <memcpy1>
#endif /* CONTEXT_MANAGEMENT_ENABLED */

    MacCtx.MacState = LORAMAC_STOPPED;
 800b8b4:	2301      	movs	r3, #1
 800b8b6:	f8c4 3340 	str.w	r3, [r4, #832]	; 0x340

    return LORAMAC_STATUS_OK;
}
 800b8ba:	4628      	mov	r0, r5
 800b8bc:	bd70      	pop	{r4, r5, r6, pc}
 800b8be:	bf00      	nop
 800b8c0:	20000840 	.word	0x20000840
 800b8c4:	08014d7c 	.word	0x08014d7c
 800b8c8:	20008000 	.word	0x20008000
 800b8cc:	200085cc 	.word	0x200085cc

0800b8d0 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 800b8d0:	b530      	push	{r4, r5, lr}
 800b8d2:	b08b      	sub	sp, #44	; 0x2c
 800b8d4:	4604      	mov	r4, r0
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b8d6:	4b31      	ldr	r3, [pc, #196]	; (800b99c <LoRaMacQueryTxPossible+0xcc>)
 800b8d8:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800b8da:	9004      	str	r0, [sp, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800b8dc:	f993 20dd 	ldrsb.w	r2, [r3, #221]	; 0xdd
 800b8e0:	f88d 200f 	strb.w	r2, [sp, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800b8e4:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800b8e8:	f88d 300e 	strb.w	r3, [sp, #14]
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 800b8ec:	4b2c      	ldr	r3, [pc, #176]	; (800b9a0 <LoRaMacQueryTxPossible+0xd0>)
 800b8ee:	f893 2418 	ldrb.w	r2, [r3, #1048]	; 0x418
 800b8f2:	f88d 200d 	strb.w	r2, [sp, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 800b8f6:	2300      	movs	r3, #0
 800b8f8:	9302      	str	r3, [sp, #8]

    if( txInfo == NULL )
 800b8fa:	2900      	cmp	r1, #0
 800b8fc:	d048      	beq.n	800b990 <LoRaMacQueryTxPossible+0xc0>
 800b8fe:	460d      	mov	r5, r1

    // Setup ADR request
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 800b900:	f88d 3014 	strb.w	r3, [sp, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800b904:	4b25      	ldr	r3, [pc, #148]	; (800b99c <LoRaMacQueryTxPossible+0xcc>)
 800b906:	f893 111a 	ldrb.w	r1, [r3, #282]	; 0x11a
 800b90a:	f88d 1015 	strb.w	r1, [sp, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800b90e:	9006      	str	r0, [sp, #24]
    adrNext.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800b910:	f8b3 1088 	ldrh.w	r1, [r3, #136]	; 0x88
 800b914:	f8ad 101c 	strh.w	r1, [sp, #28]
    adrNext.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800b918:	f8b3 108a 	ldrh.w	r1, [r3, #138]	; 0x8a
 800b91c:	f8ad 101e 	strh.w	r1, [sp, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800b920:	f993 1039 	ldrsb.w	r1, [r3, #57]	; 0x39
 800b924:	f88d 1020 	strb.w	r1, [sp, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800b928:	f993 1038 	ldrsb.w	r1, [r3, #56]	; 0x38
 800b92c:	f88d 1021 	strb.w	r1, [sp, #33]	; 0x21
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 800b930:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800b934:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800b938:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800b93c:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800b940:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 800b944:	ab04      	add	r3, sp, #16
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	f10d 030d 	add.w	r3, sp, #13
 800b94c:	f10d 020e 	add.w	r2, sp, #14
 800b950:	f10d 010f 	add.w	r1, sp, #15
 800b954:	a805      	add	r0, sp, #20
 800b956:	f000 fe7f 	bl	800c658 <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800b95a:	f99d 000f 	ldrsb.w	r0, [sp, #15]
 800b95e:	f7fd fcdb 	bl	8009318 <GetMaxAppPayloadWithoutFOptsLength>
 800b962:	7068      	strb	r0, [r5, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800b964:	a802      	add	r0, sp, #8
 800b966:	f001 f83d 	bl	800c9e4 <LoRaMacCommandsGetSizeSerializedCmds>
 800b96a:	b998      	cbnz	r0, 800b994 <LoRaMacQueryTxPossible+0xc4>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 800b96c:	9b02      	ldr	r3, [sp, #8]
 800b96e:	2b0f      	cmp	r3, #15
 800b970:	d80a      	bhi.n	800b988 <LoRaMacQueryTxPossible+0xb8>
 800b972:	786a      	ldrb	r2, [r5, #1]
 800b974:	4293      	cmp	r3, r2
 800b976:	d807      	bhi.n	800b988 <LoRaMacQueryTxPossible+0xb8>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	702b      	strb	r3, [r5, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 800b97c:	9b02      	ldr	r3, [sp, #8]
 800b97e:	441c      	add	r4, r3
 800b980:	42a2      	cmp	r2, r4
 800b982:	d309      	bcc.n	800b998 <LoRaMacQueryTxPossible+0xc8>
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
        return LORAMAC_STATUS_LENGTH_ERROR;
    }
}
 800b984:	b00b      	add	sp, #44	; 0x2c
 800b986:	bd30      	pop	{r4, r5, pc}
        txInfo->MaxPossibleApplicationDataSize = 0;
 800b988:	2300      	movs	r3, #0
 800b98a:	702b      	strb	r3, [r5, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 800b98c:	2008      	movs	r0, #8
 800b98e:	e7f9      	b.n	800b984 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800b990:	2003      	movs	r0, #3
 800b992:	e7f7      	b.n	800b984 <LoRaMacQueryTxPossible+0xb4>
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800b994:	2013      	movs	r0, #19
 800b996:	e7f5      	b.n	800b984 <LoRaMacQueryTxPossible+0xb4>
           return LORAMAC_STATUS_LENGTH_ERROR;
 800b998:	2008      	movs	r0, #8
 800b99a:	e7f3      	b.n	800b984 <LoRaMacQueryTxPossible+0xb4>
 800b99c:	20008000 	.word	0x20008000
 800b9a0:	20000840 	.word	0x20000840

0800b9a4 <LoRaMacMibGetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	f000 815f 	beq.w	800bc68 <LoRaMacMibGetRequestConfirm+0x2c4>
{
 800b9aa:	b510      	push	{r4, lr}
 800b9ac:	b084      	sub	sp, #16
 800b9ae:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    switch( mibGet->Type )
 800b9b0:	7800      	ldrb	r0, [r0, #0]
 800b9b2:	2841      	cmp	r0, #65	; 0x41
 800b9b4:	f200 8154 	bhi.w	800bc60 <LoRaMacMibGetRequestConfirm+0x2bc>
 800b9b8:	e8df f010 	tbh	[pc, r0, lsl #1]
 800b9bc:	00470042 	.word	0x00470042
 800b9c0:	0052004d 	.word	0x0052004d
 800b9c4:	005d0057 	.word	0x005d0057
 800b9c8:	01520063 	.word	0x01520063
 800b9cc:	01520152 	.word	0x01520152
 800b9d0:	01520152 	.word	0x01520152
 800b9d4:	01520152 	.word	0x01520152
 800b9d8:	006b0152 	.word	0x006b0152
 800b9dc:	00770071 	.word	0x00770071
 800b9e0:	008c0084 	.word	0x008c0084
 800b9e4:	009c0094 	.word	0x009c0094
 800b9e8:	00a400b1 	.word	0x00a400b1
 800b9ec:	00c400be 	.word	0x00c400be
 800b9f0:	00ce00c9 	.word	0x00ce00c9
 800b9f4:	00d800d3 	.word	0x00d800d3
 800b9f8:	00ee00dd 	.word	0x00ee00dd
 800b9fc:	010000f4 	.word	0x010000f4
 800ba00:	010600fa 	.word	0x010600fa
 800ba04:	0111010b 	.word	0x0111010b
 800ba08:	0117011f 	.word	0x0117011f
 800ba0c:	0152011b 	.word	0x0152011b
 800ba10:	01520125 	.word	0x01520125
 800ba14:	01520152 	.word	0x01520152
 800ba18:	01520152 	.word	0x01520152
 800ba1c:	01520152 	.word	0x01520152
 800ba20:	01520152 	.word	0x01520152
 800ba24:	01520152 	.word	0x01520152
 800ba28:	01520152 	.word	0x01520152
 800ba2c:	01520152 	.word	0x01520152
 800ba30:	0134012e 	.word	0x0134012e
 800ba34:	0140013a 	.word	0x0140013a
 800ba38:	014c0146 	.word	0x014c0146
 800ba3c:	01580158 	.word	0x01580158
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 800ba40:	4b8c      	ldr	r3, [pc, #560]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba42:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800ba46:	7123      	strb	r3, [r4, #4]
            break;
 800ba48:	e111      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ba4a:	4b8a      	ldr	r3, [pc, #552]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba4c:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800ba50:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba52:	2000      	movs	r0, #0
            break;
 800ba54:	e10b      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_EUI:
        {
            SecureElementGetDevEui( mibGet->Param.DevEui );
 800ba56:	6860      	ldr	r0, [r4, #4]
 800ba58:	f005 fc14 	bl	8011284 <SecureElementGetDevEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba5c:	2000      	movs	r0, #0
            break;
 800ba5e:	e106      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_EUI:
        {
             SecureElementGetJoinEui( mibGet->Param.JoinEui );
 800ba60:	6860      	ldr	r0, [r4, #4]
 800ba62:	f005 fc2d 	bl	80112c0 <SecureElementGetJoinEui>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba66:	2000      	movs	r0, #0
            break;
 800ba68:	e101      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 800ba6a:	4b82      	ldr	r3, [pc, #520]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba6c:	f893 311a 	ldrb.w	r3, [r3, #282]	; 0x11a
 800ba70:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba72:	2000      	movs	r0, #0
            break;
 800ba74:	e0fb      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 800ba76:	4b7f      	ldr	r3, [pc, #508]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ba7c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba7e:	2000      	movs	r0, #0
            break;
 800ba80:	e0f5      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEV_ADDR:
        {
            SecureElementGetDevAddr( Nvm.MacGroup2.NetworkActivation, &mibGet->Param.DevAddr );
 800ba82:	1d21      	adds	r1, r4, #4
 800ba84:	4b7b      	ldr	r3, [pc, #492]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba86:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800ba8a:	f005 fc35 	bl	80112f8 <SecureElementGetDevAddr>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba8e:	2000      	movs	r0, #0
            break;
 800ba90:	e0ed      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 800ba92:	4b78      	ldr	r3, [pc, #480]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800ba94:	f893 3119 	ldrb.w	r3, [r3, #281]	; 0x119
 800ba98:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800ba9a:	2000      	movs	r0, #0
            break;
 800ba9c:	e0e7      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 800ba9e:	4b75      	ldr	r3, [pc, #468]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800baa0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800baa4:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800baa6:	2000      	movs	r0, #0
            break;
 800baa8:	e0e1      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 800baaa:	231c      	movs	r3, #28
 800baac:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bab0:	a902      	add	r1, sp, #8
 800bab2:	4b70      	ldr	r3, [pc, #448]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bab4:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bab8:	f001 fe4c 	bl	800d754 <RegionGetPhyParam>
 800babc:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelList = phyParam.Channels;
 800babe:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bac0:	2000      	movs	r0, #0
            break;
 800bac2:	e0d4      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800bac4:	3404      	adds	r4, #4
 800bac6:	4b6c      	ldr	r3, [pc, #432]	; (800bc78 <LoRaMacMibGetRequestConfirm+0x2d4>)
 800bac8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bacc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bad0:	2000      	movs	r0, #0
            break;
 800bad2:	e0cc      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 800bad4:	3404      	adds	r4, #4
 800bad6:	4b69      	ldr	r3, [pc, #420]	; (800bc7c <LoRaMacMibGetRequestConfirm+0x2d8>)
 800bad8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800badc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bae0:	2000      	movs	r0, #0
            break;
 800bae2:	e0c4      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 800bae4:	3404      	adds	r4, #4
 800bae6:	4b66      	ldr	r3, [pc, #408]	; (800bc80 <LoRaMacMibGetRequestConfirm+0x2dc>)
 800bae8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800baec:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800baf0:	2000      	movs	r0, #0
            break;
 800baf2:	e0bc      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 800baf4:	3404      	adds	r4, #4
 800baf6:	4b63      	ldr	r3, [pc, #396]	; (800bc84 <LoRaMacMibGetRequestConfirm+0x2e0>)
 800baf8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800bafc:	e884 0003 	stmia.w	r4, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb00:	2000      	movs	r0, #0
            break;
 800bb02:	e0b4      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 800bb04:	231a      	movs	r3, #26
 800bb06:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb0a:	a902      	add	r1, sp, #8
 800bb0c:	4b59      	ldr	r3, [pc, #356]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb0e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb12:	f001 fe1f 	bl	800d754 <RegionGetPhyParam>
 800bb16:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 800bb18:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb1a:	2000      	movs	r0, #0
            break;
 800bb1c:	e0a7      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 800bb1e:	2319      	movs	r3, #25
 800bb20:	f88d 3008 	strb.w	r3, [sp, #8]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb24:	a902      	add	r1, sp, #8
 800bb26:	4b53      	ldr	r3, [pc, #332]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb28:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb2c:	f001 fe12 	bl	800d754 <RegionGetPhyParam>
 800bb30:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 800bb32:	6060      	str	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb34:	2000      	movs	r0, #0
            break;
 800bb36:	e09a      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800bb38:	4b4e      	ldr	r3, [pc, #312]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb3a:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 800bb3e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb40:	2000      	movs	r0, #0
            break;
 800bb42:	e094      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 800bb44:	4b4b      	ldr	r3, [pc, #300]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb48:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb4a:	2000      	movs	r0, #0
            break;
 800bb4c:	e08f      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 800bb4e:	4b49      	ldr	r3, [pc, #292]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb52:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb54:	2000      	movs	r0, #0
            break;
 800bb56:	e08a      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 800bb58:	4b46      	ldr	r3, [pc, #280]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800bb5c:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb5e:	2000      	movs	r0, #0
            break;
 800bb60:	e085      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 800bb62:	4b44      	ldr	r3, [pc, #272]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb66:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb68:	2000      	movs	r0, #0
            break;
 800bb6a:	e080      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 800bb6c:	4b41      	ldr	r3, [pc, #260]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bb70:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb72:	2000      	movs	r0, #0
            break;
 800bb74:	e07b      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 800bb76:	2302      	movs	r3, #2
 800bb78:	f88d 3008 	strb.w	r3, [sp, #8]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800bb7c:	4b3d      	ldr	r3, [pc, #244]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb7e:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800bb82:	f88d 200a 	strb.w	r2, [sp, #10]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800bb86:	a902      	add	r1, sp, #8
 800bb88:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bb8c:	f001 fde2 	bl	800d754 <RegionGetPhyParam>
 800bb90:	9001      	str	r0, [sp, #4]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 800bb92:	7120      	strb	r0, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bb94:	2000      	movs	r0, #0
            break;
 800bb96:	e06a      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 800bb98:	4b36      	ldr	r3, [pc, #216]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bb9a:	f993 30dd 	ldrsb.w	r3, [r3, #221]	; 0xdd
 800bb9e:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bba0:	2000      	movs	r0, #0
            break;
 800bba2:	e064      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800bba4:	4b33      	ldr	r3, [pc, #204]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bba6:	f993 3039 	ldrsb.w	r3, [r3, #57]	; 0x39
 800bbaa:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbac:	2000      	movs	r0, #0
            break;
 800bbae:	e05e      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 800bbb0:	4b30      	ldr	r3, [pc, #192]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbb2:	f993 30dc 	ldrsb.w	r3, [r3, #220]	; 0xdc
 800bbb6:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbb8:	2000      	movs	r0, #0
            break;
 800bbba:	e058      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800bbbc:	4b2d      	ldr	r3, [pc, #180]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbbe:	f993 3038 	ldrsb.w	r3, [r3, #56]	; 0x38
 800bbc2:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbc4:	2000      	movs	r0, #0
            break;
 800bbc6:	e052      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 800bbc8:	4b2a      	ldr	r3, [pc, #168]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbcc:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbce:	2000      	movs	r0, #0
            break;
 800bbd0:	e04d      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 800bbd2:	4b28      	ldr	r3, [pc, #160]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbd4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800bbd8:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbda:	2000      	movs	r0, #0
            break;
 800bbdc:	e047      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 800bbde:	4b25      	ldr	r3, [pc, #148]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bbe4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbe6:	2000      	movs	r0, #0
            break;
 800bbe8:	e041      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 800bbea:	4b22      	ldr	r3, [pc, #136]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbec:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbee:	2000      	movs	r0, #0
            break;
 800bbf0:	e03d      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_NVM_BKP_CTXS:
        {
#if (defined( CONTEXT_MANAGEMENT_ENABLED ) && ( CONTEXT_MANAGEMENT_ENABLED == 1 ))
            mibGet->Param.BackupContexts = &NvmBackup;
 800bbf2:	4b25      	ldr	r3, [pc, #148]	; (800bc88 <LoRaMacMibGetRequestConfirm+0x2e4>)
 800bbf4:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bbf6:	2000      	movs	r0, #0
#else
            mibGet->Param.BackupContexts = NULL;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
            break;
 800bbf8:	e039      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 800bbfa:	4b1e      	ldr	r3, [pc, #120]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bbfc:	f8d3 30cc 	ldr.w	r3, [r3, #204]	; 0xcc
 800bc00:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc02:	2000      	movs	r0, #0
            break;
 800bc04:	e033      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 800bc06:	4b1b      	ldr	r3, [pc, #108]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc08:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
 800bc0c:	6063      	str	r3, [r4, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 800bc0e:	f001 ff29 	bl	800da64 <RegionGetVersion>
 800bc12:	60a0      	str	r0, [r4, #8]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc14:	2000      	movs	r0, #0
            break;
 800bc16:	e02a      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800bc18:	4b16      	ldr	r3, [pc, #88]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc1e:	6063      	str	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc20:	2000      	movs	r0, #0
            break;
 800bc22:	e024      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 800bc24:	4b13      	ldr	r3, [pc, #76]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc26:	f893 311f 	ldrb.w	r3, [r3, #287]	; 0x11f
 800bc2a:	7123      	strb	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc2c:	2000      	movs	r0, #0
            break;
 800bc2e:	e01e      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
            break;
        }
#endif /* LORAMAC_VERSION */
        case MIB_ADR_ACK_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParams.AdrAckLimit;
 800bc30:	4b10      	ldr	r3, [pc, #64]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc32:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800bc36:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc38:	2000      	movs	r0, #0
            break;
 800bc3a:	e018      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParams.AdrAckDelay;
 800bc3c:	4b0d      	ldr	r3, [pc, #52]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc3e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800bc42:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc44:	2000      	movs	r0, #0
            break;
 800bc46:	e012      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_LIMIT:
        {
            mibGet->Param.AdrAckLimit = Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit;
 800bc48:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc4a:	f8b3 30d0 	ldrh.w	r3, [r3, #208]	; 0xd0
 800bc4e:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc50:	2000      	movs	r0, #0
            break;
 800bc52:	e00c      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        }
        case MIB_ADR_ACK_DEFAULT_DELAY:
        {
            mibGet->Param.AdrAckDelay = Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay;
 800bc54:	4b07      	ldr	r3, [pc, #28]	; (800bc74 <LoRaMacMibGetRequestConfirm+0x2d0>)
 800bc56:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	; 0xd2
 800bc5a:	80a3      	strh	r3, [r4, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bc5c:	2000      	movs	r0, #0
            break;
 800bc5e:	e006      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
#endif
            break;
        }
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 800bc60:	4620      	mov	r0, r4
 800bc62:	f000 fd8b 	bl	800c77c <LoRaMacClassBMibGetRequestConfirm>
            break;
 800bc66:	e002      	b.n	800bc6e <LoRaMacMibGetRequestConfirm+0x2ca>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800bc68:	2003      	movs	r0, #3
        }
    }
    return status;
}
 800bc6a:	4770      	bx	lr
    switch( mibGet->Type )
 800bc6c:	2018      	movs	r0, #24
}
 800bc6e:	b004      	add	sp, #16
 800bc70:	bd10      	pop	{r4, pc}
 800bc72:	bf00      	nop
 800bc74:	20008000 	.word	0x20008000
 800bc78:	2000806c 	.word	0x2000806c
 800bc7c:	200080b4 	.word	0x200080b4
 800bc80:	20008074 	.word	0x20008074
 800bc84:	200080bc 	.word	0x200080bc
 800bc88:	200085cc 	.word	0x200085cc

0800bc8c <LoRaMacMibSetRequestConfirm>:
{
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 800bc8c:	2800      	cmp	r0, #0
 800bc8e:	f000 827f 	beq.w	800c190 <LoRaMacMibSetRequestConfirm+0x504>
{
 800bc92:	b530      	push	{r4, r5, lr}
 800bc94:	b085      	sub	sp, #20
 800bc96:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 800bc98:	4b9b      	ldr	r3, [pc, #620]	; (800bf08 <LoRaMacMibSetRequestConfirm+0x27c>)
 800bc9a:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800bc9e:	f013 0f02 	tst.w	r3, #2
 800bca2:	f040 8277 	bne.w	800c194 <LoRaMacMibSetRequestConfirm+0x508>
    {
        return LORAMAC_STATUS_BUSY;
    }

    switch( mibSet->Type )
 800bca6:	7805      	ldrb	r5, [r0, #0]
 800bca8:	2d41      	cmp	r5, #65	; 0x41
 800bcaa:	f200 826e 	bhi.w	800c18a <LoRaMacMibSetRequestConfirm+0x4fe>
 800bcae:	e8df f015 	tbh	[pc, r5, lsl #1]
 800bcb2:	0042      	.short	0x0042
 800bcb4:	0058004f 	.word	0x0058004f
 800bcb8:	0066005f 	.word	0x0066005f
 800bcbc:	0072006c 	.word	0x0072006c
 800bcc0:	008b0080 	.word	0x008b0080
 800bcc4:	00a10096 	.word	0x00a10096
 800bcc8:	00b700ac 	.word	0x00b700ac
 800bccc:	00ce00c2 	.word	0x00ce00c2
 800bcd0:	00e500da 	.word	0x00e500da
 800bcd4:	00eb026c 	.word	0x00eb026c
 800bcd8:	01350111 	.word	0x01350111
 800bcdc:	018d0163 	.word	0x018d0163
 800bce0:	019d017d 	.word	0x019d017d
 800bce4:	01ad01a8 	.word	0x01ad01a8
 800bce8:	01b701b2 	.word	0x01b701b2
 800bcec:	026c01bc 	.word	0x026c01bc
 800bcf0:	01d601c1 	.word	0x01d601c1
 800bcf4:	01ef0204 	.word	0x01ef0204
 800bcf8:	02200219 	.word	0x02200219
 800bcfc:	022e0228 	.word	0x022e0228
 800bd00:	026c0234 	.word	0x026c0234
 800bd04:	026c0237 	.word	0x026c0237
 800bd08:	026c026c 	.word	0x026c026c
 800bd0c:	026c026c 	.word	0x026c026c
 800bd10:	026c026c 	.word	0x026c026c
 800bd14:	026c026c 	.word	0x026c026c
 800bd18:	026c026c 	.word	0x026c026c
 800bd1c:	026c026c 	.word	0x026c026c
 800bd20:	026c026c 	.word	0x026c026c
 800bd24:	0248026c 	.word	0x0248026c
 800bd28:	0254024e 	.word	0x0254024e
 800bd2c:	0260025a 	.word	0x0260025a
 800bd30:	02730266 	.word	0x02730266
 800bd34:	0273      	.short	0x0273
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 800bd36:	7900      	ldrb	r0, [r0, #4]
 800bd38:	f7ff f90c 	bl	800af54 <SwitchClass>
            break;
        }
    }

#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    if( status == LORAMAC_STATUS_OK )
 800bd3c:	b930      	cbnz	r0, 800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800bd3e:	4a72      	ldr	r2, [pc, #456]	; (800bf08 <LoRaMacMibSetRequestConfirm+0x27c>)
 800bd40:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800bd44:	f043 0320 	orr.w	r3, r3, #32
 800bd48:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
#endif /* LORAMAC_VERSION */
    return status;
}
 800bd4c:	b005      	add	sp, #20
 800bd4e:	bd30      	pop	{r4, r5, pc}
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 800bd50:	7903      	ldrb	r3, [r0, #4]
 800bd52:	2b02      	cmp	r3, #2
 800bd54:	f000 8222 	beq.w	800c19c <LoRaMacMibSetRequestConfirm+0x510>
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 800bd58:	4a6c      	ldr	r2, [pc, #432]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bd5a:	f882 3130 	strb.w	r3, [r2, #304]	; 0x130
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e7ed      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 800bd62:	6840      	ldr	r0, [r0, #4]
 800bd64:	f005 fa80 	bl	8011268 <SecureElementSetDevEui>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d0e8      	beq.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd6c:	2003      	movs	r0, #3
 800bd6e:	e7ed      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 800bd70:	6840      	ldr	r0, [r0, #4]
 800bd72:	f005 fa95 	bl	80112a0 <SecureElementSetJoinEui>
 800bd76:	2800      	cmp	r0, #0
 800bd78:	d0e1      	beq.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bd7a:	4628      	mov	r0, r5
 800bd7c:	e7e6      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 800bd7e:	7902      	ldrb	r2, [r0, #4]
 800bd80:	4b62      	ldr	r3, [pc, #392]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bd82:	f883 211a 	strb.w	r2, [r3, #282]	; 0x11a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd86:	2000      	movs	r0, #0
 800bd88:	e7d9      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 800bd8a:	6842      	ldr	r2, [r0, #4]
 800bd8c:	4b5f      	ldr	r3, [pc, #380]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bd8e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bd92:	2000      	movs	r0, #0
 800bd94:	e7d3      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            if(SecureElementSetDevAddr( Nvm.MacGroup2.NetworkActivation, mibSet->Param.DevAddr ) != SECURE_ELEMENT_SUCCESS )
 800bd96:	6841      	ldr	r1, [r0, #4]
 800bd98:	4b5c      	ldr	r3, [pc, #368]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bd9a:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800bd9e:	f005 fa9d 	bl	80112dc <SecureElementSetDevAddr>
 800bda2:	2800      	cmp	r0, #0
 800bda4:	f040 81fc 	bne.w	800c1a0 <LoRaMacMibSetRequestConfirm+0x514>
                Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 800bda8:	6862      	ldr	r2, [r4, #4]
 800bdaa:	4b58      	ldr	r3, [pc, #352]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bdac:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    if( status == LORAMAC_STATUS_OK )
 800bdb0:	e7c5      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            if( mibSet->Param.AppKey != NULL )
 800bdb2:	6841      	ldr	r1, [r0, #4]
 800bdb4:	2900      	cmp	r1, #0
 800bdb6:	f000 81f5 	beq.w	800c1a4 <LoRaMacMibSetRequestConfirm+0x518>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 800bdba:	2000      	movs	r0, #0
 800bdbc:	f001 faa6 	bl	800d30c <LoRaMacCryptoSetKey>
 800bdc0:	2800      	cmp	r0, #0
 800bdc2:	d0bc      	beq.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bdc4:	2011      	movs	r0, #17
 800bdc6:	e7c1      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkKey != NULL )
 800bdc8:	6841      	ldr	r1, [r0, #4]
 800bdca:	2900      	cmp	r1, #0
 800bdcc:	f000 81ec 	beq.w	800c1a8 <LoRaMacMibSetRequestConfirm+0x51c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 800bdd0:	2001      	movs	r0, #1
 800bdd2:	f001 fa9b 	bl	800d30c <LoRaMacCryptoSetKey>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d0b0      	beq.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bdda:	2011      	movs	r0, #17
 800bddc:	e7b6      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.NwkSKey != NULL )
 800bdde:	6841      	ldr	r1, [r0, #4]
 800bde0:	2900      	cmp	r1, #0
 800bde2:	f000 81e3 	beq.w	800c1ac <LoRaMacMibSetRequestConfirm+0x520>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 800bde6:	2008      	movs	r0, #8
 800bde8:	f001 fa90 	bl	800d30c <LoRaMacCryptoSetKey>
 800bdec:	2800      	cmp	r0, #0
 800bdee:	d0a5      	beq.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800bdf0:	2011      	movs	r0, #17
 800bdf2:	e7ab      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.AppSKey != NULL )
 800bdf4:	6841      	ldr	r1, [r0, #4]
 800bdf6:	2900      	cmp	r1, #0
 800bdf8:	f000 81da 	beq.w	800c1b0 <LoRaMacMibSetRequestConfirm+0x524>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 800bdfc:	2009      	movs	r0, #9
 800bdfe:	f001 fa85 	bl	800d30c <LoRaMacCryptoSetKey>
 800be02:	2800      	cmp	r0, #0
 800be04:	d09a      	beq.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800be06:	2011      	movs	r0, #17
 800be08:	e7a0      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKEKey != NULL )
 800be0a:	6841      	ldr	r1, [r0, #4]
 800be0c:	2900      	cmp	r1, #0
 800be0e:	f000 81d1 	beq.w	800c1b4 <LoRaMacMibSetRequestConfirm+0x528>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 800be12:	200c      	movs	r0, #12
 800be14:	f001 fa7a 	bl	800d30c <LoRaMacCryptoSetKey>
 800be18:	2800      	cmp	r0, #0
 800be1a:	d08f      	beq.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800be1c:	2011      	movs	r0, #17
 800be1e:	e795      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McKey0 != NULL )
 800be20:	6841      	ldr	r1, [r0, #4]
 800be22:	2900      	cmp	r1, #0
 800be24:	f000 81c8 	beq.w	800c1b8 <LoRaMacMibSetRequestConfirm+0x52c>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 800be28:	200d      	movs	r0, #13
 800be2a:	f001 fa6f 	bl	800d30c <LoRaMacCryptoSetKey>
 800be2e:	2800      	cmp	r0, #0
 800be30:	d084      	beq.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800be32:	2011      	movs	r0, #17
 800be34:	e78a      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McAppSKey0 != NULL )
 800be36:	6841      	ldr	r1, [r0, #4]
 800be38:	2900      	cmp	r1, #0
 800be3a:	f000 81bf 	beq.w	800c1bc <LoRaMacMibSetRequestConfirm+0x530>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 800be3e:	200e      	movs	r0, #14
 800be40:	f001 fa64 	bl	800d30c <LoRaMacCryptoSetKey>
 800be44:	2800      	cmp	r0, #0
 800be46:	f43f af79 	beq.w	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800be4a:	2011      	movs	r0, #17
 800be4c:	e77e      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( mibSet->Param.McNwkSKey0 != NULL )
 800be4e:	6841      	ldr	r1, [r0, #4]
 800be50:	2900      	cmp	r1, #0
 800be52:	f000 81b5 	beq.w	800c1c0 <LoRaMacMibSetRequestConfirm+0x534>
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 800be56:	200f      	movs	r0, #15
 800be58:	f001 fa58 	bl	800d30c <LoRaMacCryptoSetKey>
 800be5c:	2800      	cmp	r0, #0
 800be5e:	f43f af6d 	beq.w	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800be62:	2011      	movs	r0, #17
 800be64:	e772      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 800be66:	7900      	ldrb	r0, [r0, #4]
 800be68:	4b28      	ldr	r3, [pc, #160]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800be6a:	f883 0119 	strb.w	r0, [r3, #281]	; 0x119
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 800be6e:	4c28      	ldr	r4, [pc, #160]	; (800bf10 <LoRaMacMibSetRequestConfirm+0x284>)
 800be70:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800be72:	4798      	blx	r3
            Radio.Sleep( );
 800be74:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800be76:	4798      	blx	r3
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be78:	2000      	movs	r0, #0
 800be7a:	e760      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 800be7c:	7902      	ldrb	r2, [r0, #4]
 800be7e:	4b23      	ldr	r3, [pc, #140]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800be80:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800be84:	2000      	movs	r0, #0
 800be86:	e75a      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800be88:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800be8c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800be90:	4b1e      	ldr	r3, [pc, #120]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800be92:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800be96:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 800be9a:	2207      	movs	r2, #7
 800be9c:	a901      	add	r1, sp, #4
 800be9e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bea2:	f001 fc9b 	bl	800d7dc <RegionVerify>
 800bea6:	b908      	cbnz	r0, 800beac <LoRaMacMibSetRequestConfirm+0x220>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bea8:	2003      	movs	r0, #3
 800beaa:	e747      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 800beac:	6863      	ldr	r3, [r4, #4]
 800beae:	9301      	str	r3, [sp, #4]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 800beb0:	2200      	movs	r2, #0
 800beb2:	a901      	add	r1, sp, #4
 800beb4:	4b15      	ldr	r3, [pc, #84]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800beb6:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800beba:	f001 fc8f 	bl	800d7dc <RegionVerify>
 800bebe:	2800      	cmp	r0, #0
 800bec0:	f000 8180 	beq.w	800c1c4 <LoRaMacMibSetRequestConfirm+0x538>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 800bec4:	4b13      	ldr	r3, [pc, #76]	; (800bf14 <LoRaMacMibSetRequestConfirm+0x288>)
 800bec6:	3404      	adds	r4, #4
 800bec8:	e894 0003 	ldmia.w	r4, {r0, r1}
 800becc:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bed0:	2000      	movs	r0, #0
 800bed2:	e733      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 800bed4:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bed8:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bedc:	4b0b      	ldr	r3, [pc, #44]	; (800bf0c <LoRaMacMibSetRequestConfirm+0x280>)
 800bede:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bee2:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bee6:	2207      	movs	r2, #7
 800bee8:	a901      	add	r1, sp, #4
 800beea:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800beee:	f001 fc75 	bl	800d7dc <RegionVerify>
 800bef2:	2800      	cmp	r0, #0
 800bef4:	f000 8168 	beq.w	800c1c8 <LoRaMacMibSetRequestConfirm+0x53c>
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 800bef8:	4b07      	ldr	r3, [pc, #28]	; (800bf18 <LoRaMacMibSetRequestConfirm+0x28c>)
 800befa:	3404      	adds	r4, #4
 800befc:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf00:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf04:	2000      	movs	r0, #0
 800bf06:	e719      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
 800bf08:	20000840 	.word	0x20000840
 800bf0c:	20008000 	.word	0x20008000
 800bf10:	08014d7c 	.word	0x08014d7c
 800bf14:	2000806c 	.word	0x2000806c
 800bf18:	200080b4 	.word	0x200080b4
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bf1c:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bf20:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bf24:	4bb0      	ldr	r3, [pc, #704]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bf26:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bf2a:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bf2e:	2207      	movs	r2, #7
 800bf30:	a901      	add	r1, sp, #4
 800bf32:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf36:	f001 fc51 	bl	800d7dc <RegionVerify>
 800bf3a:	2800      	cmp	r0, #0
 800bf3c:	f000 8146 	beq.w	800c1cc <LoRaMacMibSetRequestConfirm+0x540>
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 800bf40:	4ba9      	ldr	r3, [pc, #676]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bf42:	f103 0274 	add.w	r2, r3, #116	; 0x74
 800bf46:	3404      	adds	r4, #4
 800bf48:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bf4c:	e882 0003 	stmia.w	r2, {r0, r1}
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bf50:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800bf54:	2b02      	cmp	r3, #2
 800bf56:	d001      	beq.n	800bf5c <LoRaMacMibSetRequestConfirm+0x2d0>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf58:	2000      	movs	r0, #0
 800bf5a:	e6ef      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 800bf5c:	f1a2 0374 	sub.w	r3, r2, #116	; 0x74
 800bf60:	f893 0130 	ldrb.w	r0, [r3, #304]	; 0x130
 800bf64:	2800      	cmp	r0, #0
 800bf66:	f43f aee9 	beq.w	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                    Radio.Sleep( );
 800bf6a:	4ba0      	ldr	r3, [pc, #640]	; (800c1ec <LoRaMacMibSetRequestConfirm+0x560>)
 800bf6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf6e:	4798      	blx	r3
                    OpenContinuousRxCWindow( );
 800bf70:	f7fe fd14 	bl	800a99c <OpenContinuousRxCWindow>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bf74:	2000      	movs	r0, #0
 800bf76:	e6e1      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 800bf78:	f990 3008 	ldrsb.w	r3, [r0, #8]
 800bf7c:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800bf80:	4b99      	ldr	r3, [pc, #612]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bf82:	f893 207d 	ldrb.w	r2, [r3, #125]	; 0x7d
 800bf86:	f88d 2005 	strb.w	r2, [sp, #5]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 800bf8a:	2207      	movs	r2, #7
 800bf8c:	a901      	add	r1, sp, #4
 800bf8e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bf92:	f001 fc23 	bl	800d7dc <RegionVerify>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	f000 811a 	beq.w	800c1d0 <LoRaMacMibSetRequestConfirm+0x544>
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 800bf9c:	4b94      	ldr	r3, [pc, #592]	; (800c1f0 <LoRaMacMibSetRequestConfirm+0x564>)
 800bf9e:	3404      	adds	r4, #4
 800bfa0:	e894 0003 	ldmia.w	r4, {r0, r1}
 800bfa4:	e883 0003 	stmia.w	r3, {r0, r1}
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfa8:	2000      	movs	r0, #0
 800bfaa:	e6c7      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 800bfac:	6843      	ldr	r3, [r0, #4]
 800bfae:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 800bfb0:	2301      	movs	r3, #1
 800bfb2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bfb6:	a902      	add	r1, sp, #8
 800bfb8:	4b8b      	ldr	r3, [pc, #556]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bfba:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bfbe:	f001 fc35 	bl	800d82c <RegionChanMaskSet>
 800bfc2:	b108      	cbz	r0, 800bfc8 <LoRaMacMibSetRequestConfirm+0x33c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfc4:	2000      	movs	r0, #0
 800bfc6:	e6b9      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bfc8:	2003      	movs	r0, #3
 800bfca:	e6bf      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 800bfcc:	6843      	ldr	r3, [r0, #4]
 800bfce:	9302      	str	r3, [sp, #8]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 800bfd0:	2300      	movs	r3, #0
 800bfd2:	f88d 300c 	strb.w	r3, [sp, #12]
            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 800bfd6:	a902      	add	r1, sp, #8
 800bfd8:	4b83      	ldr	r3, [pc, #524]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bfda:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800bfde:	f001 fc25 	bl	800d82c <RegionChanMaskSet>
 800bfe2:	b108      	cbz	r0, 800bfe8 <LoRaMacMibSetRequestConfirm+0x35c>
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bfe4:	2000      	movs	r0, #0
 800bfe6:	e6a9      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800bfe8:	2003      	movs	r0, #3
 800bfea:	e6af      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 800bfec:	7902      	ldrb	r2, [r0, #4]
 800bfee:	1e53      	subs	r3, r2, #1
 800bff0:	b2db      	uxtb	r3, r3
 800bff2:	2b0e      	cmp	r3, #14
 800bff4:	f200 80ee 	bhi.w	800c1d4 <LoRaMacMibSetRequestConfirm+0x548>
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 800bff8:	4b7b      	ldr	r3, [pc, #492]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800bffa:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800bffe:	2000      	movs	r0, #0
 800c000:	e69c      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 800c002:	6842      	ldr	r2, [r0, #4]
 800c004:	4b78      	ldr	r3, [pc, #480]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c006:	655a      	str	r2, [r3, #84]	; 0x54
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c008:	2000      	movs	r0, #0
 800c00a:	e698      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 800c00c:	6842      	ldr	r2, [r0, #4]
 800c00e:	4b76      	ldr	r3, [pc, #472]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c010:	659a      	str	r2, [r3, #88]	; 0x58
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c012:	2000      	movs	r0, #0
 800c014:	e693      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 800c016:	6842      	ldr	r2, [r0, #4]
 800c018:	4b73      	ldr	r3, [pc, #460]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c01a:	65da      	str	r2, [r3, #92]	; 0x5c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c01c:	2000      	movs	r0, #0
 800c01e:	e68e      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 800c020:	6842      	ldr	r2, [r0, #4]
 800c022:	4b71      	ldr	r3, [pc, #452]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c024:	661a      	str	r2, [r3, #96]	; 0x60
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c026:	2000      	movs	r0, #0
 800c028:	e689      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 800c02a:	6842      	ldr	r2, [r0, #4]
 800c02c:	4b6e      	ldr	r3, [pc, #440]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c02e:	665a      	str	r2, [r3, #100]	; 0x64
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c030:	2000      	movs	r0, #0
 800c032:	e684      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 800c034:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c038:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 800c03c:	2206      	movs	r2, #6
 800c03e:	a901      	add	r1, sp, #4
 800c040:	4b69      	ldr	r3, [pc, #420]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c042:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c046:	f001 fbc9 	bl	800d7dc <RegionVerify>
 800c04a:	2800      	cmp	r0, #0
 800c04c:	f000 80c4 	beq.w	800c1d8 <LoRaMacMibSetRequestConfirm+0x54c>
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 800c050:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c054:	4b64      	ldr	r3, [pc, #400]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c056:	f883 20dd 	strb.w	r2, [r3, #221]	; 0xdd
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c05a:	2000      	movs	r0, #0
 800c05c:	e66e      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 800c05e:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c062:	f88d 3004 	strb.w	r3, [sp, #4]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c066:	4b60      	ldr	r3, [pc, #384]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c068:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c06c:	f88d 2006 	strb.w	r2, [sp, #6]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c070:	2205      	movs	r2, #5
 800c072:	a901      	add	r1, sp, #4
 800c074:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c078:	f001 fbb0 	bl	800d7dc <RegionVerify>
 800c07c:	2800      	cmp	r0, #0
 800c07e:	f000 80ad 	beq.w	800c1dc <LoRaMacMibSetRequestConfirm+0x550>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c082:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c086:	4b58      	ldr	r3, [pc, #352]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c088:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c08c:	2000      	movs	r0, #0
 800c08e:	e655      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 800c090:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c094:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 800c098:	220a      	movs	r2, #10
 800c09a:	a901      	add	r1, sp, #4
 800c09c:	4b52      	ldr	r3, [pc, #328]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c09e:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c0a2:	f001 fb9b 	bl	800d7dc <RegionVerify>
 800c0a6:	2800      	cmp	r0, #0
 800c0a8:	f000 809a 	beq.w	800c1e0 <LoRaMacMibSetRequestConfirm+0x554>
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 800c0ac:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c0b0:	4b4d      	ldr	r3, [pc, #308]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c0b2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0b6:	2000      	movs	r0, #0
 800c0b8:	e640      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 800c0ba:	f990 3004 	ldrsb.w	r3, [r0, #4]
 800c0be:	f88d 3004 	strb.w	r3, [sp, #4]
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 800c0c2:	2209      	movs	r2, #9
 800c0c4:	a901      	add	r1, sp, #4
 800c0c6:	4b48      	ldr	r3, [pc, #288]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c0c8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c0cc:	f001 fb86 	bl	800d7dc <RegionVerify>
 800c0d0:	2800      	cmp	r0, #0
 800c0d2:	f000 8087 	beq.w	800c1e4 <LoRaMacMibSetRequestConfirm+0x558>
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 800c0d6:	f99d 2004 	ldrsb.w	r2, [sp, #4]
 800c0da:	4b43      	ldr	r3, [pc, #268]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c0dc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	e62b      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 800c0e4:	6842      	ldr	r2, [r0, #4]
 800c0e6:	4b40      	ldr	r3, [pc, #256]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c0e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 800c0ec:	64da      	str	r2, [r3, #76]	; 0x4c
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0ee:	2000      	movs	r0, #0
 800c0f0:	e625      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 800c0f2:	7902      	ldrb	r2, [r0, #4]
 800c0f4:	4b3c      	ldr	r3, [pc, #240]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c0f6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
 800c0fa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c0fe:	2000      	movs	r0, #0
 800c100:	e61d      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 800c102:	6842      	ldr	r2, [r0, #4]
 800c104:	4b38      	ldr	r3, [pc, #224]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c106:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c10a:	2000      	movs	r0, #0
 800c10c:	e617      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 800c10e:	6842      	ldr	r2, [r0, #4]
 800c110:	4b35      	ldr	r3, [pc, #212]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c112:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c116:	2000      	movs	r0, #0
 800c118:	e611      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            status = RestoreNvmData( );
 800c11a:	f7fe fd55 	bl	800abc8 <RestoreNvmData>
            break;
 800c11e:	e60d      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 800c120:	7983      	ldrb	r3, [r0, #6]
 800c122:	2b01      	cmp	r3, #1
 800c124:	d901      	bls.n	800c12a <LoRaMacMibSetRequestConfirm+0x49e>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c126:	2003      	movs	r0, #3
 800c128:	e610      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 800c12a:	6842      	ldr	r2, [r0, #4]
 800c12c:	4b2e      	ldr	r3, [pc, #184]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c12e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 800c132:	6840      	ldr	r0, [r0, #4]
 800c134:	f000 ffa6 	bl	800d084 <LoRaMacCryptoSetLrWanVersion>
 800c138:	2800      	cmp	r0, #0
 800c13a:	f43f ae00 	beq.w	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 800c13e:	2011      	movs	r0, #17
 800c140:	e604      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 800c142:	6842      	ldr	r2, [r0, #4]
 800c144:	4b28      	ldr	r3, [pc, #160]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c146:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c14a:	2000      	movs	r0, #0
 800c14c:	e5f7      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 800c14e:	7902      	ldrb	r2, [r0, #4]
 800c150:	4b25      	ldr	r3, [pc, #148]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c152:	f883 211f 	strb.w	r2, [r3, #287]	; 0x11f
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c156:	2000      	movs	r0, #0
 800c158:	e5f1      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800c15a:	8882      	ldrh	r2, [r0, #4]
 800c15c:	4b22      	ldr	r3, [pc, #136]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c15e:	f8a3 2088 	strh.w	r2, [r3, #136]	; 0x88
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c162:	2000      	movs	r0, #0
 800c164:	e5eb      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParams.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800c166:	8882      	ldrh	r2, [r0, #4]
 800c168:	4b1f      	ldr	r3, [pc, #124]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c16a:	f8a3 208a 	strh.w	r2, [r3, #138]	; 0x8a
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c16e:	2000      	movs	r0, #0
 800c170:	e5e5      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckLimit = mibSet->Param.AdrAckLimit;
 800c172:	8882      	ldrh	r2, [r0, #4]
 800c174:	4b1c      	ldr	r3, [pc, #112]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c176:	f8a3 20d0 	strh.w	r2, [r3, #208]	; 0xd0
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c17a:	2000      	movs	r0, #0
 800c17c:	e5df      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            Nvm.MacGroup2.MacParamsDefaults.AdrAckDelay = mibSet->Param.AdrAckDelay;
 800c17e:	8882      	ldrh	r2, [r0, #4]
 800c180:	4b19      	ldr	r3, [pc, #100]	; (800c1e8 <LoRaMacMibSetRequestConfirm+0x55c>)
 800c182:	f8a3 20d2 	strh.w	r2, [r3, #210]	; 0xd2
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800c186:	2000      	movs	r0, #0
 800c188:	e5d9      	b.n	800bd3e <LoRaMacMibSetRequestConfirm+0xb2>
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 800c18a:	f000 faf9 	bl	800c780 <LoRaMacMibClassBSetRequestConfirm>
            break;
 800c18e:	e5d5      	b.n	800bd3c <LoRaMacMibSetRequestConfirm+0xb0>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c190:	2003      	movs	r0, #3
}
 800c192:	4770      	bx	lr
        return LORAMAC_STATUS_BUSY;
 800c194:	2001      	movs	r0, #1
 800c196:	e5d9      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
    switch( mibSet->Type )
 800c198:	2018      	movs	r0, #24
 800c19a:	e5d7      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c19c:	2003      	movs	r0, #3
 800c19e:	e5d5      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1a0:	2003      	movs	r0, #3
 800c1a2:	e5d3      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1a4:	2003      	movs	r0, #3
 800c1a6:	e5d1      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1a8:	2003      	movs	r0, #3
 800c1aa:	e5cf      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1ac:	2003      	movs	r0, #3
 800c1ae:	e5cd      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b0:	2003      	movs	r0, #3
 800c1b2:	e5cb      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b4:	2003      	movs	r0, #3
 800c1b6:	e5c9      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1b8:	2003      	movs	r0, #3
 800c1ba:	e5c7      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1bc:	2003      	movs	r0, #3
 800c1be:	e5c5      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1c0:	2003      	movs	r0, #3
 800c1c2:	e5c3      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1c4:	2003      	movs	r0, #3
 800c1c6:	e5c1      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1c8:	2003      	movs	r0, #3
 800c1ca:	e5bf      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1cc:	2003      	movs	r0, #3
 800c1ce:	e5bd      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1d0:	2003      	movs	r0, #3
 800c1d2:	e5bb      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1d4:	2003      	movs	r0, #3
 800c1d6:	e5b9      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1d8:	2003      	movs	r0, #3
 800c1da:	e5b7      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1dc:	2003      	movs	r0, #3
 800c1de:	e5b5      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1e0:	2003      	movs	r0, #3
 800c1e2:	e5b3      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 800c1e4:	2003      	movs	r0, #3
 800c1e6:	e5b1      	b.n	800bd4c <LoRaMacMibSetRequestConfirm+0xc0>
 800c1e8:	20008000 	.word	0x20008000
 800c1ec:	08014d7c 	.word	0x08014d7c
 800c1f0:	200080bc 	.word	0x200080bc

0800c1f4 <LoRaMacMlmeRequest>:

    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	b086      	sub	sp, #24
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	f8ad 3010 	strh.w	r3, [sp, #16]

    if( mlmeRequest == NULL )
 800c1fe:	2800      	cmp	r0, #0
 800c200:	f000 80f3 	beq.w	800c3ea <LoRaMacMlmeRequest+0x1f6>
 800c204:	4605      	mov	r5, r0
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c206:	6103      	str	r3, [r0, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 800c208:	f7ff f8b0 	bl	800b36c <LoRaMacIsBusy>
 800c20c:	b118      	cbz	r0, 800c216 <LoRaMacMlmeRequest+0x22>
    {
        return LORAMAC_STATUS_BUSY;
 800c20e:	2401      	movs	r4, #1
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
    }
    return status;
}
 800c210:	4620      	mov	r0, r4
 800c212:	b006      	add	sp, #24
 800c214:	bd70      	pop	{r4, r5, r6, pc}
    if( LoRaMacConfirmQueueIsFull( ) == true )
 800c216:	f000 fd69 	bl	800ccec <LoRaMacConfirmQueueIsFull>
 800c21a:	b108      	cbz	r0, 800c220 <LoRaMacMlmeRequest+0x2c>
        return LORAMAC_STATUS_BUSY;
 800c21c:	2401      	movs	r4, #1
 800c21e:	e7f7      	b.n	800c210 <LoRaMacMlmeRequest+0x1c>
    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c220:	f000 fd5e 	bl	800cce0 <LoRaMacConfirmQueueGetCnt>
 800c224:	b308      	cbz	r0, 800c26a <LoRaMacMlmeRequest+0x76>
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c226:	4b72      	ldr	r3, [pc, #456]	; (800c3f0 <LoRaMacMlmeRequest+0x1fc>)
 800c228:	2101      	movs	r1, #1
 800c22a:	f883 1455 	strb.w	r1, [r3, #1109]	; 0x455
    MacCtx.MacFlags.Bits.MlmeReq = 1;
 800c22e:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c232:	f042 0204 	orr.w	r2, r2, #4
 800c236:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
    queueElement.Request = mlmeRequest->Type;
 800c23a:	782b      	ldrb	r3, [r5, #0]
 800c23c:	f88d 3014 	strb.w	r3, [sp, #20]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c240:	f88d 1015 	strb.w	r1, [sp, #21]
    queueElement.RestrictCommonReadyToHandle = false;
 800c244:	2200      	movs	r2, #0
 800c246:	f88d 2017 	strb.w	r2, [sp, #23]
    queueElement.ReadyToHandle = false;
 800c24a:	f88d 2016 	strb.w	r2, [sp, #22]
    switch( mlmeRequest->Type )
 800c24e:	461c      	mov	r4, r3
 800c250:	3b01      	subs	r3, #1
 800c252:	2b0c      	cmp	r3, #12
 800c254:	f200 80af 	bhi.w	800c3b6 <LoRaMacMlmeRequest+0x1c2>
 800c258:	e8df f003 	tbb	[pc, r3]
 800c25c:	adadad0d 	.word	0xadadad0d
 800c260:	adad675d 	.word	0xadad675d
 800c264:	7f9ead70 	.word	0x7f9ead70
 800c268:	95          	.byte	0x95
 800c269:	00          	.byte	0x00
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 800c26a:	2214      	movs	r2, #20
 800c26c:	2100      	movs	r1, #0
 800c26e:	4861      	ldr	r0, [pc, #388]	; (800c3f4 <LoRaMacMlmeRequest+0x200>)
 800c270:	f005 f95b 	bl	801152a <memset1>
 800c274:	e7d7      	b.n	800c226 <LoRaMacMlmeRequest+0x32>
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 800c276:	4b5e      	ldr	r3, [pc, #376]	; (800c3f0 <LoRaMacMlmeRequest+0x1fc>)
 800c278:	f8d3 3340 	ldr.w	r3, [r3, #832]	; 0x340
 800c27c:	f013 0f20 	tst.w	r3, #32
 800c280:	d1c6      	bne.n	800c210 <LoRaMacMlmeRequest+0x1c>
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 800c282:	792b      	ldrb	r3, [r5, #4]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d003      	beq.n	800c290 <LoRaMacMlmeRequest+0x9c>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d026      	beq.n	800c2da <LoRaMacMlmeRequest+0xe6>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c28c:	2402      	movs	r4, #2
 800c28e:	e093      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                ResetMacParameters( false );
 800c290:	2000      	movs	r0, #0
 800c292:	f7fe fd93 	bl	800adbc <ResetMacParameters>
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 800c296:	4c58      	ldr	r4, [pc, #352]	; (800c3f8 <LoRaMacMlmeRequest+0x204>)
 800c298:	2200      	movs	r2, #0
 800c29a:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c29e:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
 800c2a2:	f001 fb95 	bl	800d9d0 <RegionAlternateDr>
 800c2a6:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
                Nvm.MacGroup1.ChannelsTxPower = mlmeRequest->Req.Join.TxPower;
 800c2aa:	f995 3006 	ldrsb.w	r3, [r5, #6]
 800c2ae:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 800c2b2:	2307      	movs	r3, #7
 800c2b4:	f88d 3015 	strb.w	r3, [sp, #21]
                status = SendReJoinReq( JOIN_REQ );
 800c2b8:	20ff      	movs	r0, #255	; 0xff
 800c2ba:	f7fe fee1 	bl	800b080 <SendReJoinReq>
                if( status != LORAMAC_STATUS_OK )
 800c2be:	4604      	mov	r4, r0
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d079      	beq.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 800c2c4:	4e4c      	ldr	r6, [pc, #304]	; (800c3f8 <LoRaMacMlmeRequest+0x204>)
 800c2c6:	2201      	movs	r2, #1
 800c2c8:	f995 1005 	ldrsb.w	r1, [r5, #5]
 800c2cc:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c2d0:	f001 fb7e 	bl	800d9d0 <RegionAlternateDr>
 800c2d4:	f886 0039 	strb.w	r0, [r6, #57]	; 0x39
 800c2d8:	e06e      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 800c2da:	4e47      	ldr	r6, [pc, #284]	; (800c3f8 <LoRaMacMlmeRequest+0x204>)
 800c2dc:	2400      	movs	r4, #0
 800c2de:	f886 411d 	strb.w	r4, [r6, #285]	; 0x11d
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c2e2:	2302      	movs	r3, #2
 800c2e4:	f88d 300c 	strb.w	r3, [sp, #12]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 800c2e8:	4669      	mov	r1, sp
 800c2ea:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c2ee:	f001 fa62 	bl	800d7b6 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 800c2f2:	792b      	ldrb	r3, [r5, #4]
 800c2f4:	f886 3130 	strb.w	r3, [r6, #304]	; 0x130
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800c2f8:	f88d 4015 	strb.w	r4, [sp, #21]
                queueElement.ReadyToHandle = true;
 800c2fc:	2301      	movs	r3, #1
 800c2fe:	f88d 3016 	strb.w	r3, [sp, #22]
                OnMacProcessNotify( );
 800c302:	f7fc ffd9 	bl	80092b8 <OnMacProcessNotify>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800c306:	4a3a      	ldr	r2, [pc, #232]	; (800c3f0 <LoRaMacMlmeRequest+0x1fc>)
 800c308:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c30c:	f043 0310 	orr.w	r3, r3, #16
 800c310:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
                status = LORAMAC_STATUS_OK;
 800c314:	e050      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c316:	2200      	movs	r2, #0
 800c318:	a904      	add	r1, sp, #16
 800c31a:	2002      	movs	r0, #2
 800c31c:	f000 fad4 	bl	800c8c8 <LoRaMacCommandsAddCmd>
 800c320:	4604      	mov	r4, r0
 800c322:	2800      	cmp	r0, #0
 800c324:	d048      	beq.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c326:	2413      	movs	r4, #19
 800c328:	e046      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 800c32a:	f995 200c 	ldrsb.w	r2, [r5, #12]
 800c32e:	b2d2      	uxtb	r2, r2
 800c330:	68a9      	ldr	r1, [r5, #8]
 800c332:	88a8      	ldrh	r0, [r5, #4]
 800c334:	f7fc ff16 	bl	8009164 <SetTxContinuousWave>
 800c338:	4604      	mov	r4, r0
            break;
 800c33a:	e03d      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            if (LoRaMacCommandsGetCmd( MOTE_MAC_DEVICE_TIME_REQ, &newCmd ) == LORAMAC_COMMANDS_SUCCESS)
 800c33c:	4669      	mov	r1, sp
 800c33e:	200d      	movs	r0, #13
 800c340:	f000 fb0e 	bl	800c960 <LoRaMacCommandsGetCmd>
 800c344:	4604      	mov	r4, r0
 800c346:	b3b8      	cbz	r0, 800c3b8 <LoRaMacMlmeRequest+0x1c4>
            else if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c348:	2200      	movs	r2, #0
 800c34a:	a904      	add	r1, sp, #16
 800c34c:	200d      	movs	r0, #13
 800c34e:	f000 fabb 	bl	800c8c8 <LoRaMacCommandsAddCmd>
 800c352:	4604      	mov	r4, r0
 800c354:	b380      	cbz	r0, 800c3b8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c356:	2413      	movs	r4, #19
            break;
 800c358:	e02e      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 800c35a:	4b27      	ldr	r3, [pc, #156]	; (800c3f8 <LoRaMacMlmeRequest+0x204>)
 800c35c:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
 800c360:	b10b      	cbz	r3, 800c366 <LoRaMacMlmeRequest+0x172>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c362:	2402      	movs	r4, #2
 800c364:	e028      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 800c366:	792c      	ldrb	r4, [r5, #4]
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 800c368:	f004 0007 	and.w	r0, r4, #7
 800c36c:	f000 fa01 	bl	800c772 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 800c370:	f88d 4010 	strb.w	r4, [sp, #16]
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 800c374:	2201      	movs	r2, #1
 800c376:	a904      	add	r1, sp, #16
 800c378:	2010      	movs	r0, #16
 800c37a:	f000 faa5 	bl	800c8c8 <LoRaMacCommandsAddCmd>
 800c37e:	4604      	mov	r4, r0
 800c380:	b1d0      	cbz	r0, 800c3b8 <LoRaMacMlmeRequest+0x1c4>
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c382:	2413      	movs	r4, #19
 800c384:	e018      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 800c386:	2200      	movs	r2, #0
 800c388:	a904      	add	r1, sp, #16
 800c38a:	2012      	movs	r0, #18
 800c38c:	f000 fa9c 	bl	800c8c8 <LoRaMacCommandsAddCmd>
 800c390:	4604      	mov	r4, r0
 800c392:	b188      	cbz	r0, 800c3b8 <LoRaMacMlmeRequest+0x1c4>
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800c394:	2413      	movs	r4, #19
 800c396:	e00f      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
            queueElement.RestrictCommonReadyToHandle = true;
 800c398:	2301      	movs	r3, #1
 800c39a:	f88d 3017 	strb.w	r3, [sp, #23]
            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 800c39e:	f000 f9d9 	bl	800c754 <LoRaMacClassBIsAcquisitionInProgress>
 800c3a2:	b108      	cbz	r0, 800c3a8 <LoRaMacMlmeRequest+0x1b4>
                status = LORAMAC_STATUS_BUSY;
 800c3a4:	2401      	movs	r4, #1
 800c3a6:	e007      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 800c3a8:	f000 f9d1 	bl	800c74e <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 800c3ac:	2000      	movs	r0, #0
 800c3ae:	f000 f9d3 	bl	800c758 <LoRaMacClassBBeaconTimerEvent>
                status = LORAMAC_STATUS_OK;
 800c3b2:	2400      	movs	r4, #0
 800c3b4:	e000      	b.n	800c3b8 <LoRaMacMlmeRequest+0x1c4>
    switch( mlmeRequest->Type )
 800c3b6:	2402      	movs	r4, #2
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c3b8:	4b0d      	ldr	r3, [pc, #52]	; (800c3f0 <LoRaMacMlmeRequest+0x1fc>)
 800c3ba:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c3be:	612b      	str	r3, [r5, #16]
    if( status != LORAMAC_STATUS_OK )
 800c3c0:	b17c      	cbz	r4, 800c3e2 <LoRaMacMlmeRequest+0x1ee>
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 800c3c2:	f000 fc8d 	bl	800cce0 <LoRaMacConfirmQueueGetCnt>
 800c3c6:	2800      	cmp	r0, #0
 800c3c8:	f47f af22 	bne.w	800c210 <LoRaMacMlmeRequest+0x1c>
            MacCtx.NodeAckRequested = false;
 800c3cc:	4b08      	ldr	r3, [pc, #32]	; (800c3f0 <LoRaMacMlmeRequest+0x1fc>)
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	f883 141a 	strb.w	r1, [r3, #1050]	; 0x41a
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800c3d4:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c3d8:	f361 0282 	bfi	r2, r1, #2, #1
 800c3dc:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800c3e0:	e716      	b.n	800c210 <LoRaMacMlmeRequest+0x1c>
        LoRaMacConfirmQueueAdd( &queueElement );
 800c3e2:	a805      	add	r0, sp, #20
 800c3e4:	f000 fbb2 	bl	800cb4c <LoRaMacConfirmQueueAdd>
 800c3e8:	e712      	b.n	800c210 <LoRaMacMlmeRequest+0x1c>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c3ea:	2403      	movs	r4, #3
 800c3ec:	e710      	b.n	800c210 <LoRaMacMlmeRequest+0x1c>
 800c3ee:	bf00      	nop
 800c3f0:	20000840 	.word	0x20000840
 800c3f4:	20000c94 	.word	0x20000c94
 800c3f8:	20008000 	.word	0x20008000

0800c3fc <LoRaMacMcpsRequest>:

LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 800c3fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c400:	b091      	sub	sp, #68	; 0x44
 800c402:	9103      	str	r1, [sp, #12]
    void* fBuffer = NULL;
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
    bool readyToSend = false;

    if( mcpsRequest == NULL )
 800c404:	2800      	cmp	r0, #0
 800c406:	f000 80de 	beq.w	800c5c6 <LoRaMacMcpsRequest+0x1ca>
 800c40a:	f04f 0a00 	mov.w	sl, #0
 800c40e:	4605      	mov	r5, r0
        }
    }
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 800c410:	f8c0 a010 	str.w	sl, [r0, #16]

    if( LoRaMacIsBusy( ) == true )
 800c414:	f7fe ffaa 	bl	800b36c <LoRaMacIsBusy>
 800c418:	4680      	mov	r8, r0
 800c41a:	b118      	cbz	r0, 800c424 <LoRaMacMcpsRequest+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 800c41c:	2001      	movs	r0, #1

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;

    return status;
}
 800c41e:	b011      	add	sp, #68	; 0x44
 800c420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    McpsReq_t request = *mcpsRequest;
 800c424:	ac06      	add	r4, sp, #24
 800c426:	462e      	mov	r6, r5
 800c428:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c42a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c42c:	f8c4 a000 	str.w	sl, [r4]
    macHdr.Value = 0;
 800c430:	4651      	mov	r1, sl
 800c432:	f88d a030 	strb.w	sl, [sp, #48]	; 0x30
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 800c436:	4c66      	ldr	r4, [pc, #408]	; (800c5d0 <LoRaMacMcpsRequest+0x1d4>)
 800c438:	2214      	movs	r2, #20
 800c43a:	f504 6088 	add.w	r0, r4, #1088	; 0x440
 800c43e:	f005 f874 	bl	801152a <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	f884 3441 	strb.w	r3, [r4, #1089]	; 0x441
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c448:	4b62      	ldr	r3, [pc, #392]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c44a:	f893 3130 	ldrb.w	r3, [r3, #304]	; 0x130
 800c44e:	2b02      	cmp	r3, #2
 800c450:	d065      	beq.n	800c51e <LoRaMacMcpsRequest+0x122>
    switch( request.Type )
 800c452:	f89d 7018 	ldrb.w	r7, [sp, #24]
 800c456:	2f01      	cmp	r7, #1
 800c458:	f000 8086 	beq.w	800c568 <LoRaMacMcpsRequest+0x16c>
 800c45c:	2f03      	cmp	r7, #3
 800c45e:	f000 8096 	beq.w	800c58e <LoRaMacMcpsRequest+0x192>
 800c462:	2f00      	cmp	r7, #0
 800c464:	d06d      	beq.n	800c542 <LoRaMacMcpsRequest+0x146>
 800c466:	f04f 0b00 	mov.w	fp, #0
 800c46a:	f8cd b014 	str.w	fp, [sp, #20]
 800c46e:	f8cd b010 	str.w	fp, [sp, #16]
    getPhy.Attribute = PHY_MIN_TX_DR;
 800c472:	2302      	movs	r3, #2
 800c474:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c478:	4e56      	ldr	r6, [pc, #344]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c47a:	f896 307c 	ldrb.w	r3, [r6, #124]	; 0x7c
 800c47e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800c482:	a90e      	add	r1, sp, #56	; 0x38
 800c484:	f896 0048 	ldrb.w	r0, [r6, #72]	; 0x48
 800c488:	f001 f964 	bl	800d754 <RegionGetPhyParam>
 800c48c:	900d      	str	r0, [sp, #52]	; 0x34
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c48e:	b244      	sxtb	r4, r0
 800c490:	45a3      	cmp	fp, r4
 800c492:	bfb8      	it	lt
 800c494:	46a3      	movlt	fp, r4
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 800c496:	f896 911a 	ldrb.w	r9, [r6, #282]	; 0x11a
 800c49a:	f896 211d 	ldrb.w	r2, [r6, #285]	; 0x11d
 800c49e:	f896 1130 	ldrb.w	r1, [r6, #304]	; 0x130
 800c4a2:	4648      	mov	r0, r9
 800c4a4:	f7fc fe30 	bl	8009108 <CheckForMinimumAbpDatarate>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	b900      	cbnz	r0, 800c4ae <LoRaMacMcpsRequest+0xb2>
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 800c4ac:	465c      	mov	r4, fp
    if( readyToSend == true )
 800c4ae:	f1b8 0f00 	cmp.w	r8, #0
 800c4b2:	f000 8082 	beq.w	800c5ba <LoRaMacMcpsRequest+0x1be>
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 800c4b6:	f1b9 0f00 	cmp.w	r9, #0
 800c4ba:	d000      	beq.n	800c4be <LoRaMacMcpsRequest+0xc2>
 800c4bc:	b19b      	cbz	r3, 800c4e6 <LoRaMacMcpsRequest+0xea>
            verify.DatarateParams.Datarate = datarate;
 800c4be:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800c4c2:	4b44      	ldr	r3, [pc, #272]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c4c4:	f893 207c 	ldrb.w	r2, [r3, #124]	; 0x7c
 800c4c8:	f88d 202e 	strb.w	r2, [sp, #46]	; 0x2e
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 800c4cc:	2205      	movs	r2, #5
 800c4ce:	a90b      	add	r1, sp, #44	; 0x2c
 800c4d0:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c4d4:	f001 f982 	bl	800d7dc <RegionVerify>
 800c4d8:	2800      	cmp	r0, #0
 800c4da:	d076      	beq.n	800c5ca <LoRaMacMcpsRequest+0x1ce>
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 800c4dc:	f99d 202c 	ldrsb.w	r2, [sp, #44]	; 0x2c
 800c4e0:	4b3c      	ldr	r3, [pc, #240]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c4e2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800c4e6:	4b3a      	ldr	r3, [pc, #232]	; (800c5d0 <LoRaMacMcpsRequest+0x1d4>)
 800c4e8:	f8d3 1498 	ldr.w	r1, [r3, #1176]	; 0x498
 800c4ec:	4b39      	ldr	r3, [pc, #228]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c4ee:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 800c4f2:	f7fd ff95 	bl	800a420 <LoRaMacHandleResponseTimeout>
        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx );
 800c4f6:	9b03      	ldr	r3, [sp, #12]
 800c4f8:	9300      	str	r3, [sp, #0]
 800c4fa:	4653      	mov	r3, sl
 800c4fc:	9a05      	ldr	r2, [sp, #20]
 800c4fe:	9904      	ldr	r1, [sp, #16]
 800c500:	a80c      	add	r0, sp, #48	; 0x30
 800c502:	f7fe fea3 	bl	800b24c <Send>
        if( status == LORAMAC_STATUS_OK )
 800c506:	2800      	cmp	r0, #0
 800c508:	d152      	bne.n	800c5b0 <LoRaMacMcpsRequest+0x1b4>
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 800c50a:	4b31      	ldr	r3, [pc, #196]	; (800c5d0 <LoRaMacMcpsRequest+0x1d4>)
 800c50c:	f883 7440 	strb.w	r7, [r3, #1088]	; 0x440
            MacCtx.MacFlags.Bits.McpsReq = 1;
 800c510:	f893 2491 	ldrb.w	r2, [r3, #1169]	; 0x491
 800c514:	f042 0201 	orr.w	r2, r2, #1
 800c518:	f883 2491 	strb.w	r2, [r3, #1169]	; 0x491
 800c51c:	e04e      	b.n	800c5bc <LoRaMacMcpsRequest+0x1c0>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c51e:	4b2d      	ldr	r3, [pc, #180]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c520:	f893 3118 	ldrb.w	r3, [r3, #280]	; 0x118
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 800c524:	2b02      	cmp	r3, #2
 800c526:	d194      	bne.n	800c452 <LoRaMacMcpsRequest+0x56>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c528:	4b2a      	ldr	r3, [pc, #168]	; (800c5d4 <LoRaMacMcpsRequest+0x1d8>)
 800c52a:	f893 311e 	ldrb.w	r3, [r3, #286]	; 0x11e
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d18f      	bne.n	800c452 <LoRaMacMcpsRequest+0x56>
        ( request.Type == MCPS_UNCONFIRMED ) )
 800c532:	f89d 3018 	ldrb.w	r3, [sp, #24]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 800c536:	2b00      	cmp	r3, #0
 800c538:	d18b      	bne.n	800c452 <LoRaMacMcpsRequest+0x56>
        request.Type = MCPS_CONFIRMED;
 800c53a:	2301      	movs	r3, #1
 800c53c:	f88d 3018 	strb.w	r3, [sp, #24]
 800c540:	e787      	b.n	800c452 <LoRaMacMcpsRequest+0x56>
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 800c542:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c546:	2202      	movs	r2, #2
 800c548:	f362 1347 	bfi	r3, r2, #5, #3
 800c54c:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Unconfirmed.fPort;
 800c550:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c554:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Unconfirmed.fBuffer;
 800c556:	9b08      	ldr	r3, [sp, #32]
 800c558:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 800c55a:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Unconfirmed.Datarate;
 800c55e:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800c562:	f04f 0801 	mov.w	r8, #1
            break;
 800c566:	e784      	b.n	800c472 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 800c568:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c56c:	2204      	movs	r2, #4
 800c56e:	f362 1347 	bfi	r3, r2, #5, #3
 800c572:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fPort = request.Req.Confirmed.fPort;
 800c576:	f89d 301c 	ldrb.w	r3, [sp, #28]
 800c57a:	9304      	str	r3, [sp, #16]
            fBuffer = request.Req.Confirmed.fBuffer;
 800c57c:	9b08      	ldr	r3, [sp, #32]
 800c57e:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Confirmed.fBufferSize;
 800c580:	f8bd a024 	ldrh.w	sl, [sp, #36]	; 0x24
            datarate = request.Req.Confirmed.Datarate;
 800c584:	f99d b026 	ldrsb.w	fp, [sp, #38]	; 0x26
            readyToSend = true;
 800c588:	f04f 0801 	mov.w	r8, #1
            break;
 800c58c:	e771      	b.n	800c472 <LoRaMacMcpsRequest+0x76>
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 800c58e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800c592:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 800c596:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
            fBuffer = request.Req.Proprietary.fBuffer;
 800c59a:	9b07      	ldr	r3, [sp, #28]
 800c59c:	9305      	str	r3, [sp, #20]
            fBufferSize = request.Req.Proprietary.fBufferSize;
 800c59e:	f8bd a020 	ldrh.w	sl, [sp, #32]
            datarate = request.Req.Proprietary.Datarate;
 800c5a2:	f99d b022 	ldrsb.w	fp, [sp, #34]	; 0x22
            readyToSend = true;
 800c5a6:	f04f 0801 	mov.w	r8, #1
    uint8_t fPort = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9304      	str	r3, [sp, #16]
            break;
 800c5ae:	e760      	b.n	800c472 <LoRaMacMcpsRequest+0x76>
            MacCtx.NodeAckRequested = false;
 800c5b0:	4b07      	ldr	r3, [pc, #28]	; (800c5d0 <LoRaMacMcpsRequest+0x1d4>)
 800c5b2:	2200      	movs	r2, #0
 800c5b4:	f883 241a 	strb.w	r2, [r3, #1050]	; 0x41a
 800c5b8:	e000      	b.n	800c5bc <LoRaMacMcpsRequest+0x1c0>
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800c5ba:	2002      	movs	r0, #2
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 800c5bc:	4b04      	ldr	r3, [pc, #16]	; (800c5d0 <LoRaMacMcpsRequest+0x1d4>)
 800c5be:	f8d3 3494 	ldr.w	r3, [r3, #1172]	; 0x494
 800c5c2:	612b      	str	r3, [r5, #16]
    return status;
 800c5c4:	e72b      	b.n	800c41e <LoRaMacMcpsRequest+0x22>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800c5c6:	2003      	movs	r0, #3
 800c5c8:	e729      	b.n	800c41e <LoRaMacMcpsRequest+0x22>
                return LORAMAC_STATUS_PARAMETER_INVALID;
 800c5ca:	2003      	movs	r0, #3
 800c5cc:	e727      	b.n	800c41e <LoRaMacMcpsRequest+0x22>
 800c5ce:	bf00      	nop
 800c5d0:	20000840 	.word	0x20000840
 800c5d4:	20008000 	.word	0x20008000

0800c5d8 <LoRaMacTestSetDutyCycleOn>:
    OnMacProcessNotify( );
}
#endif /* LORAMAC_VERSION */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 800c5d8:	b510      	push	{r4, lr}
 800c5da:	b082      	sub	sp, #8
 800c5dc:	4604      	mov	r4, r0
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 800c5de:	f88d 0004 	strb.w	r0, [sp, #4]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 800c5e2:	220f      	movs	r2, #15
 800c5e4:	a901      	add	r1, sp, #4
 800c5e6:	4b09      	ldr	r3, [pc, #36]	; (800c60c <LoRaMacTestSetDutyCycleOn+0x34>)
 800c5e8:	f893 0048 	ldrb.w	r0, [r3, #72]	; 0x48
 800c5ec:	f001 f8f6 	bl	800d7dc <RegionVerify>
 800c5f0:	b148      	cbz	r0, 800c606 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 800c5f2:	4b06      	ldr	r3, [pc, #24]	; (800c60c <LoRaMacTestSetDutyCycleOn+0x34>)
 800c5f4:	f883 411c 	strb.w	r4, [r3, #284]	; 0x11c
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800c5f8:	4a05      	ldr	r2, [pc, #20]	; (800c610 <LoRaMacTestSetDutyCycleOn+0x38>)
 800c5fa:	f892 3491 	ldrb.w	r3, [r2, #1169]	; 0x491
 800c5fe:	f043 0320 	orr.w	r3, r3, #32
 800c602:	f882 3491 	strb.w	r3, [r2, #1169]	; 0x491
    }
}
 800c606:	b002      	add	sp, #8
 800c608:	bd10      	pop	{r4, pc}
 800c60a:	bf00      	nop
 800c60c:	20008000 	.word	0x20008000
 800c610:	20000840 	.word	0x20000840

0800c614 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 800c614:	b538      	push	{r3, r4, r5, lr}
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 800c616:	f7ff f907 	bl	800b828 <LoRaMacStop>
 800c61a:	b110      	cbz	r0, 800c622 <LoRaMacDeInitialization+0xe>
        // Return success
        return LORAMAC_STATUS_OK;
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 800c61c:	2401      	movs	r4, #1
    }
}
 800c61e:	4620      	mov	r0, r4
 800c620:	bd38      	pop	{r3, r4, r5, pc}
 800c622:	4604      	mov	r4, r0
        TimerStop( &MacCtx.TxDelayedTimer );
 800c624:	4d0a      	ldr	r5, [pc, #40]	; (800c650 <LoRaMacDeInitialization+0x3c>)
 800c626:	f505 705a 	add.w	r0, r5, #872	; 0x368
 800c62a:	f007 f999 	bl	8013960 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 800c62e:	f505 7060 	add.w	r0, r5, #896	; 0x380
 800c632:	f007 f995 	bl	8013960 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 800c636:	f505 7066 	add.w	r0, r5, #920	; 0x398
 800c63a:	f007 f991 	bl	8013960 <UTIL_TIMER_Stop>
        LoRaMacClassBHaltBeaconing( );
 800c63e:	f000 f899 	bl	800c774 <LoRaMacClassBHaltBeaconing>
        ResetMacParameters( false );
 800c642:	2000      	movs	r0, #0
 800c644:	f7fe fbba 	bl	800adbc <ResetMacParameters>
        Radio.Sleep( );
 800c648:	4b02      	ldr	r3, [pc, #8]	; (800c654 <LoRaMacDeInitialization+0x40>)
 800c64a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c64c:	4798      	blx	r3
        return LORAMAC_STATUS_OK;
 800c64e:	e7e6      	b.n	800c61e <LoRaMacDeInitialization+0xa>
 800c650:	20000840 	.word	0x20000840
 800c654:	08014d7c 	.word	0x08014d7c

0800c658 <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 800c658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c65c:	b08b      	sub	sp, #44	; 0x2c
 800c65e:	460f      	mov	r7, r1
 800c660:	4616      	mov	r6, r2
 800c662:	461d      	mov	r5, r3
    bool adrAckReq = false;
    int8_t datarate = adrNext->Datarate;
 800c664:	f990 900c 	ldrsb.w	r9, [r0, #12]
    int8_t txPower = adrNext->TxPower;
 800c668:	f990 a00d 	ldrsb.w	sl, [r0, #13]
    uint8_t nbTrans = adrNext->NbTrans;
 800c66c:	f890 b00e 	ldrb.w	fp, [r0, #14]
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 800c670:	6842      	ldr	r2, [r0, #4]
 800c672:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c674:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 800c676:	f890 8001 	ldrb.w	r8, [r0, #1]
 800c67a:	f1b8 0f00 	cmp.w	r8, #0
 800c67e:	d109      	bne.n	800c694 <LoRaMacAdrCalcNext+0x3c>
                datarate = phyParam.Value;
            }
        }
    }

    *drOut = datarate;
 800c680:	f887 9000 	strb.w	r9, [r7]
    *txPowOut = txPower;
 800c684:	f886 a000 	strb.w	sl, [r6]
    *nbTransOut = nbTrans;
 800c688:	f885 b000 	strb.w	fp, [r5]
    return adrAckReq;
}
 800c68c:	4640      	mov	r0, r8
 800c68e:	b00b      	add	sp, #44	; 0x2c
 800c690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c694:	4604      	mov	r4, r0
        getPhy.Attribute = PHY_MIN_TX_DR;
 800c696:	2302      	movs	r3, #2
 800c698:	f88d 3020 	strb.w	r3, [sp, #32]
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c69c:	7bc3      	ldrb	r3, [r0, #15]
 800c69e:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c6a2:	a908      	add	r1, sp, #32
 800c6a4:	7c00      	ldrb	r0, [r0, #16]
 800c6a6:	f001 f855 	bl	800d754 <RegionGetPhyParam>
 800c6aa:	9007      	str	r0, [sp, #28]
        minTxDatarate = phyParam.Value;
 800c6ac:	b243      	sxtb	r3, r0
 800c6ae:	9301      	str	r3, [sp, #4]
        datarate = MAX( datarate, minTxDatarate );
 800c6b0:	454b      	cmp	r3, r9
 800c6b2:	bfb8      	it	lt
 800c6b4:	464b      	movlt	r3, r9
 800c6b6:	9300      	str	r3, [sp, #0]
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 800c6b8:	6862      	ldr	r2, [r4, #4]
 800c6ba:	8923      	ldrh	r3, [r4, #8]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d201      	bcs.n	800c6c4 <LoRaMacAdrCalcNext+0x6c>
    bool adrAckReq = false;
 800c6c0:	f04f 0800 	mov.w	r8, #0
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 800c6c4:	8961      	ldrh	r1, [r4, #10]
 800c6c6:	440b      	add	r3, r1
 800c6c8:	429a      	cmp	r2, r3
 800c6ca:	d224      	bcs.n	800c716 <LoRaMacAdrCalcNext+0xbe>
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 800c6cc:	6863      	ldr	r3, [r4, #4]
 800c6ce:	8921      	ldrh	r1, [r4, #8]
 800c6d0:	8962      	ldrh	r2, [r4, #10]
 800c6d2:	eb01 0042 	add.w	r0, r1, r2, lsl #1
 800c6d6:	4283      	cmp	r3, r0
 800c6d8:	d332      	bcc.n	800c740 <LoRaMacAdrCalcNext+0xe8>
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 800c6da:	1a5b      	subs	r3, r3, r1
 800c6dc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6e0:	fb02 3311 	mls	r3, r2, r1, r3
 800c6e4:	bb7b      	cbnz	r3, 800c746 <LoRaMacAdrCalcNext+0xee>
                if( datarate == minTxDatarate )
 800c6e6:	9b01      	ldr	r3, [sp, #4]
 800c6e8:	4599      	cmp	r9, r3
 800c6ea:	dc03      	bgt.n	800c6f4 <LoRaMacAdrCalcNext+0x9c>
                    if( adrNext->UpdateChanMask == true )
 800c6ec:	7823      	ldrb	r3, [r4, #0]
 800c6ee:	b9eb      	cbnz	r3, 800c72c <LoRaMacAdrCalcNext+0xd4>
                    nbTrans = 1;
 800c6f0:	f04f 0b01 	mov.w	fp, #1
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 800c6f4:	2321      	movs	r3, #33	; 0x21
 800c6f6:	f88d 3020 	strb.w	r3, [sp, #32]
                getPhy.Datarate = datarate;
 800c6fa:	9b00      	ldr	r3, [sp, #0]
 800c6fc:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 800c700:	7be3      	ldrb	r3, [r4, #15]
 800c702:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c706:	a908      	add	r1, sp, #32
 800c708:	7c20      	ldrb	r0, [r4, #16]
 800c70a:	f001 f823 	bl	800d754 <RegionGetPhyParam>
 800c70e:	9007      	str	r0, [sp, #28]
                datarate = phyParam.Value;
 800c710:	fa4f f980 	sxtb.w	r9, r0
 800c714:	e7b4      	b.n	800c680 <LoRaMacAdrCalcNext+0x28>
            getPhy.Attribute = PHY_DEF_TX_POWER;
 800c716:	230a      	movs	r3, #10
 800c718:	f88d 3020 	strb.w	r3, [sp, #32]
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 800c71c:	a908      	add	r1, sp, #32
 800c71e:	7c20      	ldrb	r0, [r4, #16]
 800c720:	f001 f818 	bl	800d754 <RegionGetPhyParam>
 800c724:	9007      	str	r0, [sp, #28]
            txPower = phyParam.Value;
 800c726:	fa4f fa80 	sxtb.w	sl, r0
 800c72a:	e7cf      	b.n	800c6cc <LoRaMacAdrCalcNext+0x74>
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 800c72c:	2302      	movs	r3, #2
 800c72e:	f88d 3018 	strb.w	r3, [sp, #24]
                        RegionInitDefaults( adrNext->Region, &params );
 800c732:	a903      	add	r1, sp, #12
 800c734:	7c20      	ldrb	r0, [r4, #16]
 800c736:	f001 f83e 	bl	800d7b6 <RegionInitDefaults>
                    nbTrans = 1;
 800c73a:	f04f 0b01 	mov.w	fp, #1
 800c73e:	e7d9      	b.n	800c6f4 <LoRaMacAdrCalcNext+0x9c>
        datarate = MAX( datarate, minTxDatarate );
 800c740:	f8dd 9000 	ldr.w	r9, [sp]
 800c744:	e79c      	b.n	800c680 <LoRaMacAdrCalcNext+0x28>
 800c746:	f8dd 9000 	ldr.w	r9, [sp]
 800c74a:	e799      	b.n	800c680 <LoRaMacAdrCalcNext+0x28>

0800c74c <LoRaMacClassBInit>:
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c74c:	4770      	bx	lr

0800c74e <LoRaMacClassBSetBeaconState>:
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c74e:	4770      	bx	lr

0800c750 <LoRaMacClassBSetPingSlotState>:
void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c750:	4770      	bx	lr

0800c752 <LoRaMacClassBSetMulticastSlotState>:
void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c752:	4770      	bx	lr

0800c754 <LoRaMacClassBIsAcquisitionInProgress>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c754:	2000      	movs	r0, #0
 800c756:	4770      	bx	lr

0800c758 <LoRaMacClassBBeaconTimerEvent>:
    Ctx.BeaconCtx.TimeStamp = TimerGetCurrentTime( );
    TimerStop( &Ctx.BeaconTimer );
    LoRaMacClassBEvents.Events.Beacon = 1;
    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c758:	4770      	bx	lr

0800c75a <LoRaMacClassBPingSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.PingSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c75a:	4770      	bx	lr

0800c75c <LoRaMacClassBMulticastSlotTimerEvent>:
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    LoRaMacClassBEvents.Events.MulticastSlot = 1;

    OnClassBMacProcessNotify( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c75c:	4770      	bx	lr

0800c75e <LoRaMacClassBRxBeacon>:
    }
    return beaconProcessed;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c75e:	2000      	movs	r0, #0
 800c760:	4770      	bx	lr

0800c762 <LoRaMacClassBIsBeaconExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c762:	2000      	movs	r0, #0
 800c764:	4770      	bx	lr

0800c766 <LoRaMacClassBIsPingExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c766:	2000      	movs	r0, #0
 800c768:	4770      	bx	lr

0800c76a <LoRaMacClassBIsMulticastExpected>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c76a:	2000      	movs	r0, #0
 800c76c:	4770      	bx	lr

0800c76e <LoRaMacClassBIsBeaconModeActive>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c76e:	2000      	movs	r0, #0
 800c770:	4770      	bx	lr

0800c772 <LoRaMacClassBSetPingSlotInfo>:
{
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c772:	4770      	bx	lr

0800c774 <LoRaMacClassBHaltBeaconing>:

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c774:	4770      	bx	lr

0800c776 <LoRaMacClassBResumeBeaconing>:
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c776:	4770      	bx	lr

0800c778 <LoRaMacClassBSwitchClass>:
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c778:	2002      	movs	r0, #2
 800c77a:	4770      	bx	lr

0800c77c <LoRaMacClassBMibGetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c77c:	2002      	movs	r0, #2
 800c77e:	4770      	bx	lr

0800c780 <LoRaMacMibClassBSetRequestConfirm>:
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c780:	2002      	movs	r0, #2
 800c782:	4770      	bx	lr

0800c784 <LoRaMacClassBPingSlotInfoAns>:
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c784:	4770      	bx	lr

0800c786 <LoRaMacClassBPingSlotChannelReq>:

    return status;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c786:	2000      	movs	r0, #0
 800c788:	4770      	bx	lr

0800c78a <LoRaMacClassBBeaconTimingAns>:

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c78a:	4770      	bx	lr

0800c78c <LoRaMacClassBDeviceTimeAns>:
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c78c:	4770      	bx	lr

0800c78e <LoRaMacClassBBeaconFreqReq>:
    }
    return false;
#else
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c78e:	2000      	movs	r0, #0
 800c790:	4770      	bx	lr

0800c792 <LoRaMacClassBIsUplinkCollision>:
    }
    return 0;
#else
    return 0;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c792:	2000      	movs	r0, #0
 800c794:	4770      	bx	lr

0800c796 <LoRaMacClassBStopRxSlots>:
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c796:	4770      	bx	lr

0800c798 <LoRaMacClassBSetFPendingBit>:
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c798:	4770      	bx	lr

0800c79a <LoRaMacClassBProcess>:
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 800c79a:	4770      	bx	lr

0800c79c <IsSlotFree>:
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
    uint8_t* mem = ( uint8_t* )slot;

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c79c:	2300      	movs	r3, #0
 800c79e:	2b0f      	cmp	r3, #15
 800c7a0:	d804      	bhi.n	800c7ac <IsSlotFree+0x10>
    {
        if( mem[size] != 0x00 )
 800c7a2:	5cc2      	ldrb	r2, [r0, r3]
 800c7a4:	b922      	cbnz	r2, 800c7b0 <IsSlotFree+0x14>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 800c7a6:	3301      	adds	r3, #1
 800c7a8:	b29b      	uxth	r3, r3
 800c7aa:	e7f8      	b.n	800c79e <IsSlotFree+0x2>
        {
            return false;
        }
    }
    return true;
 800c7ac:	2001      	movs	r0, #1
 800c7ae:	4770      	bx	lr
            return false;
 800c7b0:	2000      	movs	r0, #0
}
 800c7b2:	4770      	bx	lr

0800c7b4 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 800c7b4:	b538      	push	{r3, r4, r5, lr}
    uint8_t itr = 0;
 800c7b6:	2400      	movs	r4, #0

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 800c7b8:	0125      	lsls	r5, r4, #4
 800c7ba:	f105 0308 	add.w	r3, r5, #8
 800c7be:	4d06      	ldr	r5, [pc, #24]	; (800c7d8 <MallocNewMacCommandSlot+0x24>)
 800c7c0:	441d      	add	r5, r3
 800c7c2:	4628      	mov	r0, r5
 800c7c4:	f7ff ffea 	bl	800c79c <IsSlotFree>
 800c7c8:	b920      	cbnz	r0, 800c7d4 <MallocNewMacCommandSlot+0x20>
    {
        itr++;
 800c7ca:	3401      	adds	r4, #1
 800c7cc:	b2e4      	uxtb	r4, r4
        if( itr == NUM_OF_MAC_COMMANDS )
 800c7ce:	2c20      	cmp	r4, #32
 800c7d0:	d1f2      	bne.n	800c7b8 <MallocNewMacCommandSlot+0x4>
        {
            return NULL;
 800c7d2:	2500      	movs	r5, #0
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
}
 800c7d4:	4628      	mov	r0, r5
 800c7d6:	bd38      	pop	{r3, r4, r5, pc}
 800c7d8:	20000e00 	.word	0x20000e00

0800c7dc <LinkedListInit>:
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
    if( list == NULL )
 800c7dc:	b120      	cbz	r0, 800c7e8 <LinkedListInit+0xc>
    {
        return false;
    }

    list->First = NULL;
 800c7de:	2200      	movs	r2, #0
 800c7e0:	6002      	str	r2, [r0, #0]
    list->Last = NULL;
 800c7e2:	6042      	str	r2, [r0, #4]

    return true;
 800c7e4:	2001      	movs	r0, #1
 800c7e6:	4770      	bx	lr
        return false;
 800c7e8:	2000      	movs	r0, #0
}
 800c7ea:	4770      	bx	lr

0800c7ec <LinkedListAdd>:
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	b160      	cbz	r0, 800c80a <LinkedListAdd+0x1e>
 800c7f0:	b169      	cbz	r1, 800c80e <LinkedListAdd+0x22>
    {
        return false;
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 800c7f2:	6802      	ldr	r2, [r0, #0]
 800c7f4:	b13a      	cbz	r2, 800c806 <LinkedListAdd+0x1a>
    {
        list->First = element;
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 800c7f6:	685a      	ldr	r2, [r3, #4]
 800c7f8:	b102      	cbz	r2, 800c7fc <LinkedListAdd+0x10>
    {
        list->Last->Next = element;
 800c7fa:	6011      	str	r1, [r2, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	600a      	str	r2, [r1, #0]

    // Update the last entry of the list.
    list->Last = element;
 800c800:	6059      	str	r1, [r3, #4]

    return true;
 800c802:	2001      	movs	r0, #1
 800c804:	4770      	bx	lr
        list->First = element;
 800c806:	6001      	str	r1, [r0, #0]
 800c808:	e7f5      	b.n	800c7f6 <LinkedListAdd+0xa>
        return false;
 800c80a:	2000      	movs	r0, #0
 800c80c:	4770      	bx	lr
 800c80e:	2000      	movs	r0, #0
}
 800c810:	4770      	bx	lr

0800c812 <LinkedListGetPrevious>:
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c812:	b160      	cbz	r0, 800c82e <LinkedListGetPrevious+0x1c>
 800c814:	b161      	cbz	r1, 800c830 <LinkedListGetPrevious+0x1e>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 800c816:	6800      	ldr	r0, [r0, #0]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 800c818:	4281      	cmp	r1, r0
 800c81a:	d102      	bne.n	800c822 <LinkedListGetPrevious+0x10>
            curElement = curElement->Next;
        }
    }
    else
    {
        curElement = NULL;
 800c81c:	2000      	movs	r0, #0
    }

    return curElement;
}
 800c81e:	4770      	bx	lr
            curElement = curElement->Next;
 800c820:	4618      	mov	r0, r3
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 800c822:	2800      	cmp	r0, #0
 800c824:	d0fb      	beq.n	800c81e <LinkedListGetPrevious+0xc>
 800c826:	6803      	ldr	r3, [r0, #0]
 800c828:	428b      	cmp	r3, r1
 800c82a:	d1f9      	bne.n	800c820 <LinkedListGetPrevious+0xe>
 800c82c:	4770      	bx	lr
 800c82e:	4770      	bx	lr
        return NULL;
 800c830:	4608      	mov	r0, r1
 800c832:	4770      	bx	lr

0800c834 <LinkedListRemove>:
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
    if( ( list == NULL ) || ( element == NULL ) )
 800c834:	b1b8      	cbz	r0, 800c866 <LinkedListRemove+0x32>
{
 800c836:	b538      	push	{r3, r4, r5, lr}
 800c838:	460c      	mov	r4, r1
 800c83a:	4605      	mov	r5, r0
    if( ( list == NULL ) || ( element == NULL ) )
 800c83c:	b1a9      	cbz	r1, 800c86a <LinkedListRemove+0x36>
    {
        return false;
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 800c83e:	f7ff ffe8 	bl	800c812 <LinkedListGetPrevious>

    if( list->First == element )
 800c842:	682b      	ldr	r3, [r5, #0]
 800c844:	42a3      	cmp	r3, r4
 800c846:	d009      	beq.n	800c85c <LinkedListRemove+0x28>
    {
        list->First = element->Next;
    }

    if( list->Last == element )
 800c848:	686b      	ldr	r3, [r5, #4]
 800c84a:	42a3      	cmp	r3, r4
 800c84c:	d009      	beq.n	800c862 <LinkedListRemove+0x2e>
    {
        list->Last = PrevElement;
    }

    if( PrevElement != NULL )
 800c84e:	b108      	cbz	r0, 800c854 <LinkedListRemove+0x20>
    {
        PrevElement->Next = element->Next;
 800c850:	6823      	ldr	r3, [r4, #0]
 800c852:	6003      	str	r3, [r0, #0]
    }

    element->Next = NULL;
 800c854:	2300      	movs	r3, #0
 800c856:	6023      	str	r3, [r4, #0]

    return true;
 800c858:	2001      	movs	r0, #1
}
 800c85a:	bd38      	pop	{r3, r4, r5, pc}
        list->First = element->Next;
 800c85c:	6823      	ldr	r3, [r4, #0]
 800c85e:	602b      	str	r3, [r5, #0]
 800c860:	e7f2      	b.n	800c848 <LinkedListRemove+0x14>
        list->Last = PrevElement;
 800c862:	6068      	str	r0, [r5, #4]
 800c864:	e7f3      	b.n	800c84e <LinkedListRemove+0x1a>
        return false;
 800c866:	2000      	movs	r0, #0
}
 800c868:	4770      	bx	lr
        return false;
 800c86a:	2000      	movs	r0, #0
 800c86c:	e7f5      	b.n	800c85a <LinkedListRemove+0x26>
	...

0800c870 <IsSticky>:
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
    switch( cid )
 800c870:	2811      	cmp	r0, #17
 800c872:	d808      	bhi.n	800c886 <IsSticky+0x16>
 800c874:	2301      	movs	r3, #1
 800c876:	fa03 f000 	lsl.w	r0, r3, r0
 800c87a:	4b04      	ldr	r3, [pc, #16]	; (800c88c <IsSticky+0x1c>)
 800c87c:	4218      	tst	r0, r3
 800c87e:	bf14      	ite	ne
 800c880:	2001      	movne	r0, #1
 800c882:	2000      	moveq	r0, #0
 800c884:	4770      	bx	lr
#if (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
        default:
            return false;
 800c886:	2000      	movs	r0, #0
    }
}
 800c888:	4770      	bx	lr
 800c88a:	bf00      	nop
 800c88c:	00020720 	.word	0x00020720

0800c890 <IsConfirmationRequired>:
            return true;
#endif /* LORAMAC_VERSION */
        default:
            return false;
    }
}
 800c890:	2000      	movs	r0, #0
 800c892:	4770      	bx	lr

0800c894 <FreeMacCommandSlot>:
    if( slot == NULL )
 800c894:	b130      	cbz	r0, 800c8a4 <FreeMacCommandSlot+0x10>
{
 800c896:	b508      	push	{r3, lr}
    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 800c898:	2210      	movs	r2, #16
 800c89a:	2100      	movs	r1, #0
 800c89c:	f004 fe45 	bl	801152a <memset1>
    return true;
 800c8a0:	2001      	movs	r0, #1
}
 800c8a2:	bd08      	pop	{r3, pc}
        return false;
 800c8a4:	2000      	movs	r0, #0
}
 800c8a6:	4770      	bx	lr

0800c8a8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 800c8a8:	b510      	push	{r4, lr}
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 800c8aa:	4c06      	ldr	r4, [pc, #24]	; (800c8c4 <LoRaMacCommandsInit+0x1c>)
 800c8ac:	f44f 7203 	mov.w	r2, #524	; 0x20c
 800c8b0:	2100      	movs	r1, #0
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	f004 fe39 	bl	801152a <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 800c8b8:	4620      	mov	r0, r4
 800c8ba:	f7ff ff8f 	bl	800c7dc <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c8be:	2000      	movs	r0, #0
 800c8c0:	bd10      	pop	{r4, pc}
 800c8c2:	bf00      	nop
 800c8c4:	20000e00 	.word	0x20000e00

0800c8c8 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
    if( payload == NULL )
 800c8c8:	b321      	cbz	r1, 800c914 <LoRaMacCommandsAddCmd+0x4c>
{
 800c8ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8cc:	4605      	mov	r5, r0
 800c8ce:	4614      	mov	r4, r2
 800c8d0:	460f      	mov	r7, r1
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 800c8d2:	f7ff ff6f 	bl	800c7b4 <MallocNewMacCommandSlot>

    if( newCmd == NULL )
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	b1f0      	cbz	r0, 800c918 <LoRaMacCommandsAddCmd+0x50>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 800c8da:	4601      	mov	r1, r0
 800c8dc:	4810      	ldr	r0, [pc, #64]	; (800c920 <LoRaMacCommandsAddCmd+0x58>)
 800c8de:	f7ff ff85 	bl	800c7ec <LinkedListAdd>
 800c8e2:	b1d8      	cbz	r0, 800c91c <LoRaMacCommandsAddCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    // Set Values
    newCmd->CID = cid;
 800c8e4:	7135      	strb	r5, [r6, #4]
    newCmd->PayloadSize = payloadSize;
 800c8e6:	60b4      	str	r4, [r6, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 800c8e8:	b2a2      	uxth	r2, r4
 800c8ea:	4639      	mov	r1, r7
 800c8ec:	1d70      	adds	r0, r6, #5
 800c8ee:	f004 fe04 	bl	80114fa <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 800c8f2:	4628      	mov	r0, r5
 800c8f4:	f7ff ffbc 	bl	800c870 <IsSticky>
 800c8f8:	7330      	strb	r0, [r6, #12]
    newCmd->IsConfirmationRequired = IsConfirmationRequired( cid );
 800c8fa:	4628      	mov	r0, r5
 800c8fc:	f7ff ffc8 	bl	800c890 <IsConfirmationRequired>
 800c900:	7370      	strb	r0, [r6, #13]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 800c902:	4b07      	ldr	r3, [pc, #28]	; (800c920 <LoRaMacCommandsAddCmd+0x58>)
 800c904:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c908:	4414      	add	r4, r2
 800c90a:	3401      	adds	r4, #1
 800c90c:	f8c3 4208 	str.w	r4, [r3, #520]	; 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 800c910:	2000      	movs	r0, #0
}
 800c912:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c914:	2001      	movs	r0, #1
}
 800c916:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 800c918:	2002      	movs	r0, #2
 800c91a:	e7fa      	b.n	800c912 <LoRaMacCommandsAddCmd+0x4a>
        return LORAMAC_COMMANDS_ERROR;
 800c91c:	2005      	movs	r0, #5
 800c91e:	e7f8      	b.n	800c912 <LoRaMacCommandsAddCmd+0x4a>
 800c920:	20000e00 	.word	0x20000e00

0800c924 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
    if( macCmd == NULL )
 800c924:	b1a0      	cbz	r0, 800c950 <LoRaMacCommandsRemoveCmd+0x2c>
{
 800c926:	b510      	push	{r4, lr}
 800c928:	4604      	mov	r4, r0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 800c92a:	4601      	mov	r1, r0
 800c92c:	480b      	ldr	r0, [pc, #44]	; (800c95c <LoRaMacCommandsRemoveCmd+0x38>)
 800c92e:	f7ff ff81 	bl	800c834 <LinkedListRemove>
 800c932:	b178      	cbz	r0, 800c954 <LoRaMacCommandsRemoveCmd+0x30>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 800c934:	68a1      	ldr	r1, [r4, #8]
 800c936:	4a09      	ldr	r2, [pc, #36]	; (800c95c <LoRaMacCommandsRemoveCmd+0x38>)
 800c938:	f8d2 3208 	ldr.w	r3, [r2, #520]	; 0x208
 800c93c:	1a5b      	subs	r3, r3, r1
 800c93e:	3b01      	subs	r3, #1
 800c940:	f8c2 3208 	str.w	r3, [r2, #520]	; 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 800c944:	4620      	mov	r0, r4
 800c946:	f7ff ffa5 	bl	800c894 <FreeMacCommandSlot>
 800c94a:	b128      	cbz	r0, 800c958 <LoRaMacCommandsRemoveCmd+0x34>
    {
        return LORAMAC_COMMANDS_ERROR;
    }

    return LORAMAC_COMMANDS_SUCCESS;
 800c94c:	2000      	movs	r0, #0
}
 800c94e:	bd10      	pop	{r4, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c950:	2001      	movs	r0, #1
}
 800c952:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c954:	2003      	movs	r0, #3
 800c956:	e7fa      	b.n	800c94e <LoRaMacCommandsRemoveCmd+0x2a>
        return LORAMAC_COMMANDS_ERROR;
 800c958:	2005      	movs	r0, #5
 800c95a:	e7f8      	b.n	800c94e <LoRaMacCommandsRemoveCmd+0x2a>
 800c95c:	20000e00 	.word	0x20000e00

0800c960 <LoRaMacCommandsGetCmd>:
LoRaMacCommandStatus_t LoRaMacCommandsGetCmd( uint8_t cid, MacCommand_t** macCmd )
{
    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c960:	4b06      	ldr	r3, [pc, #24]	; (800c97c <LoRaMacCommandsGetCmd+0x1c>)
 800c962:	681b      	ldr	r3, [r3, #0]

    // Loop through all elements until we find the element with the given CID
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c964:	e000      	b.n	800c968 <LoRaMacCommandsGetCmd+0x8>
    {
        curElement = curElement->Next;
 800c966:	681b      	ldr	r3, [r3, #0]
    while( ( curElement != NULL ) && ( curElement->CID != cid ) )
 800c968:	b113      	cbz	r3, 800c970 <LoRaMacCommandsGetCmd+0x10>
 800c96a:	791a      	ldrb	r2, [r3, #4]
 800c96c:	4282      	cmp	r2, r0
 800c96e:	d1fa      	bne.n	800c966 <LoRaMacCommandsGetCmd+0x6>
    }

    // Update the pointer anyway
    *macCmd = curElement;
 800c970:	600b      	str	r3, [r1, #0]

    // Handle error in case if we reached the end without finding it.
    if( curElement == NULL )
 800c972:	b10b      	cbz	r3, 800c978 <LoRaMacCommandsGetCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
    }
    return LORAMAC_COMMANDS_SUCCESS;
 800c974:	2000      	movs	r0, #0
 800c976:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 800c978:	2003      	movs	r0, #3
}
 800c97a:	4770      	bx	lr
 800c97c:	20000e00 	.word	0x20000e00

0800c980 <LoRaMacCommandsRemoveNoneStickyCmds>:
{
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c980:	4b0a      	ldr	r3, [pc, #40]	; (800c9ac <LoRaMacCommandsRemoveNoneStickyCmds+0x2c>)
 800c982:	6818      	ldr	r0, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c984:	b120      	cbz	r0, 800c990 <LoRaMacCommandsRemoveNoneStickyCmds+0x10>
    {
        if( curElement->IsSticky == false )
 800c986:	7b03      	ldrb	r3, [r0, #12]
 800c988:	b11b      	cbz	r3, 800c992 <LoRaMacCommandsRemoveNoneStickyCmds+0x12>
            LoRaMacCommandsRemoveCmd( curElement );
            curElement = nexElement;
        }
        else
        {
            curElement = curElement->Next;
 800c98a:	6800      	ldr	r0, [r0, #0]
 800c98c:	e7fa      	b.n	800c984 <LoRaMacCommandsRemoveNoneStickyCmds+0x4>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c98e:	bd10      	pop	{r4, pc}
 800c990:	4770      	bx	lr
{
 800c992:	b510      	push	{r4, lr}
            nexElement = curElement->Next;
 800c994:	6804      	ldr	r4, [r0, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 800c996:	f7ff ffc5 	bl	800c924 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 800c99a:	4620      	mov	r0, r4
    while( curElement != NULL )
 800c99c:	2800      	cmp	r0, #0
 800c99e:	d0f6      	beq.n	800c98e <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        if( curElement->IsSticky == false )
 800c9a0:	7b03      	ldrb	r3, [r0, #12]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d0f6      	beq.n	800c994 <LoRaMacCommandsRemoveNoneStickyCmds+0x14>
            curElement = curElement->Next;
 800c9a6:	6800      	ldr	r0, [r0, #0]
 800c9a8:	e7f8      	b.n	800c99c <LoRaMacCommandsRemoveNoneStickyCmds+0x1c>
 800c9aa:	bf00      	nop
 800c9ac:	20000e00 	.word	0x20000e00

0800c9b0 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 800c9b0:	b570      	push	{r4, r5, r6, lr}
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 800c9b2:	4b0b      	ldr	r3, [pc, #44]	; (800c9e0 <LoRaMacCommandsRemoveStickyAnsCmds+0x30>)
 800c9b4:	681c      	ldr	r4, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 800c9b6:	e000      	b.n	800c9ba <LoRaMacCommandsRemoveStickyAnsCmds+0xa>
{
 800c9b8:	4634      	mov	r4, r6
    while( curElement != NULL )
 800c9ba:	b17c      	cbz	r4, 800c9dc <LoRaMacCommandsRemoveStickyAnsCmds+0x2c>
    {
        nexElement = curElement->Next;
 800c9bc:	6826      	ldr	r6, [r4, #0]
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c9be:	7925      	ldrb	r5, [r4, #4]
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	f7ff ff55 	bl	800c870 <IsSticky>
 800c9c6:	2800      	cmp	r0, #0
 800c9c8:	d0f6      	beq.n	800c9b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
            ( IsConfirmationRequired( curElement->CID ) == false ) )
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7ff ff60 	bl	800c890 <IsConfirmationRequired>
        if( ( IsSticky( curElement->CID ) == true ) &&
 800c9d0:	2800      	cmp	r0, #0
 800c9d2:	d1f1      	bne.n	800c9b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f7ff ffa5 	bl	800c924 <LoRaMacCommandsRemoveCmd>
 800c9da:	e7ed      	b.n	800c9b8 <LoRaMacCommandsRemoveStickyAnsCmds+0x8>
        }
        curElement = nexElement;
    }

    return LORAMAC_COMMANDS_SUCCESS;
}
 800c9dc:	2000      	movs	r0, #0
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	20000e00 	.word	0x20000e00

0800c9e4 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
    if( size == NULL )
 800c9e4:	b128      	cbz	r0, 800c9f2 <LoRaMacCommandsGetSizeSerializedCmds+0xe>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }
    *size = CommandsCtx.SerializedCmdsSize;
 800c9e6:	4a04      	ldr	r2, [pc, #16]	; (800c9f8 <LoRaMacCommandsGetSizeSerializedCmds+0x14>)
 800c9e8:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800c9ec:	6002      	str	r2, [r0, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 800c9ee:	2000      	movs	r0, #0
 800c9f0:	4770      	bx	lr
        return LORAMAC_COMMANDS_ERROR_NPE;
 800c9f2:	2001      	movs	r0, #1
}
 800c9f4:	4770      	bx	lr
 800c9f6:	bf00      	nop
 800c9f8:	20000e00 	.word	0x20000e00

0800c9fc <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 800c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 800ca00:	4b16      	ldr	r3, [pc, #88]	; (800ca5c <LoRaMacCommandsSerializeCmds+0x60>)
 800ca02:	681c      	ldr	r4, [r3, #0]
    MacCommand_t* nextElement;
    uint8_t itr = 0;

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 800ca04:	b32a      	cbz	r2, 800ca52 <LoRaMacCommandsSerializeCmds+0x56>
 800ca06:	4607      	mov	r7, r0
 800ca08:	4688      	mov	r8, r1
 800ca0a:	4616      	mov	r6, r2
 800ca0c:	b319      	cbz	r1, 800ca56 <LoRaMacCommandsSerializeCmds+0x5a>
    uint8_t itr = 0;
 800ca0e:	2100      	movs	r1, #0
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
    }

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
 800ca10:	b194      	cbz	r4, 800ca38 <LoRaMacCommandsSerializeCmds+0x3c>
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 800ca12:	1a7a      	subs	r2, r7, r1
 800ca14:	68a3      	ldr	r3, [r4, #8]
 800ca16:	3301      	adds	r3, #1
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d30d      	bcc.n	800ca38 <LoRaMacCommandsSerializeCmds+0x3c>
        {
            buffer[itr++] = curElement->CID;
 800ca1c:	1c4d      	adds	r5, r1, #1
 800ca1e:	b2ed      	uxtb	r5, r5
 800ca20:	7923      	ldrb	r3, [r4, #4]
 800ca22:	5473      	strb	r3, [r6, r1]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 800ca24:	8922      	ldrh	r2, [r4, #8]
 800ca26:	1d61      	adds	r1, r4, #5
 800ca28:	1970      	adds	r0, r6, r5
 800ca2a:	f004 fd66 	bl	80114fa <memcpy1>
            itr += curElement->PayloadSize;
 800ca2e:	68a3      	ldr	r3, [r4, #8]
 800ca30:	441d      	add	r5, r3
 800ca32:	b2e9      	uxtb	r1, r5
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 800ca34:	6824      	ldr	r4, [r4, #0]
 800ca36:	e7eb      	b.n	800ca10 <LoRaMacCommandsSerializeCmds+0x14>
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 800ca38:	b12c      	cbz	r4, 800ca46 <LoRaMacCommandsSerializeCmds+0x4a>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 800ca3a:	6825      	ldr	r5, [r4, #0]
        LoRaMacCommandsRemoveCmd( curElement );
 800ca3c:	4620      	mov	r0, r4
 800ca3e:	f7ff ff71 	bl	800c924 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 800ca42:	462c      	mov	r4, r5
 800ca44:	e7f8      	b.n	800ca38 <LoRaMacCommandsSerializeCmds+0x3c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 800ca46:	4640      	mov	r0, r8
 800ca48:	f7ff ffcc 	bl	800c9e4 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 800ca4c:	2000      	movs	r0, #0
}
 800ca4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_COMMANDS_ERROR_NPE;
 800ca52:	2001      	movs	r0, #1
 800ca54:	e7fb      	b.n	800ca4e <LoRaMacCommandsSerializeCmds+0x52>
 800ca56:	2001      	movs	r0, #1
 800ca58:	e7f9      	b.n	800ca4e <LoRaMacCommandsSerializeCmds+0x52>
 800ca5a:	bf00      	nop
 800ca5c:	20000e00 	.word	0x20000e00

0800ca60 <LoRaMacCommandsGetCmdSize>:
uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
    uint8_t cidSize = 0;

    // Decode Frame MAC commands
    switch( cid )
 800ca60:	1e83      	subs	r3, r0, #2
 800ca62:	2b11      	cmp	r3, #17
 800ca64:	d80a      	bhi.n	800ca7c <LoRaMacCommandsGetCmdSize+0x1c>
 800ca66:	e8df f003 	tbb	[pc, r3]
 800ca6a:	0b23      	.short	0x0b23
 800ca6c:	110f240d 	.word	0x110f240d
 800ca70:	09171513 	.word	0x09171513
 800ca74:	09091909 	.word	0x09091909
 800ca78:	211f1d1b 	.word	0x211f1d1b
 800ca7c:	2000      	movs	r0, #0
 800ca7e:	4770      	bx	lr
            break;
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 800ca80:	2005      	movs	r0, #5
            break;
 800ca82:	4770      	bx	lr
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 800ca84:	2002      	movs	r0, #2
            break;
 800ca86:	4770      	bx	lr
            break;
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 800ca88:	2001      	movs	r0, #1
            break;
 800ca8a:	4770      	bx	lr
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 800ca8c:	2006      	movs	r0, #6
            break;
 800ca8e:	4770      	bx	lr
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 800ca90:	2002      	movs	r0, #2
            break;
 800ca92:	4770      	bx	lr
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 800ca94:	2002      	movs	r0, #2
            break;
 800ca96:	4770      	bx	lr
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 800ca98:	2005      	movs	r0, #5
            break;
 800ca9a:	4770      	bx	lr
        }
#endif /* LORAMAC_VERSION */
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 800ca9c:	2006      	movs	r0, #6
            break;
 800ca9e:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 800caa0:	2001      	movs	r0, #1
            break;
 800caa2:	4770      	bx	lr
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 800caa4:	2005      	movs	r0, #5
            break;
 800caa6:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 800caa8:	2004      	movs	r0, #4
            break;
 800caaa:	4770      	bx	lr
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 800caac:	2004      	movs	r0, #4
            break;
 800caae:	4770      	bx	lr
            cidSize = 3;
 800cab0:	2003      	movs	r0, #3
            // Unknown command. ABORT MAC commands processing
            break;
        }
    }
    return cidSize;
}
 800cab2:	4770      	bx	lr

0800cab4 <IncreaseBufferPointer>:
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 800cab4:	4b03      	ldr	r3, [pc, #12]	; (800cac4 <IncreaseBufferPointer+0x10>)
 800cab6:	4298      	cmp	r0, r3
 800cab8:	d001      	beq.n	800cabe <IncreaseBufferPointer+0xa>
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
    }
    else
    {
        // Increase
        bufferPointer++;
 800caba:	3004      	adds	r0, #4
 800cabc:	4770      	bx	lr
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cabe:	4802      	ldr	r0, [pc, #8]	; (800cac8 <IncreaseBufferPointer+0x14>)
    }
    return bufferPointer;
}
 800cac0:	4770      	bx	lr
 800cac2:	bf00      	nop
 800cac4:	20001028 	.word	0x20001028
 800cac8:	20001018 	.word	0x20001018

0800cacc <IsListEmpty>:
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
    if( count == 0 )
 800cacc:	b108      	cbz	r0, 800cad2 <IsListEmpty+0x6>
    {
        return true;
    }
    return false;
 800cace:	2000      	movs	r0, #0
 800cad0:	4770      	bx	lr
        return true;
 800cad2:	2001      	movs	r0, #1
}
 800cad4:	4770      	bx	lr

0800cad6 <IsListFull>:

static bool IsListFull( uint8_t count )
{
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 800cad6:	2804      	cmp	r0, #4
 800cad8:	d801      	bhi.n	800cade <IsListFull+0x8>
    {
        return true;
    }
    return false;
 800cada:	2000      	movs	r0, #0
 800cadc:	4770      	bx	lr
        return true;
 800cade:	2001      	movs	r0, #1
}
 800cae0:	4770      	bx	lr
	...

0800cae4 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 800cae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cae6:	4606      	mov	r6, r0
 800cae8:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = bufferStart;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800caea:	4b0d      	ldr	r3, [pc, #52]	; (800cb20 <GetElement+0x3c>)
 800caec:	f893 7020 	ldrb.w	r7, [r3, #32]
 800caf0:	4638      	mov	r0, r7
 800caf2:	f7ff ffeb 	bl	800cacc <IsListEmpty>
 800caf6:	b970      	cbnz	r0, 800cb16 <GetElement+0x32>
    {
        return NULL;
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800caf8:	2500      	movs	r5, #0
 800cafa:	42af      	cmp	r7, r5
 800cafc:	d909      	bls.n	800cb12 <GetElement+0x2e>
    {
        if( element->Request == request )
 800cafe:	7823      	ldrb	r3, [r4, #0]
 800cb00:	42b3      	cmp	r3, r6
 800cb02:	d00a      	beq.n	800cb1a <GetElement+0x36>
        {
            // We have found the element
            return element;
        }
        element = IncreaseBufferPointer( element );
 800cb04:	4620      	mov	r0, r4
 800cb06:	f7ff ffd5 	bl	800cab4 <IncreaseBufferPointer>
 800cb0a:	4604      	mov	r4, r0
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 800cb0c:	3501      	adds	r5, #1
 800cb0e:	b2ed      	uxtb	r5, r5
 800cb10:	e7f3      	b.n	800cafa <GetElement+0x16>
    }

    return NULL;
 800cb12:	2000      	movs	r0, #0
}
 800cb14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NULL;
 800cb16:	2000      	movs	r0, #0
 800cb18:	e7fc      	b.n	800cb14 <GetElement+0x30>
            return element;
 800cb1a:	4620      	mov	r0, r4
 800cb1c:	e7fa      	b.n	800cb14 <GetElement+0x30>
 800cb1e:	bf00      	nop
 800cb20:	2000100c 	.word	0x2000100c

0800cb24 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 800cb24:	b510      	push	{r4, lr}
    ConfirmQueueCtx.Primitives = primitives;
 800cb26:	4c08      	ldr	r4, [pc, #32]	; (800cb48 <LoRaMacConfirmQueueInit+0x24>)
 800cb28:	6020      	str	r0, [r4, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	f884 3020 	strb.w	r3, [r4, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cb30:	f104 000c 	add.w	r0, r4, #12
 800cb34:	6060      	str	r0, [r4, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 800cb36:	60a0      	str	r0, [r4, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 800cb38:	2214      	movs	r2, #20
 800cb3a:	21ff      	movs	r1, #255	; 0xff
 800cb3c:	f004 fcf5 	bl	801152a <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cb40:	2301      	movs	r3, #1
 800cb42:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
}
 800cb46:	bd10      	pop	{r4, pc}
 800cb48:	2000100c 	.word	0x2000100c

0800cb4c <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 800cb4c:	b538      	push	{r3, r4, r5, lr}
 800cb4e:	4605      	mov	r5, r0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cb50:	4b0f      	ldr	r3, [pc, #60]	; (800cb90 <LoRaMacConfirmQueueAdd+0x44>)
 800cb52:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cb56:	f7ff ffbe 	bl	800cad6 <IsListFull>
 800cb5a:	b9b8      	cbnz	r0, 800cb8c <LoRaMacConfirmQueueAdd+0x40>
        // Protect the buffer against overwrites
        return false;
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 800cb5c:	4c0c      	ldr	r4, [pc, #48]	; (800cb90 <LoRaMacConfirmQueueAdd+0x44>)
 800cb5e:	68a3      	ldr	r3, [r4, #8]
 800cb60:	782a      	ldrb	r2, [r5, #0]
 800cb62:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 800cb64:	68a3      	ldr	r3, [r4, #8]
 800cb66:	786a      	ldrb	r2, [r5, #1]
 800cb68:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 800cb6a:	68a3      	ldr	r3, [r4, #8]
 800cb6c:	78ea      	ldrb	r2, [r5, #3]
 800cb6e:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 800cb70:	68a3      	ldr	r3, [r4, #8]
 800cb72:	78aa      	ldrb	r2, [r5, #2]
 800cb74:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 800cb76:	f894 3020 	ldrb.w	r3, [r4, #32]
 800cb7a:	3301      	adds	r3, #1
 800cb7c:	f884 3020 	strb.w	r3, [r4, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 800cb80:	68a0      	ldr	r0, [r4, #8]
 800cb82:	f7ff ff97 	bl	800cab4 <IncreaseBufferPointer>
 800cb86:	60a0      	str	r0, [r4, #8]

    return true;
 800cb88:	2001      	movs	r0, #1
}
 800cb8a:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cb8c:	2000      	movs	r0, #0
 800cb8e:	e7fc      	b.n	800cb8a <LoRaMacConfirmQueueAdd+0x3e>
 800cb90:	2000100c 	.word	0x2000100c

0800cb94 <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 800cb94:	b538      	push	{r3, r4, r5, lr}
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800cb96:	4b09      	ldr	r3, [pc, #36]	; (800cbbc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cb98:	f893 4020 	ldrb.w	r4, [r3, #32]
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f7ff ff95 	bl	800cacc <IsListEmpty>
 800cba2:	b948      	cbnz	r0, 800cbb8 <LoRaMacConfirmQueueRemoveFirst+0x24>
    {
        return false;
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 800cba4:	4d05      	ldr	r5, [pc, #20]	; (800cbbc <LoRaMacConfirmQueueRemoveFirst+0x28>)
 800cba6:	3c01      	subs	r4, #1
 800cba8:	f885 4020 	strb.w	r4, [r5, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 800cbac:	6868      	ldr	r0, [r5, #4]
 800cbae:	f7ff ff81 	bl	800cab4 <IncreaseBufferPointer>
 800cbb2:	6068      	str	r0, [r5, #4]

    return true;
 800cbb4:	2001      	movs	r0, #1
}
 800cbb6:	bd38      	pop	{r3, r4, r5, pc}
        return false;
 800cbb8:	2000      	movs	r0, #0
 800cbba:	e7fc      	b.n	800cbb6 <LoRaMacConfirmQueueRemoveFirst+0x22>
 800cbbc:	2000100c 	.word	0x2000100c

0800cbc0 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	4605      	mov	r5, r0
 800cbc4:	460c      	mov	r4, r1
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cbc6:	4b08      	ldr	r3, [pc, #32]	; (800cbe8 <LoRaMacConfirmQueueSetStatus+0x28>)
 800cbc8:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cbcc:	f7ff ff7e 	bl	800cacc <IsListEmpty>
 800cbd0:	b948      	cbnz	r0, 800cbe6 <LoRaMacConfirmQueueSetStatus+0x26>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cbd2:	4b05      	ldr	r3, [pc, #20]	; (800cbe8 <LoRaMacConfirmQueueSetStatus+0x28>)
 800cbd4:	689a      	ldr	r2, [r3, #8]
 800cbd6:	6859      	ldr	r1, [r3, #4]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f7ff ff83 	bl	800cae4 <GetElement>
        if( element != NULL )
 800cbde:	b110      	cbz	r0, 800cbe6 <LoRaMacConfirmQueueSetStatus+0x26>
        {
            element->Status = status;
 800cbe0:	7045      	strb	r5, [r0, #1]
            element->ReadyToHandle = true;
 800cbe2:	2201      	movs	r2, #1
 800cbe4:	7082      	strb	r2, [r0, #2]
        }
    }
}
 800cbe6:	bd38      	pop	{r3, r4, r5, pc}
 800cbe8:	2000100c 	.word	0x2000100c

0800cbec <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 800cbec:	b510      	push	{r4, lr}
 800cbee:	4604      	mov	r4, r0
    MlmeConfirmQueue_t* element = NULL;

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cbf0:	4b09      	ldr	r3, [pc, #36]	; (800cc18 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cbf2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cbf6:	f7ff ff69 	bl	800cacc <IsListEmpty>
 800cbfa:	b940      	cbnz	r0, 800cc0e <LoRaMacConfirmQueueGetStatus+0x22>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 800cbfc:	4b06      	ldr	r3, [pc, #24]	; (800cc18 <LoRaMacConfirmQueueGetStatus+0x2c>)
 800cbfe:	689a      	ldr	r2, [r3, #8]
 800cc00:	6859      	ldr	r1, [r3, #4]
 800cc02:	4620      	mov	r0, r4
 800cc04:	f7ff ff6e 	bl	800cae4 <GetElement>
        if( element != NULL )
 800cc08:	b118      	cbz	r0, 800cc12 <LoRaMacConfirmQueueGetStatus+0x26>
        {
            return element->Status;
 800cc0a:	7840      	ldrb	r0, [r0, #1]
 800cc0c:	e000      	b.n	800cc10 <LoRaMacConfirmQueueGetStatus+0x24>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc0e:	2001      	movs	r0, #1
}
 800cc10:	bd10      	pop	{r4, pc}
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 800cc12:	2001      	movs	r0, #1
 800cc14:	e7fc      	b.n	800cc10 <LoRaMacConfirmQueueGetStatus+0x24>
 800cc16:	bf00      	nop
 800cc18:	2000100c 	.word	0x2000100c

0800cc1c <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 800cc1c:	b538      	push	{r3, r4, r5, lr}
 800cc1e:	4605      	mov	r5, r0
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 800cc20:	4b0c      	ldr	r3, [pc, #48]	; (800cc54 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800cc22:	685c      	ldr	r4, [r3, #4]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 800cc24:	f883 0021 	strb.w	r0, [r3, #33]	; 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 800cc28:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cc2c:	f7ff ff4e 	bl	800cacc <IsListEmpty>
 800cc30:	b150      	cbz	r0, 800cc48 <LoRaMacConfirmQueueSetStatusCmn+0x2c>
                element->ReadyToHandle = true;
            }
            element = IncreaseBufferPointer( element );
        }while( element != ConfirmQueueCtx.BufferEnd );
    }
}
 800cc32:	bd38      	pop	{r3, r4, r5, pc}
                element->ReadyToHandle = true;
 800cc34:	2301      	movs	r3, #1
 800cc36:	70a3      	strb	r3, [r4, #2]
            element = IncreaseBufferPointer( element );
 800cc38:	4620      	mov	r0, r4
 800cc3a:	f7ff ff3b 	bl	800cab4 <IncreaseBufferPointer>
 800cc3e:	4604      	mov	r4, r0
        }while( element != ConfirmQueueCtx.BufferEnd );
 800cc40:	4b04      	ldr	r3, [pc, #16]	; (800cc54 <LoRaMacConfirmQueueSetStatusCmn+0x38>)
 800cc42:	689b      	ldr	r3, [r3, #8]
 800cc44:	4283      	cmp	r3, r0
 800cc46:	d0f4      	beq.n	800cc32 <LoRaMacConfirmQueueSetStatusCmn+0x16>
            element->Status = status;
 800cc48:	7065      	strb	r5, [r4, #1]
            if( element->RestrictCommonReadyToHandle == false )
 800cc4a:	78e3      	ldrb	r3, [r4, #3]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d1f3      	bne.n	800cc38 <LoRaMacConfirmQueueSetStatusCmn+0x1c>
 800cc50:	e7f0      	b.n	800cc34 <LoRaMacConfirmQueueSetStatusCmn+0x18>
 800cc52:	bf00      	nop
 800cc54:	2000100c 	.word	0x2000100c

0800cc58 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 800cc58:	b508      	push	{r3, lr}
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 800cc5a:	4b04      	ldr	r3, [pc, #16]	; (800cc6c <LoRaMacConfirmQueueIsCmdActive+0x14>)
 800cc5c:	689a      	ldr	r2, [r3, #8]
 800cc5e:	6859      	ldr	r1, [r3, #4]
 800cc60:	f7ff ff40 	bl	800cae4 <GetElement>
 800cc64:	b100      	cbz	r0, 800cc68 <LoRaMacConfirmQueueIsCmdActive+0x10>
    {
        return true;
 800cc66:	2001      	movs	r0, #1
    }
    return false;
}
 800cc68:	bd08      	pop	{r3, pc}
 800cc6a:	bf00      	nop
 800cc6c:	2000100c 	.word	0x2000100c

0800cc70 <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 800cc70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc72:	b083      	sub	sp, #12
 800cc74:	4606      	mov	r6, r0
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 800cc76:	4b19      	ldr	r3, [pc, #100]	; (800ccdc <LoRaMacConfirmQueueHandleCb+0x6c>)
 800cc78:	f893 7020 	ldrb.w	r7, [r3, #32]
    bool readyToHandle = false;
    MlmeConfirmQueue_t mlmeConfirmToStore;

    memset1( ( uint8_t* ) &mlmeConfirmToStore, 0, sizeof( MlmeConfirmQueue_t ) );
 800cc7c:	2204      	movs	r2, #4
 800cc7e:	2100      	movs	r1, #0
 800cc80:	eb0d 0002 	add.w	r0, sp, r2
 800cc84:	f004 fc51 	bl	801152a <memset1>

    for( uint8_t i = 0; i < nbElements; i++ )
 800cc88:	2400      	movs	r4, #0
 800cc8a:	e00d      	b.n	800cca8 <LoRaMacConfirmQueueHandleCb+0x38>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 800cc8c:	781a      	ldrb	r2, [r3, #0]
 800cc8e:	f88d 2004 	strb.w	r2, [sp, #4]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 800cc92:	785a      	ldrb	r2, [r3, #1]
 800cc94:	f88d 2005 	strb.w	r2, [sp, #5]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 800cc98:	78db      	ldrb	r3, [r3, #3]
 800cc9a:	f88d 3007 	strb.w	r3, [sp, #7]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 800cc9e:	f7ff ff79 	bl	800cb94 <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 800cca2:	b1a5      	cbz	r5, 800ccce <LoRaMacConfirmQueueHandleCb+0x5e>
    for( uint8_t i = 0; i < nbElements; i++ )
 800cca4:	3401      	adds	r4, #1
 800cca6:	b2e4      	uxtb	r4, r4
 800cca8:	42bc      	cmp	r4, r7
 800ccaa:	d214      	bcs.n	800ccd6 <LoRaMacConfirmQueueHandleCb+0x66>
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 800ccac:	4b0b      	ldr	r3, [pc, #44]	; (800ccdc <LoRaMacConfirmQueueHandleCb+0x6c>)
 800ccae:	685a      	ldr	r2, [r3, #4]
 800ccb0:	7812      	ldrb	r2, [r2, #0]
 800ccb2:	7032      	strb	r2, [r6, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 800ccb4:	685a      	ldr	r2, [r3, #4]
 800ccb6:	7852      	ldrb	r2, [r2, #1]
 800ccb8:	7072      	strb	r2, [r6, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 800ccba:	685b      	ldr	r3, [r3, #4]
 800ccbc:	789d      	ldrb	r5, [r3, #2]
        if( readyToHandle == true )
 800ccbe:	2d00      	cmp	r5, #0
 800ccc0:	d0e4      	beq.n	800cc8c <LoRaMacConfirmQueueHandleCb+0x1c>
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 800ccc2:	4b06      	ldr	r3, [pc, #24]	; (800ccdc <LoRaMacConfirmQueueHandleCb+0x6c>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	689b      	ldr	r3, [r3, #8]
 800ccc8:	4630      	mov	r0, r6
 800ccca:	4798      	blx	r3
 800cccc:	e7e7      	b.n	800cc9e <LoRaMacConfirmQueueHandleCb+0x2e>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 800ccce:	a801      	add	r0, sp, #4
 800ccd0:	f7ff ff3c 	bl	800cb4c <LoRaMacConfirmQueueAdd>
 800ccd4:	e7e6      	b.n	800cca4 <LoRaMacConfirmQueueHandleCb+0x34>
        }
    }
}
 800ccd6:	b003      	add	sp, #12
 800ccd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccda:	bf00      	nop
 800ccdc:	2000100c 	.word	0x2000100c

0800cce0 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
}
 800cce0:	4b01      	ldr	r3, [pc, #4]	; (800cce8 <LoRaMacConfirmQueueGetCnt+0x8>)
 800cce2:	f893 0020 	ldrb.w	r0, [r3, #32]
 800cce6:	4770      	bx	lr
 800cce8:	2000100c 	.word	0x2000100c

0800ccec <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 800ccec:	b508      	push	{r3, lr}
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 800ccee:	4b03      	ldr	r3, [pc, #12]	; (800ccfc <LoRaMacConfirmQueueIsFull+0x10>)
 800ccf0:	f893 0020 	ldrb.w	r0, [r3, #32]
 800ccf4:	f7ff feef 	bl	800cad6 <IsListFull>
    }
    else
    {
        return false;
    }
}
 800ccf8:	bd08      	pop	{r3, pc}
 800ccfa:	bf00      	nop
 800ccfc:	2000100c 	.word	0x2000100c

0800cd00 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 800cd00:	b410      	push	{r4}
 800cd02:	9c01      	ldr	r4, [sp, #4]
 800cd04:	9902      	ldr	r1, [sp, #8]
 800cd06:	9a03      	ldr	r2, [sp, #12]
    if( b0 == 0 )
 800cd08:	b1da      	cbz	r2, 800cd42 <PrepareB0+0x42>
 800cd0a:	4684      	mov	ip, r0
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    b0[0] = 0x49;
 800cd0c:	2049      	movs	r0, #73	; 0x49
 800cd0e:	7010      	strb	r0, [r2, #0]
        b0[2] = ( confFCnt >> 8 ) & 0xFF;
    }
    else
#endif /* LORAMAC_VERSION */
    {
        b0[1] = 0x00;
 800cd10:	2000      	movs	r0, #0
 800cd12:	7050      	strb	r0, [r2, #1]
        b0[2] = 0x00;
 800cd14:	7090      	strb	r0, [r2, #2]
    }

    b0[3] = 0x00;
 800cd16:	70d0      	strb	r0, [r2, #3]
    b0[4] = 0x00;
 800cd18:	7110      	strb	r0, [r2, #4]

    b0[5] = dir;
 800cd1a:	7153      	strb	r3, [r2, #5]

    b0[6] = devAddr & 0xFF;
 800cd1c:	7194      	strb	r4, [r2, #6]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 800cd1e:	0a23      	lsrs	r3, r4, #8
 800cd20:	71d3      	strb	r3, [r2, #7]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 800cd22:	0c23      	lsrs	r3, r4, #16
 800cd24:	7213      	strb	r3, [r2, #8]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 800cd26:	0e24      	lsrs	r4, r4, #24
 800cd28:	7254      	strb	r4, [r2, #9]

    b0[10] = fCnt & 0xFF;
 800cd2a:	7291      	strb	r1, [r2, #10]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 800cd2c:	0a0b      	lsrs	r3, r1, #8
 800cd2e:	72d3      	strb	r3, [r2, #11]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 800cd30:	0c0b      	lsrs	r3, r1, #16
 800cd32:	7313      	strb	r3, [r2, #12]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 800cd34:	0e09      	lsrs	r1, r1, #24
 800cd36:	7351      	strb	r1, [r2, #13]

    b0[14] = 0x00;
 800cd38:	7390      	strb	r0, [r2, #14]

    b0[15] = msgLen & 0xFF;
 800cd3a:	f882 c00f 	strb.w	ip, [r2, #15]

    return LORAMAC_CRYPTO_SUCCESS;
}
 800cd3e:	bc10      	pop	{r4}
 800cd40:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cd42:	2009      	movs	r0, #9
 800cd44:	e7fb      	b.n	800cd3e <PrepareB0+0x3e>
	...

0800cd48 <GetKeyAddrItem>:
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800cd48:	2300      	movs	r3, #0
 800cd4a:	2b01      	cmp	r3, #1
 800cd4c:	d80e      	bhi.n	800cd6c <GetKeyAddrItem+0x24>
    {
        if( KeyAddrList[i].AddrID == addrID )
 800cd4e:	469c      	mov	ip, r3
 800cd50:	4a07      	ldr	r2, [pc, #28]	; (800cd70 <GetKeyAddrItem+0x28>)
 800cd52:	f812 2023 	ldrb.w	r2, [r2, r3, lsl #2]
 800cd56:	4282      	cmp	r2, r0
 800cd58:	d002      	beq.n	800cd60 <GetKeyAddrItem+0x18>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 800cd5a:	3301      	adds	r3, #1
 800cd5c:	b2db      	uxtb	r3, r3
 800cd5e:	e7f4      	b.n	800cd4a <GetKeyAddrItem+0x2>
        {
            *item = &( KeyAddrList[i] );
 800cd60:	4b03      	ldr	r3, [pc, #12]	; (800cd70 <GetKeyAddrItem+0x28>)
 800cd62:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 800cd66:	600b      	str	r3, [r1, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 800cd68:	2000      	movs	r0, #0
 800cd6a:	4770      	bx	lr
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 800cd6c:	200b      	movs	r0, #11
}
 800cd6e:	4770      	bx	lr
 800cd70:	200000f8 	.word	0x200000f8

0800cd74 <GetLastFcntDown>:
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
    if( lastDown == NULL )
 800cd74:	b1f1      	cbz	r1, 800cdb4 <GetLastFcntDown+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }
    switch( fCntID )
 800cd76:	3801      	subs	r0, #1
 800cd78:	2803      	cmp	r0, #3
 800cd7a:	d81d      	bhi.n	800cdb8 <GetLastFcntDown+0x44>
 800cd7c:	e8df f000 	tbb	[pc, r0]
 800cd80:	140e0802 	.word	0x140e0802
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 800cd84:	4a0d      	ldr	r2, [pc, #52]	; (800cdbc <GetLastFcntDown+0x48>)
 800cd86:	6812      	ldr	r2, [r2, #0]
 800cd88:	6912      	ldr	r2, [r2, #16]
 800cd8a:	600a      	str	r2, [r1, #0]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
    }
    return LORAMAC_CRYPTO_SUCCESS;
 800cd8c:	2000      	movs	r0, #0
            break;
 800cd8e:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 800cd90:	4a0a      	ldr	r2, [pc, #40]	; (800cdbc <GetLastFcntDown+0x48>)
 800cd92:	6812      	ldr	r2, [r2, #0]
 800cd94:	6952      	ldr	r2, [r2, #20]
 800cd96:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800cd98:	2000      	movs	r0, #0
            break;
 800cd9a:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.FCntDown;
 800cd9c:	4a07      	ldr	r2, [pc, #28]	; (800cdbc <GetLastFcntDown+0x48>)
 800cd9e:	6812      	ldr	r2, [r2, #0]
 800cda0:	6992      	ldr	r2, [r2, #24]
 800cda2:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800cda4:	2000      	movs	r0, #0
            break;
 800cda6:	4770      	bx	lr
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 800cda8:	4a04      	ldr	r2, [pc, #16]	; (800cdbc <GetLastFcntDown+0x48>)
 800cdaa:	6812      	ldr	r2, [r2, #0]
 800cdac:	69d2      	ldr	r2, [r2, #28]
 800cdae:	600a      	str	r2, [r1, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 800cdb0:	2000      	movs	r0, #0
            break;
 800cdb2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cdb4:	2009      	movs	r0, #9
 800cdb6:	4770      	bx	lr
    switch( fCntID )
 800cdb8:	2005      	movs	r0, #5
}
 800cdba:	4770      	bx	lr
 800cdbc:	20001030 	.word	0x20001030

0800cdc0 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 800cdc0:	b510      	push	{r4, lr}
 800cdc2:	b082      	sub	sp, #8
 800cdc4:	460c      	mov	r4, r1
    uint32_t lastDown = 0;
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	9301      	str	r3, [sp, #4]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 800cdca:	a901      	add	r1, sp, #4
 800cdcc:	f7ff ffd2 	bl	800cd74 <GetLastFcntDown>
 800cdd0:	b948      	cbnz	r0, 800cde6 <CheckFCntDown+0x26>
    {
        return false;
    }
    if( ( currentDown > lastDown ) ||
 800cdd2:	9b01      	ldr	r3, [sp, #4]
 800cdd4:	42a3      	cmp	r3, r4
 800cdd6:	d309      	bcc.n	800cdec <CheckFCntDown+0x2c>
 800cdd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cddc:	d001      	beq.n	800cde2 <CheckFCntDown+0x22>
    {
        return true;
    }
    else
    {
        return false;
 800cdde:	2000      	movs	r0, #0
 800cde0:	e002      	b.n	800cde8 <CheckFCntDown+0x28>
        return true;
 800cde2:	2001      	movs	r0, #1
 800cde4:	e000      	b.n	800cde8 <CheckFCntDown+0x28>
        return false;
 800cde6:	2000      	movs	r0, #0
    }
}
 800cde8:	b002      	add	sp, #8
 800cdea:	bd10      	pop	{r4, pc}
        return true;
 800cdec:	2001      	movs	r0, #1
 800cdee:	e7fb      	b.n	800cde8 <CheckFCntDown+0x28>

0800cdf0 <UpdateFCntDown>:
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
    switch( fCntID )
 800cdf0:	3801      	subs	r0, #1
 800cdf2:	2803      	cmp	r0, #3
 800cdf4:	d815      	bhi.n	800ce22 <UpdateFCntDown+0x32>
 800cdf6:	e8df f000 	tbb	[pc, r0]
 800cdfa:	0702      	.short	0x0702
 800cdfc:	110c      	.short	0x110c
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 800cdfe:	4b09      	ldr	r3, [pc, #36]	; (800ce24 <UpdateFCntDown+0x34>)
 800ce00:	681b      	ldr	r3, [r3, #0]
 800ce02:	6119      	str	r1, [r3, #16]
            CryptoNvm->LastDownFCnt = currentDown;
 800ce04:	6219      	str	r1, [r3, #32]
            break;
 800ce06:	4770      	bx	lr
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 800ce08:	4b06      	ldr	r3, [pc, #24]	; (800ce24 <UpdateFCntDown+0x34>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6159      	str	r1, [r3, #20]
            CryptoNvm->LastDownFCnt = currentDown;
 800ce0e:	6219      	str	r1, [r3, #32]
            break;
 800ce10:	4770      	bx	lr
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 800ce12:	4b04      	ldr	r3, [pc, #16]	; (800ce24 <UpdateFCntDown+0x34>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	6199      	str	r1, [r3, #24]
            CryptoNvm->LastDownFCnt = currentDown;
 800ce18:	6219      	str	r1, [r3, #32]
            break;
 800ce1a:	4770      	bx	lr
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 800ce1c:	4b01      	ldr	r3, [pc, #4]	; (800ce24 <UpdateFCntDown+0x34>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	61d9      	str	r1, [r3, #28]
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
    }
}
 800ce22:	4770      	bx	lr
 800ce24:	20001030 	.word	0x20001030

0800ce28 <ResetFCnts>:
/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
    CryptoNvm->FCntList.FCntUp = 0;
 800ce28:	4b0a      	ldr	r3, [pc, #40]	; (800ce54 <ResetFCnts+0x2c>)
 800ce2a:	681a      	ldr	r2, [r3, #0]
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60d3      	str	r3, [r2, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce30:	f04f 31ff 	mov.w	r1, #4294967295
 800ce34:	6111      	str	r1, [r2, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce36:	6151      	str	r1, [r2, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800ce38:	6191      	str	r1, [r2, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 800ce3a:	6211      	str	r1, [r2, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	dd00      	ble.n	800ce42 <ResetFCnts+0x1a>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
    }
}
 800ce40:	4770      	bx	lr
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITIAL_VALUE;
 800ce42:	1d99      	adds	r1, r3, #6
 800ce44:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 800ce48:	f04f 30ff 	mov.w	r0, #4294967295
 800ce4c:	6048      	str	r0, [r1, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800ce4e:	3301      	adds	r3, #1
 800ce50:	e7f4      	b.n	800ce3c <ResetFCnts+0x14>
 800ce52:	bf00      	nop
 800ce54:	20001030 	.word	0x20001030

0800ce58 <IsJoinNonce10xOk>:

static bool IsJoinNonce10xOk( uint32_t joinNonce )
{
#if( USE_10X_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    return ( joinNonce > CryptoNvm->JoinNonce ) ? true : false;
 800ce58:	4b03      	ldr	r3, [pc, #12]	; (800ce68 <IsJoinNonce10xOk+0x10>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	689b      	ldr	r3, [r3, #8]
#else
    // Check if the JoinNonce is different from the previous one
    return( joinNonce != CryptoNvm->JoinNonce ) ? true : false;
#endif
}
 800ce5e:	4283      	cmp	r3, r0
 800ce60:	bf2c      	ite	cs
 800ce62:	2000      	movcs	r0, #0
 800ce64:	2001      	movcc	r0, #1
 800ce66:	4770      	bx	lr
 800ce68:	20001030 	.word	0x20001030

0800ce6c <ComputeCmacB0>:
{
 800ce6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce70:	b088      	sub	sp, #32
 800ce72:	9e11      	ldr	r6, [sp, #68]	; 0x44
    if( ( msg == 0 ) || ( cmac == 0 ) )
 800ce74:	b1f0      	cbz	r0, 800ceb4 <ComputeCmacB0+0x48>
 800ce76:	460c      	mov	r4, r1
 800ce78:	4615      	mov	r5, r2
 800ce7a:	461a      	mov	r2, r3
 800ce7c:	4680      	mov	r8, r0
 800ce7e:	b1de      	cbz	r6, 800ceb8 <ComputeCmacB0+0x4c>
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800ce80:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800ce84:	d81a      	bhi.n	800cebc <ComputeCmacB0+0x50>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800ce86:	af04      	add	r7, sp, #16
 800ce88:	9702      	str	r7, [sp, #8]
 800ce8a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce8c:	9301      	str	r3, [sp, #4]
 800ce8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce90:	9300      	str	r3, [sp, #0]
 800ce92:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 800ce96:	4629      	mov	r1, r5
 800ce98:	4620      	mov	r0, r4
 800ce9a:	f7ff ff31 	bl	800cd00 <PrepareB0>
    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 800ce9e:	9600      	str	r6, [sp, #0]
 800cea0:	462b      	mov	r3, r5
 800cea2:	4622      	mov	r2, r4
 800cea4:	4641      	mov	r1, r8
 800cea6:	4638      	mov	r0, r7
 800cea8:	f004 f8e2 	bl	8011070 <SecureElementComputeAesCmac>
 800ceac:	b940      	cbnz	r0, 800cec0 <ComputeCmacB0+0x54>
}
 800ceae:	b008      	add	sp, #32
 800ceb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ceb4:	2009      	movs	r0, #9
 800ceb6:	e7fa      	b.n	800ceae <ComputeCmacB0+0x42>
 800ceb8:	2009      	movs	r0, #9
 800ceba:	e7f8      	b.n	800ceae <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800cebc:	200d      	movs	r0, #13
 800cebe:	e7f6      	b.n	800ceae <ComputeCmacB0+0x42>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cec0:	200e      	movs	r0, #14
 800cec2:	e7f4      	b.n	800ceae <ComputeCmacB0+0x42>

0800cec4 <DeriveSessionKey10x>:
{
 800cec4:	b510      	push	{r4, lr}
 800cec6:	b084      	sub	sp, #16
    uint8_t compBase[16] = { 0 };
 800cec8:	2400      	movs	r4, #0
 800ceca:	9400      	str	r4, [sp, #0]
 800cecc:	9401      	str	r4, [sp, #4]
 800cece:	9402      	str	r4, [sp, #8]
 800ced0:	9403      	str	r4, [sp, #12]
    switch( keyID )
 800ced2:	2808      	cmp	r0, #8
 800ced4:	d003      	beq.n	800cede <DeriveSessionKey10x+0x1a>
 800ced6:	2809      	cmp	r0, #9
 800ced8:	d025      	beq.n	800cf26 <DeriveSessionKey10x+0x62>
 800ceda:	200a      	movs	r0, #10
 800cedc:	e021      	b.n	800cf22 <DeriveSessionKey10x+0x5e>
            compBase[0] = 0x01;
 800cede:	2401      	movs	r4, #1
 800cee0:	f88d 4000 	strb.w	r4, [sp]
    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 800cee4:	f88d 1001 	strb.w	r1, [sp, #1]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 800cee8:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800ceec:	f88d 4002 	strb.w	r4, [sp, #2]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 800cef0:	f3c1 4107 	ubfx	r1, r1, #16, #8
 800cef4:	f88d 1003 	strb.w	r1, [sp, #3]
    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 800cef8:	f88d 2004 	strb.w	r2, [sp, #4]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 800cefc:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800cf00:	f88d 1005 	strb.w	r1, [sp, #5]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 800cf04:	f3c2 4207 	ubfx	r2, r2, #16, #8
 800cf08:	f88d 2006 	strb.w	r2, [sp, #6]
    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 800cf0c:	f88d 3007 	strb.w	r3, [sp, #7]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 800cf10:	0a1b      	lsrs	r3, r3, #8
 800cf12:	f88d 3008 	strb.w	r3, [sp, #8]
    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 800cf16:	4602      	mov	r2, r0
 800cf18:	2101      	movs	r1, #1
 800cf1a:	4668      	mov	r0, sp
 800cf1c:	f004 f946 	bl	80111ac <SecureElementDeriveAndStoreKey>
 800cf20:	b928      	cbnz	r0, 800cf2e <DeriveSessionKey10x+0x6a>
}
 800cf22:	b004      	add	sp, #16
 800cf24:	bd10      	pop	{r4, pc}
            compBase[0] = 0x02;
 800cf26:	2402      	movs	r4, #2
 800cf28:	f88d 4000 	strb.w	r4, [sp]
            break;
 800cf2c:	e7da      	b.n	800cee4 <DeriveSessionKey10x+0x20>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cf2e:	200e      	movs	r0, #14
 800cf30:	e7f7      	b.n	800cf22 <DeriveSessionKey10x+0x5e>

0800cf32 <PayloadEncrypt>:
{
 800cf32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cf36:	b088      	sub	sp, #32
 800cf38:	4690      	mov	r8, r2
 800cf3a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    if( buffer == 0 )
 800cf3c:	2800      	cmp	r0, #0
 800cf3e:	d052      	beq.n	800cfe6 <PayloadEncrypt+0xb4>
 800cf40:	460d      	mov	r5, r1
 800cf42:	4604      	mov	r4, r0
    uint8_t sBlock[16] = { 0 };
 800cf44:	2600      	movs	r6, #0
 800cf46:	9604      	str	r6, [sp, #16]
 800cf48:	9605      	str	r6, [sp, #20]
 800cf4a:	9606      	str	r6, [sp, #24]
 800cf4c:	9607      	str	r6, [sp, #28]
    uint8_t aBlock[16] = { 0 };
 800cf4e:	9600      	str	r6, [sp, #0]
 800cf50:	9601      	str	r6, [sp, #4]
 800cf52:	9602      	str	r6, [sp, #8]
 800cf54:	9603      	str	r6, [sp, #12]
    aBlock[0] = 0x01;
 800cf56:	2701      	movs	r7, #1
 800cf58:	f88d 7000 	strb.w	r7, [sp]
    aBlock[5] = dir;
 800cf5c:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800cf60:	f88d 1005 	strb.w	r1, [sp, #5]
    aBlock[6] = address & 0xFF;
 800cf64:	f88d 3006 	strb.w	r3, [sp, #6]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 800cf68:	0a19      	lsrs	r1, r3, #8
 800cf6a:	f88d 1007 	strb.w	r1, [sp, #7]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 800cf6e:	0c19      	lsrs	r1, r3, #16
 800cf70:	f88d 1008 	strb.w	r1, [sp, #8]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 800cf74:	0e1b      	lsrs	r3, r3, #24
 800cf76:	f88d 3009 	strb.w	r3, [sp, #9]
    aBlock[10] = frameCounter & 0xFF;
 800cf7a:	f88d 200a 	strb.w	r2, [sp, #10]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 800cf7e:	0a13      	lsrs	r3, r2, #8
 800cf80:	f88d 300b 	strb.w	r3, [sp, #11]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 800cf84:	0c13      	lsrs	r3, r2, #16
 800cf86:	f88d 300c 	strb.w	r3, [sp, #12]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 800cf8a:	0e12      	lsrs	r2, r2, #24
 800cf8c:	f88d 200d 	strb.w	r2, [sp, #13]
    while( size > 0 )
 800cf90:	e014      	b.n	800cfbc <PayloadEncrypt+0x8a>
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 800cf92:	18f2      	adds	r2, r6, r3
 800cf94:	5ca0      	ldrb	r0, [r4, r2]
 800cf96:	f103 0120 	add.w	r1, r3, #32
 800cf9a:	4469      	add	r1, sp
 800cf9c:	f811 1c10 	ldrb.w	r1, [r1, #-16]
 800cfa0:	4048      	eors	r0, r1
 800cfa2:	54a0      	strb	r0, [r4, r2]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 800cfa4:	3301      	adds	r3, #1
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	2d10      	cmp	r5, #16
 800cfac:	bfa8      	it	ge
 800cfae:	2210      	movge	r2, #16
 800cfb0:	4293      	cmp	r3, r2
 800cfb2:	dbee      	blt.n	800cf92 <PayloadEncrypt+0x60>
        size -= 16;
 800cfb4:	3d10      	subs	r5, #16
 800cfb6:	b22d      	sxth	r5, r5
        bufferIndex += 16;
 800cfb8:	3610      	adds	r6, #16
 800cfba:	b2f6      	uxtb	r6, r6
    while( size > 0 )
 800cfbc:	2d00      	cmp	r5, #0
 800cfbe:	dd0e      	ble.n	800cfde <PayloadEncrypt+0xac>
        aBlock[15] = ctr & 0xFF;
 800cfc0:	f88d 700f 	strb.w	r7, [sp, #15]
        ctr++;
 800cfc4:	3701      	adds	r7, #1
 800cfc6:	b2bf      	uxth	r7, r7
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 800cfc8:	ab04      	add	r3, sp, #16
 800cfca:	4642      	mov	r2, r8
 800cfcc:	2110      	movs	r1, #16
 800cfce:	4668      	mov	r0, sp
 800cfd0:	f004 f873 	bl	80110ba <SecureElementAesEncrypt>
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0e6      	beq.n	800cfa8 <PayloadEncrypt+0x76>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800cfda:	200e      	movs	r0, #14
 800cfdc:	e000      	b.n	800cfe0 <PayloadEncrypt+0xae>
    return LORAMAC_CRYPTO_SUCCESS;
 800cfde:	2000      	movs	r0, #0
}
 800cfe0:	b008      	add	sp, #32
 800cfe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return LORAMAC_CRYPTO_ERROR_NPE;
 800cfe6:	2009      	movs	r0, #9
 800cfe8:	e7fa      	b.n	800cfe0 <PayloadEncrypt+0xae>

0800cfea <VerifyCmacB0>:
    if( msg == 0 )
 800cfea:	b368      	cbz	r0, 800d048 <VerifyCmacB0+0x5e>
{
 800cfec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cff0:	b0c8      	sub	sp, #288	; 0x120
 800cff2:	460c      	mov	r4, r1
 800cff4:	4615      	mov	r5, r2
 800cff6:	461e      	mov	r6, r3
 800cff8:	4680      	mov	r8, r0
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 800cffa:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800cffe:	d825      	bhi.n	800d04c <VerifyCmacB0+0x62>
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 800d000:	af04      	add	r7, sp, #16
 800d002:	f44f 7288 	mov.w	r2, #272	; 0x110
 800d006:	2100      	movs	r1, #0
 800d008:	4638      	mov	r0, r7
 800d00a:	f004 fa8e 	bl	801152a <memset1>
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 800d00e:	9702      	str	r7, [sp, #8]
 800d010:	9b50      	ldr	r3, [sp, #320]	; 0x140
 800d012:	9301      	str	r3, [sp, #4]
 800d014:	9b4f      	ldr	r3, [sp, #316]	; 0x13c
 800d016:	9300      	str	r3, [sp, #0]
 800d018:	f89d 3138 	ldrb.w	r3, [sp, #312]	; 0x138
 800d01c:	4632      	mov	r2, r6
 800d01e:	4629      	mov	r1, r5
 800d020:	4620      	mov	r0, r4
 800d022:	f7ff fe6d 	bl	800cd00 <PrepareB0>
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 800d026:	4622      	mov	r2, r4
 800d028:	4641      	mov	r1, r8
 800d02a:	a808      	add	r0, sp, #32
 800d02c:	f004 fa65 	bl	80114fa <memcpy1>
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 800d030:	462b      	mov	r3, r5
 800d032:	9a51      	ldr	r2, [sp, #324]	; 0x144
 800d034:	f104 0110 	add.w	r1, r4, #16
 800d038:	4638      	mov	r0, r7
 800d03a:	f004 f828 	bl	801108e <SecureElementVerifyAesCmac>
    if( retval == SECURE_ELEMENT_SUCCESS )
 800d03e:	b130      	cbz	r0, 800d04e <VerifyCmacB0+0x64>
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 800d040:	2801      	cmp	r0, #1
 800d042:	d004      	beq.n	800d04e <VerifyCmacB0+0x64>
    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d044:	200e      	movs	r0, #14
 800d046:	e002      	b.n	800d04e <VerifyCmacB0+0x64>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d048:	2009      	movs	r0, #9
}
 800d04a:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 800d04c:	200d      	movs	r0, #13
}
 800d04e:	b048      	add	sp, #288	; 0x120
 800d050:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d054 <LoRaMacCryptoInit>:
/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
    if( nvm == NULL )
 800d054:	b188      	cbz	r0, 800d07a <LoRaMacCryptoInit+0x26>
{
 800d056:	b510      	push	{r4, lr}
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 800d058:	4c09      	ldr	r4, [pc, #36]	; (800d080 <LoRaMacCryptoInit+0x2c>)
 800d05a:	6020      	str	r0, [r4, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 800d05c:	2228      	movs	r2, #40	; 0x28
 800d05e:	2100      	movs	r1, #0
 800d060:	f004 fa63 	bl	801152a <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 800d064:	6823      	ldr	r3, [r4, #0]
 800d066:	2201      	movs	r2, #1
 800d068:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 800d06a:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 800d06c:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 800d06e:	2400      	movs	r4, #0
 800d070:	701c      	strb	r4, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 800d072:	f7ff fed9 	bl	800ce28 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 800d076:	4620      	mov	r0, r4
}
 800d078:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_FAIL_PARAM;
 800d07a:	2008      	movs	r0, #8
}
 800d07c:	4770      	bx	lr
 800d07e:	bf00      	nop
 800d080:	20001030 	.word	0x20001030

0800d084 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
    CryptoNvm->LrWanVersion = version;
 800d084:	4b02      	ldr	r3, [pc, #8]	; (800d090 <LoRaMacCryptoSetLrWanVersion+0xc>)
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	6018      	str	r0, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
}
 800d08a:	2000      	movs	r0, #0
 800d08c:	4770      	bx	lr
 800d08e:	bf00      	nop
 800d090:	20001030 	.word	0x20001030

0800d094 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
    if( currentUp == NULL )
 800d094:	b130      	cbz	r0, 800d0a4 <LoRaMacCryptoGetFCntUp+0x10>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 800d096:	4b04      	ldr	r3, [pc, #16]	; (800d0a8 <LoRaMacCryptoGetFCntUp+0x14>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	68db      	ldr	r3, [r3, #12]
 800d09c:	3301      	adds	r3, #1
 800d09e:	6003      	str	r3, [r0, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 800d0a0:	2000      	movs	r0, #0
 800d0a2:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0a4:	2009      	movs	r0, #9
}
 800d0a6:	4770      	bx	lr
 800d0a8:	20001030 	.word	0x20001030

0800d0ac <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && (( LORAMAC_VERSION == 0x01000400 ) || ( LORAMAC_VERSION == 0x01010100 )))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 800d0ac:	b530      	push	{r4, r5, lr}
 800d0ae:	b083      	sub	sp, #12
    uint32_t lastDown = 0;
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	9301      	str	r3, [sp, #4]
    int32_t fCntDiff = 0;
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;

    if( currentDown == NULL )
 800d0b4:	b1f2      	cbz	r2, 800d0f4 <LoRaMacCryptoGetFCntDown+0x48>
 800d0b6:	460c      	mov	r4, r1
 800d0b8:	4615      	mov	r5, r2
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 800d0ba:	a901      	add	r1, sp, #4
 800d0bc:	f7ff fe5a 	bl	800cd74 <GetLastFcntDown>
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800d0c0:	b948      	cbnz	r0, 800d0d6 <LoRaMacCryptoGetFCntDown+0x2a>
    {
        return cryptoStatus;
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITIAL_VALUE )
 800d0c2:	9b01      	ldr	r3, [sp, #4]
 800d0c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d0c8:	d007      	beq.n	800d0da <LoRaMacCryptoGetFCntDown+0x2e>
        *currentDown = frameFcnt;
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 800d0ca:	b29a      	uxth	r2, r3
 800d0cc:	1aa2      	subs	r2, r4, r2

        if( fCntDiff > 0 )
 800d0ce:	2a00      	cmp	r2, #0
 800d0d0:	dd05      	ble.n	800d0de <LoRaMacCryptoGetFCntDown+0x32>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 800d0d2:	4413      	add	r3, r2
 800d0d4:	602b      	str	r3, [r5, #0]
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d0d6:	b003      	add	sp, #12
 800d0d8:	bd30      	pop	{r4, r5, pc}
        *currentDown = frameFcnt;
 800d0da:	602c      	str	r4, [r5, #0]
 800d0dc:	e7fb      	b.n	800d0d6 <LoRaMacCryptoGetFCntDown+0x2a>
        else if( fCntDiff == 0 )
 800d0de:	b132      	cbz	r2, 800d0ee <LoRaMacCryptoGetFCntDown+0x42>
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 800d0e0:	0c1b      	lsrs	r3, r3, #16
 800d0e2:	041b      	lsls	r3, r3, #16
 800d0e4:	4423      	add	r3, r4
 800d0e6:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800d0ea:	602b      	str	r3, [r5, #0]
 800d0ec:	e7f3      	b.n	800d0d6 <LoRaMacCryptoGetFCntDown+0x2a>
            *currentDown = lastDown;
 800d0ee:	602b      	str	r3, [r5, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 800d0f0:	2007      	movs	r0, #7
 800d0f2:	e7f0      	b.n	800d0d6 <LoRaMacCryptoGetFCntDown+0x2a>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0f4:	2009      	movs	r0, #9
 800d0f6:	e7ee      	b.n	800d0d6 <LoRaMacCryptoGetFCntDown+0x2a>

0800d0f8 <LoRaMacCryptoSetMulticastReference>:
#endif /* LORAMAC_VERSION */
}

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
    if( multicastList == NULL )
 800d0f8:	4601      	mov	r1, r0
 800d0fa:	b908      	cbnz	r0, 800d100 <LoRaMacCryptoSetMulticastReference+0x8>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d0fc:	2009      	movs	r0, #9
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d0fe:	4770      	bx	lr
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d100:	2300      	movs	r3, #0
 800d102:	2b00      	cmp	r3, #0
 800d104:	dd01      	ble.n	800d10a <LoRaMacCryptoSetMulticastReference+0x12>
    return LORAMAC_CRYPTO_SUCCESS;
 800d106:	2000      	movs	r0, #0
 800d108:	4770      	bx	lr
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 800d10a:	4a07      	ldr	r2, [pc, #28]	; (800d128 <LoRaMacCryptoSetMulticastReference+0x30>)
 800d10c:	6812      	ldr	r2, [r2, #0]
 800d10e:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800d112:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 800d116:	f103 0c06 	add.w	ip, r3, #6
 800d11a:	eb02 028c 	add.w	r2, r2, ip, lsl #2
 800d11e:	3204      	adds	r2, #4
 800d120:	6242      	str	r2, [r0, #36]	; 0x24
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800d122:	3301      	adds	r3, #1
 800d124:	e7ed      	b.n	800d102 <LoRaMacCryptoSetMulticastReference+0xa>
 800d126:	bf00      	nop
 800d128:	20001030 	.word	0x20001030

0800d12c <LoRaMacCryptoPrepareJoinRequest>:
    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( macMsg == 0 )
 800d12c:	b1d8      	cbz	r0, 800d166 <LoRaMacCryptoPrepareJoinRequest+0x3a>
{
 800d12e:	b510      	push	{r4, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	4604      	mov	r4, r0
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <LoRaMacCryptoPrepareJoinRequest+0x48>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	8893      	ldrh	r3, [r2, #4]
 800d13a:	3301      	adds	r3, #1
 800d13c:	b29b      	uxth	r3, r3
 800d13e:	8093      	strh	r3, [r2, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 800d140:	82c3      	strh	r3, [r0, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* LORAMAC_VERSION */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d142:	f000 fa32 	bl	800d5aa <LoRaMacSerializerJoinRequest>
 800d146:	b980      	cbnz	r0, 800d16a <LoRaMacCryptoPrepareJoinRequest+0x3e>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 800d148:	4623      	mov	r3, r4
 800d14a:	f853 1b18 	ldr.w	r1, [r3], #24
 800d14e:	9300      	str	r3, [sp, #0]
 800d150:	2301      	movs	r3, #1
 800d152:	2213      	movs	r2, #19
 800d154:	f003 ff8c 	bl	8011070 <SecureElementComputeAesCmac>
 800d158:	b950      	cbnz	r0, 800d170 <LoRaMacCryptoPrepareJoinRequest+0x44>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d15a:	4620      	mov	r0, r4
 800d15c:	f000 fa25 	bl	800d5aa <LoRaMacSerializerJoinRequest>
 800d160:	b120      	cbz	r0, 800d16c <LoRaMacCryptoPrepareJoinRequest+0x40>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d162:	2010      	movs	r0, #16
 800d164:	e002      	b.n	800d16c <LoRaMacCryptoPrepareJoinRequest+0x40>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d166:	2009      	movs	r0, #9
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d168:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d16a:	2010      	movs	r0, #16
}
 800d16c:	b002      	add	sp, #8
 800d16e:	bd10      	pop	{r4, pc}
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d170:	200e      	movs	r0, #14
 800d172:	e7fb      	b.n	800d16c <LoRaMacCryptoPrepareJoinRequest+0x40>
 800d174:	20001030 	.word	0x20001030

0800d178 <LoRaMacCryptoSecureMessage>:
LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;

    if( macMsg == NULL )
 800d178:	2b00      	cmp	r3, #0
 800d17a:	d036      	beq.n	800d1ea <LoRaMacCryptoSecureMessage+0x72>
{
 800d17c:	b530      	push	{r4, r5, lr}
 800d17e:	b085      	sub	sp, #20
 800d180:	4604      	mov	r4, r0
 800d182:	461d      	mov	r5, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 800d184:	4b1d      	ldr	r3, [pc, #116]	; (800d1fc <LoRaMacCryptoSecureMessage+0x84>)
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	68db      	ldr	r3, [r3, #12]
 800d18a:	4283      	cmp	r3, r0
 800d18c:	d82f      	bhi.n	800d1ee <LoRaMacCryptoSecureMessage+0x76>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 800d18e:	f895 2020 	ldrb.w	r2, [r5, #32]
 800d192:	b342      	cbz	r2, 800d1e6 <LoRaMacCryptoSecureMessage+0x6e>
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 800d194:	2209      	movs	r2, #9
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 800d196:	42a3      	cmp	r3, r4
 800d198:	d209      	bcs.n	800d1ae <LoRaMacCryptoSecureMessage+0x36>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 800d19a:	9401      	str	r4, [sp, #4]
 800d19c:	2300      	movs	r3, #0
 800d19e:	9300      	str	r3, [sp, #0]
 800d1a0:	68ab      	ldr	r3, [r5, #8]
 800d1a2:	f895 1028 	ldrb.w	r1, [r5, #40]	; 0x28
 800d1a6:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800d1a8:	f7ff fec3 	bl	800cf32 <PayloadEncrypt>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d1ac:	bb10      	cbnz	r0, 800d1f4 <LoRaMacCryptoSecureMessage+0x7c>
        }
#endif /* LORAMAC_VERSION */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d1ae:	4628      	mov	r0, r5
 800d1b0:	f000 fa31 	bl	800d616 <LoRaMacSerializerData>
 800d1b4:	b9e8      	cbnz	r0, 800d1f2 <LoRaMacCryptoSecureMessage+0x7a>
#else
        payloadDecryptionKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 800d1b6:	7929      	ldrb	r1, [r5, #4]
 800d1b8:	3904      	subs	r1, #4
 800d1ba:	462b      	mov	r3, r5
 800d1bc:	f853 0b2c 	ldr.w	r0, [r3], #44
 800d1c0:	9303      	str	r3, [sp, #12]
 800d1c2:	9402      	str	r4, [sp, #8]
 800d1c4:	68ab      	ldr	r3, [r5, #8]
 800d1c6:	9301      	str	r3, [sp, #4]
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	9300      	str	r3, [sp, #0]
 800d1cc:	2208      	movs	r2, #8
 800d1ce:	b289      	uxth	r1, r1
 800d1d0:	f7ff fe4c 	bl	800ce6c <ComputeCmacB0>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d1d4:	b970      	cbnz	r0, 800d1f4 <LoRaMacCryptoSecureMessage+0x7c>
            return retval;
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 800d1d6:	4628      	mov	r0, r5
 800d1d8:	f000 fa1d 	bl	800d616 <LoRaMacSerializerData>
 800d1dc:	b960      	cbnz	r0, 800d1f8 <LoRaMacCryptoSecureMessage+0x80>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 800d1de:	4b07      	ldr	r3, [pc, #28]	; (800d1fc <LoRaMacCryptoSecureMessage+0x84>)
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	60dc      	str	r4, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 800d1e4:	e006      	b.n	800d1f4 <LoRaMacCryptoSecureMessage+0x7c>
        payloadDecryptionKeyID = NWK_S_KEY;
 800d1e6:	2208      	movs	r2, #8
 800d1e8:	e7d5      	b.n	800d196 <LoRaMacCryptoSecureMessage+0x1e>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d1ea:	2009      	movs	r0, #9
}
 800d1ec:	4770      	bx	lr
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d1ee:	2006      	movs	r0, #6
 800d1f0:	e000      	b.n	800d1f4 <LoRaMacCryptoSecureMessage+0x7c>
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d1f2:	2010      	movs	r0, #16
}
 800d1f4:	b005      	add	sp, #20
 800d1f6:	bd30      	pop	{r4, r5, pc}
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 800d1f8:	2010      	movs	r0, #16
 800d1fa:	e7fb      	b.n	800d1f4 <LoRaMacCryptoSecureMessage+0x7c>
 800d1fc:	20001030 	.word	0x20001030

0800d200 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 800d200:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d204:	b087      	sub	sp, #28
 800d206:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    if( macMsg == 0 )
 800d208:	2e00      	cmp	r6, #0
 800d20a:	d049      	beq.n	800d2a0 <LoRaMacCryptoUnsecureMessage+0xa0>
 800d20c:	4605      	mov	r5, r0
 800d20e:	4688      	mov	r8, r1
 800d210:	4617      	mov	r7, r2
 800d212:	461c      	mov	r4, r3
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 800d214:	4619      	mov	r1, r3
 800d216:	4610      	mov	r0, r2
 800d218:	f7ff fdd2 	bl	800cdc0 <CheckFCntDown>
 800d21c:	2800      	cmp	r0, #0
 800d21e:	d041      	beq.n	800d2a4 <LoRaMacCryptoUnsecureMessage+0xa4>
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
#endif /* LORAMAC_VERSION */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d220:	4630      	mov	r0, r6
 800d222:	f000 f963 	bl	800d4ec <LoRaMacParserData>
 800d226:	2800      	cmp	r0, #0
 800d228:	d141      	bne.n	800d2ae <LoRaMacCryptoUnsecureMessage+0xae>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 800d22a:	a905      	add	r1, sp, #20
 800d22c:	4628      	mov	r0, r5
 800d22e:	f7ff fd8b 	bl	800cd48 <GetKeyAddrItem>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d232:	4605      	mov	r5, r0
 800d234:	2800      	cmp	r0, #0
 800d236:	d136      	bne.n	800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 800d238:	9b05      	ldr	r3, [sp, #20]
 800d23a:	f893 9001 	ldrb.w	r9, [r3, #1]
    micComputationKeyID = curItem->NwkSkey;
 800d23e:	789a      	ldrb	r2, [r3, #2]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 800d240:	68b3      	ldr	r3, [r6, #8]
 800d242:	4543      	cmp	r3, r8
 800d244:	d135      	bne.n	800d2b2 <LoRaMacCryptoUnsecureMessage+0xb2>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 800d246:	7b33      	ldrb	r3, [r6, #12]
 800d248:	f3c3 1340 	ubfx	r3, r3, #5, #1
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 800d24c:	491a      	ldr	r1, [pc, #104]	; (800d2b8 <LoRaMacCryptoUnsecureMessage+0xb8>)
 800d24e:	6809      	ldr	r1, [r1, #0]
 800d250:	7889      	ldrb	r1, [r1, #2]
 800d252:	b901      	cbnz	r1, 800d256 <LoRaMacCryptoUnsecureMessage+0x56>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 800d254:	2300      	movs	r3, #0
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 800d256:	7931      	ldrb	r1, [r6, #4]
 800d258:	3904      	subs	r1, #4
 800d25a:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 800d25c:	9003      	str	r0, [sp, #12]
 800d25e:	9402      	str	r4, [sp, #8]
 800d260:	f8cd 8004 	str.w	r8, [sp, #4]
 800d264:	2001      	movs	r0, #1
 800d266:	9000      	str	r0, [sp, #0]
 800d268:	b289      	uxth	r1, r1
 800d26a:	6830      	ldr	r0, [r6, #0]
 800d26c:	f7ff febd 	bl	800cfea <VerifyCmacB0>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d270:	4605      	mov	r5, r0
 800d272:	b9c0      	cbnz	r0, 800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
    {
        return retval;
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 800d274:	f896 3020 	ldrb.w	r3, [r6, #32]
 800d278:	b90b      	cbnz	r3, 800d27e <LoRaMacCryptoUnsecureMessage+0x7e>
    {
        // Use network session encryption key
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01010100 ))
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else
        payloadDecryptionKeyID = NWK_S_KEY;
 800d27a:	f04f 0908 	mov.w	r9, #8
#endif /* LORAMAC_VERSION */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 800d27e:	9401      	str	r4, [sp, #4]
 800d280:	2301      	movs	r3, #1
 800d282:	9300      	str	r3, [sp, #0]
 800d284:	4643      	mov	r3, r8
 800d286:	464a      	mov	r2, r9
 800d288:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 800d28c:	6a70      	ldr	r0, [r6, #36]	; 0x24
 800d28e:	f7ff fe50 	bl	800cf32 <PayloadEncrypt>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d292:	4605      	mov	r5, r0
 800d294:	b938      	cbnz	r0, 800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
            }
        }
    }
#endif /* LORAMAC_VERSION */

    UpdateFCntDown( fCntID, fCntDown );
 800d296:	4621      	mov	r1, r4
 800d298:	4638      	mov	r0, r7
 800d29a:	f7ff fda9 	bl	800cdf0 <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 800d29e:	e002      	b.n	800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d2a0:	2509      	movs	r5, #9
 800d2a2:	e000      	b.n	800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 800d2a4:	2506      	movs	r5, #6
}
 800d2a6:	4628      	mov	r0, r5
 800d2a8:	b007      	add	sp, #28
 800d2aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d2ae:	250f      	movs	r5, #15
 800d2b0:	e7f9      	b.n	800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 800d2b2:	2502      	movs	r5, #2
 800d2b4:	e7f7      	b.n	800d2a6 <LoRaMacCryptoUnsecureMessage+0xa6>
 800d2b6:	bf00      	nop
 800d2b8:	20001030 	.word	0x20001030

0800d2bc <LoRaMacCryptoDeriveLifeTimeKey>:

    return LORAMAC_CRYPTO_SUCCESS;
}

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveLifeTimeKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 800d2bc:	b500      	push	{lr}
 800d2be:	b085      	sub	sp, #20
 800d2c0:	460a      	mov	r2, r1
    uint8_t compBase[16] = { 0 };
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	9301      	str	r3, [sp, #4]
 800d2c8:	9302      	str	r3, [sp, #8]
 800d2ca:	9303      	str	r3, [sp, #12]
    KeyIdentifier_t rootKeyId = APP_KEY;
    switch( keyID )
 800d2cc:	290b      	cmp	r1, #11
 800d2ce:	d007      	beq.n	800d2e0 <LoRaMacCryptoDeriveLifeTimeKey+0x24>
 800d2d0:	290c      	cmp	r1, #12
 800d2d2:	d013      	beq.n	800d2fc <LoRaMacCryptoDeriveLifeTimeKey+0x40>
 800d2d4:	290a      	cmp	r1, #10
 800d2d6:	d00c      	beq.n	800d2f2 <LoRaMacCryptoDeriveLifeTimeKey+0x36>
 800d2d8:	200a      	movs	r0, #10
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
    }

    return LORAMAC_CRYPTO_SUCCESS;
}
 800d2da:	b005      	add	sp, #20
 800d2dc:	f85d fb04 	ldr.w	pc, [sp], #4
            if( versionMinor == 1 )
 800d2e0:	2801      	cmp	r0, #1
 800d2e2:	d001      	beq.n	800d2e8 <LoRaMacCryptoDeriveLifeTimeKey+0x2c>
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d2e4:	2100      	movs	r1, #0
 800d2e6:	e00a      	b.n	800d2fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
                compBase[0] = 0x20;
 800d2e8:	2320      	movs	r3, #32
 800d2ea:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d2ee:	2100      	movs	r1, #0
 800d2f0:	e005      	b.n	800d2fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
            compBase[0] = 0x30;
 800d2f2:	2330      	movs	r3, #48	; 0x30
 800d2f4:	f88d 3000 	strb.w	r3, [sp]
    KeyIdentifier_t rootKeyId = APP_KEY;
 800d2f8:	2100      	movs	r1, #0
            break;
 800d2fa:	e000      	b.n	800d2fe <LoRaMacCryptoDeriveLifeTimeKey+0x42>
    switch( keyID )
 800d2fc:	210b      	movs	r1, #11
    if( SecureElementDeriveAndStoreKey( compBase, rootKeyId, keyID ) != SECURE_ELEMENT_SUCCESS )
 800d2fe:	4668      	mov	r0, sp
 800d300:	f003 ff54 	bl	80111ac <SecureElementDeriveAndStoreKey>
 800d304:	2800      	cmp	r0, #0
 800d306:	d0e8      	beq.n	800d2da <LoRaMacCryptoDeriveLifeTimeKey+0x1e>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d308:	200e      	movs	r0, #14
 800d30a:	e7e6      	b.n	800d2da <LoRaMacCryptoDeriveLifeTimeKey+0x1e>

0800d30c <LoRaMacCryptoSetKey>:
{
 800d30c:	b510      	push	{r4, lr}
 800d30e:	4604      	mov	r4, r0
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 800d310:	f003 ff0a 	bl	8011128 <SecureElementSetKey>
 800d314:	b998      	cbnz	r0, 800d33e <LoRaMacCryptoSetKey+0x32>
    if( keyID == APP_KEY )
 800d316:	b104      	cbz	r4, 800d31a <LoRaMacCryptoSetKey+0xe>
}
 800d318:	bd10      	pop	{r4, pc}
        if( LoRaMacCryptoDeriveLifeTimeKey( CryptoNvm->LrWanVersion.Fields.Minor, MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d31a:	4b0c      	ldr	r3, [pc, #48]	; (800d34c <LoRaMacCryptoSetKey+0x40>)
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	210b      	movs	r1, #11
 800d320:	7898      	ldrb	r0, [r3, #2]
 800d322:	f7ff ffcb 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
 800d326:	b960      	cbnz	r0, 800d342 <LoRaMacCryptoSetKey+0x36>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d328:	210c      	movs	r1, #12
 800d32a:	f7ff ffc7 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
 800d32e:	b950      	cbnz	r0, 800d346 <LoRaMacCryptoSetKey+0x3a>
        if( LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 800d330:	210a      	movs	r1, #10
 800d332:	f7ff ffc3 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
 800d336:	2800      	cmp	r0, #0
 800d338:	d0ee      	beq.n	800d318 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d33a:	200e      	movs	r0, #14
 800d33c:	e7ec      	b.n	800d318 <LoRaMacCryptoSetKey+0xc>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d33e:	200e      	movs	r0, #14
 800d340:	e7ea      	b.n	800d318 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d342:	200e      	movs	r0, #14
 800d344:	e7e8      	b.n	800d318 <LoRaMacCryptoSetKey+0xc>
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d346:	200e      	movs	r0, #14
 800d348:	e7e6      	b.n	800d318 <LoRaMacCryptoSetKey+0xc>
 800d34a:	bf00      	nop
 800d34c:	20001030 	.word	0x20001030

0800d350 <LoRaMacCryptoHandleJoinAccept>:
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d350:	2a00      	cmp	r2, #0
 800d352:	d06c      	beq.n	800d42e <LoRaMacCryptoHandleJoinAccept+0xde>
{
 800d354:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d356:	b08f      	sub	sp, #60	; 0x3c
 800d358:	4607      	mov	r7, r0
 800d35a:	460d      	mov	r5, r1
 800d35c:	4614      	mov	r4, r2
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 800d35e:	2900      	cmp	r1, #0
 800d360:	d067      	beq.n	800d432 <LoRaMacCryptoHandleJoinAccept+0xe2>
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 800d362:	2600      	movs	r6, #0
 800d364:	9605      	str	r6, [sp, #20]
 800d366:	221d      	movs	r2, #29
 800d368:	4631      	mov	r1, r6
 800d36a:	a806      	add	r0, sp, #24
 800d36c:	f006 fd7c 	bl	8013e68 <memset>
    uint8_t versionMinor         = 0;
 800d370:	f88d 6013 	strb.w	r6, [sp, #19]
    uint16_t nonce               = CryptoNvm->DevNonce;
 800d374:	4b33      	ldr	r3, [pc, #204]	; (800d444 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	889e      	ldrh	r6, [r3, #4]
    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 800d37a:	f10d 0313 	add.w	r3, sp, #19
 800d37e:	9302      	str	r3, [sp, #8]
 800d380:	ab05      	add	r3, sp, #20
 800d382:	9301      	str	r3, [sp, #4]
 800d384:	7923      	ldrb	r3, [r4, #4]
 800d386:	9300      	str	r3, [sp, #0]
 800d388:	6823      	ldr	r3, [r4, #0]
 800d38a:	4632      	mov	r2, r6
 800d38c:	4629      	mov	r1, r5
 800d38e:	4638      	mov	r0, r7
 800d390:	f003 ff2c 	bl	80111ec <SecureElementProcessJoinAccept>
 800d394:	2800      	cmp	r0, #0
 800d396:	d14e      	bne.n	800d436 <LoRaMacCryptoHandleJoinAccept+0xe6>
    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 800d398:	7922      	ldrb	r2, [r4, #4]
 800d39a:	a905      	add	r1, sp, #20
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	f004 f8ac 	bl	80114fa <memcpy1>
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 f850 	bl	800d448 <LoRaMacParserJoinAccept>
 800d3a8:	2800      	cmp	r0, #0
 800d3aa:	d147      	bne.n	800d43c <LoRaMacCryptoHandleJoinAccept+0xec>
    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 800d3ac:	79a5      	ldrb	r5, [r4, #6]
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 800d3ae:	79e3      	ldrb	r3, [r4, #7]
 800d3b0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 800d3b4:	7a23      	ldrb	r3, [r4, #8]
 800d3b6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
        isJoinNonceOk = IsJoinNonce10xOk( currentJoinNonce );
 800d3ba:	4628      	mov	r0, r5
 800d3bc:	f7ff fd4c 	bl	800ce58 <IsJoinNonce10xOk>
    if( isJoinNonceOk == true )
 800d3c0:	2800      	cmp	r0, #0
 800d3c2:	d03d      	beq.n	800d440 <LoRaMacCryptoHandleJoinAccept+0xf0>
        CryptoNvm->JoinNonce = currentJoinNonce;
 800d3c4:	4b1f      	ldr	r3, [pc, #124]	; (800d444 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	609d      	str	r5, [r3, #8]
    retval = LoRaMacCryptoDeriveLifeTimeKey( versionMinor, MC_ROOT_KEY );
 800d3ca:	210b      	movs	r1, #11
 800d3cc:	f89d 0013 	ldrb.w	r0, [sp, #19]
 800d3d0:	f7ff ff74 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d3d4:	bb80      	cbnz	r0, 800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, MC_KE_KEY );
 800d3d6:	210c      	movs	r1, #12
 800d3d8:	2000      	movs	r0, #0
 800d3da:	f7ff ff6f 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d3de:	bb58      	cbnz	r0, 800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
    retval = LoRaMacCryptoDeriveLifeTimeKey( 0, DATABLOCK_INT_KEY );
 800d3e0:	210a      	movs	r1, #10
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	f7ff ff6a 	bl	800d2bc <LoRaMacCryptoDeriveLifeTimeKey>
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d3e8:	bb30      	cbnz	r0, 800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
        netID = ( uint32_t )macMsg->NetID[0];
 800d3ea:	7a63      	ldrb	r3, [r4, #9]
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 800d3ec:	7aa2      	ldrb	r2, [r4, #10]
 800d3ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 800d3f2:	7ae4      	ldrb	r4, [r4, #11]
 800d3f4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 800d3f8:	4633      	mov	r3, r6
 800d3fa:	4622      	mov	r2, r4
 800d3fc:	4629      	mov	r1, r5
 800d3fe:	2009      	movs	r0, #9
 800d400:	f7ff fd60 	bl	800cec4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d404:	b9c0      	cbnz	r0, 800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 800d406:	4633      	mov	r3, r6
 800d408:	4622      	mov	r2, r4
 800d40a:	4629      	mov	r1, r5
 800d40c:	2008      	movs	r0, #8
 800d40e:	f7ff fd59 	bl	800cec4 <DeriveSessionKey10x>
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 800d412:	b988      	cbnz	r0, 800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 800d414:	4b0b      	ldr	r3, [pc, #44]	; (800d444 <LoRaMacCryptoHandleJoinAccept+0xf4>)
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	f89d 2013 	ldrb.w	r2, [sp, #19]
 800d41c:	709a      	strb	r2, [r3, #2]
    CryptoNvm->FCntList.FCntUp = 0;
 800d41e:	2200      	movs	r2, #0
 800d420:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d422:	f04f 32ff 	mov.w	r2, #4294967295
 800d426:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d428:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITIAL_VALUE;
 800d42a:	615a      	str	r2, [r3, #20]
    return LORAMAC_CRYPTO_SUCCESS;
 800d42c:	e004      	b.n	800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d42e:	2009      	movs	r0, #9
}
 800d430:	4770      	bx	lr
        return LORAMAC_CRYPTO_ERROR_NPE;
 800d432:	2009      	movs	r0, #9
 800d434:	e000      	b.n	800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 800d436:	200e      	movs	r0, #14
}
 800d438:	b00f      	add	sp, #60	; 0x3c
 800d43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_CRYPTO_ERROR_PARSER;
 800d43c:	200f      	movs	r0, #15
 800d43e:	e7fb      	b.n	800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 800d440:	2003      	movs	r0, #3
 800d442:	e7f9      	b.n	800d438 <LoRaMacCryptoHandleJoinAccept+0xe8>
 800d444:	20001030 	.word	0x20001030

0800d448 <LoRaMacParserJoinAccept>:
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d448:	2800      	cmp	r0, #0
 800d44a:	d049      	beq.n	800d4e0 <LoRaMacParserJoinAccept+0x98>
{
 800d44c:	b510      	push	{r4, lr}
 800d44e:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d450:	6801      	ldr	r1, [r0, #0]
 800d452:	2900      	cmp	r1, #0
 800d454:	d046      	beq.n	800d4e4 <LoRaMacParserJoinAccept+0x9c>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d456:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d45a:	7143      	strb	r3, [r0, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 800d45c:	2203      	movs	r2, #3
 800d45e:	3006      	adds	r0, #6
 800d460:	f004 f84b 	bl	80114fa <memcpy1>
    bufItr = bufItr + 3;

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 800d464:	4620      	mov	r0, r4
 800d466:	f850 1b09 	ldr.w	r1, [r0], #9
 800d46a:	2203      	movs	r2, #3
 800d46c:	3104      	adds	r1, #4
 800d46e:	f004 f844 	bl	80114fa <memcpy1>
    bufItr = bufItr + 3;

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d472:	6821      	ldr	r1, [r4, #0]
 800d474:	79cb      	ldrb	r3, [r1, #7]
 800d476:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d478:	7a0a      	ldrb	r2, [r1, #8]
 800d47a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d47e:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d480:	7a4a      	ldrb	r2, [r1, #9]
 800d482:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d486:	60e3      	str	r3, [r4, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d488:	7a8a      	ldrb	r2, [r1, #10]
 800d48a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d48e:	60e3      	str	r3, [r4, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 800d490:	7acb      	ldrb	r3, [r1, #11]
 800d492:	7423      	strb	r3, [r4, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d494:	7b0b      	ldrb	r3, [r1, #12]
 800d496:	7463      	strb	r3, [r4, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 800d498:	7923      	ldrb	r3, [r4, #4]
 800d49a:	2b21      	cmp	r3, #33	; 0x21
 800d49c:	d018      	beq.n	800d4d0 <LoRaMacParserJoinAccept+0x88>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 800d49e:	2b11      	cmp	r3, #17
 800d4a0:	dc22      	bgt.n	800d4e8 <LoRaMacParserJoinAccept+0xa0>
    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 800d4a2:	220d      	movs	r2, #13
    {
        return LORAMAC_PARSER_FAIL;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 800d4a4:	6821      	ldr	r1, [r4, #0]
 800d4a6:	f102 0c01 	add.w	ip, r2, #1
 800d4aa:	5c8b      	ldrb	r3, [r1, r2]
 800d4ac:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d4ae:	1c90      	adds	r0, r2, #2
 800d4b0:	f811 c00c 	ldrb.w	ip, [r1, ip]
 800d4b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
 800d4b8:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d4ba:	3203      	adds	r2, #3
 800d4bc:	5c08      	ldrb	r0, [r1, r0]
 800d4be:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d4c2:	6263      	str	r3, [r4, #36]	; 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d4c4:	5c8a      	ldrb	r2, [r1, r2]
 800d4c6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d4ca:	6263      	str	r3, [r4, #36]	; 0x24

    return LORAMAC_PARSER_SUCCESS;
 800d4cc:	2000      	movs	r0, #0
}
 800d4ce:	bd10      	pop	{r4, pc}
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 800d4d0:	2210      	movs	r2, #16
 800d4d2:	310d      	adds	r1, #13
 800d4d4:	f104 0012 	add.w	r0, r4, #18
 800d4d8:	f004 f80f 	bl	80114fa <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 800d4dc:	221d      	movs	r2, #29
 800d4de:	e7e1      	b.n	800d4a4 <LoRaMacParserJoinAccept+0x5c>
        return LORAMAC_PARSER_ERROR_NPE;
 800d4e0:	2002      	movs	r0, #2
}
 800d4e2:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d4e4:	2002      	movs	r0, #2
 800d4e6:	e7f2      	b.n	800d4ce <LoRaMacParserJoinAccept+0x86>
        return LORAMAC_PARSER_FAIL;
 800d4e8:	2001      	movs	r0, #1
 800d4ea:	e7f0      	b.n	800d4ce <LoRaMacParserJoinAccept+0x86>

0800d4ec <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d4ec:	2800      	cmp	r0, #0
 800d4ee:	d058      	beq.n	800d5a2 <LoRaMacParserData+0xb6>
{
 800d4f0:	b510      	push	{r4, lr}
 800d4f2:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d4f4:	6801      	ldr	r1, [r0, #0]
 800d4f6:	2900      	cmp	r1, #0
 800d4f8:	d055      	beq.n	800d5a6 <LoRaMacParserData+0xba>
        return LORAMAC_PARSER_ERROR_NPE;
    }

    uint16_t bufItr = 0;

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 800d4fa:	780b      	ldrb	r3, [r1, #0]
 800d4fc:	7143      	strb	r3, [r0, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 800d4fe:	784b      	ldrb	r3, [r1, #1]
 800d500:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 800d502:	788a      	ldrb	r2, [r1, #2]
 800d504:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d508:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 800d50a:	78ca      	ldrb	r2, [r1, #3]
 800d50c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d510:	6083      	str	r3, [r0, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 800d512:	790a      	ldrb	r2, [r1, #4]
 800d514:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d518:	6083      	str	r3, [r0, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 800d51a:	794b      	ldrb	r3, [r1, #5]
 800d51c:	7303      	strb	r3, [r0, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 800d51e:	798b      	ldrb	r3, [r1, #6]
 800d520:	81c3      	strh	r3, [r0, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 800d522:	79ca      	ldrb	r2, [r1, #7]
 800d524:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800d528:	81c3      	strh	r3, [r0, #14]

    memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d52a:	7b02      	ldrb	r2, [r0, #12]
 800d52c:	f002 020f 	and.w	r2, r2, #15
 800d530:	3108      	adds	r1, #8
 800d532:	3010      	adds	r0, #16
 800d534:	f003 ffe1 	bl	80114fa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d538:	7b23      	ldrb	r3, [r4, #12]
 800d53a:	f003 030f 	and.w	r3, r3, #15
 800d53e:	f103 0008 	add.w	r0, r3, #8

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 800d542:	2200      	movs	r2, #0
 800d544:	f884 2020 	strb.w	r2, [r4, #32]
    macMsg->FRMPayloadSize = 0;
 800d548:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 800d54c:	7922      	ldrb	r2, [r4, #4]
 800d54e:	1a11      	subs	r1, r2, r0
 800d550:	2904      	cmp	r1, #4
 800d552:	dc16      	bgt.n	800d582 <LoRaMacParserData+0x96>
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
        bufItr = bufItr + macMsg->FRMPayloadSize;
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 800d554:	6822      	ldr	r2, [r4, #0]
 800d556:	7923      	ldrb	r3, [r4, #4]
 800d558:	441a      	add	r2, r3
 800d55a:	f812 3c04 	ldrb.w	r3, [r2, #-4]
 800d55e:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 800d560:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 800d564:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800d568:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 800d56a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800d56e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800d572:	62e3      	str	r3, [r4, #44]	; 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 800d574:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 800d578:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800d57c:	62e3      	str	r3, [r4, #44]	; 0x2c

    return LORAMAC_PARSER_SUCCESS;
 800d57e:	2000      	movs	r0, #0
}
 800d580:	bd10      	pop	{r4, pc}
        macMsg->FPort = macMsg->Buffer[bufItr++];
 800d582:	6821      	ldr	r1, [r4, #0]
 800d584:	3309      	adds	r3, #9
 800d586:	5c08      	ldrb	r0, [r1, r0]
 800d588:	f884 0020 	strb.w	r0, [r4, #32]
        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 800d58c:	1ad2      	subs	r2, r2, r3
 800d58e:	b2d2      	uxtb	r2, r2
 800d590:	3a04      	subs	r2, #4
 800d592:	b2d2      	uxtb	r2, r2
 800d594:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 800d598:	4419      	add	r1, r3
 800d59a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d59c:	f003 ffad 	bl	80114fa <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 800d5a0:	e7d8      	b.n	800d554 <LoRaMacParserData+0x68>
        return LORAMAC_PARSER_ERROR_NPE;
 800d5a2:	2002      	movs	r0, #2
}
 800d5a4:	4770      	bx	lr
        return LORAMAC_PARSER_ERROR_NPE;
 800d5a6:	2002      	movs	r0, #2
 800d5a8:	e7ea      	b.n	800d580 <LoRaMacParserData+0x94>

0800d5aa <LoRaMacSerializerJoinRequest>:
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d5aa:	b370      	cbz	r0, 800d60a <LoRaMacSerializerJoinRequest+0x60>
{
 800d5ac:	b510      	push	{r4, lr}
 800d5ae:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d5b0:	6803      	ldr	r3, [r0, #0]
 800d5b2:	b363      	cbz	r3, 800d60e <LoRaMacSerializerJoinRequest+0x64>
    }

    uint16_t bufItr = 0;

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 800d5b4:	7902      	ldrb	r2, [r0, #4]
 800d5b6:	2a16      	cmp	r2, #22
 800d5b8:	d92b      	bls.n	800d612 <LoRaMacSerializerJoinRequest+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d5ba:	7942      	ldrb	r2, [r0, #5]
 800d5bc:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 800d5be:	4601      	mov	r1, r0
 800d5c0:	f851 0b06 	ldr.w	r0, [r1], #6
 800d5c4:	2208      	movs	r2, #8
 800d5c6:	3001      	adds	r0, #1
 800d5c8:	f003 ffa2 	bl	8011510 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 800d5cc:	4621      	mov	r1, r4
 800d5ce:	f851 0b0e 	ldr.w	r0, [r1], #14
 800d5d2:	2208      	movs	r2, #8
 800d5d4:	3009      	adds	r0, #9
 800d5d6:	f003 ff9b 	bl	8011510 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 800d5da:	8ae2      	ldrh	r2, [r4, #22]
 800d5dc:	6823      	ldr	r3, [r4, #0]
 800d5de:	745a      	strb	r2, [r3, #17]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 800d5e0:	8ae3      	ldrh	r3, [r4, #22]
 800d5e2:	6822      	ldr	r2, [r4, #0]
 800d5e4:	0a1b      	lsrs	r3, r3, #8
 800d5e6:	7493      	strb	r3, [r2, #18]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d5e8:	69a2      	ldr	r2, [r4, #24]
 800d5ea:	6823      	ldr	r3, [r4, #0]
 800d5ec:	74da      	strb	r2, [r3, #19]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d5ee:	69a3      	ldr	r3, [r4, #24]
 800d5f0:	0a1b      	lsrs	r3, r3, #8
 800d5f2:	6822      	ldr	r2, [r4, #0]
 800d5f4:	7513      	strb	r3, [r2, #20]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d5f6:	8b62      	ldrh	r2, [r4, #26]
 800d5f8:	6823      	ldr	r3, [r4, #0]
 800d5fa:	755a      	strb	r2, [r3, #21]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d5fc:	7ee2      	ldrb	r2, [r4, #27]
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	759a      	strb	r2, [r3, #22]

    macMsg->BufSize = bufItr;
 800d602:	2317      	movs	r3, #23
 800d604:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d606:	2000      	movs	r0, #0
}
 800d608:	bd10      	pop	{r4, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d60a:	2001      	movs	r0, #1
}
 800d60c:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d60e:	2001      	movs	r0, #1
 800d610:	e7fa      	b.n	800d608 <LoRaMacSerializerJoinRequest+0x5e>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d612:	2002      	movs	r0, #2
 800d614:	e7f8      	b.n	800d608 <LoRaMacSerializerJoinRequest+0x5e>

0800d616 <LoRaMacSerializerData>:
    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d616:	2800      	cmp	r0, #0
 800d618:	d066      	beq.n	800d6e8 <LoRaMacSerializerData+0xd2>
{
 800d61a:	b538      	push	{r3, r4, r5, lr}
 800d61c:	4604      	mov	r4, r0
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 800d61e:	6801      	ldr	r1, [r0, #0]
 800d620:	2900      	cmp	r1, #0
 800d622:	d063      	beq.n	800d6ec <LoRaMacSerializerData+0xd6>
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d624:	7b02      	ldrb	r2, [r0, #12]
 800d626:	f002 020f 	and.w	r2, r2, #15
 800d62a:	f102 0008 	add.w	r0, r2, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d62e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d632:	b10b      	cbz	r3, 800d638 <LoRaMacSerializerData+0x22>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 800d634:	f102 0009 	add.w	r0, r2, #9
    }

    computedBufSize += macMsg->FRMPayloadSize;
 800d638:	4403      	add	r3, r0
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 800d63a:	3304      	adds	r3, #4
 800d63c:	b29b      	uxth	r3, r3

    if( macMsg->BufSize < computedBufSize )
 800d63e:	7922      	ldrb	r2, [r4, #4]
 800d640:	429a      	cmp	r2, r3
 800d642:	d355      	bcc.n	800d6f0 <LoRaMacSerializerData+0xda>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 800d644:	7963      	ldrb	r3, [r4, #5]
 800d646:	700b      	strb	r3, [r1, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 800d648:	68a2      	ldr	r2, [r4, #8]
 800d64a:	6823      	ldr	r3, [r4, #0]
 800d64c:	705a      	strb	r2, [r3, #1]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 800d64e:	68a3      	ldr	r3, [r4, #8]
 800d650:	0a1b      	lsrs	r3, r3, #8
 800d652:	6822      	ldr	r2, [r4, #0]
 800d654:	7093      	strb	r3, [r2, #2]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 800d656:	8962      	ldrh	r2, [r4, #10]
 800d658:	6823      	ldr	r3, [r4, #0]
 800d65a:	70da      	strb	r2, [r3, #3]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 800d65c:	7ae2      	ldrb	r2, [r4, #11]
 800d65e:	6823      	ldr	r3, [r4, #0]
 800d660:	711a      	strb	r2, [r3, #4]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 800d662:	6823      	ldr	r3, [r4, #0]
 800d664:	7b22      	ldrb	r2, [r4, #12]
 800d666:	715a      	strb	r2, [r3, #5]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 800d668:	89e2      	ldrh	r2, [r4, #14]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	719a      	strb	r2, [r3, #6]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 800d66e:	89e3      	ldrh	r3, [r4, #14]
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	0a1b      	lsrs	r3, r3, #8
 800d674:	71d3      	strb	r3, [r2, #7]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 800d676:	4621      	mov	r1, r4
 800d678:	f851 0b10 	ldr.w	r0, [r1], #16
 800d67c:	7b22      	ldrb	r2, [r4, #12]
 800d67e:	f002 020f 	and.w	r2, r2, #15
 800d682:	3008      	adds	r0, #8
 800d684:	f003 ff39 	bl	80114fa <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 800d688:	7b23      	ldrb	r3, [r4, #12]
 800d68a:	f003 030f 	and.w	r3, r3, #15
 800d68e:	f103 0508 	add.w	r5, r3, #8

    if( macMsg->FRMPayloadSize > 0 )
 800d692:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d696:	b12a      	cbz	r2, 800d6a4 <LoRaMacSerializerData+0x8e>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 800d698:	6822      	ldr	r2, [r4, #0]
 800d69a:	f894 1020 	ldrb.w	r1, [r4, #32]
 800d69e:	5551      	strb	r1, [r2, r5]
 800d6a0:	f103 0509 	add.w	r5, r3, #9
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 800d6a4:	6820      	ldr	r0, [r4, #0]
 800d6a6:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 800d6aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d6ac:	4428      	add	r0, r5
 800d6ae:	f003 ff24 	bl	80114fa <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 800d6b2:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800d6b6:	442b      	add	r3, r5

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 800d6b8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 800d6ba:	6821      	ldr	r1, [r4, #0]
 800d6bc:	1c5a      	adds	r2, r3, #1
 800d6be:	b292      	uxth	r2, r2
 800d6c0:	54c8      	strb	r0, [r1, r3]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 800d6c2:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800d6c4:	0a08      	lsrs	r0, r1, #8
 800d6c6:	6825      	ldr	r5, [r4, #0]
 800d6c8:	1c99      	adds	r1, r3, #2
 800d6ca:	b289      	uxth	r1, r1
 800d6cc:	54a8      	strb	r0, [r5, r2]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 800d6ce:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800d6d0:	6820      	ldr	r0, [r4, #0]
 800d6d2:	1cda      	adds	r2, r3, #3
 800d6d4:	b292      	uxth	r2, r2
 800d6d6:	5445      	strb	r5, [r0, r1]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 800d6d8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
 800d6dc:	6821      	ldr	r1, [r4, #0]
 800d6de:	3304      	adds	r3, #4
 800d6e0:	5488      	strb	r0, [r1, r2]

    macMsg->BufSize = bufItr;
 800d6e2:	7123      	strb	r3, [r4, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 800d6e4:	2000      	movs	r0, #0
}
 800d6e6:	bd38      	pop	{r3, r4, r5, pc}
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d6e8:	2001      	movs	r0, #1
}
 800d6ea:	4770      	bx	lr
        return LORAMAC_SERIALIZER_ERROR_NPE;
 800d6ec:	2001      	movs	r0, #1
 800d6ee:	e7fa      	b.n	800d6e6 <LoRaMacSerializerData+0xd0>
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 800d6f0:	2002      	movs	r0, #2
 800d6f2:	e7f8      	b.n	800d6e6 <LoRaMacSerializerData+0xd0>

0800d6f4 <NvmDataMgmtEvent>:
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800d6f4:	4b02      	ldr	r3, [pc, #8]	; (800d700 <NvmDataMgmtEvent+0xc>)
 800d6f6:	881a      	ldrh	r2, [r3, #0]
 800d6f8:	4310      	orrs	r0, r2
 800d6fa:	8018      	strh	r0, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800d6fc:	4770      	bx	lr
 800d6fe:	bf00      	nop
 800d700:	20001034 	.word	0x20001034

0800d704 <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800d704:	b508      	push	{r3, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Input checks */
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800d706:	4b06      	ldr	r3, [pc, #24]	; (800d720 <NvmDataMgmtStoreBegin+0x1c>)
 800d708:	881b      	ldrh	r3, [r3, #0]
 800d70a:	b11b      	cbz	r3, 800d714 <NvmDataMgmtStoreBegin+0x10>
    {
        /* There was no update. */
        return NVM_DATA_NO_UPDATED_DATA;
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800d70c:	f7fe f88c 	bl	800b828 <LoRaMacStop>
 800d710:	b918      	cbnz	r0, 800d71a <NvmDataMgmtStoreBegin+0x16>
    }
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d712:	bd08      	pop	{r3, pc}
        return NVM_DATA_NO_UPDATED_DATA;
 800d714:	f06f 0001 	mvn.w	r0, #1
 800d718:	e7fb      	b.n	800d712 <NvmDataMgmtStoreBegin+0xe>
        return NVM_DATA_NOT_AVAILABLE;
 800d71a:	f06f 0002 	mvn.w	r0, #2
 800d71e:	e7f8      	b.n	800d712 <NvmDataMgmtStoreBegin+0xe>
 800d720:	20001034 	.word	0x20001034

0800d724 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800d724:	b510      	push	{r4, lr}
#if ( CONTEXT_MANAGEMENT_ENABLED == 1 )
    /* Reset notification flags */
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800d726:	2400      	movs	r4, #0
 800d728:	4b02      	ldr	r3, [pc, #8]	; (800d734 <NvmDataMgmtStoreEnd+0x10>)
 800d72a:	801c      	strh	r4, [r3, #0]

    /* Resume LoRaMac */
    LoRaMacStart( );
 800d72c:	f7fe f870 	bl	800b810 <LoRaMacStart>
    return NVM_DATA_OK;
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800d730:	4620      	mov	r0, r4
 800d732:	bd10      	pop	{r4, pc}
 800d734:	20001034 	.word	0x20001034

0800d738 <RegionIsActive>:
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
    switch( region )
 800d738:	2805      	cmp	r0, #5
 800d73a:	d805      	bhi.n	800d748 <RegionIsActive+0x10>
 800d73c:	2804      	cmp	r0, #4
 800d73e:	d201      	bcs.n	800d744 <RegionIsActive+0xc>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 800d740:	2000      	movs	r0, #0
 800d742:	4770      	bx	lr
    switch( region )
 800d744:	2001      	movs	r0, #1
 800d746:	4770      	bx	lr
 800d748:	2808      	cmp	r0, #8
 800d74a:	d101      	bne.n	800d750 <RegionIsActive+0x18>
 800d74c:	2001      	movs	r0, #1
 800d74e:	4770      	bx	lr
            return false;
 800d750:	2000      	movs	r0, #0
        }
    }
}
 800d752:	4770      	bx	lr

0800d754 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 800d754:	b500      	push	{lr}
 800d756:	b083      	sub	sp, #12
 800d758:	4603      	mov	r3, r0
 800d75a:	4608      	mov	r0, r1
    PhyParam_t phyParam = { 0 };
 800d75c:	2200      	movs	r2, #0
 800d75e:	9200      	str	r2, [sp, #0]
    switch( region )
 800d760:	2b05      	cmp	r3, #5
 800d762:	d00d      	beq.n	800d780 <RegionGetPhyParam+0x2c>
 800d764:	2b08      	cmp	r3, #8
 800d766:	d00f      	beq.n	800d788 <RegionGetPhyParam+0x34>
 800d768:	2b04      	cmp	r3, #4
 800d76a:	d002      	beq.n	800d772 <RegionGetPhyParam+0x1e>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 800d76c:	9b00      	ldr	r3, [sp, #0]
 800d76e:	9301      	str	r3, [sp, #4]
 800d770:	e002      	b.n	800d778 <RegionGetPhyParam+0x24>
        EU433_GET_PHY_PARAM( );
 800d772:	f000 fe09 	bl	800e388 <RegionEU433GetPhyParam>
 800d776:	9001      	str	r0, [sp, #4]
        }
    }
}
 800d778:	9801      	ldr	r0, [sp, #4]
 800d77a:	b003      	add	sp, #12
 800d77c:	f85d fb04 	ldr.w	pc, [sp], #4
        EU868_GET_PHY_PARAM( );
 800d780:	f001 fbee 	bl	800ef60 <RegionEU868GetPhyParam>
 800d784:	9001      	str	r0, [sp, #4]
 800d786:	e7f7      	b.n	800d778 <RegionGetPhyParam+0x24>
        US915_GET_PHY_PARAM( );
 800d788:	f002 f9e0 	bl	800fb4c <RegionUS915GetPhyParam>
 800d78c:	9001      	str	r0, [sp, #4]
 800d78e:	e7f3      	b.n	800d778 <RegionGetPhyParam+0x24>

0800d790 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 800d790:	b508      	push	{r3, lr}
 800d792:	4603      	mov	r3, r0
 800d794:	4608      	mov	r0, r1
    switch( region )
 800d796:	2b05      	cmp	r3, #5
 800d798:	d007      	beq.n	800d7aa <RegionSetBandTxDone+0x1a>
 800d79a:	2b08      	cmp	r3, #8
 800d79c:	d008      	beq.n	800d7b0 <RegionSetBandTxDone+0x20>
 800d79e:	2b04      	cmp	r3, #4
 800d7a0:	d000      	beq.n	800d7a4 <RegionSetBandTxDone+0x14>
        default:
        {
            return;
        }
    }
}
 800d7a2:	bd08      	pop	{r3, pc}
        EU433_SET_BAND_TX_DONE( );
 800d7a4:	f000 feae 	bl	800e504 <RegionEU433SetBandTxDone>
 800d7a8:	e7fb      	b.n	800d7a2 <RegionSetBandTxDone+0x12>
        EU868_SET_BAND_TX_DONE( );
 800d7aa:	f001 fc95 	bl	800f0d8 <RegionEU868SetBandTxDone>
 800d7ae:	e7f8      	b.n	800d7a2 <RegionSetBandTxDone+0x12>
        US915_SET_BAND_TX_DONE( );
 800d7b0:	f002 faa2 	bl	800fcf8 <RegionUS915SetBandTxDone>
 800d7b4:	e7f5      	b.n	800d7a2 <RegionSetBandTxDone+0x12>

0800d7b6 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 800d7b6:	b508      	push	{r3, lr}
 800d7b8:	4603      	mov	r3, r0
 800d7ba:	4608      	mov	r0, r1
    switch( region )
 800d7bc:	2b05      	cmp	r3, #5
 800d7be:	d007      	beq.n	800d7d0 <RegionInitDefaults+0x1a>
 800d7c0:	2b08      	cmp	r3, #8
 800d7c2:	d008      	beq.n	800d7d6 <RegionInitDefaults+0x20>
 800d7c4:	2b04      	cmp	r3, #4
 800d7c6:	d000      	beq.n	800d7ca <RegionInitDefaults+0x14>
        default:
        {
            break;
        }
    }
}
 800d7c8:	bd08      	pop	{r3, pc}
        EU433_INIT_DEFAULTS( );
 800d7ca:	f000 feb9 	bl	800e540 <RegionEU433InitDefaults>
 800d7ce:	e7fb      	b.n	800d7c8 <RegionInitDefaults+0x12>
        EU868_INIT_DEFAULTS( );
 800d7d0:	f001 fca0 	bl	800f114 <RegionEU868InitDefaults>
 800d7d4:	e7f8      	b.n	800d7c8 <RegionInitDefaults+0x12>
        US915_INIT_DEFAULTS( );
 800d7d6:	f002 faad 	bl	800fd34 <RegionUS915InitDefaults>
}
 800d7da:	e7f5      	b.n	800d7c8 <RegionInitDefaults+0x12>

0800d7dc <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800d7dc:	b508      	push	{r3, lr}
 800d7de:	4603      	mov	r3, r0
 800d7e0:	4608      	mov	r0, r1
 800d7e2:	4611      	mov	r1, r2
    switch( region )
 800d7e4:	2b05      	cmp	r3, #5
 800d7e6:	d008      	beq.n	800d7fa <RegionVerify+0x1e>
 800d7e8:	2b08      	cmp	r3, #8
 800d7ea:	d009      	beq.n	800d800 <RegionVerify+0x24>
 800d7ec:	2b04      	cmp	r3, #4
 800d7ee:	d001      	beq.n	800d7f4 <RegionVerify+0x18>
 800d7f0:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d7f2:	bd08      	pop	{r3, pc}
        EU433_VERIFY( );
 800d7f4:	f000 ff06 	bl	800e604 <RegionEU433Verify>
 800d7f8:	e7fb      	b.n	800d7f2 <RegionVerify+0x16>
        EU868_VERIFY( );
 800d7fa:	f001 fcf7 	bl	800f1ec <RegionEU868Verify>
 800d7fe:	e7f8      	b.n	800d7f2 <RegionVerify+0x16>
        US915_VERIFY( );
 800d800:	f002 fb3c 	bl	800fe7c <RegionUS915Verify>
 800d804:	e7f5      	b.n	800d7f2 <RegionVerify+0x16>

0800d806 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 800d806:	b508      	push	{r3, lr}
 800d808:	4603      	mov	r3, r0
 800d80a:	4608      	mov	r0, r1
    switch( region )
 800d80c:	2b05      	cmp	r3, #5
 800d80e:	d007      	beq.n	800d820 <RegionApplyCFList+0x1a>
 800d810:	2b08      	cmp	r3, #8
 800d812:	d008      	beq.n	800d826 <RegionApplyCFList+0x20>
 800d814:	2b04      	cmp	r3, #4
 800d816:	d000      	beq.n	800d81a <RegionApplyCFList+0x14>
        default:
        {
            break;
        }
    }
}
 800d818:	bd08      	pop	{r3, pc}
        EU433_APPLY_CF_LIST( );
 800d81a:	f001 faa7 	bl	800ed6c <RegionEU433ApplyCFList>
 800d81e:	e7fb      	b.n	800d818 <RegionApplyCFList+0x12>
        EU868_APPLY_CF_LIST( );
 800d820:	f002 f8b6 	bl	800f990 <RegionEU868ApplyCFList>
 800d824:	e7f8      	b.n	800d818 <RegionApplyCFList+0x12>
        US915_APPLY_CF_LIST( );
 800d826:	f002 fb63 	bl	800fef0 <RegionUS915ApplyCFList>
}
 800d82a:	e7f5      	b.n	800d818 <RegionApplyCFList+0x12>

0800d82c <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 800d82c:	b508      	push	{r3, lr}
 800d82e:	4603      	mov	r3, r0
 800d830:	4608      	mov	r0, r1
    switch( region )
 800d832:	2b05      	cmp	r3, #5
 800d834:	d008      	beq.n	800d848 <RegionChanMaskSet+0x1c>
 800d836:	2b08      	cmp	r3, #8
 800d838:	d009      	beq.n	800d84e <RegionChanMaskSet+0x22>
 800d83a:	2b04      	cmp	r3, #4
 800d83c:	d001      	beq.n	800d842 <RegionChanMaskSet+0x16>
 800d83e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d840:	bd08      	pop	{r3, pc}
        EU433_CHAN_MASK_SET( );
 800d842:	f000 ff1d 	bl	800e680 <RegionEU433ChanMaskSet>
 800d846:	e7fb      	b.n	800d840 <RegionChanMaskSet+0x14>
        EU868_CHAN_MASK_SET( );
 800d848:	f001 fd16 	bl	800f278 <RegionEU868ChanMaskSet>
 800d84c:	e7f8      	b.n	800d840 <RegionChanMaskSet+0x14>
        US915_CHAN_MASK_SET( );
 800d84e:	f002 fb8d 	bl	800ff6c <RegionUS915ChanMaskSet>
 800d852:	e7f5      	b.n	800d840 <RegionChanMaskSet+0x14>

0800d854 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800d854:	b508      	push	{r3, lr}
 800d856:	4684      	mov	ip, r0
 800d858:	4608      	mov	r0, r1
 800d85a:	4611      	mov	r1, r2
 800d85c:	461a      	mov	r2, r3
    switch( region )
 800d85e:	f1bc 0f05 	cmp.w	ip, #5
 800d862:	d00a      	beq.n	800d87a <RegionComputeRxWindowParameters+0x26>
 800d864:	f1bc 0f08 	cmp.w	ip, #8
 800d868:	d00b      	beq.n	800d882 <RegionComputeRxWindowParameters+0x2e>
 800d86a:	f1bc 0f04 	cmp.w	ip, #4
 800d86e:	d000      	beq.n	800d872 <RegionComputeRxWindowParameters+0x1e>
        default:
        {
            break;
        }
    }
}
 800d870:	bd08      	pop	{r3, pc}
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d872:	9b02      	ldr	r3, [sp, #8]
 800d874:	f000 ff22 	bl	800e6bc <RegionEU433ComputeRxWindowParameters>
 800d878:	e7fa      	b.n	800d870 <RegionComputeRxWindowParameters+0x1c>
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d87a:	9b02      	ldr	r3, [sp, #8]
 800d87c:	f001 fd1a 	bl	800f2b4 <RegionEU868ComputeRxWindowParameters>
 800d880:	e7f6      	b.n	800d870 <RegionComputeRxWindowParameters+0x1c>
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
 800d882:	9b02      	ldr	r3, [sp, #8]
 800d884:	f002 fbb4 	bl	800fff0 <RegionUS915ComputeRxWindowParameters>
}
 800d888:	e7f2      	b.n	800d870 <RegionComputeRxWindowParameters+0x1c>

0800d88a <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800d88a:	b508      	push	{r3, lr}
 800d88c:	4603      	mov	r3, r0
 800d88e:	4608      	mov	r0, r1
 800d890:	4611      	mov	r1, r2
    switch( region )
 800d892:	2b05      	cmp	r3, #5
 800d894:	d008      	beq.n	800d8a8 <RegionRxConfig+0x1e>
 800d896:	2b08      	cmp	r3, #8
 800d898:	d009      	beq.n	800d8ae <RegionRxConfig+0x24>
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d001      	beq.n	800d8a2 <RegionRxConfig+0x18>
 800d89e:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d8a0:	bd08      	pop	{r3, pc}
        EU433_RX_CONFIG( );
 800d8a2:	f000 ff41 	bl	800e728 <RegionEU433RxConfig>
 800d8a6:	e7fb      	b.n	800d8a0 <RegionRxConfig+0x16>
        EU868_RX_CONFIG( );
 800d8a8:	f001 fd3a 	bl	800f320 <RegionEU868RxConfig>
 800d8ac:	e7f8      	b.n	800d8a0 <RegionRxConfig+0x16>
        US915_RX_CONFIG( );
 800d8ae:	f002 fbcd 	bl	801004c <RegionUS915RxConfig>
 800d8b2:	e7f5      	b.n	800d8a0 <RegionRxConfig+0x16>

0800d8b4 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800d8b4:	b508      	push	{r3, lr}
 800d8b6:	4684      	mov	ip, r0
 800d8b8:	4608      	mov	r0, r1
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	461a      	mov	r2, r3
    switch( region )
 800d8be:	f1bc 0f05 	cmp.w	ip, #5
 800d8c2:	d00a      	beq.n	800d8da <RegionTxConfig+0x26>
 800d8c4:	f1bc 0f08 	cmp.w	ip, #8
 800d8c8:	d00a      	beq.n	800d8e0 <RegionTxConfig+0x2c>
 800d8ca:	f1bc 0f04 	cmp.w	ip, #4
 800d8ce:	d001      	beq.n	800d8d4 <RegionTxConfig+0x20>
 800d8d0:	2000      	movs	r0, #0
        default:
        {
            return false;
        }
    }
}
 800d8d2:	bd08      	pop	{r3, pc}
        EU433_TX_CONFIG( );
 800d8d4:	f000 ffac 	bl	800e830 <RegionEU433TxConfig>
 800d8d8:	e7fb      	b.n	800d8d2 <RegionTxConfig+0x1e>
        EU868_TX_CONFIG( );
 800d8da:	f001 fda5 	bl	800f428 <RegionEU868TxConfig>
 800d8de:	e7f8      	b.n	800d8d2 <RegionTxConfig+0x1e>
        US915_TX_CONFIG( );
 800d8e0:	f002 fc0e 	bl	8010100 <RegionUS915TxConfig>
 800d8e4:	e7f5      	b.n	800d8d2 <RegionTxConfig+0x1e>

0800d8e6 <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800d8e6:	b500      	push	{lr}
 800d8e8:	b083      	sub	sp, #12
 800d8ea:	4684      	mov	ip, r0
 800d8ec:	4608      	mov	r0, r1
 800d8ee:	4611      	mov	r1, r2
 800d8f0:	461a      	mov	r2, r3
    switch( region )
 800d8f2:	f1bc 0f05 	cmp.w	ip, #5
 800d8f6:	d00f      	beq.n	800d918 <RegionLinkAdrReq+0x32>
 800d8f8:	f1bc 0f08 	cmp.w	ip, #8
 800d8fc:	d012      	beq.n	800d924 <RegionLinkAdrReq+0x3e>
 800d8fe:	f1bc 0f04 	cmp.w	ip, #4
 800d902:	d003      	beq.n	800d90c <RegionLinkAdrReq+0x26>
 800d904:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d906:	b003      	add	sp, #12
 800d908:	f85d fb04 	ldr.w	pc, [sp], #4
        EU433_LINK_ADR_REQ( );
 800d90c:	9b05      	ldr	r3, [sp, #20]
 800d90e:	9300      	str	r3, [sp, #0]
 800d910:	9b04      	ldr	r3, [sp, #16]
 800d912:	f001 f825 	bl	800e960 <RegionEU433LinkAdrReq>
 800d916:	e7f6      	b.n	800d906 <RegionLinkAdrReq+0x20>
        EU868_LINK_ADR_REQ( );
 800d918:	9b05      	ldr	r3, [sp, #20]
 800d91a:	9300      	str	r3, [sp, #0]
 800d91c:	9b04      	ldr	r3, [sp, #16]
 800d91e:	f001 fe1b 	bl	800f558 <RegionEU868LinkAdrReq>
 800d922:	e7f0      	b.n	800d906 <RegionLinkAdrReq+0x20>
        US915_LINK_ADR_REQ( );
 800d924:	9b05      	ldr	r3, [sp, #20]
 800d926:	9300      	str	r3, [sp, #0]
 800d928:	9b04      	ldr	r3, [sp, #16]
 800d92a:	f002 fc63 	bl	80101f4 <RegionUS915LinkAdrReq>
 800d92e:	e7ea      	b.n	800d906 <RegionLinkAdrReq+0x20>

0800d930 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 800d930:	b508      	push	{r3, lr}
 800d932:	4603      	mov	r3, r0
 800d934:	4608      	mov	r0, r1
    switch( region )
 800d936:	2b05      	cmp	r3, #5
 800d938:	d008      	beq.n	800d94c <RegionRxParamSetupReq+0x1c>
 800d93a:	2b08      	cmp	r3, #8
 800d93c:	d009      	beq.n	800d952 <RegionRxParamSetupReq+0x22>
 800d93e:	2b04      	cmp	r3, #4
 800d940:	d001      	beq.n	800d946 <RegionRxParamSetupReq+0x16>
 800d942:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d944:	bd08      	pop	{r3, pc}
        EU433_RX_PARAM_SETUP_REQ( );
 800d946:	f001 f8d1 	bl	800eaec <RegionEU433RxParamSetupReq>
 800d94a:	e7fb      	b.n	800d944 <RegionRxParamSetupReq+0x14>
        EU868_RX_PARAM_SETUP_REQ( );
 800d94c:	f001 fec8 	bl	800f6e0 <RegionEU868RxParamSetupReq>
 800d950:	e7f8      	b.n	800d944 <RegionRxParamSetupReq+0x14>
        US915_RX_PARAM_SETUP_REQ( );
 800d952:	f002 fd91 	bl	8010478 <RegionUS915RxParamSetupReq>
 800d956:	e7f5      	b.n	800d944 <RegionRxParamSetupReq+0x14>

0800d958 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 800d958:	b508      	push	{r3, lr}
 800d95a:	4603      	mov	r3, r0
 800d95c:	4608      	mov	r0, r1
    switch( region )
 800d95e:	2b05      	cmp	r3, #5
 800d960:	d008      	beq.n	800d974 <RegionNewChannelReq+0x1c>
 800d962:	2b08      	cmp	r3, #8
 800d964:	d009      	beq.n	800d97a <RegionNewChannelReq+0x22>
 800d966:	2b04      	cmp	r3, #4
 800d968:	d001      	beq.n	800d96e <RegionNewChannelReq+0x16>
 800d96a:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d96c:	bd08      	pop	{r3, pc}
        EU433_NEW_CHANNEL_REQ( );
 800d96e:	f001 fa3e 	bl	800edee <RegionEU433NewChannelReq>
 800d972:	e7fb      	b.n	800d96c <RegionNewChannelReq+0x14>
        EU868_NEW_CHANNEL_REQ( );
 800d974:	f002 f84d 	bl	800fa12 <RegionEU868NewChannelReq>
 800d978:	e7f8      	b.n	800d96c <RegionNewChannelReq+0x14>
        US915_NEW_CHANNEL_REQ( );
 800d97a:	f002 fda8 	bl	80104ce <RegionUS915NewChannelReq>
 800d97e:	e7f5      	b.n	800d96c <RegionNewChannelReq+0x14>

0800d980 <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 800d980:	b508      	push	{r3, lr}
 800d982:	4603      	mov	r3, r0
 800d984:	4608      	mov	r0, r1
    switch( region )
 800d986:	2b05      	cmp	r3, #5
 800d988:	d008      	beq.n	800d99c <RegionTxParamSetupReq+0x1c>
 800d98a:	2b08      	cmp	r3, #8
 800d98c:	d009      	beq.n	800d9a2 <RegionTxParamSetupReq+0x22>
 800d98e:	2b04      	cmp	r3, #4
 800d990:	d001      	beq.n	800d996 <RegionTxParamSetupReq+0x16>
 800d992:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d994:	bd08      	pop	{r3, pc}
        EU433_TX_PARAM_SETUP_REQ( );
 800d996:	f001 f8c6 	bl	800eb26 <RegionEU433TxParamSetupReq>
 800d99a:	e7fb      	b.n	800d994 <RegionTxParamSetupReq+0x14>
        EU868_TX_PARAM_SETUP_REQ( );
 800d99c:	f001 fec4 	bl	800f728 <RegionEU868TxParamSetupReq>
 800d9a0:	e7f8      	b.n	800d994 <RegionTxParamSetupReq+0x14>
        US915_TX_PARAM_SETUP_REQ( );
 800d9a2:	f002 fd97 	bl	80104d4 <RegionUS915TxParamSetupReq>
 800d9a6:	e7f5      	b.n	800d994 <RegionTxParamSetupReq+0x14>

0800d9a8 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 800d9a8:	b508      	push	{r3, lr}
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	4608      	mov	r0, r1
    switch( region )
 800d9ae:	2b05      	cmp	r3, #5
 800d9b0:	d008      	beq.n	800d9c4 <RegionDlChannelReq+0x1c>
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	d009      	beq.n	800d9ca <RegionDlChannelReq+0x22>
 800d9b6:	2b04      	cmp	r3, #4
 800d9b8:	d001      	beq.n	800d9be <RegionDlChannelReq+0x16>
 800d9ba:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d9bc:	bd08      	pop	{r3, pc}
        EU433_DL_CHANNEL_REQ( );
 800d9be:	f001 f8b5 	bl	800eb2c <RegionEU433DlChannelReq>
 800d9c2:	e7fb      	b.n	800d9bc <RegionDlChannelReq+0x14>
        EU868_DL_CHANNEL_REQ( );
 800d9c4:	f001 feb4 	bl	800f730 <RegionEU868DlChannelReq>
 800d9c8:	e7f8      	b.n	800d9bc <RegionDlChannelReq+0x14>
        US915_DL_CHANNEL_REQ( );
 800d9ca:	f002 fd86 	bl	80104da <RegionUS915DlChannelReq>
 800d9ce:	e7f5      	b.n	800d9bc <RegionDlChannelReq+0x14>

0800d9d0 <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 800d9d0:	b508      	push	{r3, lr}
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	4611      	mov	r1, r2
    switch( region )
 800d9d8:	2b05      	cmp	r3, #5
 800d9da:	d008      	beq.n	800d9ee <RegionAlternateDr+0x1e>
 800d9dc:	2b08      	cmp	r3, #8
 800d9de:	d009      	beq.n	800d9f4 <RegionAlternateDr+0x24>
 800d9e0:	2b04      	cmp	r3, #4
 800d9e2:	d001      	beq.n	800d9e8 <RegionAlternateDr+0x18>
 800d9e4:	2000      	movs	r0, #0
        default:
        {
            return 0;
        }
    }
}
 800d9e6:	bd08      	pop	{r3, pc}
        EU433_ALTERNATE_DR( );
 800d9e8:	f001 f8c6 	bl	800eb78 <RegionEU433AlternateDr>
 800d9ec:	e7fb      	b.n	800d9e6 <RegionAlternateDr+0x16>
        EU868_ALTERNATE_DR( );
 800d9ee:	f001 fecb 	bl	800f788 <RegionEU868AlternateDr>
 800d9f2:	e7f8      	b.n	800d9e6 <RegionAlternateDr+0x16>
        US915_ALTERNATE_DR( );
 800d9f4:	f002 fd74 	bl	80104e0 <RegionUS915AlternateDr>
 800d9f8:	e7f5      	b.n	800d9e6 <RegionAlternateDr+0x16>

0800d9fa <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800d9fa:	b508      	push	{r3, lr}
 800d9fc:	4684      	mov	ip, r0
 800d9fe:	4608      	mov	r0, r1
 800da00:	4611      	mov	r1, r2
 800da02:	461a      	mov	r2, r3
    switch( region )
 800da04:	f1bc 0f05 	cmp.w	ip, #5
 800da08:	d00b      	beq.n	800da22 <RegionNextChannel+0x28>
 800da0a:	f1bc 0f08 	cmp.w	ip, #8
 800da0e:	d00c      	beq.n	800da2a <RegionNextChannel+0x30>
 800da10:	f1bc 0f04 	cmp.w	ip, #4
 800da14:	d001      	beq.n	800da1a <RegionNextChannel+0x20>
 800da16:	2009      	movs	r0, #9
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
        }
    }
}
 800da18:	bd08      	pop	{r3, pc}
        EU433_NEXT_CHANNEL( );
 800da1a:	9b02      	ldr	r3, [sp, #8]
 800da1c:	f001 f8ae 	bl	800eb7c <RegionEU433NextChannel>
 800da20:	e7fa      	b.n	800da18 <RegionNextChannel+0x1e>
        EU868_NEXT_CHANNEL( );
 800da22:	9b02      	ldr	r3, [sp, #8]
 800da24:	f001 feb2 	bl	800f78c <RegionEU868NextChannel>
 800da28:	e7f6      	b.n	800da18 <RegionNextChannel+0x1e>
        US915_NEXT_CHANNEL( );
 800da2a:	9b02      	ldr	r3, [sp, #8]
 800da2c:	f002 fd7a 	bl	8010524 <RegionUS915NextChannel>
 800da30:	e7f2      	b.n	800da18 <RegionNextChannel+0x1e>

0800da32 <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 800da32:	b508      	push	{r3, lr}
 800da34:	4684      	mov	ip, r0
 800da36:	4608      	mov	r0, r1
 800da38:	4611      	mov	r1, r2
 800da3a:	461a      	mov	r2, r3
    switch( region )
 800da3c:	f1bc 0f05 	cmp.w	ip, #5
 800da40:	d00a      	beq.n	800da58 <RegionApplyDrOffset+0x26>
 800da42:	f1bc 0f08 	cmp.w	ip, #8
 800da46:	d00a      	beq.n	800da5e <RegionApplyDrOffset+0x2c>
 800da48:	f1bc 0f04 	cmp.w	ip, #4
 800da4c:	d001      	beq.n	800da52 <RegionApplyDrOffset+0x20>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 800da4e:	b2c8      	uxtb	r0, r1
 800da50:	e001      	b.n	800da56 <RegionApplyDrOffset+0x24>
        EU433_APPLY_DR_OFFSET( );
 800da52:	f001 f9f7 	bl	800ee44 <RegionEU433ApplyDrOffset>
        }
    }
}
 800da56:	bd08      	pop	{r3, pc}
        EU868_APPLY_DR_OFFSET( );
 800da58:	f002 f806 	bl	800fa68 <RegionEU868ApplyDrOffset>
 800da5c:	e7fb      	b.n	800da56 <RegionApplyDrOffset+0x24>
        US915_APPLY_DR_OFFSET( );
 800da5e:	f002 fe0f 	bl	8010680 <RegionUS915ApplyDrOffset>
 800da62:	e7f8      	b.n	800da56 <RegionApplyDrOffset+0x24>

0800da64 <RegionGetVersion>:
    Version_t version;

    version.Value = REGION_VERSION;

    return version;
}
 800da64:	4800      	ldr	r0, [pc, #0]	; (800da68 <RegionGetVersion+0x4>)
 800da66:	4770      	bx	lr
 800da68:	02010001 	.word	0x02010001

0800da6c <FindAvailable125kHzChannels>:
 */
static LoRaMacStatus_t FindAvailable125kHzChannels( uint16_t currentChannelMaskLeft,
                                                    uint8_t* findAvailableChannelsIndex, uint8_t* availableChannels )
{
    // Nullpointer check
    if( findAvailableChannelsIndex == NULL || availableChannels == NULL )
 800da6c:	468c      	mov	ip, r1
 800da6e:	b1a9      	cbz	r1, 800da9c <FindAvailable125kHzChannels+0x30>
 800da70:	b1b2      	cbz	r2, 800daa0 <FindAvailable125kHzChannels+0x34>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Initialize counter
    *availableChannels = 0;
 800da72:	2300      	movs	r3, #0
 800da74:	7013      	strb	r3, [r2, #0]
    for( uint8_t i = 0; i < 8; i++ )
 800da76:	e001      	b.n	800da7c <FindAvailable125kHzChannels+0x10>
 800da78:	3301      	adds	r3, #1
 800da7a:	b2db      	uxtb	r3, r3
 800da7c:	2b07      	cmp	r3, #7
 800da7e:	d80b      	bhi.n	800da98 <FindAvailable125kHzChannels+0x2c>
    {
        // Find available channels
        if( ( currentChannelMaskLeft & ( 1 << i ) ) != 0 )
 800da80:	fa40 f103 	asr.w	r1, r0, r3
 800da84:	f011 0f01 	tst.w	r1, #1
 800da88:	d0f6      	beq.n	800da78 <FindAvailable125kHzChannels+0xc>
        {
            // Save available channel index
            findAvailableChannelsIndex[*availableChannels] = i;
 800da8a:	7811      	ldrb	r1, [r2, #0]
 800da8c:	f80c 3001 	strb.w	r3, [ip, r1]
            // Increment counter of available channels if the current channel is available
            ( *availableChannels )++;
 800da90:	7811      	ldrb	r1, [r2, #0]
 800da92:	3101      	adds	r1, #1
 800da94:	7011      	strb	r1, [r2, #0]
 800da96:	e7ef      	b.n	800da78 <FindAvailable125kHzChannels+0xc>
        }
    }

    return LORAMAC_STATUS_OK;
 800da98:	2000      	movs	r0, #0
 800da9a:	4770      	bx	lr
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800da9c:	2003      	movs	r0, #3
 800da9e:	4770      	bx	lr
 800daa0:	2003      	movs	r0, #3
}
 800daa2:	4770      	bx	lr

0800daa4 <RegionBaseUSComputeNext125kHzJoinChannel>:

LoRaMacStatus_t RegionBaseUSComputeNext125kHzJoinChannel( uint16_t* channelsMaskRemaining,
                                                          uint8_t* groupsCurrentIndex, uint8_t* newChannelIndex )
{
 800daa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800daa6:	b085      	sub	sp, #20
    uint8_t currentChannelMaskLeftIndex;
    uint16_t currentChannelMaskLeft;
    uint8_t findAvailableChannelsIndex[8] = { 0 };
 800daa8:	2300      	movs	r3, #0
 800daaa:	9302      	str	r3, [sp, #8]
 800daac:	9303      	str	r3, [sp, #12]
    uint8_t availableChannels = 0;
 800daae:	f88d 3007 	strb.w	r3, [sp, #7]
    uint8_t startIndex;

    // Null pointer check
    if( channelsMaskRemaining == NULL || groupsCurrentIndex == NULL || newChannelIndex == NULL )
 800dab2:	2800      	cmp	r0, #0
 800dab4:	d03e      	beq.n	800db34 <RegionBaseUSComputeNext125kHzJoinChannel+0x90>
 800dab6:	460d      	mov	r5, r1
 800dab8:	4617      	mov	r7, r2
 800daba:	4606      	mov	r6, r0
 800dabc:	2900      	cmp	r1, #0
 800dabe:	d03b      	beq.n	800db38 <RegionBaseUSComputeNext125kHzJoinChannel+0x94>
 800dac0:	2a00      	cmp	r2, #0
 800dac2:	d03b      	beq.n	800db3c <RegionBaseUSComputeNext125kHzJoinChannel+0x98>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // copy the current index.
    startIndex = *groupsCurrentIndex;
 800dac4:	780c      	ldrb	r4, [r1, #0]
 800dac6:	e017      	b.n	800daf8 <RegionBaseUSComputeNext125kHzJoinChannel+0x54>
        {
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
        }
        else
        {
            currentChannelMaskLeft = ( ( channelsMaskRemaining[currentChannelMaskLeftIndex] >> 8 ) & 0x00FF );
 800dac8:	f836 0013 	ldrh.w	r0, [r6, r3, lsl #1]
 800dacc:	0a00      	lsrs	r0, r0, #8
 800dace:	e019      	b.n	800db04 <RegionBaseUSComputeNext125kHzJoinChannel+0x60>
        }

        if ( availableChannels > 0 )
        {
            // Choose randomly a free channel 125kHz
            *newChannelIndex = ( startIndex * 8 ) + findAvailableChannelsIndex[randr( 0, ( availableChannels - 1 ) )];
 800dad0:	3901      	subs	r1, #1
 800dad2:	2000      	movs	r0, #0
 800dad4:	f003 fd04 	bl	80114e0 <randr>
 800dad8:	f100 0310 	add.w	r3, r0, #16
 800dadc:	eb0d 0003 	add.w	r0, sp, r3
 800dae0:	f810 3c08 	ldrb.w	r3, [r0, #-8]
 800dae4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800dae8:	703b      	strb	r3, [r7, #0]
 800daea:	e016      	b.n	800db1a <RegionBaseUSComputeNext125kHzJoinChannel+0x76>
        startIndex++;
        if ( startIndex > 7 )
        {
            startIndex = 0;
        }
    } while( ( availableChannels == 0 ) && ( startIndex != *groupsCurrentIndex ) );
 800daec:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800daf0:	b9cb      	cbnz	r3, 800db26 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
 800daf2:	782a      	ldrb	r2, [r5, #0]
 800daf4:	42a2      	cmp	r2, r4
 800daf6:	d016      	beq.n	800db26 <RegionBaseUSComputeNext125kHzJoinChannel+0x82>
        currentChannelMaskLeftIndex = (uint8_t) startIndex / 2;
 800daf8:	0863      	lsrs	r3, r4, #1
        if( ( startIndex % 2 ) == 0 )
 800dafa:	f014 0f01 	tst.w	r4, #1
 800dafe:	d1e3      	bne.n	800dac8 <RegionBaseUSComputeNext125kHzJoinChannel+0x24>
            currentChannelMaskLeft = ( channelsMaskRemaining[currentChannelMaskLeftIndex] & 0x00FF );
 800db00:	f816 0013 	ldrb.w	r0, [r6, r3, lsl #1]
        if( FindAvailable125kHzChannels( currentChannelMaskLeft, findAvailableChannelsIndex, &availableChannels ) == LORAMAC_STATUS_PARAMETER_INVALID )
 800db04:	f10d 0207 	add.w	r2, sp, #7
 800db08:	a902      	add	r1, sp, #8
 800db0a:	f7ff ffaf 	bl	800da6c <FindAvailable125kHzChannels>
 800db0e:	2803      	cmp	r0, #3
 800db10:	d00b      	beq.n	800db2a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        if ( availableChannels > 0 )
 800db12:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800db16:	2900      	cmp	r1, #0
 800db18:	d1da      	bne.n	800dad0 <RegionBaseUSComputeNext125kHzJoinChannel+0x2c>
        startIndex++;
 800db1a:	3401      	adds	r4, #1
 800db1c:	b2e4      	uxtb	r4, r4
        if ( startIndex > 7 )
 800db1e:	2c07      	cmp	r4, #7
 800db20:	d9e4      	bls.n	800daec <RegionBaseUSComputeNext125kHzJoinChannel+0x48>
            startIndex = 0;
 800db22:	2400      	movs	r4, #0
 800db24:	e7e2      	b.n	800daec <RegionBaseUSComputeNext125kHzJoinChannel+0x48>

    if ( availableChannels > 0 )
 800db26:	b913      	cbnz	r3, 800db2e <RegionBaseUSComputeNext125kHzJoinChannel+0x8a>
    {
        *groupsCurrentIndex = startIndex;
        return LORAMAC_STATUS_OK;
    }

    return LORAMAC_STATUS_PARAMETER_INVALID;
 800db28:	2003      	movs	r0, #3
}
 800db2a:	b005      	add	sp, #20
 800db2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *groupsCurrentIndex = startIndex;
 800db2e:	702c      	strb	r4, [r5, #0]
        return LORAMAC_STATUS_OK;
 800db30:	2000      	movs	r0, #0
 800db32:	e7fa      	b.n	800db2a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800db34:	2003      	movs	r0, #3
 800db36:	e7f8      	b.n	800db2a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800db38:	2003      	movs	r0, #3
 800db3a:	e7f6      	b.n	800db2a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>
 800db3c:	2003      	movs	r0, #3
 800db3e:	e7f4      	b.n	800db2a <RegionBaseUSComputeNext125kHzJoinChannel+0x86>

0800db40 <RegionBaseUSCalcDownlinkFrequency>:
uint32_t RegionBaseUSCalcDownlinkFrequency( uint8_t channel, uint32_t frequency,
                                            uint32_t stepwidth )
{
    // Calculate the frequency
    return frequency + ( channel * stepwidth );
}
 800db40:	fb02 1000 	mla	r0, r2, r0, r1
 800db44:	4770      	bx	lr

0800db46 <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800db46:	b082      	sub	sp, #8
 800db48:	f10d 0c08 	add.w	ip, sp, #8
 800db4c:	e90c 000c 	stmdb	ip, {r2, r3}
    uint16_t dutyCycle = band->DCycle;
 800db50:	8800      	ldrh	r0, [r0, #0]

    if( joined == false )
 800db52:	b971      	cbnz	r1, 800db72 <GetDutyCycle+0x2c>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 800db54:	4613      	mov	r3, r2
 800db56:	f5b2 6f61 	cmp.w	r2, #3600	; 0xe10
 800db5a:	d306      	bcc.n	800db6a <GetDutyCycle+0x24>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 800db5c:	f649 22af 	movw	r2, #39599	; 0x9aaf
 800db60:	4293      	cmp	r3, r2
 800db62:	d80a      	bhi.n	800db7a <GetDutyCycle+0x34>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 800db64:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800db68:	e000      	b.n	800db6c <GetDutyCycle+0x26>
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 800db6a:	2364      	movs	r3, #100	; 0x64
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 800db6c:	4298      	cmp	r0, r3
 800db6e:	bf38      	it	cc
 800db70:	4618      	movcc	r0, r3
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 800db72:	b900      	cbnz	r0, 800db76 <GetDutyCycle+0x30>
    {
        dutyCycle = 1;
 800db74:	2001      	movs	r0, #1
    }

    return dutyCycle;
}
 800db76:	b002      	add	sp, #8
 800db78:	4770      	bx	lr
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 800db7a:	f242 7310 	movw	r3, #10000	; 0x2710
 800db7e:	e7f5      	b.n	800db6c <GetDutyCycle+0x26>

0800db80 <CountChannels>:

    return dutyCycle;
}

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 800db80:	4684      	mov	ip, r0
    uint8_t nbActiveBits = 0;

    for( uint8_t j = 0; j < nbBits; j++ )
 800db82:	2300      	movs	r3, #0
    uint8_t nbActiveBits = 0;
 800db84:	4618      	mov	r0, r3
    for( uint8_t j = 0; j < nbBits; j++ )
 800db86:	e001      	b.n	800db8c <CountChannels+0xc>
 800db88:	3301      	adds	r3, #1
 800db8a:	b2db      	uxtb	r3, r3
 800db8c:	428b      	cmp	r3, r1
 800db8e:	d207      	bcs.n	800dba0 <CountChannels+0x20>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 800db90:	2201      	movs	r2, #1
 800db92:	409a      	lsls	r2, r3
 800db94:	ea32 020c 	bics.w	r2, r2, ip
 800db98:	d1f6      	bne.n	800db88 <CountChannels+0x8>
        {
            nbActiveBits++;
 800db9a:	3001      	adds	r0, #1
 800db9c:	b2c0      	uxtb	r0, r0
 800db9e:	e7f3      	b.n	800db88 <CountChannels+0x8>
        }
    }
    return nbActiveBits;
}
 800dba0:	4770      	bx	lr
	...

0800dba4 <SetMaxTimeCredits>:
{
 800dba4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dba8:	b089      	sub	sp, #36	; 0x24
 800dbaa:	4604      	mov	r4, r0
 800dbac:	460e      	mov	r6, r1
 800dbae:	ad02      	add	r5, sp, #8
 800dbb0:	e885 000c 	stmia.w	r5, {r2, r3}
 800dbb4:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
 800dbb8:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 800dbbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dbc0:	f005 fe18 	bl	80137f4 <SysTimeToMs>
 800dbc4:	4607      	mov	r7, r0
    SysTime_t timeDiff = { 0 };
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	9304      	str	r3, [sp, #16]
 800dbca:	9305      	str	r3, [sp, #20]
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800dbcc:	e895 000c 	ldmia.w	r5, {r2, r3}
 800dbd0:	4631      	mov	r1, r6
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f7ff ffb7 	bl	800db46 <GetDutyCycle>
 800dbd8:	4605      	mov	r5, r0
    if( joined == false )
 800dbda:	2e00      	cmp	r6, #0
 800dbdc:	d14c      	bne.n	800dc78 <SetMaxTimeCredits+0xd4>
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 800dbde:	2864      	cmp	r0, #100	; 0x64
 800dbe0:	d025      	beq.n	800dc2e <SetMaxTimeCredits+0x8a>
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800dbe2:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800dbe6:	d025      	beq.n	800dc34 <SetMaxTimeCredits+0x90>
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 800dbe8:	4e27      	ldr	r6, [pc, #156]	; (800dc88 <SetMaxTimeCredits+0xe4>)
        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 800dbea:	68a1      	ldr	r1, [r4, #8]
 800dbec:	a806      	add	r0, sp, #24
 800dbee:	f005 fe21 	bl	8013834 <SysTimeFromMs>
 800dbf2:	9b07      	ldr	r3, [sp, #28]
 800dbf4:	9300      	str	r3, [sp, #0]
 800dbf6:	9b06      	ldr	r3, [sp, #24]
 800dbf8:	aa02      	add	r2, sp, #8
 800dbfa:	ca06      	ldmia	r2, {r1, r2}
 800dbfc:	a804      	add	r0, sp, #16
 800dbfe:	f005 fd80 	bl	8013702 <SysTimeSub>
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dc02:	f1b8 0f00 	cmp.w	r8, #0
 800dc06:	d102      	bne.n	800dc0e <SetMaxTimeCredits+0x6a>
 800dc08:	f1b9 0f00 	cmp.w	r9, #0
 800dc0c:	d002      	beq.n	800dc14 <SetMaxTimeCredits+0x70>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dc0e:	6923      	ldr	r3, [r4, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 800dc10:	42b3      	cmp	r3, r6
 800dc12:	d012      	beq.n	800dc3a <SetMaxTimeCredits+0x96>
            band->TimeCredits = maxCredits;
 800dc14:	60e6      	str	r6, [r4, #12]
            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800dc16:	9b02      	ldr	r3, [sp, #8]
 800dc18:	4a1c      	ldr	r2, [pc, #112]	; (800dc8c <SetMaxTimeCredits+0xe8>)
 800dc1a:	4293      	cmp	r3, r2
 800dc1c:	d812      	bhi.n	800dc44 <SetMaxTimeCredits+0xa0>
    if( band->LastBandUpdateTime == 0 )
 800dc1e:	6863      	ldr	r3, [r4, #4]
 800dc20:	b903      	cbnz	r3, 800dc24 <SetMaxTimeCredits+0x80>
        band->TimeCredits = maxCredits;
 800dc22:	60e6      	str	r6, [r4, #12]
    band->MaxTimeCredits = maxCredits;
 800dc24:	6126      	str	r6, [r4, #16]
}
 800dc26:	4628      	mov	r0, r5
 800dc28:	b009      	add	sp, #36	; 0x24
 800dc2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
            band->LastMaxCreditAssignTime = elapsedTime;
 800dc2e:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dc30:	4e17      	ldr	r6, [pc, #92]	; (800dc90 <SetMaxTimeCredits+0xec>)
 800dc32:	e7da      	b.n	800dbea <SetMaxTimeCredits+0x46>
            band->LastMaxCreditAssignTime = elapsedTime;
 800dc34:	60a7      	str	r7, [r4, #8]
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 800dc36:	4e17      	ldr	r6, [pc, #92]	; (800dc94 <SetMaxTimeCredits+0xf0>)
 800dc38:	e7d7      	b.n	800dbea <SetMaxTimeCredits+0x46>
            ( band->MaxTimeCredits != maxCredits ) ||
 800dc3a:	9a04      	ldr	r2, [sp, #16]
 800dc3c:	4b16      	ldr	r3, [pc, #88]	; (800dc98 <SetMaxTimeCredits+0xf4>)
 800dc3e:	429a      	cmp	r2, r3
 800dc40:	d9ed      	bls.n	800dc1e <SetMaxTimeCredits+0x7a>
 800dc42:	e7e7      	b.n	800dc14 <SetMaxTimeCredits+0x70>
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 800dc44:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800dc48:	3b30      	subs	r3, #48	; 0x30
 800dc4a:	4a14      	ldr	r2, [pc, #80]	; (800dc9c <SetMaxTimeCredits+0xf8>)
 800dc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800dc50:	0c1b      	lsrs	r3, r3, #16
 800dc52:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 800dc54:	4a12      	ldr	r2, [pc, #72]	; (800dca0 <SetMaxTimeCredits+0xfc>)
 800dc56:	fb02 f303 	mul.w	r3, r2, r3
 800dc5a:	9304      	str	r3, [sp, #16]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800dc5c:	f503 33f6 	add.w	r3, r3, #125952	; 0x1ec00
 800dc60:	3330      	adds	r3, #48	; 0x30
 800dc62:	9304      	str	r3, [sp, #16]
                timeDiff.SubSeconds = 0;
 800dc64:	2300      	movs	r3, #0
 800dc66:	f8ad 3014 	strh.w	r3, [sp, #20]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 800dc6a:	ab04      	add	r3, sp, #16
 800dc6c:	e893 0003 	ldmia.w	r3, {r0, r1}
 800dc70:	f005 fdc0 	bl	80137f4 <SysTimeToMs>
 800dc74:	60a0      	str	r0, [r4, #8]
 800dc76:	e7d2      	b.n	800dc1e <SetMaxTimeCredits+0x7a>
        if( dutyCycleEnabled == false )
 800dc78:	f1b8 0f00 	cmp.w	r8, #0
 800dc7c:	d102      	bne.n	800dc84 <SetMaxTimeCredits+0xe0>
            band->TimeCredits = maxCredits;
 800dc7e:	4e04      	ldr	r6, [pc, #16]	; (800dc90 <SetMaxTimeCredits+0xec>)
 800dc80:	60e6      	str	r6, [r4, #12]
 800dc82:	e7cc      	b.n	800dc1e <SetMaxTimeCredits+0x7a>
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 800dc84:	4e02      	ldr	r6, [pc, #8]	; (800dc90 <SetMaxTimeCredits+0xec>)
 800dc86:	e7ca      	b.n	800dc1e <SetMaxTimeCredits+0x7a>
 800dc88:	02932e00 	.word	0x02932e00
 800dc8c:	0001ec2f 	.word	0x0001ec2f
 800dc90:	001b7740 	.word	0x001b7740
 800dc94:	0112a880 	.word	0x0112a880
 800dc98:	0001517f 	.word	0x0001517f
 800dc9c:	c22e4507 	.word	0xc22e4507
 800dca0:	00015180 	.word	0x00015180

0800dca4 <UpdateTimeCredits>:
{
 800dca4:	b570      	push	{r4, r5, r6, lr}
 800dca6:	b082      	sub	sp, #8
 800dca8:	4604      	mov	r4, r0
 800dcaa:	460e      	mov	r6, r1
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	9200      	str	r2, [sp, #0]
 800dcb0:	ab06      	add	r3, sp, #24
 800dcb2:	cb0c      	ldmia	r3, {r2, r3}
 800dcb4:	f7ff ff76 	bl	800dba4 <SetMaxTimeCredits>
 800dcb8:	4605      	mov	r5, r0
    if( joined == true )
 800dcba:	b94e      	cbnz	r6, 800dcd0 <UpdateTimeCredits+0x2c>
    if( band->TimeCredits > band->MaxTimeCredits )
 800dcbc:	68e2      	ldr	r2, [r4, #12]
 800dcbe:	6923      	ldr	r3, [r4, #16]
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d900      	bls.n	800dcc6 <UpdateTimeCredits+0x22>
        band->TimeCredits = band->MaxTimeCredits;
 800dcc4:	60e3      	str	r3, [r4, #12]
    band->LastBandUpdateTime = currentTime;
 800dcc6:	9b08      	ldr	r3, [sp, #32]
 800dcc8:	6063      	str	r3, [r4, #4]
}
 800dcca:	4628      	mov	r0, r5
 800dccc:	b002      	add	sp, #8
 800dcce:	bd70      	pop	{r4, r5, r6, pc}
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 800dcd0:	6860      	ldr	r0, [r4, #4]
 800dcd2:	f005 fe0f 	bl	80138f4 <UTIL_TIMER_GetElapsedTime>
 800dcd6:	68e3      	ldr	r3, [r4, #12]
 800dcd8:	4403      	add	r3, r0
 800dcda:	60e3      	str	r3, [r4, #12]
 800dcdc:	e7ee      	b.n	800dcbc <UpdateTimeCredits+0x18>

0800dcde <RegionCommonValueInRange>:
    return false;
}

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
    if( ( value >= min ) && ( value <= max ) )
 800dcde:	4288      	cmp	r0, r1
 800dce0:	db03      	blt.n	800dcea <RegionCommonValueInRange+0xc>
 800dce2:	4290      	cmp	r0, r2
 800dce4:	dd03      	ble.n	800dcee <RegionCommonValueInRange+0x10>
    {
        return 1;
    }
    return 0;
 800dce6:	2000      	movs	r0, #0
 800dce8:	4770      	bx	lr
 800dcea:	2000      	movs	r0, #0
 800dcec:	4770      	bx	lr
        return 1;
 800dcee:	2001      	movs	r0, #1
}
 800dcf0:	4770      	bx	lr

0800dcf2 <RegionCommonChanVerifyDr>:
{
 800dcf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dcf6:	4682      	mov	sl, r0
 800dcf8:	460e      	mov	r6, r1
 800dcfa:	4690      	mov	r8, r2
 800dcfc:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 800dd00:	f99d 2020 	ldrsb.w	r2, [sp, #32]
 800dd04:	4619      	mov	r1, r3
 800dd06:	4640      	mov	r0, r8
 800dd08:	f7ff ffe9 	bl	800dcde <RegionCommonValueInRange>
 800dd0c:	b338      	cbz	r0, 800dd5e <RegionCommonChanVerifyDr+0x6c>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800dd0e:	2500      	movs	r5, #0
 800dd10:	462f      	mov	r7, r5
 800dd12:	e01e      	b.n	800dd52 <RegionCommonChanVerifyDr+0x60>
        for( uint8_t j = 0; j < 16; j++ )
 800dd14:	3401      	adds	r4, #1
 800dd16:	b2e4      	uxtb	r4, r4
 800dd18:	2c0f      	cmp	r4, #15
 800dd1a:	d816      	bhi.n	800dd4a <RegionCommonChanVerifyDr+0x58>
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 800dd1c:	f836 3015 	ldrh.w	r3, [r6, r5, lsl #1]
 800dd20:	4123      	asrs	r3, r4
 800dd22:	f013 0f01 	tst.w	r3, #1
 800dd26:	d0f5      	beq.n	800dd14 <RegionCommonChanVerifyDr+0x22>
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 800dd28:	193b      	adds	r3, r7, r4
 800dd2a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800dd2e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 800dd32:	7a19      	ldrb	r1, [r3, #8]
 800dd34:	090a      	lsrs	r2, r1, #4
 800dd36:	f001 010f 	and.w	r1, r1, #15
 800dd3a:	4640      	mov	r0, r8
 800dd3c:	f7ff ffcf 	bl	800dcde <RegionCommonValueInRange>
 800dd40:	2801      	cmp	r0, #1
 800dd42:	d1e7      	bne.n	800dd14 <RegionCommonChanVerifyDr+0x22>
                    return true;
 800dd44:	2001      	movs	r0, #1
}
 800dd46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 800dd4a:	3710      	adds	r7, #16
 800dd4c:	b2ff      	uxtb	r7, r7
 800dd4e:	3501      	adds	r5, #1
 800dd50:	b2ed      	uxtb	r5, r5
 800dd52:	4557      	cmp	r7, sl
 800dd54:	d201      	bcs.n	800dd5a <RegionCommonChanVerifyDr+0x68>
        for( uint8_t j = 0; j < 16; j++ )
 800dd56:	2400      	movs	r4, #0
 800dd58:	e7de      	b.n	800dd18 <RegionCommonChanVerifyDr+0x26>
    return false;
 800dd5a:	2000      	movs	r0, #0
 800dd5c:	e7f3      	b.n	800dd46 <RegionCommonChanVerifyDr+0x54>
        return false;
 800dd5e:	2000      	movs	r0, #0
 800dd60:	e7f1      	b.n	800dd46 <RegionCommonChanVerifyDr+0x54>

0800dd62 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
    uint8_t index = id / 16;
 800dd62:	ea4f 1c11 	mov.w	ip, r1, lsr #4

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 800dd66:	0913      	lsrs	r3, r2, #4
 800dd68:	ebb3 1f11 	cmp.w	r3, r1, lsr #4
 800dd6c:	d30e      	bcc.n	800dd8c <RegionCommonChanDisable+0x2a>
 800dd6e:	4291      	cmp	r1, r2
 800dd70:	d20e      	bcs.n	800dd90 <RegionCommonChanDisable+0x2e>
    {
        return false;
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 800dd72:	f001 010f 	and.w	r1, r1, #15
 800dd76:	2301      	movs	r3, #1
 800dd78:	fa03 f101 	lsl.w	r1, r3, r1
 800dd7c:	f830 201c 	ldrh.w	r2, [r0, ip, lsl #1]
 800dd80:	ea22 0101 	bic.w	r1, r2, r1
 800dd84:	f820 101c 	strh.w	r1, [r0, ip, lsl #1]

    return true;
 800dd88:	4618      	mov	r0, r3
 800dd8a:	4770      	bx	lr
        return false;
 800dd8c:	2000      	movs	r0, #0
 800dd8e:	4770      	bx	lr
 800dd90:	2000      	movs	r0, #0
}
 800dd92:	4770      	bx	lr

0800dd94 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 800dd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t nbChannels = 0;

    if( channelsMask == NULL )
 800dd96:	b188      	cbz	r0, 800ddbc <RegionCommonCountChannels+0x28>
 800dd98:	460c      	mov	r4, r1
 800dd9a:	4616      	mov	r6, r2
 800dd9c:	4607      	mov	r7, r0
    uint8_t nbChannels = 0;
 800dd9e:	2500      	movs	r5, #0
 800dda0:	e008      	b.n	800ddb4 <RegionCommonCountChannels+0x20>
        return 0;
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 800dda2:	2110      	movs	r1, #16
 800dda4:	f837 0014 	ldrh.w	r0, [r7, r4, lsl #1]
 800dda8:	f7ff feea 	bl	800db80 <CountChannels>
 800ddac:	4405      	add	r5, r0
 800ddae:	b2ed      	uxtb	r5, r5
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 800ddb0:	3401      	adds	r4, #1
 800ddb2:	b2e4      	uxtb	r4, r4
 800ddb4:	42b4      	cmp	r4, r6
 800ddb6:	d3f4      	bcc.n	800dda2 <RegionCommonCountChannels+0xe>
    }

    return nbChannels;
}
 800ddb8:	4628      	mov	r0, r5
 800ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return 0;
 800ddbc:	2500      	movs	r5, #0
 800ddbe:	e7fb      	b.n	800ddb8 <RegionCommonCountChannels+0x24>

0800ddc0 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 800ddc0:	4684      	mov	ip, r0
 800ddc2:	b158      	cbz	r0, 800dddc <RegionCommonChanMaskCopy+0x1c>
 800ddc4:	b109      	cbz	r1, 800ddca <RegionCommonChanMaskCopy+0xa>
    {
        for( uint8_t i = 0; i < len; i++ )
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	e006      	b.n	800ddd8 <RegionCommonChanMaskCopy+0x18>
 800ddca:	4770      	bx	lr
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 800ddcc:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800ddd0:	f82c 0013 	strh.w	r0, [ip, r3, lsl #1]
        for( uint8_t i = 0; i < len; i++ )
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	b2db      	uxtb	r3, r3
 800ddd8:	4293      	cmp	r3, r2
 800ddda:	d3f7      	bcc.n	800ddcc <RegionCommonChanMaskCopy+0xc>
        }
    }
}
 800dddc:	4770      	bx	lr

0800ddde <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 800ddde:	b082      	sub	sp, #8
 800dde0:	b538      	push	{r3, r4, r5, lr}
 800dde2:	4604      	mov	r4, r0
 800dde4:	460d      	mov	r5, r1
 800dde6:	4611      	mov	r1, r2
 800dde8:	aa04      	add	r2, sp, #16
 800ddea:	f842 3f04 	str.w	r3, [r2, #4]!
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 800ddee:	ca0c      	ldmia	r2, {r2, r3}
 800ddf0:	f7ff fea9 	bl	800db46 <GetDutyCycle>

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 800ddf4:	68e3      	ldr	r3, [r4, #12]
 800ddf6:	fb05 f000 	mul.w	r0, r5, r0
 800ddfa:	4283      	cmp	r3, r0
 800ddfc:	d905      	bls.n	800de0a <RegionCommonSetBandTxDone+0x2c>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 800ddfe:	1a18      	subs	r0, r3, r0
 800de00:	60e0      	str	r0, [r4, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 800de02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de06:	b002      	add	sp, #8
 800de08:	4770      	bx	lr
        band->TimeCredits = 0;
 800de0a:	2300      	movs	r3, #0
 800de0c:	60e3      	str	r3, [r4, #12]
}
 800de0e:	e7f8      	b.n	800de02 <RegionCommonSetBandTxDone+0x24>

0800de10 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 800de10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de14:	b089      	sub	sp, #36	; 0x24
 800de16:	4607      	mov	r7, r0
 800de18:	468b      	mov	fp, r1
 800de1a:	4691      	mov	r9, r2
 800de1c:	4698      	mov	r8, r3
 800de1e:	f89d a048 	ldrb.w	sl, [sp, #72]	; 0x48
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
    TimerTime_t currentTime = TimerGetCurrentTime( );
 800de22:	f005 fd5d 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 800de26:	9004      	str	r0, [sp, #16]
    TimerTime_t creditCosts = 0;
    uint16_t dutyCycle = 1;
    uint8_t validBands = 0;

    for( uint8_t i = 0; i < nbBands; i++ )
 800de28:	2400      	movs	r4, #0
    uint8_t validBands = 0;
 800de2a:	4626      	mov	r6, r4
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 800de2c:	f04f 33ff 	mov.w	r3, #4294967295
 800de30:	9305      	str	r3, [sp, #20]
    for( uint8_t i = 0; i < nbBands; i++ )
 800de32:	e005      	b.n	800de40 <RegionCommonUpdateBandTimeOff+0x30>
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits >= creditCosts ) ||
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
        {
            bands[i].ReadyForTransmission = true;
 800de34:	2301      	movs	r3, #1
 800de36:	752b      	strb	r3, [r5, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 800de38:	441e      	add	r6, r3
 800de3a:	b2f6      	uxtb	r6, r6
    for( uint8_t i = 0; i < nbBands; i++ )
 800de3c:	3401      	adds	r4, #1
 800de3e:	b2e4      	uxtb	r4, r4
 800de40:	454c      	cmp	r4, r9
 800de42:	d25d      	bcs.n	800df00 <RegionCommonUpdateBandTimeOff+0xf0>
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 800de44:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800de48:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 800de4c:	9b04      	ldr	r3, [sp, #16]
 800de4e:	9302      	str	r3, [sp, #8]
 800de50:	ab13      	add	r3, sp, #76	; 0x4c
 800de52:	e893 0003 	ldmia.w	r3, {r0, r1}
 800de56:	e88d 0003 	stmia.w	sp, {r0, r1}
 800de5a:	4653      	mov	r3, sl
 800de5c:	4642      	mov	r2, r8
 800de5e:	4639      	mov	r1, r7
 800de60:	4628      	mov	r0, r5
 800de62:	f7ff ff1f 	bl	800dca4 <UpdateTimeCredits>
        creditCosts = expectedTimeOnAir * dutyCycle;
 800de66:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800de68:	fb03 f300 	mul.w	r3, r3, r0
        if( ( bands[i].TimeCredits >= creditCosts ) ||
 800de6c:	68ea      	ldr	r2, [r5, #12]
 800de6e:	429a      	cmp	r2, r3
 800de70:	d2e0      	bcs.n	800de34 <RegionCommonUpdateBandTimeOff+0x24>
 800de72:	f1b8 0f00 	cmp.w	r8, #0
 800de76:	d101      	bne.n	800de7c <RegionCommonUpdateBandTimeOff+0x6c>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 800de78:	2f00      	cmp	r7, #0
 800de7a:	d1db      	bne.n	800de34 <RegionCommonUpdateBandTimeOff+0x24>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 800de7c:	2100      	movs	r1, #0
 800de7e:	7529      	strb	r1, [r5, #20]

            if( bands[i].MaxTimeCredits >= creditCosts )
 800de80:	6929      	ldr	r1, [r5, #16]
 800de82:	4299      	cmp	r1, r3
 800de84:	d307      	bcc.n	800de96 <RegionCommonUpdateBandTimeOff+0x86>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 800de86:	1a9b      	subs	r3, r3, r2
 800de88:	9a05      	ldr	r2, [sp, #20]
 800de8a:	429a      	cmp	r2, r3
 800de8c:	bf28      	it	cs
 800de8e:	461a      	movcs	r2, r3
 800de90:	9205      	str	r2, [sp, #20]
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 800de92:	3601      	adds	r6, #1
 800de94:	b2f6      	uxtb	r6, r6
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 800de96:	2f00      	cmp	r7, #0
 800de98:	d1d0      	bne.n	800de3c <RegionCommonUpdateBandTimeOff+0x2c>
            {
                SysTime_t backoffTimeRange = {
 800de9a:	2300      	movs	r3, #0
 800de9c:	9306      	str	r3, [sp, #24]
 800de9e:	f8ad 301c 	strh.w	r3, [sp, #28]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 800dea2:	2864      	cmp	r0, #100	; 0x64
 800dea4:	d024      	beq.n	800def0 <RegionCommonUpdateBandTimeOff+0xe0>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 800dea6:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800deaa:	d025      	beq.n	800def8 <RegionCommonUpdateBandTimeOff+0xe8>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 800deac:	4b19      	ldr	r3, [pc, #100]	; (800df14 <RegionCommonUpdateBandTimeOff+0x104>)
 800deae:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 800deb0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deb2:	4a18      	ldr	r2, [pc, #96]	; (800df14 <RegionCommonUpdateBandTimeOff+0x104>)
 800deb4:	4293      	cmp	r3, r2
 800deb6:	d90c      	bls.n	800ded2 <RegionCommonUpdateBandTimeOff+0xc2>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 800deb8:	f5a3 33f6 	sub.w	r3, r3, #125952	; 0x1ec00
 800debc:	3b30      	subs	r3, #48	; 0x30
 800debe:	4a16      	ldr	r2, [pc, #88]	; (800df18 <RegionCommonUpdateBandTimeOff+0x108>)
 800dec0:	fba2 2303 	umull	r2, r3, r2, r3
 800dec4:	0c1b      	lsrs	r3, r3, #16
 800dec6:	4a15      	ldr	r2, [pc, #84]	; (800df1c <RegionCommonUpdateBandTimeOff+0x10c>)
 800dec8:	fb03 2202 	mla	r2, r3, r2, r2
 800decc:	9b06      	ldr	r3, [sp, #24]
 800dece:	4413      	add	r3, r2
 800ded0:	9306      	str	r3, [sp, #24]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 800ded2:	ad06      	add	r5, sp, #24
 800ded4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ded6:	9300      	str	r3, [sp, #0]
 800ded8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800deda:	e895 0006 	ldmia.w	r5, {r1, r2}
 800dede:	4628      	mov	r0, r5
 800dee0:	f005 fc0f 	bl	8013702 <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 800dee4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800dee8:	f005 fc84 	bl	80137f4 <SysTimeToMs>
 800deec:	9005      	str	r0, [sp, #20]
 800deee:	e7a5      	b.n	800de3c <RegionCommonUpdateBandTimeOff+0x2c>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 800def0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800def4:	9306      	str	r3, [sp, #24]
 800def6:	e7db      	b.n	800deb0 <RegionCommonUpdateBandTimeOff+0xa0>
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 800def8:	f649 23b0 	movw	r3, #39600	; 0x9ab0
 800defc:	9306      	str	r3, [sp, #24]
 800defe:	e7d7      	b.n	800deb0 <RegionCommonUpdateBandTimeOff+0xa0>
            }
        }
    }

    if( validBands == 0 )
 800df00:	b11e      	cbz	r6, 800df0a <RegionCommonUpdateBandTimeOff+0xfa>
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
    }
    return minTimeToWait;
}
 800df02:	9805      	ldr	r0, [sp, #20]
 800df04:	b009      	add	sp, #36	; 0x24
 800df06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        return TIMERTIME_T_MAX;
 800df0a:	f04f 33ff 	mov.w	r3, #4294967295
 800df0e:	9305      	str	r3, [sp, #20]
 800df10:	e7f7      	b.n	800df02 <RegionCommonUpdateBandTimeOff+0xf2>
 800df12:	bf00      	nop
 800df14:	0001ec30 	.word	0x0001ec30
 800df18:	c22e4507 	.word	0xc22e4507
 800df1c:	00015180 	.word	0x00015180

0800df20 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
    uint8_t retIndex = 0;

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 800df20:	7803      	ldrb	r3, [r0, #0]
 800df22:	2b03      	cmp	r3, #3
 800df24:	d001      	beq.n	800df2a <RegionCommonParseLinkAdrReq+0xa>
    uint8_t retIndex = 0;
 800df26:	2000      	movs	r0, #0

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
    }
    return retIndex;
}
 800df28:	4770      	bx	lr
        linkAdrParams->Datarate = payload[1];
 800df2a:	7842      	ldrb	r2, [r0, #1]
 800df2c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800df30:	704b      	strb	r3, [r1, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 800df32:	f003 030f 	and.w	r3, r3, #15
 800df36:	708b      	strb	r3, [r1, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 800df38:	0913      	lsrs	r3, r2, #4
 800df3a:	704b      	strb	r3, [r1, #1]
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 800df3c:	7883      	ldrb	r3, [r0, #2]
 800df3e:	808b      	strh	r3, [r1, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 800df40:	78c2      	ldrb	r2, [r0, #3]
 800df42:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800df46:	808b      	strh	r3, [r1, #4]
        linkAdrParams->NbRep = payload[4];
 800df48:	7903      	ldrb	r3, [r0, #4]
 800df4a:	700b      	strb	r3, [r1, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 800df4c:	f3c3 1202 	ubfx	r2, r3, #4, #3
 800df50:	70ca      	strb	r2, [r1, #3]
        linkAdrParams->NbRep &= 0x0F;
 800df52:	f003 030f 	and.w	r3, r3, #15
 800df56:	700b      	strb	r3, [r1, #0]
        retIndex = 5;
 800df58:	2005      	movs	r0, #5
 800df5a:	4770      	bx	lr

0800df5c <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 800df5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df60:	b085      	sub	sp, #20
 800df62:	4604      	mov	r4, r0
 800df64:	4688      	mov	r8, r1
 800df66:	4617      	mov	r7, r2
 800df68:	461e      	mov	r6, r3
    uint8_t status = verifyParams->Status;
 800df6a:	7905      	ldrb	r5, [r0, #4]
    int8_t datarate = verifyParams->Datarate;
 800df6c:	f990 a006 	ldrsb.w	sl, [r0, #6]
    int8_t txPower = verifyParams->TxPower;
 800df70:	f990 9007 	ldrsb.w	r9, [r0, #7]
    int8_t nbRepetitions = verifyParams->NbRep;
 800df74:	f990 b008 	ldrsb.w	fp, [r0, #8]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 800df78:	7943      	ldrb	r3, [r0, #5]
 800df7a:	b92b      	cbnz	r3, 800df88 <RegionCommonLinkAdrReqVerifyParams+0x2c>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 800df7c:	f990 b00b 	ldrsb.w	fp, [r0, #11]
        datarate =  verifyParams->CurrentDatarate;
 800df80:	f990 a009 	ldrsb.w	sl, [r0, #9]
        txPower =  verifyParams->CurrentTxPower;
 800df84:	f990 900a 	ldrsb.w	r9, [r0, #10]
    }

    if( status != 0 )
 800df88:	b355      	cbz	r5, 800dfe0 <RegionCommonLinkAdrReqVerifyParams+0x84>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 800df8a:	f1ba 0f0f 	cmp.w	sl, #15
 800df8e:	d114      	bne.n	800dfba <RegionCommonLinkAdrReqVerifyParams+0x5e>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 800df90:	f994 a009 	ldrsb.w	sl, [r4, #9]
        {
            status &= 0xFD; // Datarate KO
        }

        // Verify tx power
        if( txPower == 0x0F )
 800df94:	f1b9 0f0f 	cmp.w	r9, #15
 800df98:	d020      	beq.n	800dfdc <RegionCommonLinkAdrReqVerifyParams+0x80>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 800df9a:	f994 301d 	ldrsb.w	r3, [r4, #29]
 800df9e:	9303      	str	r3, [sp, #12]
 800dfa0:	f994 201c 	ldrsb.w	r2, [r4, #28]
 800dfa4:	461c      	mov	r4, r3
 800dfa6:	4619      	mov	r1, r3
 800dfa8:	4648      	mov	r0, r9
 800dfaa:	f7ff fe98 	bl	800dcde <RegionCommonValueInRange>
 800dfae:	b9b8      	cbnz	r0, 800dfe0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 800dfb0:	454c      	cmp	r4, r9
 800dfb2:	dc21      	bgt.n	800dff8 <RegionCommonLinkAdrReqVerifyParams+0x9c>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
            }
            else
            {
                status &= 0xFB; // TxPower KO
 800dfb4:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
 800dfb8:	e012      	b.n	800dfe0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 800dfba:	69a3      	ldr	r3, [r4, #24]
 800dfbc:	9301      	str	r3, [sp, #4]
 800dfbe:	f994 3015 	ldrsb.w	r3, [r4, #21]
 800dfc2:	9300      	str	r3, [sp, #0]
 800dfc4:	f994 3014 	ldrsb.w	r3, [r4, #20]
 800dfc8:	4652      	mov	r2, sl
 800dfca:	6921      	ldr	r1, [r4, #16]
 800dfcc:	7b20      	ldrb	r0, [r4, #12]
 800dfce:	f7ff fe90 	bl	800dcf2 <RegionCommonChanVerifyDr>
 800dfd2:	2800      	cmp	r0, #0
 800dfd4:	d1de      	bne.n	800df94 <RegionCommonLinkAdrReqVerifyParams+0x38>
            status &= 0xFD; // Datarate KO
 800dfd6:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 800dfda:	e7db      	b.n	800df94 <RegionCommonLinkAdrReqVerifyParams+0x38>
            txPower =  verifyParams->CurrentTxPower;
 800dfdc:	f994 900a 	ldrsb.w	r9, [r4, #10]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 800dfe0:	2d07      	cmp	r5, #7
 800dfe2:	d00c      	beq.n	800dffe <RegionCommonLinkAdrReqVerifyParams+0xa2>
            nbRepetitions = 1;
        }
    }

    // Apply changes
    *dr = datarate;
 800dfe4:	f888 a000 	strb.w	sl, [r8]
    *txPow = txPower;
 800dfe8:	f887 9000 	strb.w	r9, [r7]
    *nbRep = nbRepetitions;
 800dfec:	f886 b000 	strb.w	fp, [r6]

    return status;
}
 800dff0:	4628      	mov	r0, r5
 800dff2:	b005      	add	sp, #20
 800dff4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                txPower = verifyParams->MaxTxPower;
 800dff8:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800dffc:	e7f0      	b.n	800dfe0 <RegionCommonLinkAdrReqVerifyParams+0x84>
        if( nbRepetitions == 0 )
 800dffe:	f1bb 0f00 	cmp.w	fp, #0
 800e002:	d1ef      	bne.n	800dfe4 <RegionCommonLinkAdrReqVerifyParams+0x88>
            nbRepetitions = 1;
 800e004:	f04f 0b01 	mov.w	fp, #1
 800e008:	e7ec      	b.n	800dfe4 <RegionCommonLinkAdrReqVerifyParams+0x88>
	...

0800e00c <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 800e00c:	4b02      	ldr	r3, [pc, #8]	; (800e018 <RegionCommonComputeSymbolTimeLoRa+0xc>)
 800e00e:	fa03 f000 	lsl.w	r0, r3, r0
}
 800e012:	fbb0 f0f1 	udiv	r0, r0, r1
 800e016:	4770      	bx	lr
 800e018:	000f4240 	.word	0x000f4240

0800e01c <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
}
 800e01c:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800e020:	fbb3 f0f0 	udiv	r0, r3, r0
 800e024:	4770      	bx	lr
	...

0800e028 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 800e028:	b500      	push	{lr}
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e02a:	f1a1 0c04 	sub.w	ip, r1, #4
 800e02e:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
 800e032:	fb0e f202 	mul.w	r2, lr, r2
 800e036:	fb00 220c 	mla	r2, r0, ip, r2
 800e03a:	0052      	lsls	r2, r2, #1
 800e03c:	d021      	beq.n	800e082 <RegionCommonComputeRxWindowParameters+0x5a>
 800e03e:	4402      	add	r2, r0
 800e040:	3a01      	subs	r2, #1
 800e042:	fbb2 f2f0 	udiv	r2, r2, r0
 800e046:	4291      	cmp	r1, r2
 800e048:	bf38      	it	cc
 800e04a:	4611      	movcc	r1, r2
 800e04c:	9a01      	ldr	r2, [sp, #4]
 800e04e:	6011      	str	r1, [r2, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e050:	0082      	lsls	r2, r0, #2
 800e052:	fb00 f101 	mul.w	r1, r0, r1
 800e056:	b1b9      	cbz	r1, 800e088 <RegionCommonComputeRxWindowParameters+0x60>
 800e058:	3101      	adds	r1, #1
 800e05a:	0849      	lsrs	r1, r1, #1
 800e05c:	1a51      	subs	r1, r2, r1
 800e05e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e062:	fb02 1313 	mls	r3, r2, r3, r1
 800e066:	2b00      	cmp	r3, #0
 800e068:	dd10      	ble.n	800e08c <RegionCommonComputeRxWindowParameters+0x64>
 800e06a:	f203 33e7 	addw	r3, r3, #999	; 0x3e7
 800e06e:	4a0b      	ldr	r2, [pc, #44]	; (800e09c <RegionCommonComputeRxWindowParameters+0x74>)
 800e070:	fb82 1203 	smull	r1, r2, r2, r3
 800e074:	17db      	asrs	r3, r3, #31
 800e076:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e07a:	9a02      	ldr	r2, [sp, #8]
 800e07c:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 800e07e:	f85d fb04 	ldr.w	pc, [sp], #4
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 800e082:	fbb2 f2f0 	udiv	r2, r2, r0
 800e086:	e7de      	b.n	800e046 <RegionCommonComputeRxWindowParameters+0x1e>
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 800e088:	0849      	lsrs	r1, r1, #1
 800e08a:	e7e7      	b.n	800e05c <RegionCommonComputeRxWindowParameters+0x34>
 800e08c:	4a03      	ldr	r2, [pc, #12]	; (800e09c <RegionCommonComputeRxWindowParameters+0x74>)
 800e08e:	fb82 1203 	smull	r1, r2, r2, r3
 800e092:	17db      	asrs	r3, r3, #31
 800e094:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 800e098:	e7ef      	b.n	800e07a <RegionCommonComputeRxWindowParameters+0x52>
 800e09a:	bf00      	nop
 800e09c:	10624dd3 	.word	0x10624dd3

0800e0a0 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 800e0a0:	b538      	push	{r3, r4, r5, lr}
 800e0a2:	460d      	mov	r5, r1
 800e0a4:	4614      	mov	r4, r2
    int8_t phyTxPower = 0;

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 800e0a6:	0040      	lsls	r0, r0, #1
 800e0a8:	f7f2 fb90 	bl	80007cc <__aeabi_ui2f>
 800e0ac:	4601      	mov	r1, r0
 800e0ae:	4628      	mov	r0, r5
 800e0b0:	f7f2 fada 	bl	8000668 <__aeabi_fsub>
 800e0b4:	4621      	mov	r1, r4
 800e0b6:	f7f2 fad7 	bl	8000668 <__aeabi_fsub>
 800e0ba:	f7f2 f9c9 	bl	8000450 <__aeabi_f2d>
 800e0be:	f005 fedb 	bl	8013e78 <floor>
 800e0c2:	f7f2 faa5 	bl	8000610 <__aeabi_d2iz>

    return phyTxPower;
}
 800e0c6:	b240      	sxtb	r0, r0
 800e0c8:	bd38      	pop	{r3, r4, r5, pc}

0800e0ca <RegionCommonCountNbOfEnabledChannels>:
    MW_LOG(TS_ON, VLEVEL_M, "RX_BC on freq %d Hz at DR %d\r\n", rxBeaconSetupParams->Frequency, rxBeaconSetupParams->BeaconDatarate );
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 800e0ca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	4605      	mov	r5, r0
 800e0d2:	468b      	mov	fp, r1
 800e0d4:	9200      	str	r2, [sp, #0]
 800e0d6:	9301      	str	r3, [sp, #4]
    uint8_t nbChannelCount = 0;
    uint8_t nbRestrictedChannelsCount = 0;

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e0d8:	2600      	movs	r6, #0
 800e0da:	46b0      	mov	r8, r6
    uint8_t nbRestrictedChannelsCount = 0;
 800e0dc:	46b2      	mov	sl, r6
    uint8_t nbChannelCount = 0;
 800e0de:	46b1      	mov	r9, r6
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e0e0:	e04a      	b.n	800e178 <RegionCommonCountNbOfEnabledChannels+0xae>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 800e0e2:	7a3a      	ldrb	r2, [r7, #8]
 800e0e4:	f342 0103 	sbfx	r1, r2, #0, #4
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 800e0e8:	f342 1203 	sbfx	r2, r2, #4, #4
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 800e0ec:	b252      	sxtb	r2, r2
 800e0ee:	b249      	sxtb	r1, r1
 800e0f0:	f995 0001 	ldrsb.w	r0, [r5, #1]
 800e0f4:	f7ff fdf3 	bl	800dcde <RegionCommonValueInRange>
 800e0f8:	b178      	cbz	r0, 800e11a <RegionCommonCountNbOfEnabledChannels+0x50>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 800e0fa:	68ea      	ldr	r2, [r5, #12]
 800e0fc:	7a7b      	ldrb	r3, [r7, #9]
 800e0fe:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e102:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e106:	7d1b      	ldrb	r3, [r3, #20]
 800e108:	b35b      	cbz	r3, 800e162 <RegionCommonCountNbOfEnabledChannels+0x98>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
                    continue;
                }
                enabledChannels[nbChannelCount++] = i + j;
 800e10a:	f109 0301 	add.w	r3, r9, #1
 800e10e:	eb08 0204 	add.w	r2, r8, r4
 800e112:	f80b 2009 	strb.w	r2, [fp, r9]
 800e116:	fa5f f983 	uxtb.w	r9, r3
        for( uint8_t j = 0; j < 16; j++ )
 800e11a:	3401      	adds	r4, #1
 800e11c:	b2e4      	uxtb	r4, r4
 800e11e:	2c0f      	cmp	r4, #15
 800e120:	d824      	bhi.n	800e16c <RegionCommonCountNbOfEnabledChannels+0xa2>
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 800e122:	686b      	ldr	r3, [r5, #4]
 800e124:	0072      	lsls	r2, r6, #1
 800e126:	f833 3016 	ldrh.w	r3, [r3, r6, lsl #1]
 800e12a:	4123      	asrs	r3, r4
 800e12c:	f013 0f01 	tst.w	r3, #1
 800e130:	d0f3      	beq.n	800e11a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 800e132:	68a8      	ldr	r0, [r5, #8]
 800e134:	eb08 0304 	add.w	r3, r8, r4
 800e138:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e13c:	eb00 0783 	add.w	r7, r0, r3, lsl #2
 800e140:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d0e8      	beq.n	800e11a <RegionCommonCountNbOfEnabledChannels+0x50>
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e148:	782b      	ldrb	r3, [r5, #0]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d1c9      	bne.n	800e0e2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 800e14e:	696b      	ldr	r3, [r5, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 800e150:	2b00      	cmp	r3, #0
 800e152:	d0c6      	beq.n	800e0e2 <RegionCommonCountNbOfEnabledChannels+0x18>
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 800e154:	5a9b      	ldrh	r3, [r3, r2]
 800e156:	fa43 f104 	asr.w	r1, r3, r4
 800e15a:	f011 0f01 	tst.w	r1, #1
 800e15e:	d1c0      	bne.n	800e0e2 <RegionCommonCountNbOfEnabledChannels+0x18>
 800e160:	e7db      	b.n	800e11a <RegionCommonCountNbOfEnabledChannels+0x50>
                    nbRestrictedChannelsCount++;
 800e162:	f10a 0a01 	add.w	sl, sl, #1
 800e166:	fa5f fa8a 	uxtb.w	sl, sl
                    continue;
 800e16a:	e7d6      	b.n	800e11a <RegionCommonCountNbOfEnabledChannels+0x50>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 800e16c:	f108 0810 	add.w	r8, r8, #16
 800e170:	fa5f f888 	uxtb.w	r8, r8
 800e174:	3601      	adds	r6, #1
 800e176:	b2f6      	uxtb	r6, r6
 800e178:	fa1f f388 	uxth.w	r3, r8
 800e17c:	8a2a      	ldrh	r2, [r5, #16]
 800e17e:	4293      	cmp	r3, r2
 800e180:	d201      	bcs.n	800e186 <RegionCommonCountNbOfEnabledChannels+0xbc>
        for( uint8_t j = 0; j < 16; j++ )
 800e182:	2400      	movs	r4, #0
 800e184:	e7cb      	b.n	800e11e <RegionCommonCountNbOfEnabledChannels+0x54>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 800e186:	9b00      	ldr	r3, [sp, #0]
 800e188:	f883 9000 	strb.w	r9, [r3]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 800e18c:	9b01      	ldr	r3, [sp, #4]
 800e18e:	f883 a000 	strb.w	sl, [r3]
}
 800e192:	b003      	add	sp, #12
 800e194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e198 <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 800e198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e19c:	b085      	sub	sp, #20
 800e19e:	4604      	mov	r4, r0
 800e1a0:	460f      	mov	r7, r1
 800e1a2:	4616      	mov	r6, r2
 800e1a4:	461d      	mov	r5, r3
 800e1a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
 800e1aa:	f8dd 9034 	ldr.w	r9, [sp, #52]	; 0x34
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 800e1ae:	6840      	ldr	r0, [r0, #4]
 800e1b0:	f005 fba0 	bl	80138f4 <UTIL_TIMER_GetElapsedTime>
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 800e1b4:	6823      	ldr	r3, [r4, #0]
 800e1b6:	1a1b      	subs	r3, r3, r0
 800e1b8:	f8c9 3000 	str.w	r3, [r9]
    *nbRestrictedChannels = 1;
 800e1bc:	2301      	movs	r3, #1
 800e1be:	f888 3000 	strb.w	r3, [r8]
    *nbEnabledChannels = 0;
 800e1c2:	2300      	movs	r3, #0
 800e1c4:	702b      	strb	r3, [r5, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e1c6:	6863      	ldr	r3, [r4, #4]
 800e1c8:	b113      	cbz	r3, 800e1d0 <RegionCommonIdentifyChannels+0x38>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 800e1ca:	6823      	ldr	r3, [r4, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 800e1cc:	4283      	cmp	r3, r0
 800e1ce:	d81e      	bhi.n	800e20e <RegionCommonIdentifyChannels+0x76>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 800e1d0:	2300      	movs	r3, #0
 800e1d2:	603b      	str	r3, [r7, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 800e1d4:	69e3      	ldr	r3, [r4, #28]
 800e1d6:	f8d3 c00c 	ldr.w	ip, [r3, #12]
 800e1da:	781f      	ldrb	r7, [r3, #0]
 800e1dc:	69a3      	ldr	r3, [r4, #24]
 800e1de:	9303      	str	r3, [sp, #12]
 800e1e0:	ab01      	add	r3, sp, #4
 800e1e2:	f104 020c 	add.w	r2, r4, #12
 800e1e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e1ea:	e883 0003 	stmia.w	r3, {r0, r1}
 800e1ee:	7d23      	ldrb	r3, [r4, #20]
 800e1f0:	9300      	str	r3, [sp, #0]
 800e1f2:	7a23      	ldrb	r3, [r4, #8]
 800e1f4:	7a62      	ldrb	r2, [r4, #9]
 800e1f6:	4661      	mov	r1, ip
 800e1f8:	4638      	mov	r0, r7
 800e1fa:	f7ff fe09 	bl	800de10 <RegionCommonUpdateBandTimeOff>
 800e1fe:	f8c9 0000 	str.w	r0, [r9]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 800e202:	4643      	mov	r3, r8
 800e204:	462a      	mov	r2, r5
 800e206:	4631      	mov	r1, r6
 800e208:	69e0      	ldr	r0, [r4, #28]
 800e20a:	f7ff ff5e 	bl	800e0ca <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 800e20e:	782b      	ldrb	r3, [r5, #0]
 800e210:	b923      	cbnz	r3, 800e21c <RegionCommonIdentifyChannels+0x84>
    {
        *nextTxDelay = 0;
        return LORAMAC_STATUS_OK;
    }
    else if( *nbRestrictedChannels > 0 )
 800e212:	f898 3000 	ldrb.w	r3, [r8]
 800e216:	b13b      	cbz	r3, 800e228 <RegionCommonIdentifyChannels+0x90>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 800e218:	200b      	movs	r0, #11
 800e21a:	e002      	b.n	800e222 <RegionCommonIdentifyChannels+0x8a>
        *nextTxDelay = 0;
 800e21c:	2000      	movs	r0, #0
 800e21e:	f8c9 0000 	str.w	r0, [r9]
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
    }
}
 800e222:	b005      	add	sp, #20
 800e224:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 800e228:	200c      	movs	r0, #12
 800e22a:	e7fa      	b.n	800e222 <RegionCommonIdentifyChannels+0x8a>

0800e22c <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 800e22c:	b570      	push	{r4, r5, r6, lr}
 800e22e:	b082      	sub	sp, #8
 800e230:	4605      	mov	r5, r0
    int8_t drLocal = params->CurrentDr;
 800e232:	f990 4000 	ldrsb.w	r4, [r0]

    if( params->CurrentDr == params->MinDr )
 800e236:	f990 6002 	ldrsb.w	r6, [r0, #2]
 800e23a:	42a6      	cmp	r6, r4
 800e23c:	d011      	beq.n	800e262 <RegionCommonGetNextLowerTxDr+0x36>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 800e23e:	3c01      	subs	r4, #1
 800e240:	b264      	sxtb	r4, r4
        } while( ( drLocal != params->MinDr ) &&
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 800e242:	42a6      	cmp	r6, r4
 800e244:	d00e      	beq.n	800e264 <RegionCommonGetNextLowerTxDr+0x38>
 800e246:	68ab      	ldr	r3, [r5, #8]
 800e248:	9301      	str	r3, [sp, #4]
 800e24a:	f995 3001 	ldrsb.w	r3, [r5, #1]
 800e24e:	9300      	str	r3, [sp, #0]
 800e250:	4633      	mov	r3, r6
 800e252:	4622      	mov	r2, r4
 800e254:	6869      	ldr	r1, [r5, #4]
 800e256:	78e8      	ldrb	r0, [r5, #3]
 800e258:	f7ff fd4b 	bl	800dcf2 <RegionCommonChanVerifyDr>
        } while( ( drLocal != params->MinDr ) &&
 800e25c:	2800      	cmp	r0, #0
 800e25e:	d0ee      	beq.n	800e23e <RegionCommonGetNextLowerTxDr+0x12>
 800e260:	e000      	b.n	800e264 <RegionCommonGetNextLowerTxDr+0x38>
        return params->MinDr;
 800e262:	4634      	mov	r4, r6

        return drLocal;
    }
}
 800e264:	4620      	mov	r0, r4
 800e266:	b002      	add	sp, #8
 800e268:	bd70      	pop	{r4, r5, r6, pc}

0800e26a <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
}
 800e26a:	4288      	cmp	r0, r1
 800e26c:	bfb8      	it	lt
 800e26e:	4608      	movlt	r0, r1
 800e270:	4770      	bx	lr
	...

0800e274 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
    switch( bandwidths[drIndex] )
 800e274:	f851 3020 	ldr.w	r3, [r1, r0, lsl #2]
 800e278:	4a05      	ldr	r2, [pc, #20]	; (800e290 <RegionCommonGetBandwidth+0x1c>)
 800e27a:	4293      	cmp	r3, r2
 800e27c:	d004      	beq.n	800e288 <RegionCommonGetBandwidth+0x14>
 800e27e:	4a05      	ldr	r2, [pc, #20]	; (800e294 <RegionCommonGetBandwidth+0x20>)
 800e280:	4293      	cmp	r3, r2
 800e282:	d103      	bne.n	800e28c <RegionCommonGetBandwidth+0x18>
        case 125000:
            return 0;
        case 250000:
            return 1;
        case 500000:
            return 2;
 800e284:	2002      	movs	r0, #2
 800e286:	4770      	bx	lr
            return 1;
 800e288:	2001      	movs	r0, #1
 800e28a:	4770      	bx	lr
    switch( bandwidths[drIndex] )
 800e28c:	2000      	movs	r0, #0
    }
}
 800e28e:	4770      	bx	lr
 800e290:	0003d090 	.word	0x0003d090
 800e294:	0007a120 	.word	0x0007a120

0800e298 <RegionCommonRxConfigPrint>:

void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 800e298:	b500      	push	{lr}
 800e29a:	b085      	sub	sp, #20
    if ( rxSlot < RX_SLOT_NONE )
 800e29c:	2805      	cmp	r0, #5
 800e29e:	d80e      	bhi.n	800e2be <RegionCommonRxConfigPrint+0x26>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 800e2a0:	9202      	str	r2, [sp, #8]
 800e2a2:	9101      	str	r1, [sp, #4]
 800e2a4:	4b0a      	ldr	r3, [pc, #40]	; (800e2d0 <RegionCommonRxConfigPrint+0x38>)
 800e2a6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	4b09      	ldr	r3, [pc, #36]	; (800e2d4 <RegionCommonRxConfigPrint+0x3c>)
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	2100      	movs	r1, #0
 800e2b2:	2002      	movs	r0, #2
 800e2b4:	f005 f800 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 800e2b8:	b005      	add	sp, #20
 800e2ba:	f85d fb04 	ldr.w	pc, [sp], #4
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e2be:	9201      	str	r2, [sp, #4]
 800e2c0:	9100      	str	r1, [sp, #0]
 800e2c2:	4b05      	ldr	r3, [pc, #20]	; (800e2d8 <RegionCommonRxConfigPrint+0x40>)
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	2100      	movs	r1, #0
 800e2c8:	2002      	movs	r0, #2
 800e2ca:	f004 fff5 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e2ce:	e7f3      	b.n	800e2b8 <RegionCommonRxConfigPrint+0x20>
 800e2d0:	080146e4 	.word	0x080146e4
 800e2d4:	0801467c 	.word	0x0801467c
 800e2d8:	0801469c 	.word	0x0801469c

0800e2dc <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 800e2dc:	b500      	push	{lr}
 800e2de:	b083      	sub	sp, #12
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 800e2e0:	9101      	str	r1, [sp, #4]
 800e2e2:	9000      	str	r0, [sp, #0]
 800e2e4:	4b04      	ldr	r3, [pc, #16]	; (800e2f8 <RegionCommonTxConfigPrint+0x1c>)
 800e2e6:	2201      	movs	r2, #1
 800e2e8:	2100      	movs	r1, #0
 800e2ea:	2002      	movs	r0, #2
 800e2ec:	f004 ffe4 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 800e2f0:	b003      	add	sp, #12
 800e2f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800e2f6:	bf00      	nop
 800e2f8:	080146b8 	.word	0x080146b8

0800e2fc <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq )
{
 800e2fc:	b510      	push	{r4, lr}
 800e2fe:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800e300:	4b05      	ldr	r3, [pc, #20]	; (800e318 <VerifyRfFreq+0x1c>)
 800e302:	6a1b      	ldr	r3, [r3, #32]
 800e304:	4798      	blx	r3
 800e306:	b120      	cbz	r0, 800e312 <VerifyRfFreq+0x16>
    {
        return false;
    }

    if( ( freq < 433175000 ) || ( freq > 434665000 ) )
 800e308:	4b04      	ldr	r3, [pc, #16]	; (800e31c <VerifyRfFreq+0x20>)
 800e30a:	4423      	add	r3, r4
 800e30c:	4a04      	ldr	r2, [pc, #16]	; (800e320 <VerifyRfFreq+0x24>)
 800e30e:	4293      	cmp	r3, r2
 800e310:	d800      	bhi.n	800e314 <VerifyRfFreq+0x18>
    {
        return false;
    }
    return true;
}
 800e312:	bd10      	pop	{r4, pc}
        return false;
 800e314:	2000      	movs	r0, #0
 800e316:	e7fc      	b.n	800e312 <VerifyRfFreq+0x16>
 800e318:	08014d7c 	.word	0x08014d7c
 800e31c:	e62e4628 	.word	0xe62e4628
 800e320:	0016bc50 	.word	0x0016bc50

0800e324 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800e324:	b570      	push	{r4, r5, r6, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	4605      	mov	r5, r0
 800e32a:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU433[datarate];
 800e32c:	4b13      	ldr	r3, [pc, #76]	; (800e37c <GetTimeOnAir+0x58>)
 800e32e:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU433 );
 800e330:	4913      	ldr	r1, [pc, #76]	; (800e380 <GetTimeOnAir+0x5c>)
 800e332:	f7ff ff9f 	bl	800e274 <RegionCommonGetBandwidth>
 800e336:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800e338:	2d07      	cmp	r5, #7
 800e33a:	d00e      	beq.n	800e35a <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800e33c:	4b11      	ldr	r3, [pc, #68]	; (800e384 <GetTimeOnAir+0x60>)
 800e33e:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e340:	2001      	movs	r0, #1
 800e342:	9003      	str	r0, [sp, #12]
 800e344:	b2e4      	uxtb	r4, r4
 800e346:	9402      	str	r4, [sp, #8]
 800e348:	2300      	movs	r3, #0
 800e34a:	9301      	str	r3, [sp, #4]
 800e34c:	2308      	movs	r3, #8
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	4603      	mov	r3, r0
 800e352:	4632      	mov	r2, r6
 800e354:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800e356:	b004      	add	sp, #16
 800e358:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800e35a:	4b0a      	ldr	r3, [pc, #40]	; (800e384 <GetTimeOnAir+0x60>)
 800e35c:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800e35e:	2301      	movs	r3, #1
 800e360:	9303      	str	r3, [sp, #12]
 800e362:	b2e4      	uxtb	r4, r4
 800e364:	9402      	str	r4, [sp, #8]
 800e366:	2000      	movs	r0, #0
 800e368:	9001      	str	r0, [sp, #4]
 800e36a:	2305      	movs	r3, #5
 800e36c:	9300      	str	r3, [sp, #0]
 800e36e:	4603      	mov	r3, r0
 800e370:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e374:	fb06 f202 	mul.w	r2, r6, r2
 800e378:	47a8      	blx	r5
 800e37a:	e7ec      	b.n	800e356 <GetTimeOnAir+0x32>
 800e37c:	0801471c 	.word	0x0801471c
 800e380:	080146fc 	.word	0x080146fc
 800e384:	08014d7c 	.word	0x08014d7c

0800e388 <RegionEU433GetPhyParam>:
#endif /* REGION_EU433 */

PhyParam_t RegionEU433GetPhyParam( GetPhyParams_t* getPhy )
{
 800e388:	b500      	push	{lr}
 800e38a:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800e38c:	2300      	movs	r3, #0
 800e38e:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU433 )
    switch( getPhy->Attribute )
 800e390:	7803      	ldrb	r3, [r0, #0]
 800e392:	3b0b      	subs	r3, #11
 800e394:	2b2d      	cmp	r3, #45	; 0x2d
 800e396:	d82f      	bhi.n	800e3f8 <RegionEU433GetPhyParam+0x70>
 800e398:	e8df f003 	tbb	[pc, r3]
 800e39c:	3f393633 	.word	0x3f393633
 800e3a0:	504c4845 	.word	0x504c4845
 800e3a4:	2e5c5854 	.word	0x2e5c5854
 800e3a8:	6e682e65 	.word	0x6e682e65
 800e3ac:	2e2e7774 	.word	0x2e2e7774
 800e3b0:	2e177e7b 	.word	0x2e177e7b
 800e3b4:	2e2e2e2e 	.word	0x2e2e2e2e
 800e3b8:	2e2e2e2e 	.word	0x2e2e2e2e
 800e3bc:	2e2e2e2e 	.word	0x2e2e2e2e
 800e3c0:	2e8b8481 	.word	0x2e8b8481
 800e3c4:	2e918e2e 	.word	0x2e918e2e
 800e3c8:	9a94      	.short	0x9a94
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800e3ca:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e3ce:	f88d 3004 	strb.w	r3, [sp, #4]
 800e3d2:	2307      	movs	r3, #7
 800e3d4:	f88d 3005 	strb.w	r3, [sp, #5]
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f88d 3006 	strb.w	r3, [sp, #6]
 800e3de:	2310      	movs	r3, #16
 800e3e0:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU433_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU433_TX_MIN_DATARATE,
                .NbChannels = EU433_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800e3e4:	4b3e      	ldr	r3, [pc, #248]	; (800e4e0 <RegionEU433GetPhyParam+0x158>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800e3ec:	9202      	str	r2, [sp, #8]
 800e3ee:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800e3f0:	a801      	add	r0, sp, #4
 800e3f2:	f7ff ff1b 	bl	800e22c <RegionCommonGetNextLowerTxDr>
 800e3f6:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU433 */
    return phyParam;
 800e3f8:	9804      	ldr	r0, [sp, #16]
 800e3fa:	9005      	str	r0, [sp, #20]
}
 800e3fc:	b007      	add	sp, #28
 800e3fe:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800e402:	2340      	movs	r3, #64	; 0x40
 800e404:	9304      	str	r3, [sp, #16]
            break;
 800e406:	e7f7      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800e408:	2320      	movs	r3, #32
 800e40a:	9304      	str	r3, [sp, #16]
            break;
 800e40c:	e7f4      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU433[getPhy->Datarate];
 800e40e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e412:	4a34      	ldr	r2, [pc, #208]	; (800e4e4 <RegionEU433GetPhyParam+0x15c>)
 800e414:	5cd3      	ldrb	r3, [r2, r3]
 800e416:	9304      	str	r3, [sp, #16]
            break;
 800e418:	e7ee      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU433[getPhy->Datarate];
 800e41a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e41e:	4a32      	ldr	r2, [pc, #200]	; (800e4e8 <RegionEU433GetPhyParam+0x160>)
 800e420:	5cd3      	ldrb	r3, [r2, r3]
 800e422:	9304      	str	r3, [sp, #16]
            break;
 800e424:	e7e8      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_DUTY_CYCLE_ENABLED;
 800e426:	2301      	movs	r3, #1
 800e428:	9304      	str	r3, [sp, #16]
            break;
 800e42a:	e7e5      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_RX_WINDOW;
 800e42c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800e430:	9304      	str	r3, [sp, #16]
            break;
 800e432:	e7e1      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800e434:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e438:	9304      	str	r3, [sp, #16]
            break;
 800e43a:	e7dd      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800e43c:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800e440:	9304      	str	r3, [sp, #16]
            break;
 800e442:	e7d9      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800e444:	f241 3388 	movw	r3, #5000	; 0x1388
 800e448:	9304      	str	r3, [sp, #16]
            break;
 800e44a:	e7d5      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800e44c:	f241 7370 	movw	r3, #6000	; 0x1770
 800e450:	9304      	str	r3, [sp, #16]
            break;
 800e452:	e7d1      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800e454:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800e458:	4824      	ldr	r0, [pc, #144]	; (800e4ec <RegionEU433GetPhyParam+0x164>)
 800e45a:	f003 f841 	bl	80114e0 <randr>
 800e45e:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800e462:	9004      	str	r0, [sp, #16]
            break;
 800e464:	e7c8      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_RX_WND_2_FREQ;
 800e466:	4b22      	ldr	r3, [pc, #136]	; (800e4f0 <RegionEU433GetPhyParam+0x168>)
 800e468:	9304      	str	r3, [sp, #16]
            break;
 800e46a:	e7c5      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800e46c:	4b1c      	ldr	r3, [pc, #112]	; (800e4e0 <RegionEU433GetPhyParam+0x158>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800e474:	9304      	str	r3, [sp, #16]
            break;
 800e476:	e7bf      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800e478:	4b19      	ldr	r3, [pc, #100]	; (800e4e0 <RegionEU433GetPhyParam+0x158>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800e480:	9304      	str	r3, [sp, #16]
            break;
 800e482:	e7b9      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_MAX_NB_CHANNELS;
 800e484:	2310      	movs	r3, #16
 800e486:	9304      	str	r3, [sp, #16]
            break;
 800e488:	e7b6      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800e48a:	4b15      	ldr	r3, [pc, #84]	; (800e4e0 <RegionEU433GetPhyParam+0x158>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	9304      	str	r3, [sp, #16]
            break;
 800e490:	e7b2      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_MAX_EIRP;
 800e492:	4b18      	ldr	r3, [pc, #96]	; (800e4f4 <RegionEU433GetPhyParam+0x16c>)
 800e494:	9304      	str	r3, [sp, #16]
            break;
 800e496:	e7af      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.fValue = EU433_DEFAULT_ANTENNA_GAIN;
 800e498:	4b17      	ldr	r3, [pc, #92]	; (800e4f8 <RegionEU433GetPhyParam+0x170>)
 800e49a:	9304      	str	r3, [sp, #16]
            break;
 800e49c:	e7ac      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_FREQ;
 800e49e:	4b14      	ldr	r3, [pc, #80]	; (800e4f0 <RegionEU433GetPhyParam+0x168>)
 800e4a0:	9304      	str	r3, [sp, #16]
            break;
 800e4a2:	e7a9      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU433_BEACON_SIZE;
 800e4a4:	2311      	movs	r3, #17
 800e4a6:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU433_RFU1_SIZE;
 800e4aa:	2301      	movs	r3, #1
 800e4ac:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800e4b0:	e7a2      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_BEACON_CHANNEL_DR;
 800e4b2:	2303      	movs	r3, #3
 800e4b4:	9304      	str	r3, [sp, #16]
            break;
 800e4b6:	e79f      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_FREQ;
 800e4b8:	4b0d      	ldr	r3, [pc, #52]	; (800e4f0 <RegionEU433GetPhyParam+0x168>)
 800e4ba:	9304      	str	r3, [sp, #16]
            break;
 800e4bc:	e79c      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = EU433_PING_SLOT_CHANNEL_DR;
 800e4be:	2303      	movs	r3, #3
 800e4c0:	9304      	str	r3, [sp, #16]
            break;
 800e4c2:	e799      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = DataratesEU433[getPhy->Datarate];
 800e4c4:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e4c8:	4a0c      	ldr	r2, [pc, #48]	; (800e4fc <RegionEU433GetPhyParam+0x174>)
 800e4ca:	5cd3      	ldrb	r3, [r2, r3]
 800e4cc:	9304      	str	r3, [sp, #16]
            break;
 800e4ce:	e793      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU433 );
 800e4d0:	490b      	ldr	r1, [pc, #44]	; (800e500 <RegionEU433GetPhyParam+0x178>)
 800e4d2:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800e4d6:	f7ff fecd 	bl	800e274 <RegionCommonGetBandwidth>
 800e4da:	9004      	str	r0, [sp, #16]
            break;
 800e4dc:	e78c      	b.n	800e3f8 <RegionEU433GetPhyParam+0x70>
 800e4de:	bf00      	nop
 800e4e0:	2000103c 	.word	0x2000103c
 800e4e4:	08014724 	.word	0x08014724
 800e4e8:	0801472c 	.word	0x0801472c
 800e4ec:	fffffc18 	.word	0xfffffc18
 800e4f0:	19e87628 	.word	0x19e87628
 800e4f4:	41426666 	.word	0x41426666
 800e4f8:	4009999a 	.word	0x4009999a
 800e4fc:	0801471c 	.word	0x0801471c
 800e500:	080146fc 	.word	0x080146fc

0800e504 <RegionEU433SetBandTxDone>:

void RegionEU433SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800e504:	b510      	push	{r4, lr}
 800e506:	b082      	sub	sp, #8
#if defined( REGION_EU433 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800e508:	4b0b      	ldr	r3, [pc, #44]	; (800e538 <RegionEU433SetBandTxDone+0x34>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	7803      	ldrb	r3, [r0, #0]
 800e50e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e512:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e516:	7a5b      	ldrb	r3, [r3, #9]
 800e518:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800e51c:	4b07      	ldr	r3, [pc, #28]	; (800e53c <RegionEU433SetBandTxDone+0x38>)
 800e51e:	681c      	ldr	r4, [r3, #0]
 800e520:	6903      	ldr	r3, [r0, #16]
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	68c3      	ldr	r3, [r0, #12]
 800e526:	7842      	ldrb	r2, [r0, #1]
 800e528:	6881      	ldr	r1, [r0, #8]
 800e52a:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800e52e:	f7ff fc56 	bl	800ddde <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU433 */
}
 800e532:	b002      	add	sp, #8
 800e534:	bd10      	pop	{r4, pc}
 800e536:	bf00      	nop
 800e538:	2000103c 	.word	0x2000103c
 800e53c:	20001038 	.word	0x20001038

0800e540 <RegionEU433InitDefaults>:

void RegionEU433InitDefaults( InitDefaultsParams_t* params )
{
 800e540:	b510      	push	{r4, lr}
 800e542:	b086      	sub	sp, #24
#if defined( REGION_EU433 )
    Band_t bands[EU433_MAX_NB_BANDS] =
 800e544:	2364      	movs	r3, #100	; 0x64
 800e546:	f8ad 3000 	strh.w	r3, [sp]
 800e54a:	2300      	movs	r3, #0
 800e54c:	f88d 3002 	strb.w	r3, [sp, #2]
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	9302      	str	r3, [sp, #8]
 800e554:	9303      	str	r3, [sp, #12]
 800e556:	9304      	str	r3, [sp, #16]
 800e558:	f88d 3014 	strb.w	r3, [sp, #20]
    {
        EU433_BAND0
    };

    switch( params->Type )
 800e55c:	7b03      	ldrb	r3, [r0, #12]
 800e55e:	2b01      	cmp	r3, #1
 800e560:	d032      	beq.n	800e5c8 <RegionEU433InitDefaults+0x88>
 800e562:	2b02      	cmp	r3, #2
 800e564:	d03e      	beq.n	800e5e4 <RegionEU433InitDefaults+0xa4>
 800e566:	b10b      	cbz	r3, 800e56c <RegionEU433InitDefaults+0x2c>
        {
            break;
        }
    }
#endif /* REGION_EU433 */
}
 800e568:	b006      	add	sp, #24
 800e56a:	bd10      	pop	{r4, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800e56c:	6803      	ldr	r3, [r0, #0]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d0fa      	beq.n	800e568 <RegionEU433InitDefaults+0x28>
 800e572:	6843      	ldr	r3, [r0, #4]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d0f7      	beq.n	800e568 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800e578:	4c1f      	ldr	r4, [pc, #124]	; (800e5f8 <RegionEU433InitDefaults+0xb8>)
 800e57a:	6023      	str	r3, [r4, #0]
            RegionBands = (Band_t*) params->Bands;
 800e57c:	6880      	ldr	r0, [r0, #8]
 800e57e:	4b1f      	ldr	r3, [pc, #124]	; (800e5fc <RegionEU433InitDefaults+0xbc>)
 800e580:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU433_MAX_NB_BANDS );
 800e582:	2218      	movs	r2, #24
 800e584:	4669      	mov	r1, sp
 800e586:	f002 ffb8 	bl	80114fa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU433_LC1;
 800e58a:	6824      	ldr	r4, [r4, #0]
 800e58c:	4b1c      	ldr	r3, [pc, #112]	; (800e600 <RegionEU433InitDefaults+0xc0>)
 800e58e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU433_LC2;
 800e596:	f104 0c0c 	add.w	ip, r4, #12
 800e59a:	f103 020c 	add.w	r2, r3, #12
 800e59e:	ca07      	ldmia	r2, {r0, r1, r2}
 800e5a0:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU433_LC3;
 800e5a4:	f104 0c18 	add.w	ip, r4, #24
 800e5a8:	3318      	adds	r3, #24
 800e5aa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e5ae:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800e5b2:	2307      	movs	r3, #7
 800e5b4:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e5b8:	2201      	movs	r2, #1
 800e5ba:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800e5be:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800e5c2:	f7ff fbfd 	bl	800ddc0 <RegionCommonChanMaskCopy>
            break;
 800e5c6:	e7cf      	b.n	800e568 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800e5c8:	4b0b      	ldr	r3, [pc, #44]	; (800e5f8 <RegionEU433InitDefaults+0xb8>)
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	2300      	movs	r3, #0
 800e5ce:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800e5d0:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800e5d2:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800e5da:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800e5de:	f7ff fbef 	bl	800ddc0 <RegionCommonChanMaskCopy>
            break;
 800e5e2:	e7c1      	b.n	800e568 <RegionEU433InitDefaults+0x28>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800e5e4:	4b04      	ldr	r3, [pc, #16]	; (800e5f8 <RegionEU433InitDefaults+0xb8>)
 800e5e6:	681b      	ldr	r3, [r3, #0]
 800e5e8:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800e5ec:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800e5f6:	e7b7      	b.n	800e568 <RegionEU433InitDefaults+0x28>
 800e5f8:	2000103c 	.word	0x2000103c
 800e5fc:	20001038 	.word	0x20001038
 800e600:	08013fd8 	.word	0x08013fd8

0800e604 <RegionEU433Verify>:

bool RegionEU433Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800e604:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( phyAttribute )
 800e606:	290f      	cmp	r1, #15
 800e608:	d837      	bhi.n	800e67a <RegionEU433Verify+0x76>
 800e60a:	e8df f001 	tbb	[pc, r1]
 800e60e:	360a      	.short	0x360a
 800e610:	0e363636 	.word	0x0e363636
 800e614:	2c362218 	.word	0x2c362218
 800e618:	3636362c 	.word	0x3636362c
 800e61c:	0836      	.short	0x0836
 800e61e:	2001      	movs	r0, #1
 800e620:	e02c      	b.n	800e67c <RegionEU433Verify+0x78>
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800e622:	6800      	ldr	r0, [r0, #0]
 800e624:	f7ff fe6a 	bl	800e2fc <VerifyRfFreq>
 800e628:	e028      	b.n	800e67c <RegionEU433Verify+0x78>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE );
 800e62a:	2207      	movs	r2, #7
 800e62c:	2100      	movs	r1, #0
 800e62e:	f990 0000 	ldrsb.w	r0, [r0]
 800e632:	f7ff fb54 	bl	800dcde <RegionCommonValueInRange>
 800e636:	3800      	subs	r0, #0
 800e638:	bf18      	it	ne
 800e63a:	2001      	movne	r0, #1
 800e63c:	e01e      	b.n	800e67c <RegionEU433Verify+0x78>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800e63e:	2205      	movs	r2, #5
 800e640:	2100      	movs	r1, #0
 800e642:	f990 0000 	ldrsb.w	r0, [r0]
 800e646:	f7ff fb4a 	bl	800dcde <RegionCommonValueInRange>
 800e64a:	3800      	subs	r0, #0
 800e64c:	bf18      	it	ne
 800e64e:	2001      	movne	r0, #1
 800e650:	e014      	b.n	800e67c <RegionEU433Verify+0x78>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE );
 800e652:	2207      	movs	r2, #7
 800e654:	2100      	movs	r1, #0
 800e656:	f990 0000 	ldrsb.w	r0, [r0]
 800e65a:	f7ff fb40 	bl	800dcde <RegionCommonValueInRange>
 800e65e:	3800      	subs	r0, #0
 800e660:	bf18      	it	ne
 800e662:	2001      	movne	r0, #1
 800e664:	e00a      	b.n	800e67c <RegionEU433Verify+0x78>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU433_MAX_TX_POWER, EU433_MIN_TX_POWER );
 800e666:	2205      	movs	r2, #5
 800e668:	2100      	movs	r1, #0
 800e66a:	f990 0000 	ldrsb.w	r0, [r0]
 800e66e:	f7ff fb36 	bl	800dcde <RegionCommonValueInRange>
 800e672:	3800      	subs	r0, #0
 800e674:	bf18      	it	ne
 800e676:	2001      	movne	r0, #1
 800e678:	e000      	b.n	800e67c <RegionEU433Verify+0x78>
        case PHY_DUTY_CYCLE:
        {
            return EU433_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800e67a:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU433 */
}
 800e67c:	bd08      	pop	{r3, pc}
	...

0800e680 <RegionEU433ChanMaskSet>:
    }
#endif /* REGION_EU433 */
}

bool RegionEU433ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800e680:	b508      	push	{r3, lr}
#if defined( REGION_EU433 )
    switch( chanMaskSet->ChannelsMaskType )
 800e682:	7903      	ldrb	r3, [r0, #4]
 800e684:	b11b      	cbz	r3, 800e68e <RegionEU433ChanMaskSet+0xe>
 800e686:	2b01      	cmp	r3, #1
 800e688:	d00b      	beq.n	800e6a2 <RegionEU433ChanMaskSet+0x22>
 800e68a:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800e68c:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e68e:	4b0a      	ldr	r3, [pc, #40]	; (800e6b8 <RegionEU433ChanMaskSet+0x38>)
 800e690:	681b      	ldr	r3, [r3, #0]
 800e692:	2201      	movs	r2, #1
 800e694:	6801      	ldr	r1, [r0, #0]
 800e696:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800e69a:	f7ff fb91 	bl	800ddc0 <RegionCommonChanMaskCopy>
    return true;
 800e69e:	2001      	movs	r0, #1
            break;
 800e6a0:	e7f4      	b.n	800e68c <RegionEU433ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, 1 );
 800e6a2:	4b05      	ldr	r3, [pc, #20]	; (800e6b8 <RegionEU433ChanMaskSet+0x38>)
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	2201      	movs	r2, #1
 800e6a8:	6801      	ldr	r1, [r0, #0]
 800e6aa:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800e6ae:	f7ff fb87 	bl	800ddc0 <RegionCommonChanMaskCopy>
    return true;
 800e6b2:	2001      	movs	r0, #1
            break;
 800e6b4:	e7ea      	b.n	800e68c <RegionEU433ChanMaskSet+0xc>
 800e6b6:	bf00      	nop
 800e6b8:	2000103c 	.word	0x2000103c

0800e6bc <RegionEU433ComputeRxWindowParameters>:

void RegionEU433ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800e6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e6be:	b083      	sub	sp, #12
 800e6c0:	460e      	mov	r6, r1
 800e6c2:	4617      	mov	r7, r2
 800e6c4:	461c      	mov	r4, r3
#if defined( REGION_EU433 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU433_RX_MAX_DATARATE );
 800e6c6:	2807      	cmp	r0, #7
 800e6c8:	bfa8      	it	ge
 800e6ca:	2007      	movge	r0, #7
 800e6cc:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU433 );
 800e6ce:	4913      	ldr	r1, [pc, #76]	; (800e71c <RegionEU433ComputeRxWindowParameters+0x60>)
 800e6d0:	f7ff fdd0 	bl	800e274 <RegionCommonGetBandwidth>
 800e6d4:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800e6d6:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e6da:	2b07      	cmp	r3, #7
 800e6dc:	d017      	beq.n	800e70e <RegionEU433ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU433[rxConfigParams->Datarate], BandwidthsEU433[rxConfigParams->Datarate] );
 800e6de:	4a0f      	ldr	r2, [pc, #60]	; (800e71c <RegionEU433ComputeRxWindowParameters+0x60>)
 800e6e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800e6e4:	4a0e      	ldr	r2, [pc, #56]	; (800e720 <RegionEU433ComputeRxWindowParameters+0x64>)
 800e6e6:	5cd0      	ldrb	r0, [r2, r3]
 800e6e8:	f7ff fc90 	bl	800e00c <RegionCommonComputeSymbolTimeLoRa>
 800e6ec:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800e6ee:	4b0d      	ldr	r3, [pc, #52]	; (800e724 <RegionEU433ComputeRxWindowParameters+0x68>)
 800e6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6f2:	4798      	blx	r3
 800e6f4:	4603      	mov	r3, r0
 800e6f6:	f104 020c 	add.w	r2, r4, #12
 800e6fa:	9201      	str	r2, [sp, #4]
 800e6fc:	3408      	adds	r4, #8
 800e6fe:	9400      	str	r4, [sp, #0]
 800e700:	463a      	mov	r2, r7
 800e702:	4631      	mov	r1, r6
 800e704:	4628      	mov	r0, r5
 800e706:	f7ff fc8f 	bl	800e028 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU433 */
}
 800e70a:	b003      	add	sp, #12
 800e70c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU433[rxConfigParams->Datarate] );
 800e70e:	4a04      	ldr	r2, [pc, #16]	; (800e720 <RegionEU433ComputeRxWindowParameters+0x64>)
 800e710:	5cd0      	ldrb	r0, [r2, r3]
 800e712:	f7ff fc83 	bl	800e01c <RegionCommonComputeSymbolTimeFsk>
 800e716:	4605      	mov	r5, r0
 800e718:	e7e9      	b.n	800e6ee <RegionEU433ComputeRxWindowParameters+0x32>
 800e71a:	bf00      	nop
 800e71c:	080146fc 	.word	0x080146fc
 800e720:	0801471c 	.word	0x0801471c
 800e724:	08014d7c 	.word	0x08014d7c

0800e728 <RegionEU433RxConfig>:

bool RegionEU433RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800e728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e72c:	b08a      	sub	sp, #40	; 0x28
 800e72e:	4604      	mov	r4, r0
 800e730:	460f      	mov	r7, r1
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800e732:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800e736:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800e73a:	4b37      	ldr	r3, [pc, #220]	; (800e818 <RegionEU433RxConfig+0xf0>)
 800e73c:	685b      	ldr	r3, [r3, #4]
 800e73e:	4798      	blx	r3
 800e740:	2800      	cmp	r0, #0
 800e742:	d167      	bne.n	800e814 <RegionEU433RxConfig+0xec>
 800e744:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800e746:	7ce3      	ldrb	r3, [r4, #19]
 800e748:	b983      	cbnz	r3, 800e76c <RegionEU433RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e74a:	4b34      	ldr	r3, [pc, #208]	; (800e81c <RegionEU433RxConfig+0xf4>)
 800e74c:	681a      	ldr	r2, [r3, #0]
 800e74e:	7823      	ldrb	r3, [r4, #0]
 800e750:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800e754:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800e758:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e75c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e760:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800e764:	f1b8 0f00 	cmp.w	r8, #0
 800e768:	d100      	bne.n	800e76c <RegionEU433RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800e76a:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU433[dr];
 800e76c:	4b2c      	ldr	r3, [pc, #176]	; (800e820 <RegionEU433RxConfig+0xf8>)
 800e76e:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800e772:	4b29      	ldr	r3, [pc, #164]	; (800e818 <RegionEU433RxConfig+0xf0>)
 800e774:	68db      	ldr	r3, [r3, #12]
 800e776:	4640      	mov	r0, r8
 800e778:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800e77a:	2d07      	cmp	r5, #7
 800e77c:	d02b      	beq.n	800e7d6 <RegionEU433RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800e77e:	4b26      	ldr	r3, [pc, #152]	; (800e818 <RegionEU433RxConfig+0xf0>)
 800e780:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e784:	7ca3      	ldrb	r3, [r4, #18]
 800e786:	9309      	str	r3, [sp, #36]	; 0x24
 800e788:	2601      	movs	r6, #1
 800e78a:	9608      	str	r6, [sp, #32]
 800e78c:	2300      	movs	r3, #0
 800e78e:	9307      	str	r3, [sp, #28]
 800e790:	9306      	str	r3, [sp, #24]
 800e792:	9305      	str	r3, [sp, #20]
 800e794:	9304      	str	r3, [sp, #16]
 800e796:	9303      	str	r3, [sp, #12]
 800e798:	8922      	ldrh	r2, [r4, #8]
 800e79a:	9202      	str	r2, [sp, #8]
 800e79c:	2208      	movs	r2, #8
 800e79e:	9201      	str	r2, [sp, #4]
 800e7a0:	9300      	str	r3, [sp, #0]
 800e7a2:	4633      	mov	r3, r6
 800e7a4:	464a      	mov	r2, r9
 800e7a6:	78a1      	ldrb	r1, [r4, #2]
 800e7a8:	4630      	mov	r0, r6
 800e7aa:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800e7ac:	7c63      	ldrb	r3, [r4, #17]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d02d      	beq.n	800e80e <RegionEU433RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU433[dr];
 800e7b2:	4b1c      	ldr	r3, [pc, #112]	; (800e824 <RegionEU433RxConfig+0xfc>)
 800e7b4:	5d59      	ldrb	r1, [r3, r5]
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU433[dr];
    }
    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800e7b6:	4b18      	ldr	r3, [pc, #96]	; (800e818 <RegionEU433RxConfig+0xf0>)
 800e7b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e7ba:	310d      	adds	r1, #13
 800e7bc:	b2c9      	uxtb	r1, r1
 800e7be:	4630      	mov	r0, r6
 800e7c0:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800e7c2:	462a      	mov	r2, r5
 800e7c4:	4641      	mov	r1, r8
 800e7c6:	7ce0      	ldrb	r0, [r4, #19]
 800e7c8:	f7ff fd66 	bl	800e298 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800e7cc:	703d      	strb	r5, [r7, #0]
    return true;
 800e7ce:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU433 */
}
 800e7d0:	b00a      	add	sp, #40	; 0x28
 800e7d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800e7d6:	4b10      	ldr	r3, [pc, #64]	; (800e818 <RegionEU433RxConfig+0xf0>)
 800e7d8:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800e7dc:	7ca3      	ldrb	r3, [r4, #18]
 800e7de:	9309      	str	r3, [sp, #36]	; 0x24
 800e7e0:	2000      	movs	r0, #0
 800e7e2:	9008      	str	r0, [sp, #32]
 800e7e4:	9007      	str	r0, [sp, #28]
 800e7e6:	9006      	str	r0, [sp, #24]
 800e7e8:	2301      	movs	r3, #1
 800e7ea:	9305      	str	r3, [sp, #20]
 800e7ec:	9004      	str	r0, [sp, #16]
 800e7ee:	9003      	str	r0, [sp, #12]
 800e7f0:	8923      	ldrh	r3, [r4, #8]
 800e7f2:	9302      	str	r3, [sp, #8]
 800e7f4:	2305      	movs	r3, #5
 800e7f6:	9301      	str	r3, [sp, #4]
 800e7f8:	4b0b      	ldr	r3, [pc, #44]	; (800e828 <RegionEU433RxConfig+0x100>)
 800e7fa:	9300      	str	r3, [sp, #0]
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800e802:	fb02 f209 	mul.w	r2, r2, r9
 800e806:	f24c 3150 	movw	r1, #50000	; 0xc350
 800e80a:	47d0      	blx	sl
 800e80c:	e7ce      	b.n	800e7ac <RegionEU433RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU433[dr];
 800e80e:	4b07      	ldr	r3, [pc, #28]	; (800e82c <RegionEU433RxConfig+0x104>)
 800e810:	5d59      	ldrb	r1, [r3, r5]
 800e812:	e7d0      	b.n	800e7b6 <RegionEU433RxConfig+0x8e>
        return false;
 800e814:	2000      	movs	r0, #0
 800e816:	e7db      	b.n	800e7d0 <RegionEU433RxConfig+0xa8>
 800e818:	08014d7c 	.word	0x08014d7c
 800e81c:	2000103c 	.word	0x2000103c
 800e820:	0801471c 	.word	0x0801471c
 800e824:	0801472c 	.word	0x0801472c
 800e828:	00014585 	.word	0x00014585
 800e82c:	08014724 	.word	0x08014724

0800e830 <RegionEU433TxConfig>:

bool RegionEU433TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800e830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e834:	b08d      	sub	sp, #52	; 0x34
 800e836:	4604      	mov	r4, r0
 800e838:	460f      	mov	r7, r1
 800e83a:	4690      	mov	r8, r2
#if defined( REGION_EU433 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU433[txConfig->Datarate];
 800e83c:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800e840:	4a42      	ldr	r2, [pc, #264]	; (800e94c <RegionEU433TxConfig+0x11c>)
 800e842:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800e846:	4d42      	ldr	r5, [pc, #264]	; (800e950 <RegionEU433TxConfig+0x120>)
 800e848:	682a      	ldr	r2, [r5, #0]
 800e84a:	7803      	ldrb	r3, [r0, #0]
 800e84c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e850:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e854:	7a5b      	ldrb	r3, [r3, #9]
 800e856:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e85a:	4a3e      	ldr	r2, [pc, #248]	; (800e954 <RegionEU433TxConfig+0x124>)
 800e85c:	6812      	ldr	r2, [r2, #0]
 800e85e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e862:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800e866:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800e86a:	f7ff fcfe 	bl	800e26a <RegionCommonLimitTxPower>
 800e86e:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU433 );
 800e870:	4939      	ldr	r1, [pc, #228]	; (800e958 <RegionEU433TxConfig+0x128>)
 800e872:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e876:	f7ff fcfd 	bl	800e274 <RegionCommonGetBandwidth>
 800e87a:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800e87c:	68a2      	ldr	r2, [r4, #8]
 800e87e:	6861      	ldr	r1, [r4, #4]
 800e880:	4630      	mov	r0, r6
 800e882:	f7ff fc0d 	bl	800e0a0 <RegionCommonComputeTxPower>
 800e886:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800e888:	4b34      	ldr	r3, [pc, #208]	; (800e95c <RegionEU433TxConfig+0x12c>)
 800e88a:	68da      	ldr	r2, [r3, #12]
 800e88c:	6829      	ldr	r1, [r5, #0]
 800e88e:	7823      	ldrb	r3, [r4, #0]
 800e890:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e894:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800e898:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800e89a:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800e89e:	2b07      	cmp	r3, #7
 800e8a0:	d031      	beq.n	800e906 <RegionEU433TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800e8a2:	4b2e      	ldr	r3, [pc, #184]	; (800e95c <RegionEU433TxConfig+0x12c>)
 800e8a4:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800e8a8:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800e8ac:	9308      	str	r3, [sp, #32]
 800e8ae:	2200      	movs	r2, #0
 800e8b0:	9207      	str	r2, [sp, #28]
 800e8b2:	9206      	str	r2, [sp, #24]
 800e8b4:	9205      	str	r2, [sp, #20]
 800e8b6:	2501      	movs	r5, #1
 800e8b8:	9504      	str	r5, [sp, #16]
 800e8ba:	9203      	str	r2, [sp, #12]
 800e8bc:	2308      	movs	r3, #8
 800e8be:	9302      	str	r3, [sp, #8]
 800e8c0:	9501      	str	r5, [sp, #4]
 800e8c2:	f8cd a000 	str.w	sl, [sp]
 800e8c6:	464b      	mov	r3, r9
 800e8c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e8ca:	4628      	mov	r0, r5
 800e8cc:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800e8ce:	4b20      	ldr	r3, [pc, #128]	; (800e950 <RegionEU433TxConfig+0x120>)
 800e8d0:	681a      	ldr	r2, [r3, #0]
 800e8d2:	7823      	ldrb	r3, [r4, #0]
 800e8d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800e8d8:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800e8dc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800e8e0:	f7ff fcfc 	bl	800e2dc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800e8e4:	89a1      	ldrh	r1, [r4, #12]
 800e8e6:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800e8ea:	f7ff fd1b 	bl	800e324 <GetTimeOnAir>
 800e8ee:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800e8f2:	4b1a      	ldr	r3, [pc, #104]	; (800e95c <RegionEU433TxConfig+0x12c>)
 800e8f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8f6:	7b21      	ldrb	r1, [r4, #12]
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	4798      	blx	r3

    *txPower = txPowerLimited;
 800e8fc:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU433 */
}
 800e8fe:	2001      	movs	r0, #1
 800e900:	b00d      	add	sp, #52	; 0x34
 800e902:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800e906:	4b15      	ldr	r3, [pc, #84]	; (800e95c <RegionEU433TxConfig+0x12c>)
 800e908:	69dd      	ldr	r5, [r3, #28]
 800e90a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800e90e:	fb03 f30a 	mul.w	r3, r3, sl
 800e912:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800e916:	9208      	str	r2, [sp, #32]
 800e918:	f04f 0b00 	mov.w	fp, #0
 800e91c:	f8cd b01c 	str.w	fp, [sp, #28]
 800e920:	f8cd b018 	str.w	fp, [sp, #24]
 800e924:	f8cd b014 	str.w	fp, [sp, #20]
 800e928:	2201      	movs	r2, #1
 800e92a:	9204      	str	r2, [sp, #16]
 800e92c:	f8cd b00c 	str.w	fp, [sp, #12]
 800e930:	2205      	movs	r2, #5
 800e932:	9202      	str	r2, [sp, #8]
 800e934:	f8cd b004 	str.w	fp, [sp, #4]
 800e938:	9300      	str	r3, [sp, #0]
 800e93a:	464b      	mov	r3, r9
 800e93c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800e940:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800e942:	4658      	mov	r0, fp
 800e944:	47a8      	blx	r5
        modem = MODEM_FSK;
 800e946:	465d      	mov	r5, fp
 800e948:	e7c1      	b.n	800e8ce <RegionEU433TxConfig+0x9e>
 800e94a:	bf00      	nop
 800e94c:	0801471c 	.word	0x0801471c
 800e950:	2000103c 	.word	0x2000103c
 800e954:	20001038 	.word	0x20001038
 800e958:	080146fc 	.word	0x080146fc
 800e95c:	08014d7c 	.word	0x08014d7c

0800e960 <RegionEU433LinkAdrReq>:

uint8_t RegionEU433LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800e960:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e964:	b08f      	sub	sp, #60	; 0x3c
 800e966:	4605      	mov	r5, r0
 800e968:	4689      	mov	r9, r1
 800e96a:	4690      	mov	r8, r2
 800e96c:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU433 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800e96e:	2400      	movs	r4, #0
 800e970:	940c      	str	r4, [sp, #48]	; 0x30
 800e972:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800e976:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800e97a:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e97c:	e030      	b.n	800e9e0 <RegionEU433LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800e97e:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800e982:	2607      	movs	r6, #7
 800e984:	e012      	b.n	800e9ac <RegionEU433LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800e986:	4a58      	ldr	r2, [pc, #352]	; (800eae8 <RegionEU433LinkAdrReq+0x188>)
 800e988:	6812      	ldr	r2, [r2, #0]
 800e98a:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e98e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800e992:	b13a      	cbz	r2, 800e9a4 <RegionEU433LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800e994:	2201      	movs	r2, #1
 800e996:	fa02 f20c 	lsl.w	r2, r2, ip
 800e99a:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800e99e:	430a      	orrs	r2, r1
 800e9a0:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU433_MAX_NB_CHANNELS; i++ )
 800e9a4:	f10c 0c01 	add.w	ip, ip, #1
 800e9a8:	fa5f fc8c 	uxtb.w	ip, ip
 800e9ac:	f1bc 0f0f 	cmp.w	ip, #15
 800e9b0:	d816      	bhi.n	800e9e0 <RegionEU433LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800e9b2:	2b06      	cmp	r3, #6
 800e9b4:	d0e7      	beq.n	800e986 <RegionEU433LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e9b6:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800e9ba:	fa4e fe0c 	asr.w	lr, lr, ip
 800e9be:	f01e 0f01 	tst.w	lr, #1
 800e9c2:	d0ef      	beq.n	800e9a4 <RegionEU433LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800e9c4:	4a48      	ldr	r2, [pc, #288]	; (800eae8 <RegionEU433LinkAdrReq+0x188>)
 800e9c6:	6812      	ldr	r2, [r2, #0]
 800e9c8:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800e9cc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800e9d0:	2a00      	cmp	r2, #0
 800e9d2:	d1e7      	bne.n	800e9a4 <RegionEU433LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800e9d4:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800e9d8:	e7e4      	b.n	800e9a4 <RegionEU433LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800e9da:	2606      	movs	r6, #6
 800e9dc:	e000      	b.n	800e9e0 <RegionEU433LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800e9de:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800e9e0:	7a2b      	ldrb	r3, [r5, #8]
 800e9e2:	42a3      	cmp	r3, r4
 800e9e4:	d918      	bls.n	800ea18 <RegionEU433LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800e9e6:	6868      	ldr	r0, [r5, #4]
 800e9e8:	a90c      	add	r1, sp, #48	; 0x30
 800e9ea:	4420      	add	r0, r4
 800e9ec:	f7ff fa98 	bl	800df20 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800e9f0:	b190      	cbz	r0, 800ea18 <RegionEU433LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800e9f2:	4404      	add	r4, r0
 800e9f4:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800e9f6:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800e9fa:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800e9fe:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800ea02:	b90b      	cbnz	r3, 800ea08 <RegionEU433LinkAdrReq+0xa8>
 800ea04:	2a00      	cmp	r2, #0
 800ea06:	d0e8      	beq.n	800e9da <RegionEU433LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800ea08:	1e5a      	subs	r2, r3, #1
 800ea0a:	b2d2      	uxtb	r2, r2
 800ea0c:	2a04      	cmp	r2, #4
 800ea0e:	d9e6      	bls.n	800e9de <RegionEU433LinkAdrReq+0x7e>
 800ea10:	2b06      	cmp	r3, #6
 800ea12:	d9b4      	bls.n	800e97e <RegionEU433LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800ea14:	2606      	movs	r6, #6
 800ea16:	e7e3      	b.n	800e9e0 <RegionEU433LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800ea18:	2302      	movs	r3, #2
 800ea1a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800ea1e:	7a6b      	ldrb	r3, [r5, #9]
 800ea20:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU433GetPhyParam( &getPhy );
 800ea24:	a80a      	add	r0, sp, #40	; 0x28
 800ea26:	f7ff fcaf 	bl	800e388 <RegionEU433GetPhyParam>
 800ea2a:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800ea2c:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800ea30:	7aab      	ldrb	r3, [r5, #10]
 800ea32:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800ea36:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800ea3a:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800ea3e:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800ea42:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800ea46:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800ea4a:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800ea4e:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800ea52:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800ea56:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800ea5a:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800ea5e:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800ea62:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU433_MAX_NB_CHANNELS;
 800ea66:	2310      	movs	r3, #16
 800ea68:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800ea6c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800ea70:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800ea72:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU433_TX_MAX_DATARATE;
 800ea76:	2307      	movs	r3, #7
 800ea78:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800ea7c:	4b1a      	ldr	r3, [pc, #104]	; (800eae8 <RegionEU433LinkAdrReq+0x188>)
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	9307      	str	r3, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU433_MIN_TX_POWER;
 800ea82:	2305      	movs	r3, #5
 800ea84:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU433_MAX_TX_POWER;
 800ea88:	2300      	movs	r3, #0
 800ea8a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800ea8e:	682b      	ldr	r3, [r5, #0]
 800ea90:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800ea92:	ab0c      	add	r3, sp, #48	; 0x30
 800ea94:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800ea98:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800ea9c:	a801      	add	r0, sp, #4
 800ea9e:	f7ff fa5d 	bl	800df5c <RegionCommonLinkAdrReqVerifyParams>
 800eaa2:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800eaa4:	2807      	cmp	r0, #7
 800eaa6:	d010      	beq.n	800eaca <RegionEU433LinkAdrReq+0x16a>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800eaa8:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800eaac:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800eab0:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800eab4:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800eab8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800eabc:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800eabe:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eac0:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU433 */
    return status;
}
 800eac2:	4628      	mov	r0, r5
 800eac4:	b00f      	add	sp, #60	; 0x3c
 800eac6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800eaca:	4e07      	ldr	r6, [pc, #28]	; (800eae8 <RegionEU433LinkAdrReq+0x188>)
 800eacc:	6830      	ldr	r0, [r6, #0]
 800eace:	220c      	movs	r2, #12
 800ead0:	2100      	movs	r1, #0
 800ead2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ead6:	f002 fd28 	bl	801152a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800eada:	6833      	ldr	r3, [r6, #0]
 800eadc:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800eae0:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800eae4:	e7e0      	b.n	800eaa8 <RegionEU433LinkAdrReq+0x148>
 800eae6:	bf00      	nop
 800eae8:	2000103c 	.word	0x2000103c

0800eaec <RegionEU433RxParamSetupReq>:

uint8_t RegionEU433RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800eaec:	b538      	push	{r3, r4, r5, lr}
 800eaee:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU433 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 800eaf0:	6840      	ldr	r0, [r0, #4]
 800eaf2:	f7ff fc03 	bl	800e2fc <VerifyRfFreq>
 800eaf6:	b1a0      	cbz	r0, 800eb22 <RegionEU433RxParamSetupReq+0x36>
    uint8_t status = 0x07;
 800eaf8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU433_RX_MIN_DATARATE, EU433_RX_MAX_DATARATE ) == false )
 800eafa:	2207      	movs	r2, #7
 800eafc:	2100      	movs	r1, #0
 800eafe:	f994 0000 	ldrsb.w	r0, [r4]
 800eb02:	f7ff f8ec 	bl	800dcde <RegionCommonValueInRange>
 800eb06:	b908      	cbnz	r0, 800eb0c <RegionEU433RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 800eb08:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU433_MIN_RX1_DR_OFFSET, EU433_MAX_RX1_DR_OFFSET ) == false )
 800eb0c:	2205      	movs	r2, #5
 800eb0e:	2100      	movs	r1, #0
 800eb10:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800eb14:	f7ff f8e3 	bl	800dcde <RegionCommonValueInRange>
 800eb18:	b908      	cbnz	r0, 800eb1e <RegionEU433RxParamSetupReq+0x32>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800eb1a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU433 */
    return status;
}
 800eb1e:	4628      	mov	r0, r5
 800eb20:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800eb22:	2506      	movs	r5, #6
 800eb24:	e7e9      	b.n	800eafa <RegionEU433RxParamSetupReq+0xe>

0800eb26 <RegionEU433TxParamSetupReq>:

int8_t RegionEU433TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800eb26:	f04f 30ff 	mov.w	r0, #4294967295
 800eb2a:	4770      	bx	lr

0800eb2c <RegionEU433DlChannelReq>:
int8_t RegionEU433DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    uint8_t status = 0x03;

#if defined( REGION_EU433 )
    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800eb2c:	7803      	ldrb	r3, [r0, #0]
 800eb2e:	2b0f      	cmp	r3, #15
 800eb30:	d901      	bls.n	800eb36 <RegionEU433DlChannelReq+0xa>
    {
        return 0;
 800eb32:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU433 */
    return status;
}
 800eb34:	4770      	bx	lr
{
 800eb36:	b510      	push	{r4, lr}
 800eb38:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency ) == false )
 800eb3a:	6840      	ldr	r0, [r0, #4]
 800eb3c:	f7ff fbde 	bl	800e2fc <VerifyRfFreq>
 800eb40:	b170      	cbz	r0, 800eb60 <RegionEU433DlChannelReq+0x34>
    uint8_t status = 0x03;
 800eb42:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800eb44:	4b0b      	ldr	r3, [pc, #44]	; (800eb74 <RegionEU433DlChannelReq+0x48>)
 800eb46:	681a      	ldr	r2, [r3, #0]
 800eb48:	7823      	ldrb	r3, [r4, #0]
 800eb4a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800eb4e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800eb52:	b909      	cbnz	r1, 800eb58 <RegionEU433DlChannelReq+0x2c>
        status &= 0xFD;
 800eb54:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800eb58:	2803      	cmp	r0, #3
 800eb5a:	d003      	beq.n	800eb64 <RegionEU433DlChannelReq+0x38>
    return status;
 800eb5c:	b240      	sxtb	r0, r0
}
 800eb5e:	bd10      	pop	{r4, pc}
        status &= 0xFE;
 800eb60:	2002      	movs	r0, #2
 800eb62:	e7ef      	b.n	800eb44 <RegionEU433DlChannelReq+0x18>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800eb64:	6861      	ldr	r1, [r4, #4]
 800eb66:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800eb6a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800eb6e:	6059      	str	r1, [r3, #4]
 800eb70:	e7f4      	b.n	800eb5c <RegionEU433DlChannelReq+0x30>
 800eb72:	bf00      	nop
 800eb74:	2000103c 	.word	0x2000103c

0800eb78 <RegionEU433AlternateDr>:
#if defined( REGION_EU433 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU433 */
}
 800eb78:	4770      	bx	lr
	...

0800eb7c <RegionEU433NextChannel>:

LoRaMacStatus_t RegionEU433NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800eb7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb7e:	b097      	sub	sp, #92	; 0x5c
 800eb80:	4604      	mov	r4, r0
 800eb82:	460f      	mov	r7, r1
 800eb84:	4616      	mov	r6, r2
 800eb86:	461d      	mov	r5, r3
#if defined( REGION_EU433 )
    uint8_t nbEnabledChannels = 0;
 800eb88:	2100      	movs	r1, #0
 800eb8a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800eb8e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU433_MAX_NB_CHANNELS] = { 0 };
 800eb92:	9111      	str	r1, [sp, #68]	; 0x44
 800eb94:	9112      	str	r1, [sp, #72]	; 0x48
 800eb96:	9113      	str	r1, [sp, #76]	; 0x4c
 800eb98:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU433_JOIN_CHANNELS;
 800eb9a:	2307      	movs	r3, #7
 800eb9c:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800eba0:	4b34      	ldr	r3, [pc, #208]	; (800ec74 <RegionEU433NextChannel+0xf8>)
 800eba2:	6818      	ldr	r0, [r3, #0]
 800eba4:	2201      	movs	r2, #1
 800eba6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ebaa:	f7ff f8f3 	bl	800dd94 <RegionCommonCountChannels>
 800ebae:	b938      	cbnz	r0, 800ebc0 <RegionEU433NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ebb0:	4b30      	ldr	r3, [pc, #192]	; (800ec74 <RegionEU433NextChannel+0xf8>)
 800ebb2:	681a      	ldr	r2, [r3, #0]
 800ebb4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800ebb8:	f043 0307 	orr.w	r3, r3, #7
 800ebbc:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800ebc0:	7a63      	ldrb	r3, [r4, #9]
 800ebc2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800ebc6:	7a23      	ldrb	r3, [r4, #8]
 800ebc8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800ebcc:	4b29      	ldr	r3, [pc, #164]	; (800ec74 <RegionEU433NextChannel+0xf8>)
 800ebce:	681b      	ldr	r3, [r3, #0]
 800ebd0:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800ebd4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800ebd6:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800ebd8:	4b27      	ldr	r3, [pc, #156]	; (800ec78 <RegionEU433NextChannel+0xfc>)
 800ebda:	681b      	ldr	r3, [r3, #0]
 800ebdc:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU433_MAX_NB_CHANNELS;
 800ebde:	2310      	movs	r3, #16
 800ebe0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800ebe4:	f10d 030a 	add.w	r3, sp, #10
 800ebe8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800ebea:	6823      	ldr	r3, [r4, #0]
 800ebec:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800ebee:	6863      	ldr	r3, [r4, #4]
 800ebf0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800ebf2:	7aa3      	ldrb	r3, [r4, #10]
 800ebf4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU433_MAX_NB_BANDS;
 800ebf8:	2301      	movs	r3, #1
 800ebfa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800ebfe:	ab0c      	add	r3, sp, #48	; 0x30
 800ec00:	f104 020c 	add.w	r2, r4, #12
 800ec04:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ec08:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800ec0c:	7d23      	ldrb	r3, [r4, #20]
 800ec0e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800ec12:	8ae1      	ldrh	r1, [r4, #22]
 800ec14:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800ec18:	f7ff fb84 	bl	800e324 <GetTimeOnAir>
 800ec1c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800ec1e:	ab03      	add	r3, sp, #12
 800ec20:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800ec22:	9601      	str	r6, [sp, #4]
 800ec24:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800ec2e:	aa11      	add	r2, sp, #68	; 0x44
 800ec30:	4629      	mov	r1, r5
 800ec32:	a809      	add	r0, sp, #36	; 0x24
 800ec34:	f7ff fab0 	bl	800e198 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800ec38:	4604      	mov	r4, r0
 800ec3a:	b120      	cbz	r0, 800ec46 <RegionEU433NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800ec3c:	280c      	cmp	r0, #12
 800ec3e:	d00f      	beq.n	800ec60 <RegionEU433NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800ec40:	4620      	mov	r0, r4
 800ec42:	b017      	add	sp, #92	; 0x5c
 800ec44:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800ec46:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800ec4a:	3901      	subs	r1, #1
 800ec4c:	f002 fc48 	bl	80114e0 <randr>
 800ec50:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800ec54:	eb0d 0003 	add.w	r0, sp, r3
 800ec58:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800ec5c:	703b      	strb	r3, [r7, #0]
 800ec5e:	e7ef      	b.n	800ec40 <RegionEU433NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800ec60:	4b04      	ldr	r3, [pc, #16]	; (800ec74 <RegionEU433NextChannel+0xf8>)
 800ec62:	681a      	ldr	r2, [r3, #0]
 800ec64:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800ec68:	f043 0307 	orr.w	r3, r3, #7
 800ec6c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800ec70:	e7e6      	b.n	800ec40 <RegionEU433NextChannel+0xc4>
 800ec72:	bf00      	nop
 800ec74:	2000103c 	.word	0x2000103c
 800ec78:	20001038 	.word	0x20001038

0800ec7c <RegionEU433ChannelAdd>:

LoRaMacStatus_t RegionEU433ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800ec7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if defined( REGION_EU433 )
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800ec7e:	7905      	ldrb	r5, [r0, #4]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800ec80:	2d02      	cmp	r5, #2
 800ec82:	d94b      	bls.n	800ed1c <RegionEU433ChannelAdd+0xa0>
 800ec84:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU433_MAX_NB_CHANNELS )
 800ec86:	2d0f      	cmp	r5, #15
 800ec88:	d84a      	bhi.n	800ed20 <RegionEU433ChannelAdd+0xa4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800ec8a:	6803      	ldr	r3, [r0, #0]
 800ec8c:	7a18      	ldrb	r0, [r3, #8]
 800ec8e:	f340 0003 	sbfx	r0, r0, #0, #4
 800ec92:	2207      	movs	r2, #7
 800ec94:	2100      	movs	r1, #0
 800ec96:	b240      	sxtb	r0, r0
 800ec98:	f7ff f821 	bl	800dcde <RegionCommonValueInRange>
 800ec9c:	2800      	cmp	r0, #0
 800ec9e:	d039      	beq.n	800ed14 <RegionEU433ChannelAdd+0x98>
    bool drInvalid = false;
 800eca0:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU433_TX_MIN_DATARATE, EU433_TX_MAX_DATARATE ) == false )
 800eca2:	6823      	ldr	r3, [r4, #0]
 800eca4:	7a18      	ldrb	r0, [r3, #8]
 800eca6:	f340 1003 	sbfx	r0, r0, #4, #4
 800ecaa:	2207      	movs	r2, #7
 800ecac:	2100      	movs	r1, #0
 800ecae:	b240      	sxtb	r0, r0
 800ecb0:	f7ff f815 	bl	800dcde <RegionCommonValueInRange>
 800ecb4:	b900      	cbnz	r0, 800ecb8 <RegionEU433ChannelAdd+0x3c>
    {
        drInvalid = true;
 800ecb6:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800ecb8:	6821      	ldr	r1, [r4, #0]
 800ecba:	7a0b      	ldrb	r3, [r1, #8]
 800ecbc:	f343 0203 	sbfx	r2, r3, #0, #4
 800ecc0:	b252      	sxtb	r2, r2
 800ecc2:	f343 1303 	sbfx	r3, r3, #4, #4
 800ecc6:	b25b      	sxtb	r3, r3
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	dd00      	ble.n	800ecce <RegionEU433ChannelAdd+0x52>
    {
        drInvalid = true;
 800eccc:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency ) == false )
 800ecce:	6808      	ldr	r0, [r1, #0]
 800ecd0:	f7ff fb14 	bl	800e2fc <VerifyRfFreq>
 800ecd4:	b300      	cbz	r0, 800ed18 <RegionEU433ChannelAdd+0x9c>
    bool freqInvalid = false;
 800ecd6:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800ecd8:	b106      	cbz	r6, 800ecdc <RegionEU433ChannelAdd+0x60>
 800ecda:	bb1b      	cbnz	r3, 800ed24 <RegionEU433ChannelAdd+0xa8>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800ecdc:	bb26      	cbnz	r6, 800ed28 <RegionEU433ChannelAdd+0xac>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800ecde:	bb2b      	cbnz	r3, 800ed2c <RegionEU433ChannelAdd+0xb0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800ece0:	4f13      	ldr	r7, [pc, #76]	; (800ed30 <RegionEU433ChannelAdd+0xb4>)
 800ece2:	683b      	ldr	r3, [r7, #0]
 800ece4:	006e      	lsls	r6, r5, #1
 800ece6:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800ecea:	220c      	movs	r2, #12
 800ecec:	6821      	ldr	r1, [r4, #0]
 800ecee:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ecf2:	f002 fc02 	bl	80114fa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = 0;
 800ecf6:	683a      	ldr	r2, [r7, #0]
 800ecf8:	442e      	add	r6, r5
 800ecfa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800ecfe:	2000      	movs	r0, #0
 800ed00:	7270      	strb	r0, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800ed02:	2301      	movs	r3, #1
 800ed04:	fa03 f505 	lsl.w	r5, r3, r5
 800ed08:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800ed0c:	431d      	orrs	r5, r3
 800ed0e:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800ed12:	e006      	b.n	800ed22 <RegionEU433ChannelAdd+0xa6>
        drInvalid = true;
 800ed14:	2601      	movs	r6, #1
 800ed16:	e7c4      	b.n	800eca2 <RegionEU433ChannelAdd+0x26>
            freqInvalid = true;
 800ed18:	2301      	movs	r3, #1
 800ed1a:	e7dd      	b.n	800ecd8 <RegionEU433ChannelAdd+0x5c>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800ed1c:	2006      	movs	r0, #6
 800ed1e:	e000      	b.n	800ed22 <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800ed20:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU433 */
}
 800ed22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800ed24:	2006      	movs	r0, #6
 800ed26:	e7fc      	b.n	800ed22 <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800ed28:	2005      	movs	r0, #5
 800ed2a:	e7fa      	b.n	800ed22 <RegionEU433ChannelAdd+0xa6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800ed2c:	2004      	movs	r0, #4
 800ed2e:	e7f8      	b.n	800ed22 <RegionEU433ChannelAdd+0xa6>
 800ed30:	2000103c 	.word	0x2000103c

0800ed34 <RegionEU433ChannelsRemove>:

bool RegionEU433ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU433 )
    uint8_t id = channelRemove->ChannelId;
 800ed34:	7801      	ldrb	r1, [r0, #0]

    if( id < EU433_NUMB_DEFAULT_CHANNELS )
 800ed36:	2902      	cmp	r1, #2
 800ed38:	d801      	bhi.n	800ed3e <RegionEU433ChannelsRemove+0xa>
    {
        return false;
 800ed3a:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU433 */
}
 800ed3c:	4770      	bx	lr
{
 800ed3e:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800ed40:	4b09      	ldr	r3, [pc, #36]	; (800ed68 <RegionEU433ChannelsRemove+0x34>)
 800ed42:	6818      	ldr	r0, [r3, #0]
 800ed44:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800ed48:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800ed4c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ed50:	2200      	movs	r2, #0
 800ed52:	f840 200c 	str.w	r2, [r0, ip]
 800ed56:	605a      	str	r2, [r3, #4]
 800ed58:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU433_MAX_NB_CHANNELS );
 800ed5a:	2210      	movs	r2, #16
 800ed5c:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ed60:	f7fe ffff 	bl	800dd62 <RegionCommonChanDisable>
}
 800ed64:	bd08      	pop	{r3, pc}
 800ed66:	bf00      	nop
 800ed68:	2000103c 	.word	0x2000103c

0800ed6c <RegionEU433ApplyCFList>:
{
 800ed6c:	b570      	push	{r4, r5, r6, lr}
 800ed6e:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800ed70:	2350      	movs	r3, #80	; 0x50
 800ed72:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800ed76:	7a03      	ldrb	r3, [r0, #8]
 800ed78:	2b10      	cmp	r3, #16
 800ed7a:	d136      	bne.n	800edea <RegionEU433ApplyCFList+0x7e>
 800ed7c:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800ed7e:	6843      	ldr	r3, [r0, #4]
 800ed80:	7bdd      	ldrb	r5, [r3, #15]
 800ed82:	2d00      	cmp	r5, #0
 800ed84:	d131      	bne.n	800edea <RegionEU433ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800ed86:	2403      	movs	r4, #3
 800ed88:	e01b      	b.n	800edc2 <RegionEU433ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800ed8a:	6872      	ldr	r2, [r6, #4]
 800ed8c:	5d53      	ldrb	r3, [r2, r5]
 800ed8e:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800ed90:	442a      	add	r2, r5
 800ed92:	7851      	ldrb	r1, [r2, #1]
 800ed94:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800ed98:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800ed9a:	7892      	ldrb	r2, [r2, #2]
 800ed9c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800eda0:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800eda2:	2264      	movs	r2, #100	; 0x64
 800eda4:	fb02 f303 	mul.w	r3, r2, r3
 800eda8:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800edaa:	2300      	movs	r3, #0
 800edac:	9304      	str	r3, [sp, #16]
 800edae:	e011      	b.n	800edd4 <RegionEU433ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800edb0:	f88d 4000 	strb.w	r4, [sp]
            RegionEU433ChannelsRemove( &channelRemove );
 800edb4:	4668      	mov	r0, sp
 800edb6:	f7ff ffbd 	bl	800ed34 <RegionEU433ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU433_NUMB_DEFAULT_CHANNELS; chanIdx < EU433_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800edba:	3503      	adds	r5, #3
 800edbc:	b2ed      	uxtb	r5, r5
 800edbe:	3401      	adds	r4, #1
 800edc0:	b2e4      	uxtb	r4, r4
 800edc2:	2c0f      	cmp	r4, #15
 800edc4:	d811      	bhi.n	800edea <RegionEU433ApplyCFList+0x7e>
        if( chanIdx < ( EU433_NUMB_CHANNELS_CF_LIST + EU433_NUMB_DEFAULT_CHANNELS ) )
 800edc6:	2c07      	cmp	r4, #7
 800edc8:	d9df      	bls.n	800ed8a <RegionEU433ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800edca:	2300      	movs	r3, #0
 800edcc:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800edce:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800edd2:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800edd4:	9b03      	ldr	r3, [sp, #12]
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d0ea      	beq.n	800edb0 <RegionEU433ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800edda:	ab03      	add	r3, sp, #12
 800eddc:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800edde:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU433ChannelAdd( &channelAdd );
 800ede2:	a801      	add	r0, sp, #4
 800ede4:	f7ff ff4a 	bl	800ec7c <RegionEU433ChannelAdd>
 800ede8:	e7e7      	b.n	800edba <RegionEU433ApplyCFList+0x4e>
}
 800edea:	b006      	add	sp, #24
 800edec:	bd70      	pop	{r4, r5, r6, pc}

0800edee <RegionEU433NewChannelReq>:
{
 800edee:	b500      	push	{lr}
 800edf0:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800edf2:	6803      	ldr	r3, [r0, #0]
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	b952      	cbnz	r2, 800ee0e <RegionEU433NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800edf8:	7903      	ldrb	r3, [r0, #4]
 800edfa:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU433ChannelsRemove( &channelRemove ) == false )
 800edfe:	a801      	add	r0, sp, #4
 800ee00:	f7ff ff98 	bl	800ed34 <RegionEU433ChannelsRemove>
 800ee04:	b1d0      	cbz	r0, 800ee3c <RegionEU433NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800ee06:	2003      	movs	r0, #3
}
 800ee08:	b005      	add	sp, #20
 800ee0a:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800ee0e:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800ee10:	7903      	ldrb	r3, [r0, #4]
 800ee12:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU433ChannelAdd( &channelAdd ) )
 800ee16:	a802      	add	r0, sp, #8
 800ee18:	f7ff ff30 	bl	800ec7c <RegionEU433ChannelAdd>
 800ee1c:	2806      	cmp	r0, #6
 800ee1e:	d80b      	bhi.n	800ee38 <RegionEU433NewChannelReq+0x4a>
 800ee20:	e8df f000 	tbb	[pc, r0]
 800ee24:	0a0a0a04 	.word	0x0a0a0a04
 800ee28:	060e      	.short	0x060e
 800ee2a:	08          	.byte	0x08
 800ee2b:	00          	.byte	0x00
 800ee2c:	2003      	movs	r0, #3
 800ee2e:	e7eb      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFD;
 800ee30:	2001      	movs	r0, #1
                break;
 800ee32:	e7e9      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800ee34:	2000      	movs	r0, #0
                break;
 800ee36:	e7e7      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFC;
 800ee38:	2000      	movs	r0, #0
                break;
 800ee3a:	e7e5      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>
            status &= 0xFC;
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e7e3      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>
                status &= 0xFE;
 800ee40:	2002      	movs	r0, #2
 800ee42:	e7e1      	b.n	800ee08 <RegionEU433NewChannelReq+0x1a>

0800ee44 <RegionEU433ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU433ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU433 )
    int8_t datarate = dr - drOffset;
 800ee44:	1a88      	subs	r0, r1, r2
 800ee46:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800ee48:	2800      	cmp	r0, #0
 800ee4a:	db01      	blt.n	800ee50 <RegionEU433ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU433 */
}
 800ee4c:	b2c0      	uxtb	r0, r0
 800ee4e:	4770      	bx	lr
        datarate = DR_0;
 800ee50:	2000      	movs	r0, #0
 800ee52:	e7fb      	b.n	800ee4c <RegionEU433ApplyDrOffset+0x8>

0800ee54 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 800ee54:	b538      	push	{r3, r4, r5, lr}
 800ee56:	4604      	mov	r4, r0
 800ee58:	460d      	mov	r5, r1
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800ee5a:	4b1b      	ldr	r3, [pc, #108]	; (800eec8 <VerifyRfFreq+0x74>)
 800ee5c:	6a1b      	ldr	r3, [r3, #32]
 800ee5e:	4798      	blx	r3
 800ee60:	b130      	cbz	r0, 800ee70 <VerifyRfFreq+0x1c>
    {
        return false;
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 800ee62:	4b1a      	ldr	r3, [pc, #104]	; (800eecc <VerifyRfFreq+0x78>)
 800ee64:	4423      	add	r3, r4
 800ee66:	4a1a      	ldr	r2, [pc, #104]	; (800eed0 <VerifyRfFreq+0x7c>)
 800ee68:	4293      	cmp	r3, r2
 800ee6a:	d802      	bhi.n	800ee72 <VerifyRfFreq+0x1e>
    {
        *band = 2;
 800ee6c:	2302      	movs	r3, #2
 800ee6e:	702b      	strb	r3, [r5, #0]
    else
    {
        return false;
    }
    return true;
}
 800ee70:	bd38      	pop	{r3, r4, r5, pc}
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 800ee72:	4b18      	ldr	r3, [pc, #96]	; (800eed4 <VerifyRfFreq+0x80>)
 800ee74:	4423      	add	r3, r4
 800ee76:	4a18      	ldr	r2, [pc, #96]	; (800eed8 <VerifyRfFreq+0x84>)
 800ee78:	4293      	cmp	r3, r2
 800ee7a:	d802      	bhi.n	800ee82 <VerifyRfFreq+0x2e>
        *band = 0;
 800ee7c:	2300      	movs	r3, #0
 800ee7e:	702b      	strb	r3, [r5, #0]
 800ee80:	e7f6      	b.n	800ee70 <VerifyRfFreq+0x1c>
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 800ee82:	4b16      	ldr	r3, [pc, #88]	; (800eedc <VerifyRfFreq+0x88>)
 800ee84:	4423      	add	r3, r4
 800ee86:	4a16      	ldr	r2, [pc, #88]	; (800eee0 <VerifyRfFreq+0x8c>)
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	d802      	bhi.n	800ee92 <VerifyRfFreq+0x3e>
        *band = 1;
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	702b      	strb	r3, [r5, #0]
 800ee90:	e7ee      	b.n	800ee70 <VerifyRfFreq+0x1c>
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 800ee92:	4b14      	ldr	r3, [pc, #80]	; (800eee4 <VerifyRfFreq+0x90>)
 800ee94:	4423      	add	r3, r4
 800ee96:	4a14      	ldr	r2, [pc, #80]	; (800eee8 <VerifyRfFreq+0x94>)
 800ee98:	4293      	cmp	r3, r2
 800ee9a:	d802      	bhi.n	800eea2 <VerifyRfFreq+0x4e>
        *band = 5;
 800ee9c:	2305      	movs	r3, #5
 800ee9e:	702b      	strb	r3, [r5, #0]
 800eea0:	e7e6      	b.n	800ee70 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 800eea2:	4b12      	ldr	r3, [pc, #72]	; (800eeec <VerifyRfFreq+0x98>)
 800eea4:	4423      	add	r3, r4
 800eea6:	4a12      	ldr	r2, [pc, #72]	; (800eef0 <VerifyRfFreq+0x9c>)
 800eea8:	4293      	cmp	r3, r2
 800eeaa:	d802      	bhi.n	800eeb2 <VerifyRfFreq+0x5e>
        *band = 3;
 800eeac:	2303      	movs	r3, #3
 800eeae:	702b      	strb	r3, [r5, #0]
 800eeb0:	e7de      	b.n	800ee70 <VerifyRfFreq+0x1c>
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 800eeb2:	4b10      	ldr	r3, [pc, #64]	; (800eef4 <VerifyRfFreq+0xa0>)
 800eeb4:	4423      	add	r3, r4
 800eeb6:	4a10      	ldr	r2, [pc, #64]	; (800eef8 <VerifyRfFreq+0xa4>)
 800eeb8:	4293      	cmp	r3, r2
 800eeba:	d802      	bhi.n	800eec2 <VerifyRfFreq+0x6e>
        *band = 4;
 800eebc:	2304      	movs	r3, #4
 800eebe:	702b      	strb	r3, [r5, #0]
 800eec0:	e7d6      	b.n	800ee70 <VerifyRfFreq+0x1c>
        return false;
 800eec2:	2000      	movs	r0, #0
 800eec4:	e7d4      	b.n	800ee70 <VerifyRfFreq+0x1c>
 800eec6:	bf00      	nop
 800eec8:	08014d7c 	.word	0x08014d7c
 800eecc:	cc8faa40 	.word	0xcc8faa40
 800eed0:	001e847f 	.word	0x001e847f
 800eed4:	cc7125c0 	.word	0xcc7125c0
 800eed8:	002dc6c0 	.word	0x002dc6c0
 800eedc:	cc435eff 	.word	0xcc435eff
 800eee0:	000927bf 	.word	0x000927bf
 800eee4:	cc38b0a0 	.word	0xcc38b0a0
 800eee8:	0007a120 	.word	0x0007a120
 800eeec:	cc2e0240 	.word	0xcc2e0240
 800eef0:	0003d090 	.word	0x0003d090
 800eef4:	cc296e60 	.word	0xcc296e60
 800eef8:	000493e0 	.word	0x000493e0

0800eefc <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800eefc:	b570      	push	{r4, r5, r6, lr}
 800eefe:	b084      	sub	sp, #16
 800ef00:	4605      	mov	r5, r0
 800ef02:	460c      	mov	r4, r1
    int8_t phyDr = DataratesEU868[datarate];
 800ef04:	4b13      	ldr	r3, [pc, #76]	; (800ef54 <GetTimeOnAir+0x58>)
 800ef06:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 800ef08:	4913      	ldr	r1, [pc, #76]	; (800ef58 <GetTimeOnAir+0x5c>)
 800ef0a:	f7ff f9b3 	bl	800e274 <RegionCommonGetBandwidth>
 800ef0e:	4601      	mov	r1, r0
    TimerTime_t timeOnAir = 0;

    if( datarate == DR_7 )
 800ef10:	2d07      	cmp	r5, #7
 800ef12:	d00e      	beq.n	800ef32 <GetTimeOnAir+0x36>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800ef14:	4b11      	ldr	r3, [pc, #68]	; (800ef5c <GetTimeOnAir+0x60>)
 800ef16:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ef18:	2001      	movs	r0, #1
 800ef1a:	9003      	str	r0, [sp, #12]
 800ef1c:	b2e4      	uxtb	r4, r4
 800ef1e:	9402      	str	r4, [sp, #8]
 800ef20:	2300      	movs	r3, #0
 800ef22:	9301      	str	r3, [sp, #4]
 800ef24:	2308      	movs	r3, #8
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	4603      	mov	r3, r0
 800ef2a:	4632      	mov	r2, r6
 800ef2c:	47a8      	blx	r5
    }
    return timeOnAir;
}
 800ef2e:	b004      	add	sp, #16
 800ef30:	bd70      	pop	{r4, r5, r6, pc}
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 800ef32:	4b0a      	ldr	r3, [pc, #40]	; (800ef5c <GetTimeOnAir+0x60>)
 800ef34:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800ef36:	2301      	movs	r3, #1
 800ef38:	9303      	str	r3, [sp, #12]
 800ef3a:	b2e4      	uxtb	r4, r4
 800ef3c:	9402      	str	r4, [sp, #8]
 800ef3e:	2000      	movs	r0, #0
 800ef40:	9001      	str	r0, [sp, #4]
 800ef42:	2305      	movs	r3, #5
 800ef44:	9300      	str	r3, [sp, #0]
 800ef46:	4603      	mov	r3, r0
 800ef48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ef4c:	fb06 f202 	mul.w	r2, r6, r2
 800ef50:	47a8      	blx	r5
 800ef52:	e7ec      	b.n	800ef2e <GetTimeOnAir+0x32>
 800ef54:	08014754 	.word	0x08014754
 800ef58:	08014734 	.word	0x08014734
 800ef5c:	08014d7c 	.word	0x08014d7c

0800ef60 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 800ef60:	b500      	push	{lr}
 800ef62:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800ef64:	2300      	movs	r3, #0
 800ef66:	9304      	str	r3, [sp, #16]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 800ef68:	7803      	ldrb	r3, [r0, #0]
 800ef6a:	3b0b      	subs	r3, #11
 800ef6c:	2b2d      	cmp	r3, #45	; 0x2d
 800ef6e:	d82f      	bhi.n	800efd0 <RegionEU868GetPhyParam+0x70>
 800ef70:	e8df f003 	tbb	[pc, r3]
 800ef74:	3f393633 	.word	0x3f393633
 800ef78:	504c4845 	.word	0x504c4845
 800ef7c:	2e5c5854 	.word	0x2e5c5854
 800ef80:	6e682e65 	.word	0x6e682e65
 800ef84:	2e2e7774 	.word	0x2e2e7774
 800ef88:	2e177f7b 	.word	0x2e177f7b
 800ef8c:	2e2e2e2e 	.word	0x2e2e2e2e
 800ef90:	2e2e2e2e 	.word	0x2e2e2e2e
 800ef94:	2e2e2e2e 	.word	0x2e2e2e2e
 800ef98:	2e8c8582 	.word	0x2e8c8582
 800ef9c:	2e928f2e 	.word	0x2e928f2e
 800efa0:	9b95      	.short	0x9b95
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 800efa2:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800efa6:	f88d 3004 	strb.w	r3, [sp, #4]
 800efaa:	2307      	movs	r3, #7
 800efac:	f88d 3005 	strb.w	r3, [sp, #5]
 800efb0:	2300      	movs	r3, #0
 800efb2:	f88d 3006 	strb.w	r3, [sp, #6]
 800efb6:	2310      	movs	r3, #16
 800efb8:	f88d 3007 	strb.w	r3, [sp, #7]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800efbc:	4b3e      	ldr	r3, [pc, #248]	; (800f0b8 <RegionEU868GetPhyParam+0x158>)
 800efbe:	681b      	ldr	r3, [r3, #0]
 800efc0:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800efc4:	9202      	str	r2, [sp, #8]
 800efc6:	9303      	str	r3, [sp, #12]
                .Channels = RegionNvmGroup2->Channels,
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800efc8:	a801      	add	r0, sp, #4
 800efca:	f7ff f92f 	bl	800e22c <RegionCommonGetNextLowerTxDr>
 800efce:	9004      	str	r0, [sp, #16]
            break;
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 800efd0:	9804      	ldr	r0, [sp, #16]
 800efd2:	9005      	str	r0, [sp, #20]
}
 800efd4:	b007      	add	sp, #28
 800efd6:	f85d fb04 	ldr.w	pc, [sp], #4
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800efda:	2340      	movs	r3, #64	; 0x40
 800efdc:	9304      	str	r3, [sp, #16]
            break;
 800efde:	e7f7      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800efe0:	2320      	movs	r3, #32
 800efe2:	9304      	str	r3, [sp, #16]
            break;
 800efe4:	e7f4      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 800efe6:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800efea:	4a34      	ldr	r2, [pc, #208]	; (800f0bc <RegionEU868GetPhyParam+0x15c>)
 800efec:	5cd3      	ldrb	r3, [r2, r3]
 800efee:	9304      	str	r3, [sp, #16]
            break;
 800eff0:	e7ee      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 800eff2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800eff6:	4a32      	ldr	r2, [pc, #200]	; (800f0c0 <RegionEU868GetPhyParam+0x160>)
 800eff8:	5cd3      	ldrb	r3, [r2, r3]
 800effa:	9304      	str	r3, [sp, #16]
            break;
 800effc:	e7e8      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 800effe:	2301      	movs	r3, #1
 800f000:	9304      	str	r3, [sp, #16]
            break;
 800f002:	e7e5      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_RX_WINDOW;
 800f004:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800f008:	9304      	str	r3, [sp, #16]
            break;
 800f00a:	e7e1      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800f00c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f010:	9304      	str	r3, [sp, #16]
            break;
 800f012:	e7dd      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800f014:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800f018:	9304      	str	r3, [sp, #16]
            break;
 800f01a:	e7d9      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800f01c:	f241 3388 	movw	r3, #5000	; 0x1388
 800f020:	9304      	str	r3, [sp, #16]
            break;
 800f022:	e7d5      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800f024:	f241 7370 	movw	r3, #6000	; 0x1770
 800f028:	9304      	str	r3, [sp, #16]
            break;
 800f02a:	e7d1      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800f02c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800f030:	4824      	ldr	r0, [pc, #144]	; (800f0c4 <RegionEU868GetPhyParam+0x164>)
 800f032:	f002 fa55 	bl	80114e0 <randr>
 800f036:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800f03a:	9004      	str	r0, [sp, #16]
            break;
 800f03c:	e7c8      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_RX_WND_2_FREQ;
 800f03e:	4b22      	ldr	r3, [pc, #136]	; (800f0c8 <RegionEU868GetPhyParam+0x168>)
 800f040:	9304      	str	r3, [sp, #16]
            break;
 800f042:	e7c5      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f044:	4b1c      	ldr	r3, [pc, #112]	; (800f0b8 <RegionEU868GetPhyParam+0x158>)
 800f046:	681b      	ldr	r3, [r3, #0]
 800f048:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800f04c:	9304      	str	r3, [sp, #16]
            break;
 800f04e:	e7bf      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800f050:	4b19      	ldr	r3, [pc, #100]	; (800f0b8 <RegionEU868GetPhyParam+0x158>)
 800f052:	681b      	ldr	r3, [r3, #0]
 800f054:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800f058:	9304      	str	r3, [sp, #16]
            break;
 800f05a:	e7b9      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 800f05c:	2310      	movs	r3, #16
 800f05e:	9304      	str	r3, [sp, #16]
            break;
 800f060:	e7b6      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800f062:	4b15      	ldr	r3, [pc, #84]	; (800f0b8 <RegionEU868GetPhyParam+0x158>)
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	9304      	str	r3, [sp, #16]
            break;
 800f068:	e7b2      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 800f06a:	f04f 4383 	mov.w	r3, #1098907648	; 0x41800000
 800f06e:	9304      	str	r3, [sp, #16]
            break;
 800f070:	e7ae      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 800f072:	4b16      	ldr	r3, [pc, #88]	; (800f0cc <RegionEU868GetPhyParam+0x16c>)
 800f074:	9304      	str	r3, [sp, #16]
            break;
 800f076:	e7ab      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 800f078:	4b13      	ldr	r3, [pc, #76]	; (800f0c8 <RegionEU868GetPhyParam+0x168>)
 800f07a:	9304      	str	r3, [sp, #16]
            break;
 800f07c:	e7a8      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 800f07e:	2311      	movs	r3, #17
 800f080:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 800f084:	2301      	movs	r3, #1
 800f086:	f88d 3011 	strb.w	r3, [sp, #17]
            break;
 800f08a:	e7a1      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 800f08c:	2303      	movs	r3, #3
 800f08e:	9304      	str	r3, [sp, #16]
            break;
 800f090:	e79e      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 800f092:	4b0d      	ldr	r3, [pc, #52]	; (800f0c8 <RegionEU868GetPhyParam+0x168>)
 800f094:	9304      	str	r3, [sp, #16]
            break;
 800f096:	e79b      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 800f098:	2303      	movs	r3, #3
 800f09a:	9304      	str	r3, [sp, #16]
            break;
 800f09c:	e798      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 800f09e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f0a2:	4a0b      	ldr	r2, [pc, #44]	; (800f0d0 <RegionEU868GetPhyParam+0x170>)
 800f0a4:	5cd3      	ldrb	r3, [r2, r3]
 800f0a6:	9304      	str	r3, [sp, #16]
            break;
 800f0a8:	e792      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 800f0aa:	490a      	ldr	r1, [pc, #40]	; (800f0d4 <RegionEU868GetPhyParam+0x174>)
 800f0ac:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800f0b0:	f7ff f8e0 	bl	800e274 <RegionCommonGetBandwidth>
 800f0b4:	9004      	str	r0, [sp, #16]
            break;
 800f0b6:	e78b      	b.n	800efd0 <RegionEU868GetPhyParam+0x70>
 800f0b8:	20001044 	.word	0x20001044
 800f0bc:	0801475c 	.word	0x0801475c
 800f0c0:	08014764 	.word	0x08014764
 800f0c4:	fffffc18 	.word	0xfffffc18
 800f0c8:	33d3e608 	.word	0x33d3e608
 800f0cc:	4009999a 	.word	0x4009999a
 800f0d0:	08014754 	.word	0x08014754
 800f0d4:	08014734 	.word	0x08014734

0800f0d8 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800f0d8:	b510      	push	{r4, lr}
 800f0da:	b082      	sub	sp, #8
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800f0dc:	4b0b      	ldr	r3, [pc, #44]	; (800f10c <RegionEU868SetBandTxDone+0x34>)
 800f0de:	681a      	ldr	r2, [r3, #0]
 800f0e0:	7803      	ldrb	r3, [r0, #0]
 800f0e2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f0e6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f0ea:	7a5b      	ldrb	r3, [r3, #9]
 800f0ec:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800f0f0:	4b07      	ldr	r3, [pc, #28]	; (800f110 <RegionEU868SetBandTxDone+0x38>)
 800f0f2:	681c      	ldr	r4, [r3, #0]
 800f0f4:	6903      	ldr	r3, [r0, #16]
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	68c3      	ldr	r3, [r0, #12]
 800f0fa:	7842      	ldrb	r2, [r0, #1]
 800f0fc:	6881      	ldr	r1, [r0, #8]
 800f0fe:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800f102:	f7fe fe6c 	bl	800ddde <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 800f106:	b002      	add	sp, #8
 800f108:	bd10      	pop	{r4, pc}
 800f10a:	bf00      	nop
 800f10c:	20001044 	.word	0x20001044
 800f110:	20001040 	.word	0x20001040

0800f114 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 800f114:	b530      	push	{r4, r5, lr}
 800f116:	b0a5      	sub	sp, #148	; 0x94
 800f118:	4604      	mov	r4, r0
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 800f11a:	2290      	movs	r2, #144	; 0x90
 800f11c:	2100      	movs	r1, #0
 800f11e:	4668      	mov	r0, sp
 800f120:	f004 fea2 	bl	8013e68 <memset>
 800f124:	2364      	movs	r3, #100	; 0x64
 800f126:	f8ad 3000 	strh.w	r3, [sp]
 800f12a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f12e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f132:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
 800f136:	210a      	movs	r1, #10
 800f138:	f8ad 1048 	strh.w	r1, [sp, #72]	; 0x48
 800f13c:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 800f140:	f8ad 2078 	strh.w	r2, [sp, #120]	; 0x78
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 800f144:	7b23      	ldrb	r3, [r4, #12]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d032      	beq.n	800f1b0 <RegionEU868InitDefaults+0x9c>
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	d03e      	beq.n	800f1cc <RegionEU868InitDefaults+0xb8>
 800f14e:	b10b      	cbz	r3, 800f154 <RegionEU868InitDefaults+0x40>
        {
            break;
        }
    }
#endif /* REGION_EU868 */
}
 800f150:	b025      	add	sp, #148	; 0x94
 800f152:	bd30      	pop	{r4, r5, pc}
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800f154:	6823      	ldr	r3, [r4, #0]
 800f156:	2b00      	cmp	r3, #0
 800f158:	d0fa      	beq.n	800f150 <RegionEU868InitDefaults+0x3c>
 800f15a:	6863      	ldr	r3, [r4, #4]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d0f7      	beq.n	800f150 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800f160:	4d1f      	ldr	r5, [pc, #124]	; (800f1e0 <RegionEU868InitDefaults+0xcc>)
 800f162:	602b      	str	r3, [r5, #0]
            RegionBands = (Band_t*) params->Bands;
 800f164:	68a0      	ldr	r0, [r4, #8]
 800f166:	4b1f      	ldr	r3, [pc, #124]	; (800f1e4 <RegionEU868InitDefaults+0xd0>)
 800f168:	6018      	str	r0, [r3, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 800f16a:	2290      	movs	r2, #144	; 0x90
 800f16c:	4669      	mov	r1, sp
 800f16e:	f002 f9c4 	bl	80114fa <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 800f172:	682c      	ldr	r4, [r5, #0]
 800f174:	4b1c      	ldr	r3, [pc, #112]	; (800f1e8 <RegionEU868InitDefaults+0xd4>)
 800f176:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f17a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 800f17e:	f104 0c0c 	add.w	ip, r4, #12
 800f182:	f103 020c 	add.w	r2, r3, #12
 800f186:	ca07      	ldmia	r2, {r0, r1, r2}
 800f188:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 800f18c:	f104 0c18 	add.w	ip, r4, #24
 800f190:	3318      	adds	r3, #24
 800f192:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f196:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 800f19a:	2307      	movs	r3, #7
 800f19c:	f8a4 336c 	strh.w	r3, [r4, #876]	; 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f1a0:	2201      	movs	r2, #1
 800f1a2:	f504 715b 	add.w	r1, r4, #876	; 0x36c
 800f1a6:	f504 7058 	add.w	r0, r4, #864	; 0x360
 800f1aa:	f7fe fe09 	bl	800ddc0 <RegionCommonChanMaskCopy>
            break;
 800f1ae:	e7cf      	b.n	800f150 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 800f1b0:	4b0b      	ldr	r3, [pc, #44]	; (800f1e0 <RegionEU868InitDefaults+0xcc>)
 800f1b2:	6818      	ldr	r0, [r3, #0]
 800f1b4:	2300      	movs	r3, #0
 800f1b6:	6043      	str	r3, [r0, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 800f1b8:	6103      	str	r3, [r0, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 800f1ba:	61c3      	str	r3, [r0, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800f1bc:	2201      	movs	r2, #1
 800f1be:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800f1c2:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f1c6:	f7fe fdfb 	bl	800ddc0 <RegionCommonChanMaskCopy>
            break;
 800f1ca:	e7c1      	b.n	800f150 <RegionEU868InitDefaults+0x3c>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 800f1cc:	4b04      	ldr	r3, [pc, #16]	; (800f1e0 <RegionEU868InitDefaults+0xcc>)
 800f1ce:	681b      	ldr	r3, [r3, #0]
 800f1d0:	f8b3 236c 	ldrh.w	r2, [r3, #876]	; 0x36c
 800f1d4:	f8b3 1360 	ldrh.w	r1, [r3, #864]	; 0x360
 800f1d8:	430a      	orrs	r2, r1
 800f1da:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
            break;
 800f1de:	e7b7      	b.n	800f150 <RegionEU868InitDefaults+0x3c>
 800f1e0:	20001044 	.word	0x20001044
 800f1e4:	20001040 	.word	0x20001040
 800f1e8:	08013ffc 	.word	0x08013ffc

0800f1ec <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800f1ec:	b500      	push	{lr}
 800f1ee:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    switch( phyAttribute )
 800f1f0:	290f      	cmp	r1, #15
 800f1f2:	d83c      	bhi.n	800f26e <RegionEU868Verify+0x82>
 800f1f4:	e8df f001 	tbb	[pc, r1]
 800f1f8:	3b3b3b0a 	.word	0x3b3b3b0a
 800f1fc:	271d133b 	.word	0x271d133b
 800f200:	3b31313b 	.word	0x3b31313b
 800f204:	083b3b3b 	.word	0x083b3b3b
 800f208:	2001      	movs	r0, #1
 800f20a:	e031      	b.n	800f270 <RegionEU868Verify+0x84>
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 800f20c:	2300      	movs	r3, #0
 800f20e:	f88d 3007 	strb.w	r3, [sp, #7]
            return VerifyRfFreq( verify->Frequency, &band );
 800f212:	f10d 0107 	add.w	r1, sp, #7
 800f216:	6800      	ldr	r0, [r0, #0]
 800f218:	f7ff fe1c 	bl	800ee54 <VerifyRfFreq>
 800f21c:	e028      	b.n	800f270 <RegionEU868Verify+0x84>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 800f21e:	2207      	movs	r2, #7
 800f220:	2100      	movs	r1, #0
 800f222:	f990 0000 	ldrsb.w	r0, [r0]
 800f226:	f7fe fd5a 	bl	800dcde <RegionCommonValueInRange>
 800f22a:	3800      	subs	r0, #0
 800f22c:	bf18      	it	ne
 800f22e:	2001      	movne	r0, #1
 800f230:	e01e      	b.n	800f270 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800f232:	2205      	movs	r2, #5
 800f234:	2100      	movs	r1, #0
 800f236:	f990 0000 	ldrsb.w	r0, [r0]
 800f23a:	f7fe fd50 	bl	800dcde <RegionCommonValueInRange>
 800f23e:	3800      	subs	r0, #0
 800f240:	bf18      	it	ne
 800f242:	2001      	movne	r0, #1
 800f244:	e014      	b.n	800f270 <RegionEU868Verify+0x84>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 800f246:	2207      	movs	r2, #7
 800f248:	2100      	movs	r1, #0
 800f24a:	f990 0000 	ldrsb.w	r0, [r0]
 800f24e:	f7fe fd46 	bl	800dcde <RegionCommonValueInRange>
 800f252:	3800      	subs	r0, #0
 800f254:	bf18      	it	ne
 800f256:	2001      	movne	r0, #1
 800f258:	e00a      	b.n	800f270 <RegionEU868Verify+0x84>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 800f25a:	2207      	movs	r2, #7
 800f25c:	2100      	movs	r1, #0
 800f25e:	f990 0000 	ldrsb.w	r0, [r0]
 800f262:	f7fe fd3c 	bl	800dcde <RegionCommonValueInRange>
 800f266:	3800      	subs	r0, #0
 800f268:	bf18      	it	ne
 800f26a:	2001      	movne	r0, #1
 800f26c:	e000      	b.n	800f270 <RegionEU868Verify+0x84>
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
        }
        default:
            return false;
 800f26e:	2000      	movs	r0, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 800f270:	b003      	add	sp, #12
 800f272:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800f278 <RegionEU868ChanMaskSet>:
    }
#endif /* REGION_EU868 */
}

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800f278:	b508      	push	{r3, lr}
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 800f27a:	7903      	ldrb	r3, [r0, #4]
 800f27c:	b11b      	cbz	r3, 800f286 <RegionEU868ChanMaskSet+0xe>
 800f27e:	2b01      	cmp	r3, #1
 800f280:	d00b      	beq.n	800f29a <RegionEU868ChanMaskSet+0x22>
 800f282:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f284:	bd08      	pop	{r3, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f286:	4b0a      	ldr	r3, [pc, #40]	; (800f2b0 <RegionEU868ChanMaskSet+0x38>)
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	2201      	movs	r2, #1
 800f28c:	6801      	ldr	r1, [r0, #0]
 800f28e:	f503 7058 	add.w	r0, r3, #864	; 0x360
 800f292:	f7fe fd95 	bl	800ddc0 <RegionCommonChanMaskCopy>
    return true;
 800f296:	2001      	movs	r0, #1
            break;
 800f298:	e7f4      	b.n	800f284 <RegionEU868ChanMaskSet+0xc>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800f29a:	4b05      	ldr	r3, [pc, #20]	; (800f2b0 <RegionEU868ChanMaskSet+0x38>)
 800f29c:	681b      	ldr	r3, [r3, #0]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	6801      	ldr	r1, [r0, #0]
 800f2a2:	f503 705b 	add.w	r0, r3, #876	; 0x36c
 800f2a6:	f7fe fd8b 	bl	800ddc0 <RegionCommonChanMaskCopy>
    return true;
 800f2aa:	2001      	movs	r0, #1
            break;
 800f2ac:	e7ea      	b.n	800f284 <RegionEU868ChanMaskSet+0xc>
 800f2ae:	bf00      	nop
 800f2b0:	20001044 	.word	0x20001044

0800f2b4 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800f2b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f2b6:	b083      	sub	sp, #12
 800f2b8:	460e      	mov	r6, r1
 800f2ba:	4617      	mov	r7, r2
 800f2bc:	461c      	mov	r4, r3
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 800f2be:	2807      	cmp	r0, #7
 800f2c0:	bfa8      	it	ge
 800f2c2:	2007      	movge	r0, #7
 800f2c4:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 800f2c6:	4913      	ldr	r1, [pc, #76]	; (800f314 <RegionEU868ComputeRxWindowParameters+0x60>)
 800f2c8:	f7fe ffd4 	bl	800e274 <RegionCommonGetBandwidth>
 800f2cc:	70a0      	strb	r0, [r4, #2]

    if( rxConfigParams->Datarate == DR_7 )
 800f2ce:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f2d2:	2b07      	cmp	r3, #7
 800f2d4:	d017      	beq.n	800f306 <RegionEU868ComputeRxWindowParameters+0x52>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 800f2d6:	4a0f      	ldr	r2, [pc, #60]	; (800f314 <RegionEU868ComputeRxWindowParameters+0x60>)
 800f2d8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800f2dc:	4a0e      	ldr	r2, [pc, #56]	; (800f318 <RegionEU868ComputeRxWindowParameters+0x64>)
 800f2de:	5cd0      	ldrb	r0, [r2, r3]
 800f2e0:	f7fe fe94 	bl	800e00c <RegionCommonComputeSymbolTimeLoRa>
 800f2e4:	4605      	mov	r5, r0
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 800f2e6:	4b0d      	ldr	r3, [pc, #52]	; (800f31c <RegionEU868ComputeRxWindowParameters+0x68>)
 800f2e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f2ea:	4798      	blx	r3
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	f104 020c 	add.w	r2, r4, #12
 800f2f2:	9201      	str	r2, [sp, #4]
 800f2f4:	3408      	adds	r4, #8
 800f2f6:	9400      	str	r4, [sp, #0]
 800f2f8:	463a      	mov	r2, r7
 800f2fa:	4631      	mov	r1, r6
 800f2fc:	4628      	mov	r0, r5
 800f2fe:	f7fe fe93 	bl	800e028 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 800f302:	b003      	add	sp, #12
 800f304:	bdf0      	pop	{r4, r5, r6, r7, pc}
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 800f306:	4a04      	ldr	r2, [pc, #16]	; (800f318 <RegionEU868ComputeRxWindowParameters+0x64>)
 800f308:	5cd0      	ldrb	r0, [r2, r3]
 800f30a:	f7fe fe87 	bl	800e01c <RegionCommonComputeSymbolTimeFsk>
 800f30e:	4605      	mov	r5, r0
 800f310:	e7e9      	b.n	800f2e6 <RegionEU868ComputeRxWindowParameters+0x32>
 800f312:	bf00      	nop
 800f314:	08014734 	.word	0x08014734
 800f318:	08014754 	.word	0x08014754
 800f31c:	08014d7c 	.word	0x08014d7c

0800f320 <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 800f320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f324:	b08a      	sub	sp, #40	; 0x28
 800f326:	4604      	mov	r4, r0
 800f328:	460f      	mov	r7, r1
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 800f32a:	f990 5001 	ldrsb.w	r5, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 800f32e:	f8d0 8004 	ldr.w	r8, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 800f332:	4b37      	ldr	r3, [pc, #220]	; (800f410 <RegionEU868RxConfig+0xf0>)
 800f334:	685b      	ldr	r3, [r3, #4]
 800f336:	4798      	blx	r3
 800f338:	2800      	cmp	r0, #0
 800f33a:	d167      	bne.n	800f40c <RegionEU868RxConfig+0xec>
 800f33c:	4606      	mov	r6, r0
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 800f33e:	7ce3      	ldrb	r3, [r4, #19]
 800f340:	b983      	cbnz	r3, 800f364 <RegionEU868RxConfig+0x44>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f342:	4b34      	ldr	r3, [pc, #208]	; (800f414 <RegionEU868RxConfig+0xf4>)
 800f344:	681a      	ldr	r2, [r3, #0]
 800f346:	7823      	ldrb	r3, [r4, #0]
 800f348:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f34c:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 800f350:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f354:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f358:	f8d3 8004 	ldr.w	r8, [r3, #4]
 800f35c:	f1b8 0f00 	cmp.w	r8, #0
 800f360:	d100      	bne.n	800f364 <RegionEU868RxConfig+0x44>
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 800f362:	4688      	mov	r8, r1
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 800f364:	4b2c      	ldr	r3, [pc, #176]	; (800f418 <RegionEU868RxConfig+0xf8>)
 800f366:	f913 9005 	ldrsb.w	r9, [r3, r5]

    Radio.SetChannel( frequency );
 800f36a:	4b29      	ldr	r3, [pc, #164]	; (800f410 <RegionEU868RxConfig+0xf0>)
 800f36c:	68db      	ldr	r3, [r3, #12]
 800f36e:	4640      	mov	r0, r8
 800f370:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 800f372:	2d07      	cmp	r5, #7
 800f374:	d02b      	beq.n	800f3ce <RegionEU868RxConfig+0xae>
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 800f376:	4b26      	ldr	r3, [pc, #152]	; (800f410 <RegionEU868RxConfig+0xf0>)
 800f378:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f37c:	7ca3      	ldrb	r3, [r4, #18]
 800f37e:	9309      	str	r3, [sp, #36]	; 0x24
 800f380:	2601      	movs	r6, #1
 800f382:	9608      	str	r6, [sp, #32]
 800f384:	2300      	movs	r3, #0
 800f386:	9307      	str	r3, [sp, #28]
 800f388:	9306      	str	r3, [sp, #24]
 800f38a:	9305      	str	r3, [sp, #20]
 800f38c:	9304      	str	r3, [sp, #16]
 800f38e:	9303      	str	r3, [sp, #12]
 800f390:	8922      	ldrh	r2, [r4, #8]
 800f392:	9202      	str	r2, [sp, #8]
 800f394:	2208      	movs	r2, #8
 800f396:	9201      	str	r2, [sp, #4]
 800f398:	9300      	str	r3, [sp, #0]
 800f39a:	4633      	mov	r3, r6
 800f39c:	464a      	mov	r2, r9
 800f39e:	78a1      	ldrb	r1, [r4, #2]
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	47d0      	blx	sl
    }

    if( rxConfig->RepeaterSupport == true )
 800f3a4:	7c63      	ldrb	r3, [r4, #17]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d02d      	beq.n	800f406 <RegionEU868RxConfig+0xe6>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 800f3aa:	4b1c      	ldr	r3, [pc, #112]	; (800f41c <RegionEU868RxConfig+0xfc>)
 800f3ac:	5d59      	ldrb	r1, [r3, r5]
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 800f3ae:	4b18      	ldr	r3, [pc, #96]	; (800f410 <RegionEU868RxConfig+0xf0>)
 800f3b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f3b2:	310d      	adds	r1, #13
 800f3b4:	b2c9      	uxtb	r1, r1
 800f3b6:	4630      	mov	r0, r6
 800f3b8:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 800f3ba:	462a      	mov	r2, r5
 800f3bc:	4641      	mov	r1, r8
 800f3be:	7ce0      	ldrb	r0, [r4, #19]
 800f3c0:	f7fe ff6a 	bl	800e298 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 800f3c4:	703d      	strb	r5, [r7, #0]
    return true;
 800f3c6:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 800f3c8:	b00a      	add	sp, #40	; 0x28
 800f3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 800f3ce:	4b10      	ldr	r3, [pc, #64]	; (800f410 <RegionEU868RxConfig+0xf0>)
 800f3d0:	f8d3 a018 	ldr.w	sl, [r3, #24]
 800f3d4:	7ca3      	ldrb	r3, [r4, #18]
 800f3d6:	9309      	str	r3, [sp, #36]	; 0x24
 800f3d8:	2000      	movs	r0, #0
 800f3da:	9008      	str	r0, [sp, #32]
 800f3dc:	9007      	str	r0, [sp, #28]
 800f3de:	9006      	str	r0, [sp, #24]
 800f3e0:	2301      	movs	r3, #1
 800f3e2:	9305      	str	r3, [sp, #20]
 800f3e4:	9004      	str	r0, [sp, #16]
 800f3e6:	9003      	str	r0, [sp, #12]
 800f3e8:	8923      	ldrh	r3, [r4, #8]
 800f3ea:	9302      	str	r3, [sp, #8]
 800f3ec:	2305      	movs	r3, #5
 800f3ee:	9301      	str	r3, [sp, #4]
 800f3f0:	4b0b      	ldr	r3, [pc, #44]	; (800f420 <RegionEU868RxConfig+0x100>)
 800f3f2:	9300      	str	r3, [sp, #0]
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800f3fa:	fb02 f209 	mul.w	r2, r2, r9
 800f3fe:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f402:	47d0      	blx	sl
 800f404:	e7ce      	b.n	800f3a4 <RegionEU868RxConfig+0x84>
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 800f406:	4b07      	ldr	r3, [pc, #28]	; (800f424 <RegionEU868RxConfig+0x104>)
 800f408:	5d59      	ldrb	r1, [r3, r5]
 800f40a:	e7d0      	b.n	800f3ae <RegionEU868RxConfig+0x8e>
        return false;
 800f40c:	2000      	movs	r0, #0
 800f40e:	e7db      	b.n	800f3c8 <RegionEU868RxConfig+0xa8>
 800f410:	08014d7c 	.word	0x08014d7c
 800f414:	20001044 	.word	0x20001044
 800f418:	08014754 	.word	0x08014754
 800f41c:	08014764 	.word	0x08014764
 800f420:	00014585 	.word	0x00014585
 800f424:	0801475c 	.word	0x0801475c

0800f428 <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 800f428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f42c:	b08d      	sub	sp, #52	; 0x34
 800f42e:	4604      	mov	r4, r0
 800f430:	460f      	mov	r7, r1
 800f432:	4690      	mov	r8, r2
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 800f434:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800f438:	4a42      	ldr	r2, [pc, #264]	; (800f544 <RegionEU868TxConfig+0x11c>)
 800f43a:	f912 a003 	ldrsb.w	sl, [r2, r3]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 800f43e:	4d42      	ldr	r5, [pc, #264]	; (800f548 <RegionEU868TxConfig+0x120>)
 800f440:	682a      	ldr	r2, [r5, #0]
 800f442:	7803      	ldrb	r3, [r0, #0]
 800f444:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f448:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f44c:	7a5b      	ldrb	r3, [r3, #9]
 800f44e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f452:	4a3e      	ldr	r2, [pc, #248]	; (800f54c <RegionEU868TxConfig+0x124>)
 800f454:	6812      	ldr	r2, [r2, #0]
 800f456:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f45a:	f993 1002 	ldrsb.w	r1, [r3, #2]
 800f45e:	f990 0002 	ldrsb.w	r0, [r0, #2]
 800f462:	f7fe ff02 	bl	800e26a <RegionCommonLimitTxPower>
 800f466:	4606      	mov	r6, r0
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 800f468:	4939      	ldr	r1, [pc, #228]	; (800f550 <RegionEU868TxConfig+0x128>)
 800f46a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f46e:	f7fe ff01 	bl	800e274 <RegionCommonGetBandwidth>
 800f472:	4681      	mov	r9, r0
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 800f474:	68a2      	ldr	r2, [r4, #8]
 800f476:	6861      	ldr	r1, [r4, #4]
 800f478:	4630      	mov	r0, r6
 800f47a:	f7fe fe11 	bl	800e0a0 <RegionCommonComputeTxPower>
 800f47e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 800f480:	4b34      	ldr	r3, [pc, #208]	; (800f554 <RegionEU868TxConfig+0x12c>)
 800f482:	68da      	ldr	r2, [r3, #12]
 800f484:	6829      	ldr	r1, [r5, #0]
 800f486:	7823      	ldrb	r3, [r4, #0]
 800f488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f48c:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800f490:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 800f492:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800f496:	2b07      	cmp	r3, #7
 800f498:	d031      	beq.n	800f4fe <RegionEU868TxConfig+0xd6>
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
    }
    else
    {
        modem = MODEM_LORA;
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 800f49a:	4b2e      	ldr	r3, [pc, #184]	; (800f554 <RegionEU868TxConfig+0x12c>)
 800f49c:	f8d3 b01c 	ldr.w	fp, [r3, #28]
 800f4a0:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 800f4a4:	9308      	str	r3, [sp, #32]
 800f4a6:	2200      	movs	r2, #0
 800f4a8:	9207      	str	r2, [sp, #28]
 800f4aa:	9206      	str	r2, [sp, #24]
 800f4ac:	9205      	str	r2, [sp, #20]
 800f4ae:	2501      	movs	r5, #1
 800f4b0:	9504      	str	r5, [sp, #16]
 800f4b2:	9203      	str	r2, [sp, #12]
 800f4b4:	2308      	movs	r3, #8
 800f4b6:	9302      	str	r3, [sp, #8]
 800f4b8:	9501      	str	r5, [sp, #4]
 800f4ba:	f8cd a000 	str.w	sl, [sp]
 800f4be:	464b      	mov	r3, r9
 800f4c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f4c2:	4628      	mov	r0, r5
 800f4c4:	47d8      	blx	fp
    }
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 800f4c6:	4b20      	ldr	r3, [pc, #128]	; (800f548 <RegionEU868TxConfig+0x120>)
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	7823      	ldrb	r3, [r4, #0]
 800f4cc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f4d0:	f994 1001 	ldrsb.w	r1, [r4, #1]
 800f4d4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f4d8:	f7fe ff00 	bl	800e2dc <RegionCommonTxConfigPrint>

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 800f4dc:	89a1      	ldrh	r1, [r4, #12]
 800f4de:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f4e2:	f7ff fd0b 	bl	800eefc <GetTimeOnAir>
 800f4e6:	f8c8 0000 	str.w	r0, [r8]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 800f4ea:	4b1a      	ldr	r3, [pc, #104]	; (800f554 <RegionEU868TxConfig+0x12c>)
 800f4ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f4ee:	7b21      	ldrb	r1, [r4, #12]
 800f4f0:	4628      	mov	r0, r5
 800f4f2:	4798      	blx	r3

    *txPower = txPowerLimited;
 800f4f4:	703e      	strb	r6, [r7, #0]
    return true;
#else
    return false;
#endif /* REGION_EU868 */
}
 800f4f6:	2001      	movs	r0, #1
 800f4f8:	b00d      	add	sp, #52	; 0x34
 800f4fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 800f4fe:	4b15      	ldr	r3, [pc, #84]	; (800f554 <RegionEU868TxConfig+0x12c>)
 800f500:	69dd      	ldr	r5, [r3, #28]
 800f502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800f506:	fb03 f30a 	mul.w	r3, r3, sl
 800f50a:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800f50e:	9208      	str	r2, [sp, #32]
 800f510:	f04f 0b00 	mov.w	fp, #0
 800f514:	f8cd b01c 	str.w	fp, [sp, #28]
 800f518:	f8cd b018 	str.w	fp, [sp, #24]
 800f51c:	f8cd b014 	str.w	fp, [sp, #20]
 800f520:	2201      	movs	r2, #1
 800f522:	9204      	str	r2, [sp, #16]
 800f524:	f8cd b00c 	str.w	fp, [sp, #12]
 800f528:	2205      	movs	r2, #5
 800f52a:	9202      	str	r2, [sp, #8]
 800f52c:	f8cd b004 	str.w	fp, [sp, #4]
 800f530:	9300      	str	r3, [sp, #0]
 800f532:	464b      	mov	r3, r9
 800f534:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800f538:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f53a:	4658      	mov	r0, fp
 800f53c:	47a8      	blx	r5
        modem = MODEM_FSK;
 800f53e:	465d      	mov	r5, fp
 800f540:	e7c1      	b.n	800f4c6 <RegionEU868TxConfig+0x9e>
 800f542:	bf00      	nop
 800f544:	08014754 	.word	0x08014754
 800f548:	20001044 	.word	0x20001044
 800f54c:	20001040 	.word	0x20001040
 800f550:	08014734 	.word	0x08014734
 800f554:	08014d7c 	.word	0x08014d7c

0800f558 <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 800f558:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f55c:	b08f      	sub	sp, #60	; 0x3c
 800f55e:	4605      	mov	r5, r0
 800f560:	4689      	mov	r9, r1
 800f562:	4690      	mov	r8, r2
 800f564:	461f      	mov	r7, r3
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 800f566:	2400      	movs	r4, #0
 800f568:	940c      	str	r4, [sp, #48]	; 0x30
 800f56a:	f8ad 4034 	strh.w	r4, [sp, #52]	; 0x34
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
    uint16_t chMask = 0;
 800f56e:	f8ad 402e 	strh.w	r4, [sp, #46]	; 0x2e
    uint8_t status = 0x07;
 800f572:	2607      	movs	r6, #7
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f574:	e030      	b.n	800f5d8 <RegionEU868LinkAdrReq+0x80>
            // RFU
            status &= 0xFE; // Channel mask KO
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f576:	f04f 0c00 	mov.w	ip, #0
        status = 0x07;
 800f57a:	2607      	movs	r6, #7
 800f57c:	e012      	b.n	800f5a4 <RegionEU868LinkAdrReq+0x4c>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 800f57e:	4a57      	ldr	r2, [pc, #348]	; (800f6dc <RegionEU868LinkAdrReq+0x184>)
 800f580:	6812      	ldr	r2, [r2, #0]
 800f582:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f586:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800f58a:	b13a      	cbz	r2, 800f59c <RegionEU868LinkAdrReq+0x44>
                    {
                        chMask |= 1 << i;
 800f58c:	2201      	movs	r2, #1
 800f58e:	fa02 f20c 	lsl.w	r2, r2, ip
 800f592:	f8bd 102e 	ldrh.w	r1, [sp, #46]	; 0x2e
 800f596:	430a      	orrs	r2, r1
 800f598:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 800f59c:	f10c 0c01 	add.w	ip, ip, #1
 800f5a0:	fa5f fc8c 	uxtb.w	ip, ip
 800f5a4:	f1bc 0f0f 	cmp.w	ip, #15
 800f5a8:	d816      	bhi.n	800f5d8 <RegionEU868LinkAdrReq+0x80>
                if( linkAdrParams.ChMaskCtrl == 6 )
 800f5aa:	2b06      	cmp	r3, #6
 800f5ac:	d0e7      	beq.n	800f57e <RegionEU868LinkAdrReq+0x26>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f5ae:	f8bd e02e 	ldrh.w	lr, [sp, #46]	; 0x2e
 800f5b2:	fa4e fe0c 	asr.w	lr, lr, ip
 800f5b6:	f01e 0f01 	tst.w	lr, #1
 800f5ba:	d0ef      	beq.n	800f59c <RegionEU868LinkAdrReq+0x44>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 800f5bc:	4a47      	ldr	r2, [pc, #284]	; (800f6dc <RegionEU868LinkAdrReq+0x184>)
 800f5be:	6812      	ldr	r2, [r2, #0]
 800f5c0:	eb0c 014c 	add.w	r1, ip, ip, lsl #1
 800f5c4:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 800f5c8:	2a00      	cmp	r2, #0
 800f5ca:	d1e7      	bne.n	800f59c <RegionEU868LinkAdrReq+0x44>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 800f5cc:	f006 06fe 	and.w	r6, r6, #254	; 0xfe
 800f5d0:	e7e4      	b.n	800f59c <RegionEU868LinkAdrReq+0x44>
            status &= 0xFE; // Channel mask KO
 800f5d2:	2606      	movs	r6, #6
 800f5d4:	e000      	b.n	800f5d8 <RegionEU868LinkAdrReq+0x80>
            status &= 0xFE; // Channel mask KO
 800f5d6:	2606      	movs	r6, #6
    while( bytesProcessed < linkAdrReq->PayloadSize )
 800f5d8:	7a2b      	ldrb	r3, [r5, #8]
 800f5da:	42a3      	cmp	r3, r4
 800f5dc:	d918      	bls.n	800f610 <RegionEU868LinkAdrReq+0xb8>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 800f5de:	6868      	ldr	r0, [r5, #4]
 800f5e0:	a90c      	add	r1, sp, #48	; 0x30
 800f5e2:	4420      	add	r0, r4
 800f5e4:	f7fe fc9c 	bl	800df20 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 800f5e8:	b190      	cbz	r0, 800f610 <RegionEU868LinkAdrReq+0xb8>
        bytesProcessed += nextIndex;
 800f5ea:	4404      	add	r4, r0
 800f5ec:	b2e4      	uxtb	r4, r4
        chMask = linkAdrParams.ChMask;
 800f5ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 800f5f2:	f8ad 202e 	strh.w	r2, [sp, #46]	; 0x2e
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 800f5f6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800f5fa:	b90b      	cbnz	r3, 800f600 <RegionEU868LinkAdrReq+0xa8>
 800f5fc:	2a00      	cmp	r2, #0
 800f5fe:	d0e8      	beq.n	800f5d2 <RegionEU868LinkAdrReq+0x7a>
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 800f600:	1e5a      	subs	r2, r3, #1
 800f602:	b2d2      	uxtb	r2, r2
 800f604:	2a04      	cmp	r2, #4
 800f606:	d9e6      	bls.n	800f5d6 <RegionEU868LinkAdrReq+0x7e>
 800f608:	2b06      	cmp	r3, #6
 800f60a:	d9b4      	bls.n	800f576 <RegionEU868LinkAdrReq+0x1e>
            status &= 0xFE; // Channel mask KO
 800f60c:	2606      	movs	r6, #6
 800f60e:	e7e3      	b.n	800f5d8 <RegionEU868LinkAdrReq+0x80>
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 800f610:	2302      	movs	r3, #2
 800f612:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 800f616:	7a6b      	ldrb	r3, [r5, #9]
 800f618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
    phyParam = RegionEU868GetPhyParam( &getPhy );
 800f61c:	a80a      	add	r0, sp, #40	; 0x28
 800f61e:	f7ff fc9f 	bl	800ef60 <RegionEU868GetPhyParam>
 800f622:	9009      	str	r0, [sp, #36]	; 0x24

    linkAdrVerifyParams.Status = status;
 800f624:	f88d 6008 	strb.w	r6, [sp, #8]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 800f628:	7aab      	ldrb	r3, [r5, #10]
 800f62a:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 800f62e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f632:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 800f636:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f63a:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 800f63e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f642:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 800f646:	f995 300b 	ldrsb.w	r3, [r5, #11]
 800f64a:	f88d 300d 	strb.w	r3, [sp, #13]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 800f64e:	f995 300c 	ldrsb.w	r3, [r5, #12]
 800f652:	f88d 300e 	strb.w	r3, [sp, #14]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 800f656:	f995 300d 	ldrsb.w	r3, [r5, #13]
 800f65a:	f88d 300f 	strb.w	r3, [sp, #15]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 800f65e:	2310      	movs	r3, #16
 800f660:	f88d 3010 	strb.w	r3, [sp, #16]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 800f664:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
 800f668:	9305      	str	r3, [sp, #20]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 800f66a:	f88d 0018 	strb.w	r0, [sp, #24]
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 800f66e:	2307      	movs	r3, #7
 800f670:	f88d 3019 	strb.w	r3, [sp, #25]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 800f674:	4a19      	ldr	r2, [pc, #100]	; (800f6dc <RegionEU868LinkAdrReq+0x184>)
 800f676:	6812      	ldr	r2, [r2, #0]
 800f678:	9207      	str	r2, [sp, #28]
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 800f67a:	f88d 3020 	strb.w	r3, [sp, #32]
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 800f67e:	2300      	movs	r3, #0
 800f680:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 800f684:	682b      	ldr	r3, [r5, #0]
 800f686:	9301      	str	r3, [sp, #4]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 800f688:	ab0c      	add	r3, sp, #48	; 0x30
 800f68a:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800f68e:	f10d 0131 	add.w	r1, sp, #49	; 0x31
 800f692:	a801      	add	r0, sp, #4
 800f694:	f7fe fc62 	bl	800df5c <RegionCommonLinkAdrReqVerifyParams>
 800f698:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 800f69a:	2807      	cmp	r0, #7
 800f69c:	d010      	beq.n	800f6c0 <RegionEU868LinkAdrReq+0x168>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 800f69e:	f99d 3031 	ldrsb.w	r3, [sp, #49]	; 0x31
 800f6a2:	f889 3000 	strb.w	r3, [r9]
    *txPowOut = linkAdrParams.TxPower;
 800f6a6:	f99d 3032 	ldrsb.w	r3, [sp, #50]	; 0x32
 800f6aa:	f888 3000 	strb.w	r3, [r8]
    *nbRepOut = linkAdrParams.NbRep;
 800f6ae:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 800f6b2:	703b      	strb	r3, [r7, #0]
    *nbBytesParsed = bytesProcessed;
 800f6b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800f6b6:	701c      	strb	r4, [r3, #0]

#endif /* REGION_EU868 */
    return status;
}
 800f6b8:	4628      	mov	r0, r5
 800f6ba:	b00f      	add	sp, #60	; 0x3c
 800f6bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 800f6c0:	4e06      	ldr	r6, [pc, #24]	; (800f6dc <RegionEU868LinkAdrReq+0x184>)
 800f6c2:	6830      	ldr	r0, [r6, #0]
 800f6c4:	220c      	movs	r2, #12
 800f6c6:	2100      	movs	r1, #0
 800f6c8:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f6cc:	f001 ff2d 	bl	801152a <memset1>
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 800f6d0:	6833      	ldr	r3, [r6, #0]
 800f6d2:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
 800f6d6:	f8a3 2360 	strh.w	r2, [r3, #864]	; 0x360
 800f6da:	e7e0      	b.n	800f69e <RegionEU868LinkAdrReq+0x146>
 800f6dc:	20001044 	.word	0x20001044

0800f6e0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 800f6e0:	b530      	push	{r4, r5, lr}
 800f6e2:	b083      	sub	sp, #12
 800f6e4:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f88d 3007 	strb.w	r3, [sp, #7]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 800f6ec:	f10d 0107 	add.w	r1, sp, #7
 800f6f0:	6840      	ldr	r0, [r0, #4]
 800f6f2:	f7ff fbaf 	bl	800ee54 <VerifyRfFreq>
 800f6f6:	b1a8      	cbz	r0, 800f724 <RegionEU868RxParamSetupReq+0x44>
    uint8_t status = 0x07;
 800f6f8:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 800f6fa:	2207      	movs	r2, #7
 800f6fc:	2100      	movs	r1, #0
 800f6fe:	f994 0000 	ldrsb.w	r0, [r4]
 800f702:	f7fe faec 	bl	800dcde <RegionCommonValueInRange>
 800f706:	b908      	cbnz	r0, 800f70c <RegionEU868RxParamSetupReq+0x2c>
    {
        status &= 0xFD; // Datarate KO
 800f708:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 800f70c:	2205      	movs	r2, #5
 800f70e:	2100      	movs	r1, #0
 800f710:	f994 0001 	ldrsb.w	r0, [r4, #1]
 800f714:	f7fe fae3 	bl	800dcde <RegionCommonValueInRange>
 800f718:	b908      	cbnz	r0, 800f71e <RegionEU868RxParamSetupReq+0x3e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 800f71a:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_EU868 */
    return status;
}
 800f71e:	4628      	mov	r0, r5
 800f720:	b003      	add	sp, #12
 800f722:	bd30      	pop	{r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 800f724:	2506      	movs	r5, #6
 800f726:	e7e8      	b.n	800f6fa <RegionEU868RxParamSetupReq+0x1a>

0800f728 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 800f728:	f04f 30ff 	mov.w	r0, #4294967295
 800f72c:	4770      	bx	lr
	...

0800f730 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 800f730:	b510      	push	{r4, lr}
 800f732:	b082      	sub	sp, #8
    uint8_t status = 0x03;

#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f734:	2300      	movs	r3, #0
 800f736:	f88d 3007 	strb.w	r3, [sp, #7]

    if( dlChannelReq->ChannelId >= ( CHANNELS_MASK_SIZE * 16 ) )
 800f73a:	7803      	ldrb	r3, [r0, #0]
 800f73c:	2b0f      	cmp	r3, #15
 800f73e:	d902      	bls.n	800f746 <RegionEU868DlChannelReq+0x16>
    {
        return 0;
 800f740:	2000      	movs	r0, #0
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
    }

#endif /* REGION_EU868 */
    return status;
}
 800f742:	b002      	add	sp, #8
 800f744:	bd10      	pop	{r4, pc}
 800f746:	4604      	mov	r4, r0
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 800f748:	f10d 0107 	add.w	r1, sp, #7
 800f74c:	6840      	ldr	r0, [r0, #4]
 800f74e:	f7ff fb81 	bl	800ee54 <VerifyRfFreq>
 800f752:	b170      	cbz	r0, 800f772 <RegionEU868DlChannelReq+0x42>
    uint8_t status = 0x03;
 800f754:	2003      	movs	r0, #3
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 800f756:	4b0b      	ldr	r3, [pc, #44]	; (800f784 <RegionEU868DlChannelReq+0x54>)
 800f758:	681a      	ldr	r2, [r3, #0]
 800f75a:	7823      	ldrb	r3, [r4, #0]
 800f75c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 800f760:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 800f764:	b909      	cbnz	r1, 800f76a <RegionEU868DlChannelReq+0x3a>
        status &= 0xFD;
 800f766:	f000 00fd 	and.w	r0, r0, #253	; 0xfd
    if( status == 0x03 )
 800f76a:	2803      	cmp	r0, #3
 800f76c:	d003      	beq.n	800f776 <RegionEU868DlChannelReq+0x46>
    return status;
 800f76e:	b240      	sxtb	r0, r0
 800f770:	e7e7      	b.n	800f742 <RegionEU868DlChannelReq+0x12>
        status &= 0xFE;
 800f772:	2002      	movs	r0, #2
 800f774:	e7ef      	b.n	800f756 <RegionEU868DlChannelReq+0x26>
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 800f776:	6861      	ldr	r1, [r4, #4]
 800f778:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800f77c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f780:	6059      	str	r1, [r3, #4]
 800f782:	e7f4      	b.n	800f76e <RegionEU868DlChannelReq+0x3e>
 800f784:	20001044 	.word	0x20001044

0800f788 <RegionEU868AlternateDr>:
#if defined( REGION_EU868 )
    return currentDr;
#else
    return -1;
#endif /* REGION_EU868 */
}
 800f788:	4770      	bx	lr
	...

0800f78c <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 800f78c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f78e:	b097      	sub	sp, #92	; 0x5c
 800f790:	4604      	mov	r4, r0
 800f792:	460f      	mov	r7, r1
 800f794:	4616      	mov	r6, r2
 800f796:	461d      	mov	r5, r3
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 800f798:	2100      	movs	r1, #0
 800f79a:	f88d 1057 	strb.w	r1, [sp, #87]	; 0x57
    uint8_t nbRestrictedChannels = 0;
 800f79e:	f88d 1056 	strb.w	r1, [sp, #86]	; 0x56
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 800f7a2:	9111      	str	r1, [sp, #68]	; 0x44
 800f7a4:	9112      	str	r1, [sp, #72]	; 0x48
 800f7a6:	9113      	str	r1, [sp, #76]	; 0x4c
 800f7a8:	9114      	str	r1, [sp, #80]	; 0x50
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 800f7aa:	2307      	movs	r3, #7
 800f7ac:	f8ad 300a 	strh.w	r3, [sp, #10]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 800f7b0:	4b34      	ldr	r3, [pc, #208]	; (800f884 <RegionEU868NextChannel+0xf8>)
 800f7b2:	6818      	ldr	r0, [r3, #0]
 800f7b4:	2201      	movs	r2, #1
 800f7b6:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f7ba:	f7fe faeb 	bl	800dd94 <RegionCommonCountChannels>
 800f7be:	b938      	cbnz	r0, 800f7d0 <RegionEU868NextChannel+0x44>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f7c0:	4b30      	ldr	r3, [pc, #192]	; (800f884 <RegionEU868NextChannel+0xf8>)
 800f7c2:	681a      	ldr	r2, [r3, #0]
 800f7c4:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f7c8:	f043 0307 	orr.w	r3, r3, #7
 800f7cc:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 800f7d0:	7a63      	ldrb	r3, [r4, #9]
 800f7d2:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 800f7d6:	7a23      	ldrb	r3, [r4, #8]
 800f7d8:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800f7dc:	4b29      	ldr	r3, [pc, #164]	; (800f884 <RegionEU868NextChannel+0xf8>)
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f503 7258 	add.w	r2, r3, #864	; 0x360
 800f7e4:	9204      	str	r2, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 800f7e6:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 800f7e8:	4b27      	ldr	r3, [pc, #156]	; (800f888 <RegionEU868NextChannel+0xfc>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 800f7ee:	2310      	movs	r3, #16
 800f7f0:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = &joinChannels;
 800f7f4:	f10d 030a 	add.w	r3, sp, #10
 800f7f8:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 800f7fa:	6823      	ldr	r3, [r4, #0]
 800f7fc:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 800f7fe:	6863      	ldr	r3, [r4, #4]
 800f800:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 800f802:	7aa3      	ldrb	r3, [r4, #10]
 800f804:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 800f808:	2306      	movs	r3, #6
 800f80a:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 800f80e:	ab0c      	add	r3, sp, #48	; 0x30
 800f810:	f104 020c 	add.w	r2, r4, #12
 800f814:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f818:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 800f81c:	7d23      	ldrb	r3, [r4, #20]
 800f81e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 800f822:	8ae1      	ldrh	r1, [r4, #22]
 800f824:	f994 0008 	ldrsb.w	r0, [r4, #8]
 800f828:	f7ff fb68 	bl	800eefc <GetTimeOnAir>
 800f82c:	900f      	str	r0, [sp, #60]	; 0x3c

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 800f82e:	ab03      	add	r3, sp, #12
 800f830:	9310      	str	r3, [sp, #64]	; 0x40

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 800f832:	9601      	str	r6, [sp, #4]
 800f834:	f10d 0356 	add.w	r3, sp, #86	; 0x56
 800f838:	9300      	str	r3, [sp, #0]
 800f83a:	f10d 0357 	add.w	r3, sp, #87	; 0x57
 800f83e:	aa11      	add	r2, sp, #68	; 0x44
 800f840:	4629      	mov	r1, r5
 800f842:	a809      	add	r0, sp, #36	; 0x24
 800f844:	f7fe fca8 	bl	800e198 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 800f848:	4604      	mov	r4, r0
 800f84a:	b120      	cbz	r0, 800f856 <RegionEU868NextChannel+0xca>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 800f84c:	280c      	cmp	r0, #12
 800f84e:	d00f      	beq.n	800f870 <RegionEU868NextChannel+0xe4>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f850:	4620      	mov	r0, r4
 800f852:	b017      	add	sp, #92	; 0x5c
 800f854:	bdf0      	pop	{r4, r5, r6, r7, pc}
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 800f856:	f89d 1057 	ldrb.w	r1, [sp, #87]	; 0x57
 800f85a:	3901      	subs	r1, #1
 800f85c:	f001 fe40 	bl	80114e0 <randr>
 800f860:	f100 0358 	add.w	r3, r0, #88	; 0x58
 800f864:	eb0d 0003 	add.w	r0, sp, r3
 800f868:	f810 3c14 	ldrb.w	r3, [r0, #-20]
 800f86c:	703b      	strb	r3, [r7, #0]
 800f86e:	e7ef      	b.n	800f850 <RegionEU868NextChannel+0xc4>
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 800f870:	4b04      	ldr	r3, [pc, #16]	; (800f884 <RegionEU868NextChannel+0xf8>)
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f878:	f043 0307 	orr.w	r3, r3, #7
 800f87c:	f8a2 3360 	strh.w	r3, [r2, #864]	; 0x360
 800f880:	e7e6      	b.n	800f850 <RegionEU868NextChannel+0xc4>
 800f882:	bf00      	nop
 800f884:	20001044 	.word	0x20001044
 800f888:	20001040 	.word	0x20001040

0800f88c <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 800f88c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f88e:	b083      	sub	sp, #12
#if defined( REGION_EU868 )
    uint8_t band = 0;
 800f890:	2300      	movs	r3, #0
 800f892:	f88d 3007 	strb.w	r3, [sp, #7]
    bool drInvalid = false;
    bool freqInvalid = false;
    uint8_t id = channelAdd->ChannelId;
 800f896:	7905      	ldrb	r5, [r0, #4]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f898:	2d02      	cmp	r5, #2
 800f89a:	d94f      	bls.n	800f93c <RegionEU868ChannelAdd+0xb0>
 800f89c:	4604      	mov	r4, r0
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 800f89e:	2d0f      	cmp	r5, #15
 800f8a0:	d84e      	bhi.n	800f940 <RegionEU868ChannelAdd+0xb4>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f8a2:	6803      	ldr	r3, [r0, #0]
 800f8a4:	7a18      	ldrb	r0, [r3, #8]
 800f8a6:	f340 0003 	sbfx	r0, r0, #0, #4
 800f8aa:	2207      	movs	r2, #7
 800f8ac:	2100      	movs	r1, #0
 800f8ae:	b240      	sxtb	r0, r0
 800f8b0:	f7fe fa15 	bl	800dcde <RegionCommonValueInRange>
 800f8b4:	2800      	cmp	r0, #0
 800f8b6:	d03d      	beq.n	800f934 <RegionEU868ChannelAdd+0xa8>
    bool drInvalid = false;
 800f8b8:	2600      	movs	r6, #0
    {
        drInvalid = true;
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 800f8ba:	6823      	ldr	r3, [r4, #0]
 800f8bc:	7a18      	ldrb	r0, [r3, #8]
 800f8be:	f340 1003 	sbfx	r0, r0, #4, #4
 800f8c2:	2207      	movs	r2, #7
 800f8c4:	2100      	movs	r1, #0
 800f8c6:	b240      	sxtb	r0, r0
 800f8c8:	f7fe fa09 	bl	800dcde <RegionCommonValueInRange>
 800f8cc:	b900      	cbnz	r0, 800f8d0 <RegionEU868ChannelAdd+0x44>
    {
        drInvalid = true;
 800f8ce:	2601      	movs	r6, #1
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 800f8d0:	6820      	ldr	r0, [r4, #0]
 800f8d2:	7a03      	ldrb	r3, [r0, #8]
 800f8d4:	f343 0203 	sbfx	r2, r3, #0, #4
 800f8d8:	b252      	sxtb	r2, r2
 800f8da:	f343 1303 	sbfx	r3, r3, #4, #4
 800f8de:	b25b      	sxtb	r3, r3
 800f8e0:	429a      	cmp	r2, r3
 800f8e2:	dd00      	ble.n	800f8e6 <RegionEU868ChannelAdd+0x5a>
    {
        drInvalid = true;
 800f8e4:	2601      	movs	r6, #1
    }

    // Check frequency
    if( freqInvalid == false )
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 800f8e6:	f10d 0107 	add.w	r1, sp, #7
 800f8ea:	6800      	ldr	r0, [r0, #0]
 800f8ec:	f7ff fab2 	bl	800ee54 <VerifyRfFreq>
 800f8f0:	b310      	cbz	r0, 800f938 <RegionEU868ChannelAdd+0xac>
    bool freqInvalid = false;
 800f8f2:	2300      	movs	r3, #0
            freqInvalid = true;
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 800f8f4:	b106      	cbz	r6, 800f8f8 <RegionEU868ChannelAdd+0x6c>
 800f8f6:	bb33      	cbnz	r3, 800f946 <RegionEU868ChannelAdd+0xba>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
    }
    if( drInvalid == true )
 800f8f8:	bb3e      	cbnz	r6, 800f94a <RegionEU868ChannelAdd+0xbe>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
    }
    if( freqInvalid == true )
 800f8fa:	bb43      	cbnz	r3, 800f94e <RegionEU868ChannelAdd+0xc2>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 800f8fc:	4f15      	ldr	r7, [pc, #84]	; (800f954 <RegionEU868ChannelAdd+0xc8>)
 800f8fe:	683b      	ldr	r3, [r7, #0]
 800f900:	006e      	lsls	r6, r5, #1
 800f902:	eb05 0045 	add.w	r0, r5, r5, lsl #1
 800f906:	220c      	movs	r2, #12
 800f908:	6821      	ldr	r1, [r4, #0]
 800f90a:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f90e:	f001 fdf4 	bl	80114fa <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 800f912:	683a      	ldr	r2, [r7, #0]
 800f914:	442e      	add	r6, r5
 800f916:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f91a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800f91e:	7273      	strb	r3, [r6, #9]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 800f920:	2301      	movs	r3, #1
 800f922:	fa03 f505 	lsl.w	r5, r3, r5
 800f926:	f8b2 3360 	ldrh.w	r3, [r2, #864]	; 0x360
 800f92a:	431d      	orrs	r5, r3
 800f92c:	f8a2 5360 	strh.w	r5, [r2, #864]	; 0x360
    return LORAMAC_STATUS_OK;
 800f930:	2000      	movs	r0, #0
 800f932:	e006      	b.n	800f942 <RegionEU868ChannelAdd+0xb6>
        drInvalid = true;
 800f934:	2601      	movs	r6, #1
 800f936:	e7c0      	b.n	800f8ba <RegionEU868ChannelAdd+0x2e>
            freqInvalid = true;
 800f938:	2301      	movs	r3, #1
 800f93a:	e7db      	b.n	800f8f4 <RegionEU868ChannelAdd+0x68>
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f93c:	2006      	movs	r0, #6
 800f93e:	e000      	b.n	800f942 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_PARAMETER_INVALID;
 800f940:	2003      	movs	r0, #3
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 800f942:	b003      	add	sp, #12
 800f944:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 800f946:	2006      	movs	r0, #6
 800f948:	e7fb      	b.n	800f942 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_DATARATE_INVALID;
 800f94a:	2005      	movs	r0, #5
 800f94c:	e7f9      	b.n	800f942 <RegionEU868ChannelAdd+0xb6>
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 800f94e:	2004      	movs	r0, #4
 800f950:	e7f7      	b.n	800f942 <RegionEU868ChannelAdd+0xb6>
 800f952:	bf00      	nop
 800f954:	20001044 	.word	0x20001044

0800f958 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 800f958:	7801      	ldrb	r1, [r0, #0]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 800f95a:	2902      	cmp	r1, #2
 800f95c:	d801      	bhi.n	800f962 <RegionEU868ChannelsRemove+0xa>
    {
        return false;
 800f95e:	2000      	movs	r0, #0

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
#else
    return false;
#endif /* REGION_EU868 */
}
 800f960:	4770      	bx	lr
{
 800f962:	b508      	push	{r3, lr}
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 800f964:	4b09      	ldr	r3, [pc, #36]	; (800f98c <RegionEU868ChannelsRemove+0x34>)
 800f966:	6818      	ldr	r0, [r3, #0]
 800f968:	eb01 0341 	add.w	r3, r1, r1, lsl #1
 800f96c:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 800f970:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800f974:	2200      	movs	r2, #0
 800f976:	f840 200c 	str.w	r2, [r0, ip]
 800f97a:	605a      	str	r2, [r3, #4]
 800f97c:	609a      	str	r2, [r3, #8]
    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 800f97e:	2210      	movs	r2, #16
 800f980:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800f984:	f7fe f9ed 	bl	800dd62 <RegionCommonChanDisable>
}
 800f988:	bd08      	pop	{r3, pc}
 800f98a:	bf00      	nop
 800f98c:	20001044 	.word	0x20001044

0800f990 <RegionEU868ApplyCFList>:
{
 800f990:	b570      	push	{r4, r5, r6, lr}
 800f992:	b086      	sub	sp, #24
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 800f994:	2350      	movs	r3, #80	; 0x50
 800f996:	f88d 3014 	strb.w	r3, [sp, #20]
    if( applyCFList->Size != 16 )
 800f99a:	7a03      	ldrb	r3, [r0, #8]
 800f99c:	2b10      	cmp	r3, #16
 800f99e:	d136      	bne.n	800fa0e <RegionEU868ApplyCFList+0x7e>
 800f9a0:	4606      	mov	r6, r0
    if( applyCFList->Payload[15] != 0 )
 800f9a2:	6843      	ldr	r3, [r0, #4]
 800f9a4:	7bdd      	ldrb	r5, [r3, #15]
 800f9a6:	2d00      	cmp	r5, #0
 800f9a8:	d131      	bne.n	800fa0e <RegionEU868ApplyCFList+0x7e>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f9aa:	2403      	movs	r4, #3
 800f9ac:	e01b      	b.n	800f9e6 <RegionEU868ApplyCFList+0x56>
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 800f9ae:	6872      	ldr	r2, [r6, #4]
 800f9b0:	5d53      	ldrb	r3, [r2, r5]
 800f9b2:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 800f9b4:	442a      	add	r2, r5
 800f9b6:	7851      	ldrb	r1, [r2, #1]
 800f9b8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800f9bc:	9303      	str	r3, [sp, #12]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 800f9be:	7892      	ldrb	r2, [r2, #2]
 800f9c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f9c4:	9303      	str	r3, [sp, #12]
            newChannel.Frequency *= 100;
 800f9c6:	2264      	movs	r2, #100	; 0x64
 800f9c8:	fb02 f303 	mul.w	r3, r2, r3
 800f9cc:	9303      	str	r3, [sp, #12]
            newChannel.Rx1Frequency = 0;
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	9304      	str	r3, [sp, #16]
 800f9d2:	e011      	b.n	800f9f8 <RegionEU868ApplyCFList+0x68>
            channelRemove.ChannelId = chanIdx;
 800f9d4:	f88d 4000 	strb.w	r4, [sp]
            RegionEU868ChannelsRemove( &channelRemove );
 800f9d8:	4668      	mov	r0, sp
 800f9da:	f7ff ffbd 	bl	800f958 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 800f9de:	3503      	adds	r5, #3
 800f9e0:	b2ed      	uxtb	r5, r5
 800f9e2:	3401      	adds	r4, #1
 800f9e4:	b2e4      	uxtb	r4, r4
 800f9e6:	2c0f      	cmp	r4, #15
 800f9e8:	d811      	bhi.n	800fa0e <RegionEU868ApplyCFList+0x7e>
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 800f9ea:	2c07      	cmp	r4, #7
 800f9ec:	d9df      	bls.n	800f9ae <RegionEU868ApplyCFList+0x1e>
            newChannel.Frequency = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	9303      	str	r3, [sp, #12]
            newChannel.DrRange.Value = 0;
 800f9f2:	f88d 3014 	strb.w	r3, [sp, #20]
            newChannel.Rx1Frequency = 0;
 800f9f6:	9304      	str	r3, [sp, #16]
        if( newChannel.Frequency != 0 )
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	2b00      	cmp	r3, #0
 800f9fc:	d0ea      	beq.n	800f9d4 <RegionEU868ApplyCFList+0x44>
            channelAdd.NewChannel = &newChannel;
 800f9fe:	ab03      	add	r3, sp, #12
 800fa00:	9301      	str	r3, [sp, #4]
            channelAdd.ChannelId = chanIdx;
 800fa02:	f88d 4008 	strb.w	r4, [sp, #8]
            RegionEU868ChannelAdd( &channelAdd );
 800fa06:	a801      	add	r0, sp, #4
 800fa08:	f7ff ff40 	bl	800f88c <RegionEU868ChannelAdd>
 800fa0c:	e7e7      	b.n	800f9de <RegionEU868ApplyCFList+0x4e>
}
 800fa0e:	b006      	add	sp, #24
 800fa10:	bd70      	pop	{r4, r5, r6, pc}

0800fa12 <RegionEU868NewChannelReq>:
{
 800fa12:	b500      	push	{lr}
 800fa14:	b085      	sub	sp, #20
    if( newChannelReq->NewChannel->Frequency == 0 )
 800fa16:	6803      	ldr	r3, [r0, #0]
 800fa18:	681a      	ldr	r2, [r3, #0]
 800fa1a:	b952      	cbnz	r2, 800fa32 <RegionEU868NewChannelReq+0x20>
        channelRemove.ChannelId = newChannelReq->ChannelId;
 800fa1c:	7903      	ldrb	r3, [r0, #4]
 800fa1e:	f88d 3004 	strb.w	r3, [sp, #4]
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 800fa22:	a801      	add	r0, sp, #4
 800fa24:	f7ff ff98 	bl	800f958 <RegionEU868ChannelsRemove>
 800fa28:	b1d0      	cbz	r0, 800fa60 <RegionEU868NewChannelReq+0x4e>
    uint8_t status = 0x03;
 800fa2a:	2003      	movs	r0, #3
}
 800fa2c:	b005      	add	sp, #20
 800fa2e:	f85d fb04 	ldr.w	pc, [sp], #4
        channelAdd.NewChannel = newChannelReq->NewChannel;
 800fa32:	9302      	str	r3, [sp, #8]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 800fa34:	7903      	ldrb	r3, [r0, #4]
 800fa36:	f88d 300c 	strb.w	r3, [sp, #12]
        switch( RegionEU868ChannelAdd( &channelAdd ) )
 800fa3a:	a802      	add	r0, sp, #8
 800fa3c:	f7ff ff26 	bl	800f88c <RegionEU868ChannelAdd>
 800fa40:	2806      	cmp	r0, #6
 800fa42:	d80b      	bhi.n	800fa5c <RegionEU868NewChannelReq+0x4a>
 800fa44:	e8df f000 	tbb	[pc, r0]
 800fa48:	0a0a0a04 	.word	0x0a0a0a04
 800fa4c:	060e      	.short	0x060e
 800fa4e:	08          	.byte	0x08
 800fa4f:	00          	.byte	0x00
 800fa50:	2003      	movs	r0, #3
 800fa52:	e7eb      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFD;
 800fa54:	2001      	movs	r0, #1
                break;
 800fa56:	e7e9      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800fa58:	2000      	movs	r0, #0
                break;
 800fa5a:	e7e7      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFC;
 800fa5c:	2000      	movs	r0, #0
                break;
 800fa5e:	e7e5      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>
            status &= 0xFC;
 800fa60:	2000      	movs	r0, #0
 800fa62:	e7e3      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>
                status &= 0xFE;
 800fa64:	2002      	movs	r0, #2
 800fa66:	e7e1      	b.n	800fa2c <RegionEU868NewChannelReq+0x1a>

0800fa68 <RegionEU868ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 800fa68:	1a88      	subs	r0, r1, r2
 800fa6a:	b240      	sxtb	r0, r0

    if( datarate < 0 )
 800fa6c:	2800      	cmp	r0, #0
 800fa6e:	db01      	blt.n	800fa74 <RegionEU868ApplyDrOffset+0xc>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_EU868 */
}
 800fa70:	b2c0      	uxtb	r0, r0
 800fa72:	4770      	bx	lr
        datarate = DR_0;
 800fa74:	2000      	movs	r0, #0
 800fa76:	e7fb      	b.n	800fa70 <RegionEU868ApplyDrOffset+0x8>

0800fa78 <VerifyRfFreq>:
    }
    return txPowerResult;
}

static bool VerifyRfFreq( uint32_t freq )
{
 800fa78:	b510      	push	{r4, lr}
 800fa7a:	4604      	mov	r4, r0
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 800fa7c:	4b10      	ldr	r3, [pc, #64]	; (800fac0 <VerifyRfFreq+0x48>)
 800fa7e:	6a1b      	ldr	r3, [r3, #32]
 800fa80:	4798      	blx	r3
 800fa82:	b1c8      	cbz	r0, 800fab8 <VerifyRfFreq+0x40>
    {
        return false;
    }

    // Rx frequencies
    if( ( freq < US915_FIRST_RX1_CHANNEL ) ||
 800fa84:	4b0f      	ldr	r3, [pc, #60]	; (800fac4 <VerifyRfFreq+0x4c>)
 800fa86:	4423      	add	r3, r4
 800fa88:	4a0f      	ldr	r2, [pc, #60]	; (800fac8 <VerifyRfFreq+0x50>)
 800fa8a:	4293      	cmp	r3, r2
 800fa8c:	d813      	bhi.n	800fab6 <VerifyRfFreq+0x3e>
        ( freq > US915_LAST_RX1_CHANNEL ) ||
        ( ( ( freq - ( uint32_t ) US915_FIRST_RX1_CHANNEL ) % ( uint32_t ) US915_STEPWIDTH_RX1_CHANNEL ) != 0 ) )
 800fa8e:	f102 42df 	add.w	r2, r2, #1870659584	; 0x6f800000
 800fa92:	f502 12c8 	add.w	r2, r2, #1638400	; 0x190000
 800fa96:	f202 7245 	addw	r2, r2, #1861	; 0x745
 800fa9a:	fba2 1203 	umull	r1, r2, r2, r3
 800fa9e:	0c92      	lsrs	r2, r2, #18
 800faa0:	490a      	ldr	r1, [pc, #40]	; (800facc <VerifyRfFreq+0x54>)
 800faa2:	fb01 3212 	mls	r2, r1, r2, r3
        ( freq > US915_LAST_RX1_CHANNEL ) ||
 800faa6:	b942      	cbnz	r2, 800faba <VerifyRfFreq+0x42>
    {
        return false;
    }

    // Test for frequency range - take RX and TX frequencies into account
    if( ( freq < 902300000 ) ||  ( freq > 927500000 ) )
 800faa8:	4b09      	ldr	r3, [pc, #36]	; (800fad0 <VerifyRfFreq+0x58>)
 800faaa:	4423      	add	r3, r4
 800faac:	4a09      	ldr	r2, [pc, #36]	; (800fad4 <VerifyRfFreq+0x5c>)
 800faae:	4293      	cmp	r3, r2
 800fab0:	d902      	bls.n	800fab8 <VerifyRfFreq+0x40>
    {
        return false;
 800fab2:	2000      	movs	r0, #0
 800fab4:	e000      	b.n	800fab8 <VerifyRfFreq+0x40>
        return false;
 800fab6:	2000      	movs	r0, #0
    }
    return true;
}
 800fab8:	bd10      	pop	{r4, pc}
        return false;
 800faba:	2000      	movs	r0, #0
 800fabc:	e7fc      	b.n	800fab8 <VerifyRfFreq+0x40>
 800fabe:	bf00      	nop
 800fac0:	08014d7c 	.word	0x08014d7c
 800fac4:	c8f78f60 	.word	0xc8f78f60
 800fac8:	00401640 	.word	0x00401640
 800facc:	000927c0 	.word	0x000927c0
 800fad0:	ca37fea0 	.word	0xca37fea0
 800fad4:	01808580 	.word	0x01808580

0800fad8 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 800fad8:	b570      	push	{r4, r5, r6, lr}
 800fada:	b084      	sub	sp, #16
 800fadc:	460c      	mov	r4, r1
    int8_t phyDr = DataratesUS915[datarate];
 800fade:	4b0a      	ldr	r3, [pc, #40]	; (800fb08 <GetTimeOnAir+0x30>)
 800fae0:	561e      	ldrsb	r6, [r3, r0]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsUS915 );
 800fae2:	490a      	ldr	r1, [pc, #40]	; (800fb0c <GetTimeOnAir+0x34>)
 800fae4:	f7fe fbc6 	bl	800e274 <RegionCommonGetBandwidth>
 800fae8:	4601      	mov	r1, r0

    return Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 800faea:	4b09      	ldr	r3, [pc, #36]	; (800fb10 <GetTimeOnAir+0x38>)
 800faec:	6a5d      	ldr	r5, [r3, #36]	; 0x24
 800faee:	2001      	movs	r0, #1
 800faf0:	9003      	str	r0, [sp, #12]
 800faf2:	b2e4      	uxtb	r4, r4
 800faf4:	9402      	str	r4, [sp, #8]
 800faf6:	2200      	movs	r2, #0
 800faf8:	9201      	str	r2, [sp, #4]
 800fafa:	2208      	movs	r2, #8
 800fafc:	9200      	str	r2, [sp, #0]
 800fafe:	4603      	mov	r3, r0
 800fb00:	4632      	mov	r2, r6
 800fb02:	47a8      	blx	r5
}
 800fb04:	b004      	add	sp, #16
 800fb06:	bd70      	pop	{r4, r5, r6, pc}
 800fb08:	080147c0 	.word	0x080147c0
 800fb0c:	0801476c 	.word	0x0801476c
 800fb10:	08014d7c 	.word	0x08014d7c

0800fb14 <LimitTxPower>:
{
 800fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb16:	4606      	mov	r6, r0
 800fb18:	4615      	mov	r5, r2
 800fb1a:	461f      	mov	r7, r3
    txPowerResult =  RegionCommonLimitTxPower( txPower, maxBandTxPower );
 800fb1c:	f7fe fba5 	bl	800e26a <RegionCommonLimitTxPower>
    if( datarate == DR_4 )
 800fb20:	2d04      	cmp	r5, #4
 800fb22:	d105      	bne.n	800fb30 <LimitTxPower+0x1c>
        txPowerResult = MAX( txPower, TX_POWER_2 );
 800fb24:	4634      	mov	r4, r6
 800fb26:	2e02      	cmp	r6, #2
 800fb28:	bfb8      	it	lt
 800fb2a:	2402      	movlt	r4, #2
}
 800fb2c:	4620      	mov	r0, r4
 800fb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fb30:	4604      	mov	r4, r0
        if( RegionCommonCountChannels( channelsMask, 0, 4 ) < 50 )
 800fb32:	2204      	movs	r2, #4
 800fb34:	2100      	movs	r1, #0
 800fb36:	4638      	mov	r0, r7
 800fb38:	f7fe f92c 	bl	800dd94 <RegionCommonCountChannels>
 800fb3c:	2831      	cmp	r0, #49	; 0x31
 800fb3e:	d8f5      	bhi.n	800fb2c <LimitTxPower+0x18>
            txPowerResult = MAX( txPower, TX_POWER_5 );
 800fb40:	4634      	mov	r4, r6
 800fb42:	2e05      	cmp	r6, #5
 800fb44:	bfb8      	it	lt
 800fb46:	2405      	movlt	r4, #5
 800fb48:	e7f0      	b.n	800fb2c <LimitTxPower+0x18>
	...

0800fb4c <RegionUS915GetPhyParam>:
#endif /* REGION_US915 */

PhyParam_t RegionUS915GetPhyParam( GetPhyParams_t* getPhy )
{
 800fb4c:	b500      	push	{lr}
 800fb4e:	b087      	sub	sp, #28
    PhyParam_t phyParam = { 0 };
 800fb50:	2300      	movs	r3, #0
 800fb52:	9304      	str	r3, [sp, #16]

#if defined( REGION_US915 )
    switch( getPhy->Attribute )
 800fb54:	7803      	ldrb	r3, [r0, #0]
 800fb56:	3b01      	subs	r3, #1
 800fb58:	2b37      	cmp	r3, #55	; 0x37
 800fb5a:	d81f      	bhi.n	800fb9c <RegionUS915GetPhyParam+0x50>
 800fb5c:	e8df f003 	tbb	[pc, r3]
 800fb60:	1e1e1e1c 	.word	0x1e1e1e1c
 800fb64:	1e1e1e1e 	.word	0x1e1e1e1e
 800fb68:	3e3b1e1e 	.word	0x3e3b1e1e
 800fb6c:	4d1e4741 	.word	0x4d1e4741
 800fb70:	5d595551 	.word	0x5d595551
 800fb74:	6d6a1e61 	.word	0x6d6a1e61
 800fb78:	7f7c7670 	.word	0x7f7c7670
 800fb7c:	86831e1e 	.word	0x86831e1e
 800fb80:	1e1e1e23 	.word	0x1e1e1e23
 800fb84:	1e1e1e1e 	.word	0x1e1e1e1e
 800fb88:	1e1e1e1e 	.word	0x1e1e1e1e
 800fb8c:	90891e1e 	.word	0x90891e1e
 800fb90:	a01e9d9a 	.word	0xa01e9d9a
 800fb94:	b3adaaa7 	.word	0xb3adaaa7
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = US915_RX_MIN_DATARATE;
 800fb98:	2308      	movs	r3, #8
 800fb9a:	9304      	str	r3, [sp, #16]
            break;
        }
    }

#endif /* REGION_US915 */
    return phyParam;
 800fb9c:	9804      	ldr	r0, [sp, #16]
 800fb9e:	9005      	str	r0, [sp, #20]
}
 800fba0:	b007      	add	sp, #28
 800fba2:	f85d fb04 	ldr.w	pc, [sp], #4
                .CurrentDr = getPhy->Datarate,
 800fba6:	f990 3001 	ldrsb.w	r3, [r0, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fbaa:	f88d 3004 	strb.w	r3, [sp, #4]
 800fbae:	2304      	movs	r3, #4
 800fbb0:	f88d 3005 	strb.w	r3, [sp, #5]
 800fbb4:	2300      	movs	r3, #0
 800fbb6:	f88d 3006 	strb.w	r3, [sp, #6]
 800fbba:	2348      	movs	r3, #72	; 0x48
 800fbbc:	f88d 3007 	strb.w	r3, [sp, #7]
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 800fbc0:	4b44      	ldr	r3, [pc, #272]	; (800fcd4 <RegionUS915GetPhyParam+0x188>)
 800fbc2:	681b      	ldr	r3, [r3, #0]
 800fbc4:	f503 7258 	add.w	r2, r3, #864	; 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 800fbc8:	9202      	str	r2, [sp, #8]
 800fbca:	9303      	str	r3, [sp, #12]
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 800fbcc:	a801      	add	r0, sp, #4
 800fbce:	f7fe fb2d 	bl	800e22c <RegionCommonGetNextLowerTxDr>
 800fbd2:	9004      	str	r0, [sp, #16]
            break;
 800fbd4:	e7e2      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 800fbd6:	2340      	movs	r3, #64	; 0x40
 800fbd8:	9304      	str	r3, [sp, #16]
            break;
 800fbda:	e7df      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 800fbdc:	2320      	movs	r3, #32
 800fbde:	9304      	str	r3, [sp, #16]
            break;
 800fbe0:	e7dc      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateUS915[getPhy->Datarate];
 800fbe2:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fbe6:	4a3c      	ldr	r2, [pc, #240]	; (800fcd8 <RegionUS915GetPhyParam+0x18c>)
 800fbe8:	5cd3      	ldrb	r3, [r2, r3]
 800fbea:	9304      	str	r3, [sp, #16]
            break;
 800fbec:	e7d6      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = MaxPayloadOfDatarateRepeaterUS915[getPhy->Datarate];
 800fbee:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fbf2:	4a3a      	ldr	r2, [pc, #232]	; (800fcdc <RegionUS915GetPhyParam+0x190>)
 800fbf4:	5cd3      	ldrb	r3, [r2, r3]
 800fbf6:	9304      	str	r3, [sp, #16]
            break;
 800fbf8:	e7d0      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_RX_WINDOW;
 800fbfa:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800fbfe:	9304      	str	r3, [sp, #16]
            break;
 800fc00:	e7cc      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 800fc02:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800fc06:	9304      	str	r3, [sp, #16]
            break;
 800fc08:	e7c8      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 800fc0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800fc0e:	9304      	str	r3, [sp, #16]
            break;
 800fc10:	e7c4      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 800fc12:	f241 3388 	movw	r3, #5000	; 0x1388
 800fc16:	9304      	str	r3, [sp, #16]
            break;
 800fc18:	e7c0      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 800fc1a:	f241 7370 	movw	r3, #6000	; 0x1770
 800fc1e:	9304      	str	r3, [sp, #16]
            break;
 800fc20:	e7bc      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 800fc22:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800fc26:	482e      	ldr	r0, [pc, #184]	; (800fce0 <RegionUS915GetPhyParam+0x194>)
 800fc28:	f001 fc5a 	bl	80114e0 <randr>
 800fc2c:	f500 60fa 	add.w	r0, r0, #2000	; 0x7d0
 800fc30:	9004      	str	r0, [sp, #16]
            break;
 800fc32:	e7b3      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_FREQ;
 800fc34:	4b2b      	ldr	r3, [pc, #172]	; (800fce4 <RegionUS915GetPhyParam+0x198>)
 800fc36:	9304      	str	r3, [sp, #16]
            break;
 800fc38:	e7b0      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_RX_WND_2_DR;
 800fc3a:	2308      	movs	r3, #8
 800fc3c:	9304      	str	r3, [sp, #16]
            break;
 800fc3e:	e7ad      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 800fc40:	4b24      	ldr	r3, [pc, #144]	; (800fcd4 <RegionUS915GetPhyParam+0x188>)
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	f503 7358 	add.w	r3, r3, #864	; 0x360
 800fc48:	9304      	str	r3, [sp, #16]
            break;
 800fc4a:	e7a7      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 800fc4c:	4b21      	ldr	r3, [pc, #132]	; (800fcd4 <RegionUS915GetPhyParam+0x188>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	f503 735b 	add.w	r3, r3, #876	; 0x36c
 800fc54:	9304      	str	r3, [sp, #16]
            break;
 800fc56:	e7a1      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_MAX_NB_CHANNELS;
 800fc58:	2348      	movs	r3, #72	; 0x48
 800fc5a:	9304      	str	r3, [sp, #16]
            break;
 800fc5c:	e79e      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Channels = RegionNvmGroup2->Channels;
 800fc5e:	4b1d      	ldr	r3, [pc, #116]	; (800fcd4 <RegionUS915GetPhyParam+0x188>)
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	9304      	str	r3, [sp, #16]
            break;
 800fc64:	e79a      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = US915_DEFAULT_MAX_ERP + 2.15f;
 800fc66:	4b20      	ldr	r3, [pc, #128]	; (800fce8 <RegionUS915GetPhyParam+0x19c>)
 800fc68:	9304      	str	r3, [sp, #16]
            break;
 800fc6a:	e797      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.fValue = 0;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	9304      	str	r3, [sp, #16]
            break;
 800fc70:	e794      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800fc72:	4a1e      	ldr	r2, [pc, #120]	; (800fcec <RegionUS915GetPhyParam+0x1a0>)
 800fc74:	491b      	ldr	r1, [pc, #108]	; (800fce4 <RegionUS915GetPhyParam+0x198>)
 800fc76:	7900      	ldrb	r0, [r0, #4]
 800fc78:	f7fd ff62 	bl	800db40 <RegionBaseUSCalcDownlinkFrequency>
 800fc7c:	9004      	str	r0, [sp, #16]
            break;
 800fc7e:	e78d      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.BeaconFormat.BeaconSize = US915_BEACON_SIZE;
 800fc80:	2317      	movs	r3, #23
 800fc82:	f88d 3010 	strb.w	r3, [sp, #16]
            phyParam.BeaconFormat.Rfu1Size = US915_RFU1_SIZE;
 800fc86:	2304      	movs	r3, #4
 800fc88:	f88d 3011 	strb.w	r3, [sp, #17]
            phyParam.BeaconFormat.Rfu2Size = US915_RFU2_SIZE;
 800fc8c:	2303      	movs	r3, #3
 800fc8e:	f88d 3012 	strb.w	r3, [sp, #18]
            break;
 800fc92:	e783      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_CHANNEL_DR;
 800fc94:	2308      	movs	r3, #8
 800fc96:	9304      	str	r3, [sp, #16]
            break;
 800fc98:	e780      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800fc9a:	2308      	movs	r3, #8
 800fc9c:	9304      	str	r3, [sp, #16]
            break;
 800fc9e:	e77d      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionBaseUSCalcDownlinkFrequency( getPhy->Channel,
 800fca0:	4a12      	ldr	r2, [pc, #72]	; (800fcec <RegionUS915GetPhyParam+0x1a0>)
 800fca2:	4910      	ldr	r1, [pc, #64]	; (800fce4 <RegionUS915GetPhyParam+0x198>)
 800fca4:	7900      	ldrb	r0, [r0, #4]
 800fca6:	f7fd ff4b 	bl	800db40 <RegionBaseUSCalcDownlinkFrequency>
 800fcaa:	9004      	str	r0, [sp, #16]
            break;
 800fcac:	e776      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_PING_SLOT_CHANNEL_DR;
 800fcae:	2308      	movs	r3, #8
 800fcb0:	9304      	str	r3, [sp, #16]
            break;
 800fcb2:	e773      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = US915_BEACON_NB_CHANNELS;
 800fcb4:	2308      	movs	r3, #8
 800fcb6:	9304      	str	r3, [sp, #16]
            break;
 800fcb8:	e770      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = DataratesUS915[getPhy->Datarate];
 800fcba:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800fcbe:	4a0c      	ldr	r2, [pc, #48]	; (800fcf0 <RegionUS915GetPhyParam+0x1a4>)
 800fcc0:	5cd3      	ldrb	r3, [r2, r3]
 800fcc2:	9304      	str	r3, [sp, #16]
            break;
 800fcc4:	e76a      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsUS915 );
 800fcc6:	490b      	ldr	r1, [pc, #44]	; (800fcf4 <RegionUS915GetPhyParam+0x1a8>)
 800fcc8:	f990 0001 	ldrsb.w	r0, [r0, #1]
 800fccc:	f7fe fad2 	bl	800e274 <RegionCommonGetBandwidth>
 800fcd0:	9004      	str	r0, [sp, #16]
            break;
 800fcd2:	e763      	b.n	800fb9c <RegionUS915GetPhyParam+0x50>
 800fcd4:	20001050 	.word	0x20001050
 800fcd8:	080147e0 	.word	0x080147e0
 800fcdc:	080147d0 	.word	0x080147d0
 800fce0:	fffffc18 	.word	0xfffffc18
 800fce4:	370870a0 	.word	0x370870a0
 800fce8:	4200999a 	.word	0x4200999a
 800fcec:	000927c0 	.word	0x000927c0
 800fcf0:	080147c0 	.word	0x080147c0
 800fcf4:	0801476c 	.word	0x0801476c

0800fcf8 <RegionUS915SetBandTxDone>:

void RegionUS915SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 800fcf8:	b510      	push	{r4, lr}
 800fcfa:	b082      	sub	sp, #8
#if defined( REGION_US915 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 800fcfc:	4b0b      	ldr	r3, [pc, #44]	; (800fd2c <RegionUS915SetBandTxDone+0x34>)
 800fcfe:	681a      	ldr	r2, [r3, #0]
 800fd00:	7803      	ldrb	r3, [r0, #0]
 800fd02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800fd06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fd0a:	7a5b      	ldrb	r3, [r3, #9]
 800fd0c:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
 800fd10:	4b07      	ldr	r3, [pc, #28]	; (800fd30 <RegionUS915SetBandTxDone+0x38>)
 800fd12:	681c      	ldr	r4, [r3, #0]
 800fd14:	6903      	ldr	r3, [r0, #16]
 800fd16:	9300      	str	r3, [sp, #0]
 800fd18:	68c3      	ldr	r3, [r0, #12]
 800fd1a:	7842      	ldrb	r2, [r0, #1]
 800fd1c:	6881      	ldr	r1, [r0, #8]
 800fd1e:	eb04 00cc 	add.w	r0, r4, ip, lsl #3
 800fd22:	f7fe f85c 	bl	800ddde <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_US915 */
}
 800fd26:	b002      	add	sp, #8
 800fd28:	bd10      	pop	{r4, pc}
 800fd2a:	bf00      	nop
 800fd2c:	20001050 	.word	0x20001050
 800fd30:	20001048 	.word	0x20001048

0800fd34 <RegionUS915InitDefaults>:

void RegionUS915InitDefaults( InitDefaultsParams_t* params )
{
 800fd34:	b510      	push	{r4, lr}
 800fd36:	b086      	sub	sp, #24
#if defined( REGION_US915 )
    Band_t bands[US915_MAX_NB_BANDS] =
 800fd38:	2301      	movs	r3, #1
 800fd3a:	f8ad 3000 	strh.w	r3, [sp]
 800fd3e:	2300      	movs	r3, #0
 800fd40:	f88d 3002 	strb.w	r3, [sp, #2]
 800fd44:	9301      	str	r3, [sp, #4]
 800fd46:	9302      	str	r3, [sp, #8]
 800fd48:	9303      	str	r3, [sp, #12]
 800fd4a:	9304      	str	r3, [sp, #16]
 800fd4c:	f88d 3014 	strb.w	r3, [sp, #20]
    {
       US915_BAND0
    };

    switch( params->Type )
 800fd50:	7b04      	ldrb	r4, [r0, #12]
 800fd52:	b174      	cbz	r4, 800fd72 <RegionUS915InitDefaults+0x3e>
 800fd54:	3c01      	subs	r4, #1
 800fd56:	b2e4      	uxtb	r4, r4
 800fd58:	2c01      	cmp	r4, #1
 800fd5a:	d87e      	bhi.n	800fe5a <RegionUS915InitDefaults+0x126>
            // Intentional fallthrough
        }
        case INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS:
        {
            // Copy channels default mask
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fd5c:	4b40      	ldr	r3, [pc, #256]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fd5e:	6818      	ldr	r0, [r3, #0]
 800fd60:	2206      	movs	r2, #6
 800fd62:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800fd66:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fd6a:	f7fe f829 	bl	800ddc0 <RegionCommonChanMaskCopy>

#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
            for( uint8_t i = 0; i < 6; i++ )
 800fd6e:	2300      	movs	r3, #0
 800fd70:	e071      	b.n	800fe56 <RegionUS915InitDefaults+0x122>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 800fd72:	6803      	ldr	r3, [r0, #0]
 800fd74:	2b00      	cmp	r3, #0
 800fd76:	d070      	beq.n	800fe5a <RegionUS915InitDefaults+0x126>
 800fd78:	6842      	ldr	r2, [r0, #4]
 800fd7a:	2a00      	cmp	r2, #0
 800fd7c:	d06d      	beq.n	800fe5a <RegionUS915InitDefaults+0x126>
            RegionNvmGroup1 = (RegionNvmDataGroup1_t*) params->NvmGroup1;
 800fd7e:	4939      	ldr	r1, [pc, #228]	; (800fe64 <RegionUS915InitDefaults+0x130>)
 800fd80:	600b      	str	r3, [r1, #0]
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 800fd82:	4937      	ldr	r1, [pc, #220]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fd84:	600a      	str	r2, [r1, #0]
            RegionBands = (Band_t*) params->Bands;
 800fd86:	6880      	ldr	r0, [r0, #8]
 800fd88:	4a37      	ldr	r2, [pc, #220]	; (800fe68 <RegionUS915InitDefaults+0x134>)
 800fd8a:	6010      	str	r0, [r2, #0]
            RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 800fd8c:	2200      	movs	r2, #0
 800fd8e:	731a      	strb	r2, [r3, #12]
            RegionNvmGroup1->JoinTrialsCounter = 0;
 800fd90:	735a      	strb	r2, [r3, #13]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * US915_MAX_NB_BANDS );
 800fd92:	2218      	movs	r2, #24
 800fd94:	4669      	mov	r1, sp
 800fd96:	f001 fbb0 	bl	80114fa <memcpy1>
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800fd9a:	e011      	b.n	800fdc0 <RegionUS915InitDefaults+0x8c>
                RegionNvmGroup2->Channels[i].Frequency = 902300000 + i * 200000;
 800fd9c:	4b30      	ldr	r3, [pc, #192]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	4932      	ldr	r1, [pc, #200]	; (800fe6c <RegionUS915InitDefaults+0x138>)
 800fda2:	4a33      	ldr	r2, [pc, #204]	; (800fe70 <RegionUS915InitDefaults+0x13c>)
 800fda4:	fb01 2204 	mla	r2, r1, r4, r2
 800fda8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
 800fdac:	eb03 0081 	add.w	r0, r3, r1, lsl #2
 800fdb0:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_3 << 4 ) | DR_0;
 800fdb4:	2230      	movs	r2, #48	; 0x30
 800fdb6:	7202      	strb	r2, [r0, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800fdb8:	2200      	movs	r2, #0
 800fdba:	7242      	strb	r2, [r0, #9]
            for( uint8_t i = 0; i < US915_MAX_NB_CHANNELS - 8; i++ )
 800fdbc:	3401      	adds	r4, #1
 800fdbe:	b2e4      	uxtb	r4, r4
 800fdc0:	2c3f      	cmp	r4, #63	; 0x3f
 800fdc2:	d9eb      	bls.n	800fd9c <RegionUS915InitDefaults+0x68>
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800fdc4:	2340      	movs	r3, #64	; 0x40
 800fdc6:	2b47      	cmp	r3, #71	; 0x47
 800fdc8:	d814      	bhi.n	800fdf4 <RegionUS915InitDefaults+0xc0>
                RegionNvmGroup2->Channels[i].Frequency = 903000000 + ( i - ( US915_MAX_NB_CHANNELS - 8 ) ) * 1600000;
 800fdca:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
 800fdce:	4a24      	ldr	r2, [pc, #144]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fdd0:	6812      	ldr	r2, [r2, #0]
 800fdd2:	4c28      	ldr	r4, [pc, #160]	; (800fe74 <RegionUS915InitDefaults+0x140>)
 800fdd4:	4928      	ldr	r1, [pc, #160]	; (800fe78 <RegionUS915InitDefaults+0x144>)
 800fdd6:	fb04 1100 	mla	r1, r4, r0, r1
 800fdda:	eb03 0043 	add.w	r0, r3, r3, lsl #1
 800fdde:	eb02 0480 	add.w	r4, r2, r0, lsl #2
 800fde2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
                RegionNvmGroup2->Channels[i].DrRange.Value = ( DR_4 << 4 ) | DR_4;
 800fde6:	2144      	movs	r1, #68	; 0x44
 800fde8:	7221      	strb	r1, [r4, #8]
                RegionNvmGroup2->Channels[i].Band = 0;
 800fdea:	2100      	movs	r1, #0
 800fdec:	7261      	strb	r1, [r4, #9]
            for( uint8_t i = US915_MAX_NB_CHANNELS - 8; i < US915_MAX_NB_CHANNELS; i++ )
 800fdee:	3301      	adds	r3, #1
 800fdf0:	b2db      	uxtb	r3, r3
 800fdf2:	e7e8      	b.n	800fdc6 <RegionUS915InitDefaults+0x92>
            RegionNvmGroup2->ChannelsDefaultMask[0] = 0xFFFF;
 800fdf4:	4c1a      	ldr	r4, [pc, #104]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fdf6:	6820      	ldr	r0, [r4, #0]
 800fdf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800fdfc:	f8a0 336c 	strh.w	r3, [r0, #876]	; 0x36c
            RegionNvmGroup2->ChannelsDefaultMask[1] = 0xFFFF;
 800fe00:	f8a0 336e 	strh.w	r3, [r0, #878]	; 0x36e
            RegionNvmGroup2->ChannelsDefaultMask[2] = 0xFFFF;
 800fe04:	f8a0 3370 	strh.w	r3, [r0, #880]	; 0x370
            RegionNvmGroup2->ChannelsDefaultMask[3] = 0xFFFF;
 800fe08:	f8a0 3372 	strh.w	r3, [r0, #882]	; 0x372
            RegionNvmGroup2->ChannelsDefaultMask[4] = 0x00FF;
 800fe0c:	23ff      	movs	r3, #255	; 0xff
 800fe0e:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800fe12:	2300      	movs	r3, #0
 800fe14:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 800fe18:	2206      	movs	r2, #6
 800fe1a:	f500 715b 	add.w	r1, r0, #876	; 0x36c
 800fe1e:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800fe22:	f7fd ffcd 	bl	800ddc0 <RegionCommonChanMaskCopy>
            RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 800fe26:	6821      	ldr	r1, [r4, #0]
 800fe28:	2206      	movs	r2, #6
 800fe2a:	f501 7158 	add.w	r1, r1, #864	; 0x360
 800fe2e:	4b0d      	ldr	r3, [pc, #52]	; (800fe64 <RegionUS915InitDefaults+0x130>)
 800fe30:	6818      	ldr	r0, [r3, #0]
 800fe32:	f7fd ffc5 	bl	800ddc0 <RegionCommonChanMaskCopy>
            break;
 800fe36:	e010      	b.n	800fe5a <RegionUS915InitDefaults+0x126>
#endif /* REGION_VERSION */
            { // Copy-And the channels mask
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800fe38:	4a0a      	ldr	r2, [pc, #40]	; (800fe64 <RegionUS915InitDefaults+0x130>)
 800fe3a:	6811      	ldr	r1, [r2, #0]
 800fe3c:	4a08      	ldr	r2, [pc, #32]	; (800fe60 <RegionUS915InitDefaults+0x12c>)
 800fe3e:	6812      	ldr	r2, [r2, #0]
 800fe40:	f503 70d8 	add.w	r0, r3, #432	; 0x1b0
 800fe44:	f832 2010 	ldrh.w	r2, [r2, r0, lsl #1]
 800fe48:	f831 0013 	ldrh.w	r0, [r1, r3, lsl #1]
 800fe4c:	4002      	ands	r2, r0
 800fe4e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
            for( uint8_t i = 0; i < 6; i++ )
 800fe52:	3301      	adds	r3, #1
 800fe54:	b2db      	uxtb	r3, r3
 800fe56:	2b05      	cmp	r3, #5
 800fe58:	d9ee      	bls.n	800fe38 <RegionUS915InitDefaults+0x104>
        {
            break;
        }
    }
#endif /* REGION_US915 */
}
 800fe5a:	b006      	add	sp, #24
 800fe5c:	bd10      	pop	{r4, pc}
 800fe5e:	bf00      	nop
 800fe60:	20001050 	.word	0x20001050
 800fe64:	2000104c 	.word	0x2000104c
 800fe68:	20001048 	.word	0x20001048
 800fe6c:	00030d40 	.word	0x00030d40
 800fe70:	35c80160 	.word	0x35c80160
 800fe74:	00186a00 	.word	0x00186a00
 800fe78:	35d2afc0 	.word	0x35d2afc0

0800fe7c <RegionUS915Verify>:

bool RegionUS915Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 800fe7c:	b508      	push	{r3, lr}
#if defined( REGION_US915 )
    switch( phyAttribute )
 800fe7e:	290a      	cmp	r1, #10
 800fe80:	d833      	bhi.n	800feea <RegionUS915Verify+0x6e>
 800fe82:	e8df f001 	tbb	[pc, r1]
 800fe86:	3206      	.short	0x3206
 800fe88:	0a323232 	.word	0x0a323232
 800fe8c:	28321e14 	.word	0x28321e14
 800fe90:	28          	.byte	0x28
 800fe91:	00          	.byte	0x00
    {
        case PHY_FREQUENCY:
        {
            return VerifyRfFreq( verify->Frequency );
 800fe92:	6800      	ldr	r0, [r0, #0]
 800fe94:	f7ff fdf0 	bl	800fa78 <VerifyRfFreq>
 800fe98:	e028      	b.n	800feec <RegionUS915Verify+0x70>
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_TX_MIN_DATARATE, US915_TX_MAX_DATARATE );
 800fe9a:	2204      	movs	r2, #4
 800fe9c:	2100      	movs	r1, #0
 800fe9e:	f990 0000 	ldrsb.w	r0, [r0]
 800fea2:	f7fd ff1c 	bl	800dcde <RegionCommonValueInRange>
 800fea6:	3800      	subs	r0, #0
 800fea8:	bf18      	it	ne
 800feaa:	2001      	movne	r0, #1
 800feac:	e01e      	b.n	800feec <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 800feae:	2205      	movs	r2, #5
 800feb0:	2100      	movs	r1, #0
 800feb2:	f990 0000 	ldrsb.w	r0, [r0]
 800feb6:	f7fd ff12 	bl	800dcde <RegionCommonValueInRange>
 800feba:	3800      	subs	r0, #0
 800febc:	bf18      	it	ne
 800febe:	2001      	movne	r0, #1
 800fec0:	e014      	b.n	800feec <RegionUS915Verify+0x70>
        }
#endif /* REGION_VERSION */
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE );
 800fec2:	220d      	movs	r2, #13
 800fec4:	2108      	movs	r1, #8
 800fec6:	f990 0000 	ldrsb.w	r0, [r0]
 800feca:	f7fd ff08 	bl	800dcde <RegionCommonValueInRange>
 800fece:	3800      	subs	r0, #0
 800fed0:	bf18      	it	ne
 800fed2:	2001      	movne	r0, #1
 800fed4:	e00a      	b.n	800feec <RegionUS915Verify+0x70>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, US915_MAX_TX_POWER, US915_MIN_TX_POWER );
 800fed6:	220e      	movs	r2, #14
 800fed8:	2100      	movs	r1, #0
 800feda:	f990 0000 	ldrsb.w	r0, [r0]
 800fede:	f7fd fefe 	bl	800dcde <RegionCommonValueInRange>
 800fee2:	3800      	subs	r0, #0
 800fee4:	bf18      	it	ne
 800fee6:	2001      	movne	r0, #1
 800fee8:	e000      	b.n	800feec <RegionUS915Verify+0x70>
    switch( phyAttribute )
 800feea:	2000      	movs	r0, #0
            return false;
    }
#else
    return false;
#endif /* REGION_US915 */
}
 800feec:	bd08      	pop	{r3, pc}
	...

0800fef0 <RegionUS915ApplyCFList>:

void RegionUS915ApplyCFList( ApplyCFListParams_t* applyCFList )
{
#if defined( REGION_US915 )
    // Size of the optional CF list must be 16 byte
    if( applyCFList->Size != 16 )
 800fef0:	7a03      	ldrb	r3, [r0, #8]
 800fef2:	2b10      	cmp	r3, #16
 800fef4:	d134      	bne.n	800ff60 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // Last byte CFListType must be 0x01 to indicate the CFList contains a series of ChMask fields
    if( applyCFList->Payload[15] != 0x01 )
 800fef6:	6843      	ldr	r3, [r0, #4]
 800fef8:	7bdb      	ldrb	r3, [r3, #15]
 800fefa:	2b01      	cmp	r3, #1
 800fefc:	d130      	bne.n	800ff60 <RegionUS915ApplyCFList+0x70>
    {
        return;
    }

    // ChMask0 - ChMask4 must be set (every ChMask has 16 bit)
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800fefe:	2200      	movs	r2, #0
 800ff00:	4613      	mov	r3, r2
 800ff02:	2a04      	cmp	r2, #4
 800ff04:	d82b      	bhi.n	800ff5e <RegionUS915ApplyCFList+0x6e>
{
 800ff06:	b530      	push	{r4, r5, lr}
 800ff08:	e010      	b.n	800ff2c <RegionUS915ApplyCFList+0x3c>
        if( chMaskItr == 4 )
        {
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
        }
        // Set the channel mask to the remaining
        RegionNvmGroup1->ChannelsMaskRemaining[chMaskItr] &= RegionNvmGroup2->ChannelsMask[chMaskItr];
 800ff0a:	4916      	ldr	r1, [pc, #88]	; (800ff64 <RegionUS915ApplyCFList+0x74>)
 800ff0c:	680d      	ldr	r5, [r1, #0]
 800ff0e:	f50c 71d8 	add.w	r1, ip, #432	; 0x1b0
 800ff12:	f834 1011 	ldrh.w	r1, [r4, r1, lsl #1]
 800ff16:	f835 401c 	ldrh.w	r4, [r5, ip, lsl #1]
 800ff1a:	4021      	ands	r1, r4
 800ff1c:	f825 101c 	strh.w	r1, [r5, ip, lsl #1]
    for( uint8_t chMaskItr = 0, cntPayload = 0; chMaskItr <= 4; chMaskItr++, cntPayload+=2 )
 800ff20:	3301      	adds	r3, #1
 800ff22:	b2db      	uxtb	r3, r3
 800ff24:	3202      	adds	r2, #2
 800ff26:	b2d2      	uxtb	r2, r2
 800ff28:	2b04      	cmp	r3, #4
 800ff2a:	d817      	bhi.n	800ff5c <RegionUS915ApplyCFList+0x6c>
        RegionNvmGroup2->ChannelsMask[chMaskItr] = (uint16_t) (0x00FF & applyCFList->Payload[cntPayload]);
 800ff2c:	6841      	ldr	r1, [r0, #4]
 800ff2e:	4c0e      	ldr	r4, [pc, #56]	; (800ff68 <RegionUS915ApplyCFList+0x78>)
 800ff30:	6824      	ldr	r4, [r4, #0]
 800ff32:	469c      	mov	ip, r3
 800ff34:	5c89      	ldrb	r1, [r1, r2]
 800ff36:	f503 75d8 	add.w	r5, r3, #432	; 0x1b0
 800ff3a:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        RegionNvmGroup2->ChannelsMask[chMaskItr] |= (uint16_t) (applyCFList->Payload[cntPayload+1] << 8);
 800ff3e:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800ff42:	4496      	add	lr, r2
 800ff44:	f89e e001 	ldrb.w	lr, [lr, #1]
 800ff48:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
 800ff4c:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
        if( chMaskItr == 4 )
 800ff50:	2b04      	cmp	r3, #4
 800ff52:	d1da      	bne.n	800ff0a <RegionUS915ApplyCFList+0x1a>
            RegionNvmGroup2->ChannelsMask[chMaskItr] = RegionNvmGroup2->ChannelsMask[chMaskItr] & CHANNELS_MASK_500KHZ_MASK;
 800ff54:	b2c9      	uxtb	r1, r1
 800ff56:	f824 1015 	strh.w	r1, [r4, r5, lsl #1]
 800ff5a:	e7d6      	b.n	800ff0a <RegionUS915ApplyCFList+0x1a>
    }
#endif /* REGION_US915 */
}
 800ff5c:	bd30      	pop	{r4, r5, pc}
 800ff5e:	4770      	bx	lr
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	2000104c 	.word	0x2000104c
 800ff68:	20001050 	.word	0x20001050

0800ff6c <RegionUS915ChanMaskSet>:

bool RegionUS915ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 800ff6c:	b570      	push	{r4, r5, r6, lr}
 800ff6e:	4605      	mov	r5, r0
#if defined( REGION_US915 )
    uint8_t nbChannels = RegionCommonCountChannels( chanMaskSet->ChannelsMaskIn, 0, 4 );
 800ff70:	2204      	movs	r2, #4
 800ff72:	2100      	movs	r1, #0
 800ff74:	6800      	ldr	r0, [r0, #0]
 800ff76:	f7fd ff0d 	bl	800dd94 <RegionCommonCountChannels>

    // Check the number of active channels
    if( ( nbChannels < 2 ) &&
 800ff7a:	2801      	cmp	r0, #1
 800ff7c:	d031      	beq.n	800ffe2 <RegionUS915ChanMaskSet+0x76>
        ( nbChannels > 0 ) )
    {
        return false;
    }

    switch( chanMaskSet->ChannelsMaskType )
 800ff7e:	792c      	ldrb	r4, [r5, #4]
 800ff80:	b11c      	cbz	r4, 800ff8a <RegionUS915ChanMaskSet+0x1e>
 800ff82:	2c01      	cmp	r4, #1
 800ff84:	d023      	beq.n	800ffce <RegionUS915ChanMaskSet+0x62>
 800ff86:	2000      	movs	r0, #0
    }
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 800ff88:	bd70      	pop	{r4, r5, r6, pc}
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ff8a:	4e17      	ldr	r6, [pc, #92]	; (800ffe8 <RegionUS915ChanMaskSet+0x7c>)
 800ff8c:	6830      	ldr	r0, [r6, #0]
 800ff8e:	2206      	movs	r2, #6
 800ff90:	6829      	ldr	r1, [r5, #0]
 800ff92:	f500 7058 	add.w	r0, r0, #864	; 0x360
 800ff96:	f7fd ff13 	bl	800ddc0 <RegionCommonChanMaskCopy>
            RegionNvmGroup2->ChannelsDefaultMask[4] = RegionNvmGroup2->ChannelsDefaultMask[4] & CHANNELS_MASK_500KHZ_MASK;
 800ff9a:	6830      	ldr	r0, [r6, #0]
 800ff9c:	f890 3374 	ldrb.w	r3, [r0, #884]	; 0x374
 800ffa0:	f8a0 3374 	strh.w	r3, [r0, #884]	; 0x374
            RegionNvmGroup2->ChannelsDefaultMask[5] = 0x0000;
 800ffa4:	2300      	movs	r3, #0
 800ffa6:	f8a0 3376 	strh.w	r3, [r0, #886]	; 0x376
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ffaa:	e00c      	b.n	800ffc6 <RegionUS915ChanMaskSet+0x5a>
                RegionNvmGroup1->ChannelsMaskRemaining[i] &= RegionNvmGroup2->ChannelsMask[i];
 800ffac:	4b0f      	ldr	r3, [pc, #60]	; (800ffec <RegionUS915ChanMaskSet+0x80>)
 800ffae:	681a      	ldr	r2, [r3, #0]
 800ffb0:	f504 73d8 	add.w	r3, r4, #432	; 0x1b0
 800ffb4:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 800ffb8:	f832 1014 	ldrh.w	r1, [r2, r4, lsl #1]
 800ffbc:	400b      	ands	r3, r1
 800ffbe:	f822 3014 	strh.w	r3, [r2, r4, lsl #1]
            for( uint8_t i = 0; i < CHANNELS_MASK_SIZE; i++ )
 800ffc2:	3401      	adds	r4, #1
 800ffc4:	b2e4      	uxtb	r4, r4
 800ffc6:	2c05      	cmp	r4, #5
 800ffc8:	d9f0      	bls.n	800ffac <RegionUS915ChanMaskSet+0x40>
    return true;
 800ffca:	2001      	movs	r0, #1
 800ffcc:	e7dc      	b.n	800ff88 <RegionUS915ChanMaskSet+0x1c>
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 800ffce:	4b06      	ldr	r3, [pc, #24]	; (800ffe8 <RegionUS915ChanMaskSet+0x7c>)
 800ffd0:	6818      	ldr	r0, [r3, #0]
 800ffd2:	2206      	movs	r2, #6
 800ffd4:	6829      	ldr	r1, [r5, #0]
 800ffd6:	f500 705b 	add.w	r0, r0, #876	; 0x36c
 800ffda:	f7fd fef1 	bl	800ddc0 <RegionCommonChanMaskCopy>
    return true;
 800ffde:	2001      	movs	r0, #1
            break;
 800ffe0:	e7d2      	b.n	800ff88 <RegionUS915ChanMaskSet+0x1c>
        return false;
 800ffe2:	2000      	movs	r0, #0
 800ffe4:	e7d0      	b.n	800ff88 <RegionUS915ChanMaskSet+0x1c>
 800ffe6:	bf00      	nop
 800ffe8:	20001050 	.word	0x20001050
 800ffec:	2000104c 	.word	0x2000104c

0800fff0 <RegionUS915ComputeRxWindowParameters>:

void RegionUS915ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 800fff0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fff2:	b083      	sub	sp, #12
 800fff4:	460e      	mov	r6, r1
 800fff6:	4617      	mov	r7, r2
 800fff8:	461c      	mov	r4, r3
#if defined( REGION_US915 )
    uint32_t tSymbolInUs = 0;

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, US915_RX_MAX_DATARATE );
 800fffa:	280d      	cmp	r0, #13
 800fffc:	bfa8      	it	ge
 800fffe:	200d      	movge	r0, #13
 8010000:	7058      	strb	r0, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsUS915 );
 8010002:	4d0f      	ldr	r5, [pc, #60]	; (8010040 <RegionUS915ComputeRxWindowParameters+0x50>)
 8010004:	4629      	mov	r1, r5
 8010006:	f7fe f935 	bl	800e274 <RegionCommonGetBandwidth>
 801000a:	70a0      	strb	r0, [r4, #2]

    tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesUS915[rxConfigParams->Datarate], BandwidthsUS915[rxConfigParams->Datarate] );
 801000c:	f994 3001 	ldrsb.w	r3, [r4, #1]
 8010010:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8010014:	4a0b      	ldr	r2, [pc, #44]	; (8010044 <RegionUS915ComputeRxWindowParameters+0x54>)
 8010016:	5cd0      	ldrb	r0, [r2, r3]
 8010018:	f7fd fff8 	bl	800e00c <RegionCommonComputeSymbolTimeLoRa>
 801001c:	4605      	mov	r5, r0

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 801001e:	4b0a      	ldr	r3, [pc, #40]	; (8010048 <RegionUS915ComputeRxWindowParameters+0x58>)
 8010020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010022:	4798      	blx	r3
 8010024:	4603      	mov	r3, r0
 8010026:	f104 020c 	add.w	r2, r4, #12
 801002a:	9201      	str	r2, [sp, #4]
 801002c:	3408      	adds	r4, #8
 801002e:	9400      	str	r4, [sp, #0]
 8010030:	463a      	mov	r2, r7
 8010032:	4631      	mov	r1, r6
 8010034:	4628      	mov	r0, r5
 8010036:	f7fd fff7 	bl	800e028 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_US915 */
}
 801003a:	b003      	add	sp, #12
 801003c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801003e:	bf00      	nop
 8010040:	0801476c 	.word	0x0801476c
 8010044:	080147c0 	.word	0x080147c0
 8010048:	08014d7c 	.word	0x08014d7c

0801004c <RegionUS915RxConfig>:

bool RegionUS915RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 801004c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010050:	b08b      	sub	sp, #44	; 0x2c
 8010052:	4604      	mov	r4, r0
 8010054:	460d      	mov	r5, r1
#if defined( REGION_US915 )
    int8_t dr = rxConfig->Datarate;
 8010056:	f990 6001 	ldrsb.w	r6, [r0, #1]
    uint8_t maxPayload = 0;
    int8_t phyDr = 0;
    uint32_t frequency = rxConfig->Frequency;
 801005a:	6847      	ldr	r7, [r0, #4]

    if( Radio.GetStatus( ) != RF_IDLE )
 801005c:	4b22      	ldr	r3, [pc, #136]	; (80100e8 <RegionUS915RxConfig+0x9c>)
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	4798      	blx	r3
 8010062:	2800      	cmp	r0, #0
 8010064:	d13d      	bne.n	80100e2 <RegionUS915RxConfig+0x96>
    {
        return false;
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8010066:	7ce3      	ldrb	r3, [r4, #19]
 8010068:	b933      	cbnz	r3, 8010078 <RegionUS915RxConfig+0x2c>
    {
        // Apply window 1 frequency
        frequency = US915_FIRST_RX1_CHANNEL + ( rxConfig->Channel % 8 ) * US915_STEPWIDTH_RX1_CHANNEL;
 801006a:	7827      	ldrb	r7, [r4, #0]
 801006c:	f007 0307 	and.w	r3, r7, #7
 8010070:	4a1e      	ldr	r2, [pc, #120]	; (80100ec <RegionUS915RxConfig+0xa0>)
 8010072:	4f1f      	ldr	r7, [pc, #124]	; (80100f0 <RegionUS915RxConfig+0xa4>)
 8010074:	fb02 7703 	mla	r7, r2, r3, r7
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesUS915[dr];
 8010078:	4b1e      	ldr	r3, [pc, #120]	; (80100f4 <RegionUS915RxConfig+0xa8>)
 801007a:	f913 9006 	ldrsb.w	r9, [r3, r6]

    Radio.SetChannel( frequency );
 801007e:	f8df 8068 	ldr.w	r8, [pc, #104]	; 80100e8 <RegionUS915RxConfig+0x9c>
 8010082:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010086:	4638      	mov	r0, r7
 8010088:	4798      	blx	r3

    // Radio configuration
    Radio.SetRxConfig( MODEM_LORA, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 801008a:	f8d8 8018 	ldr.w	r8, [r8, #24]
 801008e:	7ca3      	ldrb	r3, [r4, #18]
 8010090:	9309      	str	r3, [sp, #36]	; 0x24
 8010092:	2001      	movs	r0, #1
 8010094:	9008      	str	r0, [sp, #32]
 8010096:	2200      	movs	r2, #0
 8010098:	9207      	str	r2, [sp, #28]
 801009a:	9206      	str	r2, [sp, #24]
 801009c:	9205      	str	r2, [sp, #20]
 801009e:	9204      	str	r2, [sp, #16]
 80100a0:	9203      	str	r2, [sp, #12]
 80100a2:	8923      	ldrh	r3, [r4, #8]
 80100a4:	9302      	str	r3, [sp, #8]
 80100a6:	2308      	movs	r3, #8
 80100a8:	9301      	str	r3, [sp, #4]
 80100aa:	9200      	str	r2, [sp, #0]
 80100ac:	4603      	mov	r3, r0
 80100ae:	464a      	mov	r2, r9
 80100b0:	78a1      	ldrb	r1, [r4, #2]
 80100b2:	47c0      	blx	r8

    if( rxConfig->RepeaterSupport == true )
 80100b4:	7c63      	ldrb	r3, [r4, #17]
 80100b6:	b18b      	cbz	r3, 80100dc <RegionUS915RxConfig+0x90>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterUS915[dr];
 80100b8:	4b0f      	ldr	r3, [pc, #60]	; (80100f8 <RegionUS915RxConfig+0xac>)
 80100ba:	5d99      	ldrb	r1, [r3, r6]
    else
    {
        maxPayload = MaxPayloadOfDatarateUS915[dr];
    }

    Radio.SetMaxPayloadLength( MODEM_LORA, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 80100bc:	4b0a      	ldr	r3, [pc, #40]	; (80100e8 <RegionUS915RxConfig+0x9c>)
 80100be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80100c0:	310d      	adds	r1, #13
 80100c2:	b2c9      	uxtb	r1, r1
 80100c4:	2001      	movs	r0, #1
 80100c6:	4798      	blx	r3

    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 80100c8:	4632      	mov	r2, r6
 80100ca:	4639      	mov	r1, r7
 80100cc:	7ce0      	ldrb	r0, [r4, #19]
 80100ce:	f7fe f8e3 	bl	800e298 <RegionCommonRxConfigPrint>

    *datarate = (uint8_t) dr;
 80100d2:	702e      	strb	r6, [r5, #0]
    return true;
 80100d4:	2001      	movs	r0, #1
#else
    return false;
#endif /* REGION_US915 */
}
 80100d6:	b00b      	add	sp, #44	; 0x2c
 80100d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        maxPayload = MaxPayloadOfDatarateUS915[dr];
 80100dc:	4b07      	ldr	r3, [pc, #28]	; (80100fc <RegionUS915RxConfig+0xb0>)
 80100de:	5d99      	ldrb	r1, [r3, r6]
 80100e0:	e7ec      	b.n	80100bc <RegionUS915RxConfig+0x70>
        return false;
 80100e2:	2000      	movs	r0, #0
 80100e4:	e7f7      	b.n	80100d6 <RegionUS915RxConfig+0x8a>
 80100e6:	bf00      	nop
 80100e8:	08014d7c 	.word	0x08014d7c
 80100ec:	000927c0 	.word	0x000927c0
 80100f0:	370870a0 	.word	0x370870a0
 80100f4:	080147c0 	.word	0x080147c0
 80100f8:	080147d0 	.word	0x080147d0
 80100fc:	080147e0 	.word	0x080147e0

08010100 <RegionUS915TxConfig>:

bool RegionUS915TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8010100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010104:	b08d      	sub	sp, #52	; 0x34
 8010106:	4604      	mov	r4, r0
 8010108:	468b      	mov	fp, r1
 801010a:	4617      	mov	r7, r2
#if defined( REGION_US915 )
    int8_t phyDr = DataratesUS915[txConfig->Datarate];
 801010c:	f990 2001 	ldrsb.w	r2, [r0, #1]
 8010110:	4b32      	ldr	r3, [pc, #200]	; (80101dc <RegionUS915TxConfig+0xdc>)
 8010112:	f913 a002 	ldrsb.w	sl, [r3, r2]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = LimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower, txConfig->Datarate, RegionNvmGroup2->ChannelsMask );
 8010116:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 80101e0 <RegionUS915TxConfig+0xe0>
 801011a:	f8d9 3000 	ldr.w	r3, [r9]
 801011e:	7801      	ldrb	r1, [r0, #0]
 8010120:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8010124:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8010128:	7a49      	ldrb	r1, [r1, #9]
 801012a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801012e:	482d      	ldr	r0, [pc, #180]	; (80101e4 <RegionUS915TxConfig+0xe4>)
 8010130:	6800      	ldr	r0, [r0, #0]
 8010132:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8010136:	f503 7358 	add.w	r3, r3, #864	; 0x360
 801013a:	f991 1002 	ldrsb.w	r1, [r1, #2]
 801013e:	f994 0002 	ldrsb.w	r0, [r4, #2]
 8010142:	f7ff fce7 	bl	800fb14 <LimitTxPower>
 8010146:	4606      	mov	r6, r0
#endif /* REGION_VERSION */

    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsUS915 );
 8010148:	4927      	ldr	r1, [pc, #156]	; (80101e8 <RegionUS915TxConfig+0xe8>)
 801014a:	f994 0001 	ldrsb.w	r0, [r4, #1]
 801014e:	f7fe f891 	bl	800e274 <RegionCommonGetBandwidth>
 8010152:	900a      	str	r0, [sp, #40]	; 0x28
    int8_t phyTxPower = 0;

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, US915_DEFAULT_MAX_ERP, 0 );
 8010154:	2200      	movs	r2, #0
 8010156:	4925      	ldr	r1, [pc, #148]	; (80101ec <RegionUS915TxConfig+0xec>)
 8010158:	4630      	mov	r0, r6
 801015a:	f7fd ffa1 	bl	800e0a0 <RegionCommonComputeTxPower>
 801015e:	900b      	str	r0, [sp, #44]	; 0x2c

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 8010160:	f8df 808c 	ldr.w	r8, [pc, #140]	; 80101f0 <RegionUS915TxConfig+0xf0>
 8010164:	f8d8 200c 	ldr.w	r2, [r8, #12]
 8010168:	f8d9 1000 	ldr.w	r1, [r9]
 801016c:	7823      	ldrb	r3, [r4, #0]
 801016e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8010172:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8010176:	4790      	blx	r2

    Radio.SetTxConfig( MODEM_LORA, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 8010178:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 801017c:	9308      	str	r3, [sp, #32]
 801017e:	2200      	movs	r2, #0
 8010180:	9207      	str	r2, [sp, #28]
 8010182:	9206      	str	r2, [sp, #24]
 8010184:	9205      	str	r2, [sp, #20]
 8010186:	2501      	movs	r5, #1
 8010188:	9504      	str	r5, [sp, #16]
 801018a:	9203      	str	r2, [sp, #12]
 801018c:	2308      	movs	r3, #8
 801018e:	9302      	str	r3, [sp, #8]
 8010190:	9501      	str	r5, [sp, #4]
 8010192:	f8cd a000 	str.w	sl, [sp]
 8010196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010198:	990b      	ldr	r1, [sp, #44]	; 0x2c
 801019a:	4628      	mov	r0, r5
 801019c:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 80101a0:	47e0      	blx	ip
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80101a2:	f8d9 2000 	ldr.w	r2, [r9]
 80101a6:	7823      	ldrb	r3, [r4, #0]
 80101a8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80101ac:	f994 1001 	ldrsb.w	r1, [r4, #1]
 80101b0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80101b4:	f7fe f892 	bl	800e2dc <RegionCommonTxConfigPrint>

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( MODEM_LORA, txConfig->PktLen );
 80101b8:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 80101bc:	7b21      	ldrb	r1, [r4, #12]
 80101be:	4628      	mov	r0, r5
 80101c0:	4798      	blx	r3

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 80101c2:	89a1      	ldrh	r1, [r4, #12]
 80101c4:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80101c8:	f7ff fc86 	bl	800fad8 <GetTimeOnAir>
 80101cc:	6038      	str	r0, [r7, #0]

    *txPower = txPowerLimited;
 80101ce:	f88b 6000 	strb.w	r6, [fp]
    return true;
#else
    return false;
#endif /* REGION_US915 */
}
 80101d2:	4628      	mov	r0, r5
 80101d4:	b00d      	add	sp, #52	; 0x34
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80101da:	bf00      	nop
 80101dc:	080147c0 	.word	0x080147c0
 80101e0:	20001050 	.word	0x20001050
 80101e4:	20001048 	.word	0x20001048
 80101e8:	0801476c 	.word	0x0801476c
 80101ec:	41f00000 	.word	0x41f00000
 80101f0:	08014d7c 	.word	0x08014d7c

080101f4 <RegionUS915LinkAdrReq>:

uint8_t RegionUS915LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 80101f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80101f8:	b091      	sub	sp, #68	; 0x44
 80101fa:	4605      	mov	r5, r0
 80101fc:	4688      	mov	r8, r1
 80101fe:	4617      	mov	r7, r2
 8010200:	461e      	mov	r6, r3
    uint8_t status = 0x07;
#if defined( REGION_US915 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8010202:	2400      	movs	r4, #0
 8010204:	940e      	str	r4, [sp, #56]	; 0x38
 8010206:	f8ad 403c 	strh.w	r4, [sp, #60]	; 0x3c
    uint8_t nextIndex = 0;
    uint8_t bytesProcessed = 0;
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    uint16_t channelsMask[CHANNELS_MASK_SIZE] = { 0, 0, 0, 0, 0, 0 };
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    uint16_t channelsMask[6] = { 0, 0, 0, 0, 0, 0 };
 801020a:	940b      	str	r4, [sp, #44]	; 0x2c
 801020c:	940c      	str	r4, [sp, #48]	; 0x30
 801020e:	940d      	str	r4, [sp, #52]	; 0x34
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    // Initialize local copy of channels mask
    RegionCommonChanMaskCopy( channelsMask, RegionNvmGroup2->ChannelsMask, CHANNELS_MASK_SIZE );
 8010210:	4b97      	ldr	r3, [pc, #604]	; (8010470 <RegionUS915LinkAdrReq+0x27c>)
 8010212:	6819      	ldr	r1, [r3, #0]
 8010214:	2206      	movs	r2, #6
 8010216:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801021a:	a80b      	add	r0, sp, #44	; 0x2c
 801021c:	f7fd fdd0 	bl	800ddc0 <RegionCommonChanMaskCopy>

    while( bytesProcessed < linkAdrReq->PayloadSize )
 8010220:	e00d      	b.n	801023e <RegionUS915LinkAdrReq+0x4a>
        status = 0x07;

        if( linkAdrParams.ChMaskCtrl == 6 )
        {
            // Enable all 125 kHz channels
            channelsMask[0] = 0xFFFF;
 8010222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010226:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0xFFFF;
 801022a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0xFFFF;
 801022e:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0xFFFF;
 8010232:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8010236:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 801023a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    while( bytesProcessed < linkAdrReq->PayloadSize )
 801023e:	7a2b      	ldrb	r3, [r5, #8]
 8010240:	42a3      	cmp	r3, r4
 8010242:	f240 8081 	bls.w	8010348 <RegionUS915LinkAdrReq+0x154>
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 8010246:	6868      	ldr	r0, [r5, #4]
 8010248:	a90e      	add	r1, sp, #56	; 0x38
 801024a:	4420      	add	r0, r4
 801024c:	f7fd fe68 	bl	800df20 <RegionCommonParseLinkAdrReq>
        if( nextIndex == 0 )
 8010250:	2800      	cmp	r0, #0
 8010252:	d079      	beq.n	8010348 <RegionUS915LinkAdrReq+0x154>
        bytesProcessed += nextIndex;
 8010254:	4404      	add	r4, r0
 8010256:	b2e4      	uxtb	r4, r4
        if( linkAdrParams.ChMaskCtrl == 6 )
 8010258:	f89d c03b 	ldrb.w	ip, [sp, #59]	; 0x3b
 801025c:	f1bc 0f06 	cmp.w	ip, #6
 8010260:	d0df      	beq.n	8010222 <RegionUS915LinkAdrReq+0x2e>
        }
        else if( linkAdrParams.ChMaskCtrl == 7 )
 8010262:	f1bc 0f07 	cmp.w	ip, #7
 8010266:	d00a      	beq.n	801027e <RegionUS915LinkAdrReq+0x8a>
            channelsMask[2] = 0x0000;
            channelsMask[3] = 0x0000;
            // Apply chMask to channels 64 to 71
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
        }
        else if( linkAdrParams.ChMaskCtrl == 5 )
 8010268:	f1bc 0f05 	cmp.w	ip, #5
 801026c:	d068      	beq.n	8010340 <RegionUS915LinkAdrReq+0x14c>
                }
            }
        }
        else
        {
            channelsMask[linkAdrParams.ChMaskCtrl] = linkAdrParams.ChMask;
 801026e:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8010272:	aa10      	add	r2, sp, #64	; 0x40
 8010274:	eb02 0c4c 	add.w	ip, r2, ip, lsl #1
 8010278:	f82c 3c14 	strh.w	r3, [ip, #-20]
 801027c:	e7df      	b.n	801023e <RegionUS915LinkAdrReq+0x4a>
            channelsMask[0] = 0x0000;
 801027e:	2300      	movs	r3, #0
 8010280:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
            channelsMask[1] = 0x0000;
 8010284:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
            channelsMask[2] = 0x0000;
 8010288:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
            channelsMask[3] = 0x0000;
 801028c:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
            channelsMask[4] = linkAdrParams.ChMask & CHANNELS_MASK_500KHZ_MASK;
 8010290:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
 8010294:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 8010298:	e7d1      	b.n	801023e <RegionUS915LinkAdrReq+0x4a>
                        channelsMask[cntChannelMask] |= 0xFF00;
 801029a:	aa10      	add	r2, sp, #64	; 0x40
 801029c:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80102a0:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80102a4:	f062 02ff 	orn	r2, r2, #255	; 0xff
 80102a8:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80102ac:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80102b0:	4313      	orrs	r3, r2
 80102b2:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 80102b6:	3101      	adds	r1, #1
 80102b8:	b2c9      	uxtb	r1, r1
            for( uint8_t i = 0; i <= 7; i++ )
 80102ba:	f10c 0c01 	add.w	ip, ip, #1
 80102be:	fa5f fc8c 	uxtb.w	ip, ip
 80102c2:	f1bc 0f07 	cmp.w	ip, #7
 80102c6:	d8ba      	bhi.n	801023e <RegionUS915LinkAdrReq+0x4a>
                if( ( ( linkAdrParams.ChMask & 0x00FF ) & ( bitMask << i ) ) != 0 )
 80102c8:	f89d 203c 	ldrb.w	r2, [sp, #60]	; 0x3c
 80102cc:	2301      	movs	r3, #1
 80102ce:	fa03 f30c 	lsl.w	r3, r3, ip
 80102d2:	421a      	tst	r2, r3
 80102d4:	d011      	beq.n	80102fa <RegionUS915LinkAdrReq+0x106>
                    if( ( i % 2 ) == 0 )
 80102d6:	f01c 0f01 	tst.w	ip, #1
 80102da:	d1de      	bne.n	801029a <RegionUS915LinkAdrReq+0xa6>
                        channelsMask[cntChannelMask] |= 0x00FF;
 80102dc:	aa10      	add	r2, sp, #64	; 0x40
 80102de:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 80102e2:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 80102e6:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80102ea:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] |= ( bitMask << i );
 80102ee:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 80102f2:	4313      	orrs	r3, r2
 80102f4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80102f8:	e7df      	b.n	80102ba <RegionUS915LinkAdrReq+0xc6>
                    if( ( i % 2 ) == 0 )
 80102fa:	f01c 0f01 	tst.w	ip, #1
 80102fe:	d10f      	bne.n	8010320 <RegionUS915LinkAdrReq+0x12c>
                        channelsMask[cntChannelMask] &= 0xFF00;
 8010300:	aa10      	add	r2, sp, #64	; 0x40
 8010302:	eb02 0041 	add.w	r0, r2, r1, lsl #1
 8010306:	f830 2c14 	ldrh.w	r2, [r0, #-20]
 801030a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 801030e:	f820 2c14 	strh.w	r2, [r0, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 8010312:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010316:	ea22 0303 	bic.w	r3, r2, r3
 801031a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 801031e:	e7cc      	b.n	80102ba <RegionUS915LinkAdrReq+0xc6>
                        channelsMask[cntChannelMask] &= 0x00FF;
 8010320:	aa10      	add	r2, sp, #64	; 0x40
 8010322:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8010326:	f812 0c14 	ldrb.w	r0, [r2, #-20]
 801032a:	f822 0c14 	strh.w	r0, [r2, #-20]
                        channelsMask[4] &= ~( bitMask << i );
 801032e:	f8bd 2034 	ldrh.w	r2, [sp, #52]	; 0x34
 8010332:	ea22 0303 	bic.w	r3, r2, r3
 8010336:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
                        cntChannelMask++;
 801033a:	3101      	adds	r1, #1
 801033c:	b2c9      	uxtb	r1, r1
 801033e:	e7bc      	b.n	80102ba <RegionUS915LinkAdrReq+0xc6>
            for( uint8_t i = 0; i <= 7; i++ )
 8010340:	f04f 0c00 	mov.w	ip, #0
            uint8_t cntChannelMask = 0;
 8010344:	4661      	mov	r1, ip
 8010346:	e7bc      	b.n	80102c2 <RegionUS915LinkAdrReq+0xce>
        }
    }

    // FCC 15.247 paragraph F mandates to hop on at least 2 125 kHz channels
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8010348:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 801034c:	2b03      	cmp	r3, #3
 801034e:	dd58      	ble.n	8010402 <RegionUS915LinkAdrReq+0x20e>
 8010350:	f04f 0907 	mov.w	r9, #7
    {
        status &= 0xFE; // Channel mask KO
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 8010354:	2302      	movs	r3, #2
 8010356:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 801035a:	7a6b      	ldrb	r3, [r5, #9]
 801035c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    phyParam = RegionUS915GetPhyParam( &getPhy );
 8010360:	a809      	add	r0, sp, #36	; 0x24
 8010362:	f7ff fbf3 	bl	800fb4c <RegionUS915GetPhyParam>
 8010366:	9008      	str	r0, [sp, #32]

    linkAdrVerifyParams.Status = status;
 8010368:	f88d 9004 	strb.w	r9, [sp, #4]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 801036c:	7aab      	ldrb	r3, [r5, #10]
 801036e:	f88d 3005 	strb.w	r3, [sp, #5]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 8010372:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 8010376:	f88d 3006 	strb.w	r3, [sp, #6]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 801037a:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 801037e:	f88d 3007 	strb.w	r3, [sp, #7]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 8010382:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 8010386:	f88d 3008 	strb.w	r3, [sp, #8]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 801038a:	f995 300b 	ldrsb.w	r3, [r5, #11]
 801038e:	f88d 3009 	strb.w	r3, [sp, #9]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 8010392:	f995 300c 	ldrsb.w	r3, [r5, #12]
 8010396:	f88d 300a 	strb.w	r3, [sp, #10]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 801039a:	f995 300d 	ldrsb.w	r3, [r5, #13]
 801039e:	f88d 300b 	strb.w	r3, [sp, #11]
    linkAdrVerifyParams.NbChannels = US915_MAX_NB_CHANNELS;
 80103a2:	2348      	movs	r3, #72	; 0x48
 80103a4:	f88d 300c 	strb.w	r3, [sp, #12]
    linkAdrVerifyParams.ChannelsMask = channelsMask;
 80103a8:	ab0b      	add	r3, sp, #44	; 0x2c
 80103aa:	9304      	str	r3, [sp, #16]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 80103ac:	f88d 0014 	strb.w	r0, [sp, #20]
    linkAdrVerifyParams.MaxDatarate = US915_TX_MAX_DATARATE;
 80103b0:	2304      	movs	r3, #4
 80103b2:	f88d 3015 	strb.w	r3, [sp, #21]
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 80103b6:	4b2e      	ldr	r3, [pc, #184]	; (8010470 <RegionUS915LinkAdrReq+0x27c>)
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	9306      	str	r3, [sp, #24]
    linkAdrVerifyParams.MinTxPower = US915_MIN_TX_POWER;
 80103bc:	230e      	movs	r3, #14
 80103be:	f88d 301c 	strb.w	r3, [sp, #28]
    linkAdrVerifyParams.MaxTxPower = US915_MAX_TX_POWER;
 80103c2:	2300      	movs	r3, #0
 80103c4:	f88d 301d 	strb.w	r3, [sp, #29]
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 80103c8:	682b      	ldr	r3, [r5, #0]
 80103ca:	9300      	str	r3, [sp, #0]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 80103cc:	ab0e      	add	r3, sp, #56	; 0x38
 80103ce:	f10d 023a 	add.w	r2, sp, #58	; 0x3a
 80103d2:	f10d 0139 	add.w	r1, sp, #57	; 0x39
 80103d6:	4668      	mov	r0, sp
 80103d8:	f7fd fdc0 	bl	800df5c <RegionCommonLinkAdrReqVerifyParams>
 80103dc:	4605      	mov	r5, r0

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 80103de:	2807      	cmp	r0, #7
 80103e0:	d01c      	beq.n	801041c <RegionUS915LinkAdrReq+0x228>
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 80103e2:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
 80103e6:	f888 3000 	strb.w	r3, [r8]
    *txPowOut = linkAdrParams.TxPower;
 80103ea:	f99d 303a 	ldrsb.w	r3, [sp, #58]	; 0x3a
 80103ee:	703b      	strb	r3, [r7, #0]
    *nbRepOut = linkAdrParams.NbRep;
 80103f0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
 80103f4:	7033      	strb	r3, [r6, #0]
    *nbBytesParsed = bytesProcessed;
 80103f6:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80103f8:	701c      	strb	r4, [r3, #0]

#endif /* REGION_US915 */
    return status;
}
 80103fa:	4628      	mov	r0, r5
 80103fc:	b011      	add	sp, #68	; 0x44
 80103fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if( ( linkAdrParams.Datarate < DR_4 ) && ( RegionCommonCountChannels( channelsMask, 0, 4 ) < 2 ) )
 8010402:	2204      	movs	r2, #4
 8010404:	2100      	movs	r1, #0
 8010406:	a80b      	add	r0, sp, #44	; 0x2c
 8010408:	f7fd fcc4 	bl	800dd94 <RegionCommonCountChannels>
 801040c:	2801      	cmp	r0, #1
 801040e:	d902      	bls.n	8010416 <RegionUS915LinkAdrReq+0x222>
 8010410:	f04f 0907 	mov.w	r9, #7
 8010414:	e79e      	b.n	8010354 <RegionUS915LinkAdrReq+0x160>
        status &= 0xFE; // Channel mask KO
 8010416:	f04f 0906 	mov.w	r9, #6
 801041a:	e79b      	b.n	8010354 <RegionUS915LinkAdrReq+0x160>
        RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, channelsMask, 6 );
 801041c:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8010470 <RegionUS915LinkAdrReq+0x27c>
 8010420:	f8d9 0000 	ldr.w	r0, [r9]
 8010424:	2206      	movs	r2, #6
 8010426:	a90b      	add	r1, sp, #44	; 0x2c
 8010428:	f500 7058 	add.w	r0, r0, #864	; 0x360
 801042c:	f7fd fcc8 	bl	800ddc0 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->ChannelsMaskRemaining[0] &= RegionNvmGroup2->ChannelsMask[0];
 8010430:	4b10      	ldr	r3, [pc, #64]	; (8010474 <RegionUS915LinkAdrReq+0x280>)
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	f8d9 2000 	ldr.w	r2, [r9]
 8010438:	f8b2 1360 	ldrh.w	r1, [r2, #864]	; 0x360
 801043c:	8818      	ldrh	r0, [r3, #0]
 801043e:	4001      	ands	r1, r0
 8010440:	8019      	strh	r1, [r3, #0]
        RegionNvmGroup1->ChannelsMaskRemaining[1] &= RegionNvmGroup2->ChannelsMask[1];
 8010442:	f8b2 1362 	ldrh.w	r1, [r2, #866]	; 0x362
 8010446:	8858      	ldrh	r0, [r3, #2]
 8010448:	4001      	ands	r1, r0
 801044a:	8059      	strh	r1, [r3, #2]
        RegionNvmGroup1->ChannelsMaskRemaining[2] &= RegionNvmGroup2->ChannelsMask[2];
 801044c:	f8b2 1364 	ldrh.w	r1, [r2, #868]	; 0x364
 8010450:	8898      	ldrh	r0, [r3, #4]
 8010452:	4001      	ands	r1, r0
 8010454:	8099      	strh	r1, [r3, #4]
        RegionNvmGroup1->ChannelsMaskRemaining[3] &= RegionNvmGroup2->ChannelsMask[3];
 8010456:	f8b2 1366 	ldrh.w	r1, [r2, #870]	; 0x366
 801045a:	88d8      	ldrh	r0, [r3, #6]
 801045c:	4001      	ands	r1, r0
 801045e:	80d9      	strh	r1, [r3, #6]
        RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8010460:	f8b2 1368 	ldrh.w	r1, [r2, #872]	; 0x368
 8010464:	8119      	strh	r1, [r3, #8]
        RegionNvmGroup1->ChannelsMaskRemaining[5] = RegionNvmGroup2->ChannelsMask[5];
 8010466:	f8b2 236a 	ldrh.w	r2, [r2, #874]	; 0x36a
 801046a:	815a      	strh	r2, [r3, #10]
 801046c:	e7b9      	b.n	80103e2 <RegionUS915LinkAdrReq+0x1ee>
 801046e:	bf00      	nop
 8010470:	20001050 	.word	0x20001050
 8010474:	2000104c 	.word	0x2000104c

08010478 <RegionUS915RxParamSetupReq>:

uint8_t RegionUS915RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 8010478:	b538      	push	{r3, r4, r5, lr}
 801047a:	4604      	mov	r4, r0
    uint8_t status = 0x07;
#if defined( REGION_US915 )

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency ) == false )
 801047c:	6840      	ldr	r0, [r0, #4]
 801047e:	f7ff fafb 	bl	800fa78 <VerifyRfFreq>
 8010482:	b310      	cbz	r0, 80104ca <RegionUS915RxParamSetupReq+0x52>
    uint8_t status = 0x07;
 8010484:	2507      	movs	r5, #7
    {
        status &= 0xFE; // Channel frequency KO
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, US915_RX_MIN_DATARATE, US915_RX_MAX_DATARATE ) == false )
 8010486:	220d      	movs	r2, #13
 8010488:	2108      	movs	r1, #8
 801048a:	f994 0000 	ldrsb.w	r0, [r4]
 801048e:	f7fd fc26 	bl	800dcde <RegionCommonValueInRange>
 8010492:	b908      	cbnz	r0, 8010498 <RegionUS915RxParamSetupReq+0x20>
    {
        status &= 0xFD; // Datarate KO
 8010494:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 8010498:	2207      	movs	r2, #7
 801049a:	2105      	movs	r1, #5
 801049c:	f994 0000 	ldrsb.w	r0, [r4]
 80104a0:	f7fd fc1d 	bl	800dcde <RegionCommonValueInRange>
 80104a4:	2801      	cmp	r0, #1
 80104a6:	d003      	beq.n	80104b0 <RegionUS915RxParamSetupReq+0x38>
        ( rxParamSetupReq->Datarate > DR_13 ) )
 80104a8:	f994 3000 	ldrsb.w	r3, [r4]
    if( ( RegionCommonValueInRange( rxParamSetupReq->Datarate, DR_5, DR_7 ) == true ) ||
 80104ac:	2b0d      	cmp	r3, #13
 80104ae:	dd01      	ble.n	80104b4 <RegionUS915RxParamSetupReq+0x3c>
    {
        status &= 0xFD; // Datarate KO
 80104b0:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, US915_MIN_RX1_DR_OFFSET, US915_MAX_RX1_DR_OFFSET ) == false )
 80104b4:	2203      	movs	r2, #3
 80104b6:	2100      	movs	r1, #0
 80104b8:	f994 0001 	ldrsb.w	r0, [r4, #1]
 80104bc:	f7fd fc0f 	bl	800dcde <RegionCommonValueInRange>
 80104c0:	b908      	cbnz	r0, 80104c6 <RegionUS915RxParamSetupReq+0x4e>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 80104c2:	f005 05fb 	and.w	r5, r5, #251	; 0xfb
    }

#endif /* REGION_US915 */
    return status;
}
 80104c6:	4628      	mov	r0, r5
 80104c8:	bd38      	pop	{r3, r4, r5, pc}
        status &= 0xFE; // Channel frequency KO
 80104ca:	2506      	movs	r5, #6
 80104cc:	e7db      	b.n	8010486 <RegionUS915RxParamSetupReq+0xe>

080104ce <RegionUS915NewChannelReq>:

int8_t RegionUS915NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
    // Do not accept the request
    return -1;
}
 80104ce:	f04f 30ff 	mov.w	r0, #4294967295
 80104d2:	4770      	bx	lr

080104d4 <RegionUS915TxParamSetupReq>:

int8_t RegionUS915TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
    // Do not accept the request
    return -1;
}
 80104d4:	f04f 30ff 	mov.w	r0, #4294967295
 80104d8:	4770      	bx	lr

080104da <RegionUS915DlChannelReq>:

int8_t RegionUS915DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
    // Do not accept the request
    return -1;
}
 80104da:	f04f 30ff 	mov.w	r0, #4294967295
 80104de:	4770      	bx	lr

080104e0 <RegionUS915AlternateDr>:
int8_t RegionUS915AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
#if defined( REGION_US915 )
    // Alternates the data rate according to the channel sequence:
    // Eight times a 125kHz DR_0 and then one 500kHz DR_4 channel
    if( type == ALTERNATE_DR )
 80104e0:	b999      	cbnz	r1, 801050a <RegionUS915AlternateDr+0x2a>
    {
        RegionNvmGroup1->JoinTrialsCounter++;
 80104e2:	4b0e      	ldr	r3, [pc, #56]	; (801051c <RegionUS915AlternateDr+0x3c>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	7b53      	ldrb	r3, [r2, #13]
 80104e8:	3301      	adds	r3, #1
 80104ea:	7353      	strb	r3, [r2, #13]
    else
    {
        RegionNvmGroup1->JoinTrialsCounter--;
    }

    if( RegionNvmGroup1->JoinTrialsCounter % 9 == 0 )
 80104ec:	4b0b      	ldr	r3, [pc, #44]	; (801051c <RegionUS915AlternateDr+0x3c>)
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	7b5a      	ldrb	r2, [r3, #13]
 80104f2:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <RegionUS915AlternateDr+0x40>)
 80104f4:	fba3 1302 	umull	r1, r3, r3, r2
 80104f8:	085b      	lsrs	r3, r3, #1
 80104fa:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 80104fe:	1ad3      	subs	r3, r2, r3
 8010500:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010504:	d007      	beq.n	8010516 <RegionUS915AlternateDr+0x36>
        // Use DR_4 every 9th times.
        currentDr = DR_4;
    }
    else
    {
        currentDr = DR_0;
 8010506:	2000      	movs	r0, #0
    }
    return currentDr;
#else
    return -1;
#endif /* REGION_US915 */
}
 8010508:	4770      	bx	lr
        RegionNvmGroup1->JoinTrialsCounter--;
 801050a:	4b04      	ldr	r3, [pc, #16]	; (801051c <RegionUS915AlternateDr+0x3c>)
 801050c:	681a      	ldr	r2, [r3, #0]
 801050e:	7b53      	ldrb	r3, [r2, #13]
 8010510:	3b01      	subs	r3, #1
 8010512:	7353      	strb	r3, [r2, #13]
 8010514:	e7ea      	b.n	80104ec <RegionUS915AlternateDr+0xc>
        currentDr = DR_4;
 8010516:	2004      	movs	r0, #4
 8010518:	4770      	bx	lr
 801051a:	bf00      	nop
 801051c:	2000104c 	.word	0x2000104c
 8010520:	38e38e39 	.word	0x38e38e39

08010524 <RegionUS915NextChannel>:

LoRaMacStatus_t RegionUS915NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 8010524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010528:	b0a4      	sub	sp, #144	; 0x90
 801052a:	4604      	mov	r4, r0
 801052c:	460e      	mov	r6, r1
 801052e:	4690      	mov	r8, r2
 8010530:	461f      	mov	r7, r3
#if defined( REGION_US915 )
    uint8_t nbEnabledChannels = 0;
 8010532:	2500      	movs	r5, #0
 8010534:	f88d 508f 	strb.w	r5, [sp, #143]	; 0x8f
    uint8_t nbRestrictedChannels = 0;
 8010538:	f88d 508e 	strb.w	r5, [sp, #142]	; 0x8e
    uint8_t enabledChannels[US915_MAX_NB_CHANNELS] = { 0 };
 801053c:	9511      	str	r5, [sp, #68]	; 0x44
 801053e:	2244      	movs	r2, #68	; 0x44
 8010540:	4629      	mov	r1, r5
 8010542:	a812      	add	r0, sp, #72	; 0x48
 8010544:	f003 fc90 	bl	8013e68 <memset>
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;

    // Count 125kHz channels
    if( RegionCommonCountChannels( RegionNvmGroup1->ChannelsMaskRemaining, 0, 4 ) == 0 )
 8010548:	2204      	movs	r2, #4
 801054a:	4629      	mov	r1, r5
 801054c:	4b49      	ldr	r3, [pc, #292]	; (8010674 <RegionUS915NextChannel+0x150>)
 801054e:	6818      	ldr	r0, [r3, #0]
 8010550:	f7fd fc20 	bl	800dd94 <RegionCommonCountChannels>
 8010554:	2800      	cmp	r0, #0
 8010556:	d052      	beq.n	80105fe <RegionUS915NextChannel+0xda>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );

        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
    }
    // Check other channels
    if( nextChanParams->Datarate >= DR_4 )
 8010558:	f994 3008 	ldrsb.w	r3, [r4, #8]
 801055c:	2b03      	cmp	r3, #3
 801055e:	dd08      	ble.n	8010572 <RegionUS915NextChannel+0x4e>
    {
        if( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) == 0 )
 8010560:	4b44      	ldr	r3, [pc, #272]	; (8010674 <RegionUS915NextChannel+0x150>)
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	7a1a      	ldrb	r2, [r3, #8]
 8010566:	b922      	cbnz	r2, 8010572 <RegionUS915NextChannel+0x4e>
        {
            RegionNvmGroup1->ChannelsMaskRemaining[4] = RegionNvmGroup2->ChannelsMask[4];
 8010568:	4a43      	ldr	r2, [pc, #268]	; (8010678 <RegionUS915NextChannel+0x154>)
 801056a:	6812      	ldr	r2, [r2, #0]
 801056c:	f8b2 2368 	ldrh.w	r2, [r2, #872]	; 0x368
 8010570:	811a      	strh	r2, [r3, #8]
        }
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 8010572:	7a63      	ldrb	r3, [r4, #9]
 8010574:	f88d 300c 	strb.w	r3, [sp, #12]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8010578:	7a23      	ldrb	r3, [r4, #8]
 801057a:	f88d 300d 	strb.w	r3, [sp, #13]
    countChannelsParams.ChannelsMask = RegionNvmGroup1->ChannelsMaskRemaining;
 801057e:	4b3d      	ldr	r3, [pc, #244]	; (8010674 <RegionUS915NextChannel+0x150>)
 8010580:	681b      	ldr	r3, [r3, #0]
 8010582:	9304      	str	r3, [sp, #16]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8010584:	4b3c      	ldr	r3, [pc, #240]	; (8010678 <RegionUS915NextChannel+0x154>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	9305      	str	r3, [sp, #20]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801058a:	4b3c      	ldr	r3, [pc, #240]	; (801067c <RegionUS915NextChannel+0x158>)
 801058c:	681b      	ldr	r3, [r3, #0]
 801058e:	9306      	str	r3, [sp, #24]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = US915_MAX_NB_CHANNELS;
 8010590:	2348      	movs	r3, #72	; 0x48
 8010592:	f8ad 301c 	strh.w	r3, [sp, #28]
    countChannelsParams.JoinChannels = NULL;
 8010596:	2300      	movs	r3, #0
 8010598:	9308      	str	r3, [sp, #32]

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801059a:	6823      	ldr	r3, [r4, #0]
 801059c:	9309      	str	r3, [sp, #36]	; 0x24
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 801059e:	6863      	ldr	r3, [r4, #4]
 80105a0:	930a      	str	r3, [sp, #40]	; 0x28
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 80105a2:	7aa3      	ldrb	r3, [r4, #10]
 80105a4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    identifyChannelsParam.MaxBands = US915_MAX_NB_BANDS;
 80105a8:	2301      	movs	r3, #1
 80105aa:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 80105ae:	ab03      	add	r3, sp, #12
 80105b0:	9310      	str	r3, [sp, #64]	; 0x40

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 80105b2:	ab0c      	add	r3, sp, #48	; 0x30
 80105b4:	f104 020c 	add.w	r2, r4, #12
 80105b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80105bc:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 80105c0:	7d23      	ldrb	r3, [r4, #20]
 80105c2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 80105c6:	8ae1      	ldrh	r1, [r4, #22]
 80105c8:	f994 0008 	ldrsb.w	r0, [r4, #8]
 80105cc:	f7ff fa84 	bl	800fad8 <GetTimeOnAir>
 80105d0:	900f      	str	r0, [sp, #60]	; 0x3c
#endif /* REGION_VERSION */

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 80105d2:	f8cd 8004 	str.w	r8, [sp, #4]
 80105d6:	f10d 038e 	add.w	r3, sp, #142	; 0x8e
 80105da:	9300      	str	r3, [sp, #0]
 80105dc:	f10d 038f 	add.w	r3, sp, #143	; 0x8f
 80105e0:	aa11      	add	r2, sp, #68	; 0x44
 80105e2:	4639      	mov	r1, r7
 80105e4:	a809      	add	r0, sp, #36	; 0x24
 80105e6:	f7fd fdd7 	bl	800e198 <RegionCommonIdentifyChannels>
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80105ea:	4605      	mov	r5, r0
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d13c      	bne.n	801066a <RegionUS915NextChannel+0x146>
    {
        if( nextChanParams->Joined == true )
 80105f0:	7a63      	ldrb	r3, [r4, #9]
 80105f2:	b98b      	cbnz	r3, 8010618 <RegionUS915NextChannel+0xf4>
            // follow a random channel selection sequence. It probes alternating one out of a
            // group of eight 125 kHz channels followed by probing one 500 kHz channel each pass.
            // Each time a 125 kHz channel will be selected from another group.

            // 125kHz Channels (0 - 63) DR0
            if( nextChanParams->Datarate == DR_0 )
 80105f4:	f994 3008 	ldrsb.w	r3, [r4, #8]
 80105f8:	b1db      	cbz	r3, 8010632 <RegionUS915NextChannel+0x10e>
            }
            // 500kHz Channels (64 - 71) DR4
            else
            {
                // Choose the next available channel
                uint8_t i = 0;
 80105fa:	4603      	mov	r3, r0
 80105fc:	e026      	b.n	801064c <RegionUS915NextChannel+0x128>
        RegionCommonChanMaskCopy( RegionNvmGroup1->ChannelsMaskRemaining, RegionNvmGroup2->ChannelsMask, 4  );
 80105fe:	4d1d      	ldr	r5, [pc, #116]	; (8010674 <RegionUS915NextChannel+0x150>)
 8010600:	4b1d      	ldr	r3, [pc, #116]	; (8010678 <RegionUS915NextChannel+0x154>)
 8010602:	6819      	ldr	r1, [r3, #0]
 8010604:	2204      	movs	r2, #4
 8010606:	f501 7158 	add.w	r1, r1, #864	; 0x360
 801060a:	6828      	ldr	r0, [r5, #0]
 801060c:	f7fd fbd8 	bl	800ddc0 <RegionCommonChanMaskCopy>
        RegionNvmGroup1->JoinChannelGroupsCurrentIndex = 0;
 8010610:	682b      	ldr	r3, [r5, #0]
 8010612:	2200      	movs	r2, #0
 8010614:	731a      	strb	r2, [r3, #12]
 8010616:	e79f      	b.n	8010558 <RegionUS915NextChannel+0x34>
            *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 8010618:	f89d 108f 	ldrb.w	r1, [sp, #143]	; 0x8f
 801061c:	3901      	subs	r1, #1
 801061e:	f000 ff5f 	bl	80114e0 <randr>
 8010622:	f100 0390 	add.w	r3, r0, #144	; 0x90
 8010626:	eb0d 0003 	add.w	r0, sp, r3
 801062a:	f810 3c4c 	ldrb.w	r3, [r0, #-76]
 801062e:	7033      	strb	r3, [r6, #0]
 8010630:	e015      	b.n	801065e <RegionUS915NextChannel+0x13a>
                if( RegionBaseUSComputeNext125kHzJoinChannel( ( uint16_t* ) RegionNvmGroup1->ChannelsMaskRemaining,
 8010632:	4b10      	ldr	r3, [pc, #64]	; (8010674 <RegionUS915NextChannel+0x150>)
 8010634:	6818      	ldr	r0, [r3, #0]
 8010636:	4632      	mov	r2, r6
 8010638:	f100 010c 	add.w	r1, r0, #12
 801063c:	f7fd fa32 	bl	800daa4 <RegionBaseUSComputeNext125kHzJoinChannel>
 8010640:	2803      	cmp	r0, #3
 8010642:	d10c      	bne.n	801065e <RegionUS915NextChannel+0x13a>
                    return LORAMAC_STATUS_PARAMETER_INVALID;
 8010644:	4605      	mov	r5, r0
 8010646:	e010      	b.n	801066a <RegionUS915NextChannel+0x146>
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
                {
                    i++;
 8010648:	3301      	adds	r3, #1
 801064a:	b2db      	uxtb	r3, r3
                while( ( ( RegionNvmGroup1->ChannelsMaskRemaining[4] & CHANNELS_MASK_500KHZ_MASK ) & ( 1 << i ) ) == 0 )
 801064c:	4a09      	ldr	r2, [pc, #36]	; (8010674 <RegionUS915NextChannel+0x150>)
 801064e:	6812      	ldr	r2, [r2, #0]
 8010650:	7a10      	ldrb	r0, [r2, #8]
 8010652:	4118      	asrs	r0, r3
 8010654:	f010 0f01 	tst.w	r0, #1
 8010658:	d0f6      	beq.n	8010648 <RegionUS915NextChannel+0x124>
                }
                *channel = 64 + i;
 801065a:	3340      	adds	r3, #64	; 0x40
 801065c:	7033      	strb	r3, [r6, #0]
            }
        }

        // Disable the channel in the mask
        RegionCommonChanDisable( RegionNvmGroup1->ChannelsMaskRemaining, *channel, US915_MAX_NB_CHANNELS );
 801065e:	2248      	movs	r2, #72	; 0x48
 8010660:	7831      	ldrb	r1, [r6, #0]
 8010662:	4b04      	ldr	r3, [pc, #16]	; (8010674 <RegionUS915NextChannel+0x150>)
 8010664:	6818      	ldr	r0, [r3, #0]
 8010666:	f7fd fb7c 	bl	800dd62 <RegionCommonChanDisable>
    }
    return status;
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_US915 */
}
 801066a:	4628      	mov	r0, r5
 801066c:	b024      	add	sp, #144	; 0x90
 801066e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010672:	bf00      	nop
 8010674:	2000104c 	.word	0x2000104c
 8010678:	20001050 	.word	0x20001050
 801067c:	20001048 	.word	0x20001048

08010680 <RegionUS915ApplyDrOffset>:
#endif /* REGION_VERSION */

uint8_t RegionUS915ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
#if defined( REGION_US915 )
    int8_t datarate = DatarateOffsetsUS915[dr][drOffset];
 8010680:	4b04      	ldr	r3, [pc, #16]	; (8010694 <RegionUS915ApplyDrOffset+0x14>)
 8010682:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8010686:	5698      	ldrsb	r0, [r3, r2]

    if( datarate < 0 )
 8010688:	2800      	cmp	r0, #0
 801068a:	db01      	blt.n	8010690 <RegionUS915ApplyDrOffset+0x10>
    }
    return datarate;
#else
    return 0;
#endif /* REGION_US915 */
}
 801068c:	b2c0      	uxtb	r0, r0
 801068e:	4770      	bx	lr
        datarate = DR_0;
 8010690:	2000      	movs	r0, #0
 8010692:	e7fb      	b.n	801068c <RegionUS915ApplyDrOffset+0xc>
 8010694:	080147ac 	.word	0x080147ac

08010698 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 8010698:	b510      	push	{r4, lr}
 801069a:	4604      	mov	r4, r0
    memset1( ctx->X, 0, sizeof ctx->X );
 801069c:	2210      	movs	r2, #16
 801069e:	2100      	movs	r1, #0
 80106a0:	30f1      	adds	r0, #241	; 0xf1
 80106a2:	f000 ff42 	bl	801152a <memset1>
    ctx->M_n = 0;
 80106a6:	2100      	movs	r1, #0
 80106a8:	f8c4 1114 	str.w	r1, [r4, #276]	; 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 80106ac:	22f0      	movs	r2, #240	; 0xf0
 80106ae:	4620      	mov	r0, r4
 80106b0:	f000 ff3b 	bl	801152a <memset1>
}
 80106b4:	bd10      	pop	{r4, pc}

080106b6 <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 80106b6:	b508      	push	{r3, lr}
 80106b8:	4602      	mov	r2, r0
 80106ba:	4608      	mov	r0, r1
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 80106bc:	2110      	movs	r1, #16
 80106be:	f000 fb3b 	bl	8010d38 <lorawan_aes_set_key>
}
 80106c2:	bd08      	pop	{r3, pc}

080106c4 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 80106c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80106c8:	b084      	sub	sp, #16
 80106ca:	4604      	mov	r4, r0
 80106cc:	460d      	mov	r5, r1
 80106ce:	4616      	mov	r6, r2
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 80106d0:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d054      	beq.n	8010782 <AES_CMAC_Update+0xbe>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 80106d8:	f1c3 0810 	rsb	r8, r3, #16
 80106dc:	4647      	mov	r7, r8
 80106de:	4590      	cmp	r8, r2
 80106e0:	bf28      	it	cs
 80106e2:	4617      	movcs	r7, r2
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 80106e4:	f200 1001 	addw	r0, r0, #257	; 0x101
 80106e8:	b2ba      	uxth	r2, r7
 80106ea:	4418      	add	r0, r3
 80106ec:	f000 ff05 	bl	80114fa <memcpy1>
        ctx->M_n += mlen;
 80106f0:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80106f4:	443b      	add	r3, r7
 80106f6:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
        if( ctx->M_n < 16 || len == mlen )
 80106fa:	2b0f      	cmp	r3, #15
 80106fc:	d94d      	bls.n	801079a <AES_CMAC_Update+0xd6>
 80106fe:	45b0      	cmp	r8, r6
 8010700:	d24b      	bcs.n	801079a <AES_CMAC_Update+0xd6>
            return;
        XOR( ctx->M_last, ctx->X );
 8010702:	2300      	movs	r3, #0
 8010704:	e008      	b.n	8010718 <AES_CMAC_Update+0x54>
 8010706:	18e2      	adds	r2, r4, r3
 8010708:	f892 10f1 	ldrb.w	r1, [r2, #241]	; 0xf1
 801070c:	f892 0101 	ldrb.w	r0, [r2, #257]	; 0x101
 8010710:	4041      	eors	r1, r0
 8010712:	f882 10f1 	strb.w	r1, [r2, #241]	; 0xf1
 8010716:	3301      	adds	r3, #1
 8010718:	2b0f      	cmp	r3, #15
 801071a:	ddf4      	ble.n	8010706 <AES_CMAC_Update+0x42>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801071c:	f104 08f1 	add.w	r8, r4, #241	; 0xf1
 8010720:	2210      	movs	r2, #16
 8010722:	4641      	mov	r1, r8
 8010724:	4668      	mov	r0, sp
 8010726:	f000 fee8 	bl	80114fa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801072a:	4622      	mov	r2, r4
 801072c:	4669      	mov	r1, sp
 801072e:	4668      	mov	r0, sp
 8010730:	f000 fb84 	bl	8010e3c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010734:	2210      	movs	r2, #16
 8010736:	4669      	mov	r1, sp
 8010738:	4640      	mov	r0, r8
 801073a:	f000 fede 	bl	80114fa <memcpy1>

        data += mlen;
 801073e:	443d      	add	r5, r7
        len -= mlen;
 8010740:	1bf6      	subs	r6, r6, r7
 8010742:	e01e      	b.n	8010782 <AES_CMAC_Update+0xbe>
    }
    while( len > 16 )
    { /* not last block */

        XOR( data, ctx->X );
 8010744:	eb04 0e03 	add.w	lr, r4, r3
 8010748:	f89e c0f1 	ldrb.w	ip, [lr, #241]	; 0xf1
 801074c:	5cea      	ldrb	r2, [r5, r3]
 801074e:	ea8c 0c02 	eor.w	ip, ip, r2
 8010752:	f88e c0f1 	strb.w	ip, [lr, #241]	; 0xf1
 8010756:	3301      	adds	r3, #1
 8010758:	2b0f      	cmp	r3, #15
 801075a:	ddf3      	ble.n	8010744 <AES_CMAC_Update+0x80>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801075c:	f104 07f1 	add.w	r7, r4, #241	; 0xf1
 8010760:	2210      	movs	r2, #16
 8010762:	4639      	mov	r1, r7
 8010764:	4668      	mov	r0, sp
 8010766:	f000 fec8 	bl	80114fa <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 801076a:	4622      	mov	r2, r4
 801076c:	4669      	mov	r1, sp
 801076e:	4668      	mov	r0, sp
 8010770:	f000 fb64 	bl	8010e3c <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 8010774:	2210      	movs	r2, #16
 8010776:	4669      	mov	r1, sp
 8010778:	4638      	mov	r0, r7
 801077a:	f000 febe 	bl	80114fa <memcpy1>

        data += 16;
 801077e:	3510      	adds	r5, #16
        len -= 16;
 8010780:	3e10      	subs	r6, #16
    while( len > 16 )
 8010782:	2e10      	cmp	r6, #16
 8010784:	d901      	bls.n	801078a <AES_CMAC_Update+0xc6>
        XOR( data, ctx->X );
 8010786:	2300      	movs	r3, #0
 8010788:	e7e6      	b.n	8010758 <AES_CMAC_Update+0x94>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 801078a:	b2b2      	uxth	r2, r6
 801078c:	4629      	mov	r1, r5
 801078e:	f204 1001 	addw	r0, r4, #257	; 0x101
 8010792:	f000 feb2 	bl	80114fa <memcpy1>
    ctx->M_n = len;
 8010796:	f8c4 6114 	str.w	r6, [r4, #276]	; 0x114
}
 801079a:	b004      	add	sp, #16
 801079c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080107a0 <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 80107a0:	b530      	push	{r4, r5, lr}
 80107a2:	b089      	sub	sp, #36	; 0x24
 80107a4:	4605      	mov	r5, r0
 80107a6:	460c      	mov	r4, r1
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 80107a8:	2210      	movs	r2, #16
 80107aa:	2100      	movs	r1, #0
 80107ac:	eb0d 0002 	add.w	r0, sp, r2
 80107b0:	f000 febb 	bl	801152a <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 80107b4:	4622      	mov	r2, r4
 80107b6:	a904      	add	r1, sp, #16
 80107b8:	4608      	mov	r0, r1
 80107ba:	f000 fb3f 	bl	8010e3c <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 80107be:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 80107c2:	2b00      	cmp	r3, #0
 80107c4:	db01      	blt.n	80107ca <AES_CMAC_Final+0x2a>
    {
        LSHIFT( K, K );
        K[15] ^= 0x87;
    }
    else
        LSHIFT( K, K );
 80107c6:	2300      	movs	r3, #0
 80107c8:	e030      	b.n	801082c <AES_CMAC_Final+0x8c>
        LSHIFT( K, K );
 80107ca:	2300      	movs	r3, #0
 80107cc:	2b0e      	cmp	r3, #14
 80107ce:	dc11      	bgt.n	80107f4 <AES_CMAC_Final+0x54>
 80107d0:	f103 0220 	add.w	r2, r3, #32
 80107d4:	eb0d 0102 	add.w	r1, sp, r2
 80107d8:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 80107dc:	3301      	adds	r3, #1
 80107de:	f103 0220 	add.w	r2, r3, #32
 80107e2:	446a      	add	r2, sp
 80107e4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80107e8:	09d2      	lsrs	r2, r2, #7
 80107ea:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 80107ee:	f801 2c10 	strb.w	r2, [r1, #-16]
 80107f2:	e7eb      	b.n	80107cc <AES_CMAC_Final+0x2c>
 80107f4:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80107f8:	005b      	lsls	r3, r3, #1
 80107fa:	b2db      	uxtb	r3, r3
 80107fc:	f88d 301f 	strb.w	r3, [sp, #31]
        K[15] ^= 0x87;
 8010800:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 8010804:	f88d 301f 	strb.w	r3, [sp, #31]
 8010808:	e017      	b.n	801083a <AES_CMAC_Final+0x9a>
        LSHIFT( K, K );
 801080a:	f103 0220 	add.w	r2, r3, #32
 801080e:	eb0d 0102 	add.w	r1, sp, r2
 8010812:	f811 0c10 	ldrb.w	r0, [r1, #-16]
 8010816:	3301      	adds	r3, #1
 8010818:	f103 0220 	add.w	r2, r3, #32
 801081c:	446a      	add	r2, sp
 801081e:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010822:	09d2      	lsrs	r2, r2, #7
 8010824:	ea42 0240 	orr.w	r2, r2, r0, lsl #1
 8010828:	f801 2c10 	strb.w	r2, [r1, #-16]
 801082c:	2b0e      	cmp	r3, #14
 801082e:	ddec      	ble.n	801080a <AES_CMAC_Final+0x6a>
 8010830:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8010834:	005b      	lsls	r3, r3, #1
 8010836:	f88d 301f 	strb.w	r3, [sp, #31]

    if( ctx->M_n == 16 )
 801083a:	f8d4 0114 	ldr.w	r0, [r4, #276]	; 0x114
 801083e:	2810      	cmp	r0, #16
 8010840:	d014      	beq.n	801086c <AES_CMAC_Final+0xcc>
        XOR( K, ctx->M_last );
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 8010842:	f99d 3010 	ldrsb.w	r3, [sp, #16]
 8010846:	2b00      	cmp	r3, #0
 8010848:	db30      	blt.n	80108ac <AES_CMAC_Final+0x10c>
        {
            LSHIFT( K, K );
            K[15] ^= 0x87;
        }
        else
            LSHIFT( K, K );
 801084a:	2300      	movs	r3, #0
 801084c:	e041      	b.n	80108d2 <AES_CMAC_Final+0x132>
        XOR( K, ctx->M_last );
 801084e:	18e1      	adds	r1, r4, r3
 8010850:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 8010854:	f103 0020 	add.w	r0, r3, #32
 8010858:	4468      	add	r0, sp
 801085a:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 801085e:	4042      	eors	r2, r0
 8010860:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 8010864:	3301      	adds	r3, #1
 8010866:	2b0f      	cmp	r3, #15
 8010868:	ddf1      	ble.n	801084e <AES_CMAC_Final+0xae>
 801086a:	e059      	b.n	8010920 <AES_CMAC_Final+0x180>
 801086c:	2300      	movs	r3, #0
 801086e:	e7fa      	b.n	8010866 <AES_CMAC_Final+0xc6>
            LSHIFT( K, K );
 8010870:	f103 0220 	add.w	r2, r3, #32
 8010874:	eb0d 0102 	add.w	r1, sp, r2
 8010878:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 801087c:	3301      	adds	r3, #1
 801087e:	f103 0220 	add.w	r2, r3, #32
 8010882:	446a      	add	r2, sp
 8010884:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 8010888:	09d2      	lsrs	r2, r2, #7
 801088a:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 801088e:	f801 2c10 	strb.w	r2, [r1, #-16]
 8010892:	2b0e      	cmp	r3, #14
 8010894:	ddec      	ble.n	8010870 <AES_CMAC_Final+0xd0>
 8010896:	f89d 301f 	ldrb.w	r3, [sp, #31]
 801089a:	005b      	lsls	r3, r3, #1
 801089c:	b2db      	uxtb	r3, r3
 801089e:	f88d 301f 	strb.w	r3, [sp, #31]
            K[15] ^= 0x87;
 80108a2:	f083 0387 	eor.w	r3, r3, #135	; 0x87
 80108a6:	f88d 301f 	strb.w	r3, [sp, #31]
 80108aa:	e019      	b.n	80108e0 <AES_CMAC_Final+0x140>
            LSHIFT( K, K );
 80108ac:	2300      	movs	r3, #0
 80108ae:	e7f0      	b.n	8010892 <AES_CMAC_Final+0xf2>
            LSHIFT( K, K );
 80108b0:	f103 0220 	add.w	r2, r3, #32
 80108b4:	eb0d 0102 	add.w	r1, sp, r2
 80108b8:	f811 cc10 	ldrb.w	ip, [r1, #-16]
 80108bc:	3301      	adds	r3, #1
 80108be:	f103 0220 	add.w	r2, r3, #32
 80108c2:	446a      	add	r2, sp
 80108c4:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80108c8:	09d2      	lsrs	r2, r2, #7
 80108ca:	ea42 024c 	orr.w	r2, r2, ip, lsl #1
 80108ce:	f801 2c10 	strb.w	r2, [r1, #-16]
 80108d2:	2b0e      	cmp	r3, #14
 80108d4:	ddec      	ble.n	80108b0 <AES_CMAC_Final+0x110>
 80108d6:	f89d 301f 	ldrb.w	r3, [sp, #31]
 80108da:	005b      	lsls	r3, r3, #1
 80108dc:	f88d 301f 	strb.w	r3, [sp, #31]

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 80108e0:	4420      	add	r0, r4
 80108e2:	2380      	movs	r3, #128	; 0x80
 80108e4:	f880 3101 	strb.w	r3, [r0, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80108e8:	e003      	b.n	80108f2 <AES_CMAC_Final+0x152>
            ctx->M_last[ctx->M_n] = 0;
 80108ea:	4423      	add	r3, r4
 80108ec:	2200      	movs	r2, #0
 80108ee:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
        while( ++ctx->M_n < 16 )
 80108f2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
 80108f6:	3301      	adds	r3, #1
 80108f8:	f8c4 3114 	str.w	r3, [r4, #276]	; 0x114
 80108fc:	2b0f      	cmp	r3, #15
 80108fe:	d9f4      	bls.n	80108ea <AES_CMAC_Final+0x14a>

        XOR( K, ctx->M_last );
 8010900:	2300      	movs	r3, #0
 8010902:	e00b      	b.n	801091c <AES_CMAC_Final+0x17c>
 8010904:	18e1      	adds	r1, r4, r3
 8010906:	f891 2101 	ldrb.w	r2, [r1, #257]	; 0x101
 801090a:	f103 0020 	add.w	r0, r3, #32
 801090e:	4468      	add	r0, sp
 8010910:	f810 0c10 	ldrb.w	r0, [r0, #-16]
 8010914:	4042      	eors	r2, r0
 8010916:	f881 2101 	strb.w	r2, [r1, #257]	; 0x101
 801091a:	3301      	adds	r3, #1
 801091c:	2b0f      	cmp	r3, #15
 801091e:	ddf1      	ble.n	8010904 <AES_CMAC_Final+0x164>
 8010920:	2300      	movs	r3, #0
 8010922:	e009      	b.n	8010938 <AES_CMAC_Final+0x198>
    }
    XOR( ctx->M_last, ctx->X );
 8010924:	18e2      	adds	r2, r4, r3
 8010926:	f892 c0f1 	ldrb.w	ip, [r2, #241]	; 0xf1
 801092a:	f892 1101 	ldrb.w	r1, [r2, #257]	; 0x101
 801092e:	ea8c 0c01 	eor.w	ip, ip, r1
 8010932:	f882 c0f1 	strb.w	ip, [r2, #241]	; 0xf1
 8010936:	3301      	adds	r3, #1
 8010938:	2b0f      	cmp	r3, #15
 801093a:	ddf3      	ble.n	8010924 <AES_CMAC_Final+0x184>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 801093c:	2210      	movs	r2, #16
 801093e:	f104 01f1 	add.w	r1, r4, #241	; 0xf1
 8010942:	4668      	mov	r0, sp
 8010944:	f000 fdd9 	bl	80114fa <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 8010948:	4622      	mov	r2, r4
 801094a:	4629      	mov	r1, r5
 801094c:	4668      	mov	r0, sp
 801094e:	f000 fa75 	bl	8010e3c <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 8010952:	2210      	movs	r2, #16
 8010954:	2100      	movs	r1, #0
 8010956:	eb0d 0002 	add.w	r0, sp, r2
 801095a:	f000 fde6 	bl	801152a <memset1>
}
 801095e:	b009      	add	sp, #36	; 0x24
 8010960:	bd30      	pop	{r4, r5, pc}

08010962 <copy_block>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 8010962:	780b      	ldrb	r3, [r1, #0]
 8010964:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 8010966:	784b      	ldrb	r3, [r1, #1]
 8010968:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 801096a:	788b      	ldrb	r3, [r1, #2]
 801096c:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 801096e:	78cb      	ldrb	r3, [r1, #3]
 8010970:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 8010972:	790b      	ldrb	r3, [r1, #4]
 8010974:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 8010976:	794b      	ldrb	r3, [r1, #5]
 8010978:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 801097a:	798b      	ldrb	r3, [r1, #6]
 801097c:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 801097e:	79cb      	ldrb	r3, [r1, #7]
 8010980:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 8010982:	7a0b      	ldrb	r3, [r1, #8]
 8010984:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 8010986:	7a4b      	ldrb	r3, [r1, #9]
 8010988:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 801098a:	7a8b      	ldrb	r3, [r1, #10]
 801098c:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 801098e:	7acb      	ldrb	r3, [r1, #11]
 8010990:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 8010992:	7b0b      	ldrb	r3, [r1, #12]
 8010994:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 8010996:	7b4b      	ldrb	r3, [r1, #13]
 8010998:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 801099a:	7b8b      	ldrb	r3, [r1, #14]
 801099c:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 801099e:	7bcb      	ldrb	r3, [r1, #15]
 80109a0:	73c3      	strb	r3, [r0, #15]
#endif
}
 80109a2:	4770      	bx	lr

080109a4 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
    while( nn-- )
 80109a4:	e004      	b.n	80109b0 <copy_block_nn+0xc>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 80109a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80109aa:	f800 2b01 	strb.w	r2, [r0], #1
    while( nn-- )
 80109ae:	461a      	mov	r2, r3
 80109b0:	1e53      	subs	r3, r2, #1
 80109b2:	b2db      	uxtb	r3, r3
 80109b4:	2a00      	cmp	r2, #0
 80109b6:	d1f6      	bne.n	80109a6 <copy_block_nn+0x2>
}
 80109b8:	4770      	bx	lr

080109ba <xor_block>:
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 80109ba:	780b      	ldrb	r3, [r1, #0]
 80109bc:	7802      	ldrb	r2, [r0, #0]
 80109be:	4053      	eors	r3, r2
 80109c0:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 80109c2:	784b      	ldrb	r3, [r1, #1]
 80109c4:	7842      	ldrb	r2, [r0, #1]
 80109c6:	4053      	eors	r3, r2
 80109c8:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 80109ca:	788b      	ldrb	r3, [r1, #2]
 80109cc:	7882      	ldrb	r2, [r0, #2]
 80109ce:	4053      	eors	r3, r2
 80109d0:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 80109d2:	78cb      	ldrb	r3, [r1, #3]
 80109d4:	78c2      	ldrb	r2, [r0, #3]
 80109d6:	4053      	eors	r3, r2
 80109d8:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 80109da:	790b      	ldrb	r3, [r1, #4]
 80109dc:	7902      	ldrb	r2, [r0, #4]
 80109de:	4053      	eors	r3, r2
 80109e0:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 80109e2:	794b      	ldrb	r3, [r1, #5]
 80109e4:	7942      	ldrb	r2, [r0, #5]
 80109e6:	4053      	eors	r3, r2
 80109e8:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 80109ea:	798b      	ldrb	r3, [r1, #6]
 80109ec:	7982      	ldrb	r2, [r0, #6]
 80109ee:	4053      	eors	r3, r2
 80109f0:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 80109f2:	79cb      	ldrb	r3, [r1, #7]
 80109f4:	79c2      	ldrb	r2, [r0, #7]
 80109f6:	4053      	eors	r3, r2
 80109f8:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 80109fa:	7a0b      	ldrb	r3, [r1, #8]
 80109fc:	7a02      	ldrb	r2, [r0, #8]
 80109fe:	4053      	eors	r3, r2
 8010a00:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 8010a02:	7a4b      	ldrb	r3, [r1, #9]
 8010a04:	7a42      	ldrb	r2, [r0, #9]
 8010a06:	4053      	eors	r3, r2
 8010a08:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 8010a0a:	7a8b      	ldrb	r3, [r1, #10]
 8010a0c:	7a82      	ldrb	r2, [r0, #10]
 8010a0e:	4053      	eors	r3, r2
 8010a10:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 8010a12:	7acb      	ldrb	r3, [r1, #11]
 8010a14:	7ac2      	ldrb	r2, [r0, #11]
 8010a16:	4053      	eors	r3, r2
 8010a18:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 8010a1a:	7b0b      	ldrb	r3, [r1, #12]
 8010a1c:	7b02      	ldrb	r2, [r0, #12]
 8010a1e:	4053      	eors	r3, r2
 8010a20:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 8010a22:	7b4b      	ldrb	r3, [r1, #13]
 8010a24:	7b42      	ldrb	r2, [r0, #13]
 8010a26:	4053      	eors	r3, r2
 8010a28:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 8010a2a:	7b8b      	ldrb	r3, [r1, #14]
 8010a2c:	7b82      	ldrb	r2, [r0, #14]
 8010a2e:	4053      	eors	r3, r2
 8010a30:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 8010a32:	7bcb      	ldrb	r3, [r1, #15]
 8010a34:	7bc2      	ldrb	r2, [r0, #15]
 8010a36:	4053      	eors	r3, r2
 8010a38:	73c3      	strb	r3, [r0, #15]
#endif
}
 8010a3a:	4770      	bx	lr

08010a3c <copy_and_key>:
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 8010a3c:	780b      	ldrb	r3, [r1, #0]
 8010a3e:	f892 c000 	ldrb.w	ip, [r2]
 8010a42:	ea83 030c 	eor.w	r3, r3, ip
 8010a46:	7003      	strb	r3, [r0, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 8010a48:	784b      	ldrb	r3, [r1, #1]
 8010a4a:	f892 c001 	ldrb.w	ip, [r2, #1]
 8010a4e:	ea83 030c 	eor.w	r3, r3, ip
 8010a52:	7043      	strb	r3, [r0, #1]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 8010a54:	788b      	ldrb	r3, [r1, #2]
 8010a56:	f892 c002 	ldrb.w	ip, [r2, #2]
 8010a5a:	ea83 030c 	eor.w	r3, r3, ip
 8010a5e:	7083      	strb	r3, [r0, #2]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 8010a60:	78cb      	ldrb	r3, [r1, #3]
 8010a62:	f892 c003 	ldrb.w	ip, [r2, #3]
 8010a66:	ea83 030c 	eor.w	r3, r3, ip
 8010a6a:	70c3      	strb	r3, [r0, #3]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 8010a6c:	790b      	ldrb	r3, [r1, #4]
 8010a6e:	f892 c004 	ldrb.w	ip, [r2, #4]
 8010a72:	ea83 030c 	eor.w	r3, r3, ip
 8010a76:	7103      	strb	r3, [r0, #4]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 8010a78:	794b      	ldrb	r3, [r1, #5]
 8010a7a:	f892 c005 	ldrb.w	ip, [r2, #5]
 8010a7e:	ea83 030c 	eor.w	r3, r3, ip
 8010a82:	7143      	strb	r3, [r0, #5]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 8010a84:	798b      	ldrb	r3, [r1, #6]
 8010a86:	f892 c006 	ldrb.w	ip, [r2, #6]
 8010a8a:	ea83 030c 	eor.w	r3, r3, ip
 8010a8e:	7183      	strb	r3, [r0, #6]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 8010a90:	79cb      	ldrb	r3, [r1, #7]
 8010a92:	f892 c007 	ldrb.w	ip, [r2, #7]
 8010a96:	ea83 030c 	eor.w	r3, r3, ip
 8010a9a:	71c3      	strb	r3, [r0, #7]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 8010a9c:	7a0b      	ldrb	r3, [r1, #8]
 8010a9e:	f892 c008 	ldrb.w	ip, [r2, #8]
 8010aa2:	ea83 030c 	eor.w	r3, r3, ip
 8010aa6:	7203      	strb	r3, [r0, #8]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 8010aa8:	7a4b      	ldrb	r3, [r1, #9]
 8010aaa:	f892 c009 	ldrb.w	ip, [r2, #9]
 8010aae:	ea83 030c 	eor.w	r3, r3, ip
 8010ab2:	7243      	strb	r3, [r0, #9]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 8010ab4:	7a8b      	ldrb	r3, [r1, #10]
 8010ab6:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8010aba:	ea83 030c 	eor.w	r3, r3, ip
 8010abe:	7283      	strb	r3, [r0, #10]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 8010ac0:	7acb      	ldrb	r3, [r1, #11]
 8010ac2:	f892 c00b 	ldrb.w	ip, [r2, #11]
 8010ac6:	ea83 030c 	eor.w	r3, r3, ip
 8010aca:	72c3      	strb	r3, [r0, #11]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 8010acc:	7b0b      	ldrb	r3, [r1, #12]
 8010ace:	f892 c00c 	ldrb.w	ip, [r2, #12]
 8010ad2:	ea83 030c 	eor.w	r3, r3, ip
 8010ad6:	7303      	strb	r3, [r0, #12]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 8010ad8:	7b4b      	ldrb	r3, [r1, #13]
 8010ada:	f892 c00d 	ldrb.w	ip, [r2, #13]
 8010ade:	ea83 030c 	eor.w	r3, r3, ip
 8010ae2:	7343      	strb	r3, [r0, #13]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 8010ae4:	7b8b      	ldrb	r3, [r1, #14]
 8010ae6:	f892 c00e 	ldrb.w	ip, [r2, #14]
 8010aea:	ea83 030c 	eor.w	r3, r3, ip
 8010aee:	7383      	strb	r3, [r0, #14]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 8010af0:	7bcb      	ldrb	r3, [r1, #15]
 8010af2:	7bd2      	ldrb	r2, [r2, #15]
 8010af4:	4053      	eors	r3, r2
 8010af6:	73c3      	strb	r3, [r0, #15]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 8010af8:	4770      	bx	lr

08010afa <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 8010afa:	b508      	push	{r3, lr}
    xor_block(d, k);
 8010afc:	f7ff ff5d 	bl	80109ba <xor_block>
}
 8010b00:	bd08      	pop	{r3, pc}
	...

08010b04 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 8010b04:	7802      	ldrb	r2, [r0, #0]
 8010b06:	4b18      	ldr	r3, [pc, #96]	; (8010b68 <shift_sub_rows+0x64>)
 8010b08:	5c9a      	ldrb	r2, [r3, r2]
 8010b0a:	7002      	strb	r2, [r0, #0]
 8010b0c:	7902      	ldrb	r2, [r0, #4]
 8010b0e:	5c9a      	ldrb	r2, [r3, r2]
 8010b10:	7102      	strb	r2, [r0, #4]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 8010b12:	7a02      	ldrb	r2, [r0, #8]
 8010b14:	5c9a      	ldrb	r2, [r3, r2]
 8010b16:	7202      	strb	r2, [r0, #8]
 8010b18:	7b02      	ldrb	r2, [r0, #12]
 8010b1a:	5c9a      	ldrb	r2, [r3, r2]
 8010b1c:	7302      	strb	r2, [r0, #12]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 8010b1e:	7842      	ldrb	r2, [r0, #1]
 8010b20:	7941      	ldrb	r1, [r0, #5]
 8010b22:	5c59      	ldrb	r1, [r3, r1]
 8010b24:	7041      	strb	r1, [r0, #1]
 8010b26:	7a41      	ldrb	r1, [r0, #9]
 8010b28:	5c59      	ldrb	r1, [r3, r1]
 8010b2a:	7141      	strb	r1, [r0, #5]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 8010b2c:	7b41      	ldrb	r1, [r0, #13]
 8010b2e:	5c59      	ldrb	r1, [r3, r1]
 8010b30:	7241      	strb	r1, [r0, #9]
 8010b32:	5c9a      	ldrb	r2, [r3, r2]
 8010b34:	7342      	strb	r2, [r0, #13]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 8010b36:	7882      	ldrb	r2, [r0, #2]
 8010b38:	7a81      	ldrb	r1, [r0, #10]
 8010b3a:	5c59      	ldrb	r1, [r3, r1]
 8010b3c:	7081      	strb	r1, [r0, #2]
 8010b3e:	5c9a      	ldrb	r2, [r3, r2]
 8010b40:	7282      	strb	r2, [r0, #10]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 8010b42:	7982      	ldrb	r2, [r0, #6]
 8010b44:	7b81      	ldrb	r1, [r0, #14]
 8010b46:	5c59      	ldrb	r1, [r3, r1]
 8010b48:	7181      	strb	r1, [r0, #6]
 8010b4a:	5c9a      	ldrb	r2, [r3, r2]
 8010b4c:	7382      	strb	r2, [r0, #14]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 8010b4e:	7bc2      	ldrb	r2, [r0, #15]
 8010b50:	7ac1      	ldrb	r1, [r0, #11]
 8010b52:	5c59      	ldrb	r1, [r3, r1]
 8010b54:	73c1      	strb	r1, [r0, #15]
 8010b56:	79c1      	ldrb	r1, [r0, #7]
 8010b58:	5c59      	ldrb	r1, [r3, r1]
 8010b5a:	72c1      	strb	r1, [r0, #11]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 8010b5c:	78c1      	ldrb	r1, [r0, #3]
 8010b5e:	5c59      	ldrb	r1, [r3, r1]
 8010b60:	71c1      	strb	r1, [r0, #7]
 8010b62:	5c9b      	ldrb	r3, [r3, r2]
 8010b64:	70c3      	strb	r3, [r0, #3]
}
 8010b66:	4770      	bx	lr
 8010b68:	080149f0 	.word	0x080149f0

08010b6c <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 8010b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b70:	b084      	sub	sp, #16
 8010b72:	4604      	mov	r4, r0
    block_copy(st, dt);
 8010b74:	4601      	mov	r1, r0
 8010b76:	4668      	mov	r0, sp
 8010b78:	f7ff fef3 	bl	8010962 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 8010b7c:	f89d c000 	ldrb.w	ip, [sp]
 8010b80:	4b6a      	ldr	r3, [pc, #424]	; (8010d2c <mix_sub_columns+0x1c0>)
 8010b82:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010b86:	f89d 8005 	ldrb.w	r8, [sp, #5]
 8010b8a:	4a69      	ldr	r2, [pc, #420]	; (8010d30 <mix_sub_columns+0x1c4>)
 8010b8c:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010b90:	f89d e00a 	ldrb.w	lr, [sp, #10]
 8010b94:	4967      	ldr	r1, [pc, #412]	; (8010d34 <mix_sub_columns+0x1c8>)
 8010b96:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010b9a:	f89d 700f 	ldrb.w	r7, [sp, #15]
 8010b9e:	5dce      	ldrb	r6, [r1, r7]
 8010ba0:	ea80 0009 	eor.w	r0, r0, r9
 8010ba4:	4068      	eors	r0, r5
 8010ba6:	4070      	eors	r0, r6
 8010ba8:	7020      	strb	r0, [r4, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 8010baa:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010bae:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010bb2:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010bb6:	ea80 0a0a 	eor.w	sl, r0, sl
 8010bba:	ea89 090a 	eor.w	r9, r9, sl
 8010bbe:	ea86 0609 	eor.w	r6, r6, r9
 8010bc2:	7066      	strb	r6, [r4, #1]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 8010bc4:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010bc8:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010bcc:	5dd6      	ldrb	r6, [r2, r7]
 8010bce:	ea80 0008 	eor.w	r0, r0, r8
 8010bd2:	ea8e 0000 	eor.w	r0, lr, r0
 8010bd6:	4070      	eors	r0, r6
 8010bd8:	70a0      	strb	r0, [r4, #2]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 8010bda:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010bde:	5dd8      	ldrb	r0, [r3, r7]
 8010be0:	ea86 0608 	eor.w	r6, r6, r8
 8010be4:	4075      	eors	r5, r6
 8010be6:	4045      	eors	r5, r0
 8010be8:	70e5      	strb	r5, [r4, #3]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 8010bea:	f89d c004 	ldrb.w	ip, [sp, #4]
 8010bee:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010bf2:	f89d 8009 	ldrb.w	r8, [sp, #9]
 8010bf6:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010bfa:	f89d e00e 	ldrb.w	lr, [sp, #14]
 8010bfe:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010c02:	f89d 7003 	ldrb.w	r7, [sp, #3]
 8010c06:	5dce      	ldrb	r6, [r1, r7]
 8010c08:	ea80 0009 	eor.w	r0, r0, r9
 8010c0c:	4068      	eors	r0, r5
 8010c0e:	4070      	eors	r0, r6
 8010c10:	7120      	strb	r0, [r4, #4]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 8010c12:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010c16:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010c1a:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010c1e:	ea80 0a0a 	eor.w	sl, r0, sl
 8010c22:	ea89 090a 	eor.w	r9, r9, sl
 8010c26:	ea86 0609 	eor.w	r6, r6, r9
 8010c2a:	7166      	strb	r6, [r4, #5]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 8010c2c:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010c30:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010c34:	5dd6      	ldrb	r6, [r2, r7]
 8010c36:	ea80 0008 	eor.w	r0, r0, r8
 8010c3a:	ea8e 0000 	eor.w	r0, lr, r0
 8010c3e:	4070      	eors	r0, r6
 8010c40:	71a0      	strb	r0, [r4, #6]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 8010c42:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010c46:	5dd8      	ldrb	r0, [r3, r7]
 8010c48:	ea86 0608 	eor.w	r6, r6, r8
 8010c4c:	4075      	eors	r5, r6
 8010c4e:	4045      	eors	r5, r0
 8010c50:	71e5      	strb	r5, [r4, #7]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 8010c52:	f89d c008 	ldrb.w	ip, [sp, #8]
 8010c56:	f813 000c 	ldrb.w	r0, [r3, ip]
 8010c5a:	f89d 800d 	ldrb.w	r8, [sp, #13]
 8010c5e:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010c62:	f89d e002 	ldrb.w	lr, [sp, #2]
 8010c66:	f811 500e 	ldrb.w	r5, [r1, lr]
 8010c6a:	f89d 7007 	ldrb.w	r7, [sp, #7]
 8010c6e:	5dce      	ldrb	r6, [r1, r7]
 8010c70:	ea80 0009 	eor.w	r0, r0, r9
 8010c74:	4068      	eors	r0, r5
 8010c76:	4070      	eors	r0, r6
 8010c78:	7220      	strb	r0, [r4, #8]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 8010c7a:	f811 000c 	ldrb.w	r0, [r1, ip]
 8010c7e:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010c82:	f812 900e 	ldrb.w	r9, [r2, lr]
 8010c86:	ea80 0a0a 	eor.w	sl, r0, sl
 8010c8a:	ea89 090a 	eor.w	r9, r9, sl
 8010c8e:	ea86 0609 	eor.w	r6, r6, r9
 8010c92:	7266      	strb	r6, [r4, #9]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 8010c94:	f811 8008 	ldrb.w	r8, [r1, r8]
 8010c98:	f813 e00e 	ldrb.w	lr, [r3, lr]
 8010c9c:	5dd6      	ldrb	r6, [r2, r7]
 8010c9e:	ea80 0008 	eor.w	r0, r0, r8
 8010ca2:	ea8e 0000 	eor.w	r0, lr, r0
 8010ca6:	4070      	eors	r0, r6
 8010ca8:	72a0      	strb	r0, [r4, #10]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 8010caa:	f812 600c 	ldrb.w	r6, [r2, ip]
 8010cae:	5dd8      	ldrb	r0, [r3, r7]
 8010cb0:	ea86 0608 	eor.w	r6, r6, r8
 8010cb4:	4075      	eors	r5, r6
 8010cb6:	4045      	eors	r5, r0
 8010cb8:	72e5      	strb	r5, [r4, #11]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 8010cba:	f89d 600c 	ldrb.w	r6, [sp, #12]
 8010cbe:	5d98      	ldrb	r0, [r3, r6]
 8010cc0:	f89d 8001 	ldrb.w	r8, [sp, #1]
 8010cc4:	f812 9008 	ldrb.w	r9, [r2, r8]
 8010cc8:	f89d 7006 	ldrb.w	r7, [sp, #6]
 8010ccc:	f811 c007 	ldrb.w	ip, [r1, r7]
 8010cd0:	f89d 500b 	ldrb.w	r5, [sp, #11]
 8010cd4:	f811 e005 	ldrb.w	lr, [r1, r5]
 8010cd8:	ea80 0009 	eor.w	r0, r0, r9
 8010cdc:	ea8c 0000 	eor.w	r0, ip, r0
 8010ce0:	ea8e 0000 	eor.w	r0, lr, r0
 8010ce4:	7320      	strb	r0, [r4, #12]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 8010ce6:	5d88      	ldrb	r0, [r1, r6]
 8010ce8:	f813 a008 	ldrb.w	sl, [r3, r8]
 8010cec:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010cf0:	ea80 0a0a 	eor.w	sl, r0, sl
 8010cf4:	ea89 090a 	eor.w	r9, r9, sl
 8010cf8:	ea8e 0e09 	eor.w	lr, lr, r9
 8010cfc:	f884 e00d 	strb.w	lr, [r4, #13]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 8010d00:	f811 1008 	ldrb.w	r1, [r1, r8]
 8010d04:	f813 e007 	ldrb.w	lr, [r3, r7]
 8010d08:	5d57      	ldrb	r7, [r2, r5]
 8010d0a:	4048      	eors	r0, r1
 8010d0c:	ea8e 0000 	eor.w	r0, lr, r0
 8010d10:	4078      	eors	r0, r7
 8010d12:	73a0      	strb	r0, [r4, #14]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 8010d14:	5d92      	ldrb	r2, [r2, r6]
 8010d16:	5d5b      	ldrb	r3, [r3, r5]
 8010d18:	4051      	eors	r1, r2
 8010d1a:	ea8c 0c01 	eor.w	ip, ip, r1
 8010d1e:	ea83 0c0c 	eor.w	ip, r3, ip
 8010d22:	f884 c00f 	strb.w	ip, [r4, #15]
  }
 8010d26:	b004      	add	sp, #16
 8010d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010d2c:	080147f0 	.word	0x080147f0
 8010d30:	080148f0 	.word	0x080148f0
 8010d34:	080149f0 	.word	0x080149f0

08010d38 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 8010d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d3c:	4614      	mov	r4, r2
    uint8_t cc, rc, hi;

    switch( keylen )
 8010d3e:	f1a1 0310 	sub.w	r3, r1, #16
 8010d42:	b2da      	uxtb	r2, r3
 8010d44:	2a10      	cmp	r2, #16
 8010d46:	d807      	bhi.n	8010d58 <lorawan_aes_set_key+0x20>
 8010d48:	460d      	mov	r5, r1
 8010d4a:	2301      	movs	r3, #1
 8010d4c:	4093      	lsls	r3, r2
 8010d4e:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8010d52:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8010d56:	b92b      	cbnz	r3, 8010d64 <lorawan_aes_set_key+0x2c>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 8010d58:	2300      	movs	r3, #0
 8010d5a:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
        return ( uint8_t )-1;
 8010d5e:	20ff      	movs	r0, #255	; 0xff
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
    }
    return 0;
}
 8010d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    block_copy_nn(ctx->ksch, key, keylen);
 8010d64:	460a      	mov	r2, r1
 8010d66:	4601      	mov	r1, r0
 8010d68:	4620      	mov	r0, r4
 8010d6a:	f7ff fe1b 	bl	80109a4 <copy_block_nn>
    hi = (keylen + 28) << 2;
 8010d6e:	f105 031c 	add.w	r3, r5, #28
 8010d72:	b2db      	uxtb	r3, r3
 8010d74:	009b      	lsls	r3, r3, #2
 8010d76:	fa5f fe83 	uxtb.w	lr, r3
    ctx->rnd = (hi >> 4) - 1;
 8010d7a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8010d7e:	3b01      	subs	r3, #1
 8010d80:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010d84:	462b      	mov	r3, r5
 8010d86:	f04f 0c01 	mov.w	ip, #1
 8010d8a:	e023      	b.n	8010dd4 <lorawan_aes_set_key+0x9c>
        else if( keylen > 24 && cc % keylen == 16 )
 8010d8c:	2d18      	cmp	r5, #24
 8010d8e:	d901      	bls.n	8010d94 <lorawan_aes_set_key+0x5c>
 8010d90:	2a10      	cmp	r2, #16
 8010d92:	d047      	beq.n	8010e24 <lorawan_aes_set_key+0xec>
        tt = cc - keylen;
 8010d94:	1b5a      	subs	r2, r3, r5
 8010d96:	b2d2      	uxtb	r2, r2
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 8010d98:	f814 9002 	ldrb.w	r9, [r4, r2]
 8010d9c:	ea89 0808 	eor.w	r8, r9, r8
 8010da0:	f804 8000 	strb.w	r8, [r4, r0]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 8010da4:	f102 0801 	add.w	r8, r2, #1
 8010da8:	f814 8008 	ldrb.w	r8, [r4, r8]
 8010dac:	f100 0901 	add.w	r9, r0, #1
 8010db0:	ea88 0707 	eor.w	r7, r8, r7
 8010db4:	f804 7009 	strb.w	r7, [r4, r9]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 8010db8:	1c97      	adds	r7, r2, #2
 8010dba:	5de7      	ldrb	r7, [r4, r7]
 8010dbc:	f100 0802 	add.w	r8, r0, #2
 8010dc0:	407e      	eors	r6, r7
 8010dc2:	f804 6008 	strb.w	r6, [r4, r8]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 8010dc6:	3203      	adds	r2, #3
 8010dc8:	5ca6      	ldrb	r6, [r4, r2]
 8010dca:	1cc2      	adds	r2, r0, #3
 8010dcc:	4071      	eors	r1, r6
 8010dce:	54a1      	strb	r1, [r4, r2]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	b2db      	uxtb	r3, r3
 8010dd4:	4573      	cmp	r3, lr
 8010dd6:	d22c      	bcs.n	8010e32 <lorawan_aes_set_key+0xfa>
        t0 = ctx->ksch[cc - 4];
 8010dd8:	4618      	mov	r0, r3
 8010dda:	1f1a      	subs	r2, r3, #4
 8010ddc:	f814 8002 	ldrb.w	r8, [r4, r2]
        t1 = ctx->ksch[cc - 3];
 8010de0:	1eda      	subs	r2, r3, #3
 8010de2:	5ca7      	ldrb	r7, [r4, r2]
        t2 = ctx->ksch[cc - 2];
 8010de4:	1e9a      	subs	r2, r3, #2
 8010de6:	5ca6      	ldrb	r6, [r4, r2]
        t3 = ctx->ksch[cc - 1];
 8010de8:	1e5a      	subs	r2, r3, #1
 8010dea:	5ca1      	ldrb	r1, [r4, r2]
        if( cc % keylen == 0 )
 8010dec:	fbb3 f2f5 	udiv	r2, r3, r5
 8010df0:	fb05 3212 	mls	r2, r5, r2, r3
 8010df4:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
 8010df8:	d1c8      	bne.n	8010d8c <lorawan_aes_set_key+0x54>
            t0 = s_box(t1) ^ rc;
 8010dfa:	4a0f      	ldr	r2, [pc, #60]	; (8010e38 <lorawan_aes_set_key+0x100>)
 8010dfc:	f812 9007 	ldrb.w	r9, [r2, r7]
 8010e00:	ea89 090c 	eor.w	r9, r9, ip
            t1 = s_box(t2);
 8010e04:	5d97      	ldrb	r7, [r2, r6]
            t2 = s_box(t3);
 8010e06:	5c56      	ldrb	r6, [r2, r1]
            t3 = s_box(tt);
 8010e08:	f812 1008 	ldrb.w	r1, [r2, r8]
            rc = f2(rc);
 8010e0c:	ea4f 12dc 	mov.w	r2, ip, lsr #7
 8010e10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010e14:	eb02 02c2 	add.w	r2, r2, r2, lsl #3
 8010e18:	ea82 0c4c 	eor.w	ip, r2, ip, lsl #1
 8010e1c:	fa5f fc8c 	uxtb.w	ip, ip
            t0 = s_box(t1) ^ rc;
 8010e20:	46c8      	mov	r8, r9
 8010e22:	e7b7      	b.n	8010d94 <lorawan_aes_set_key+0x5c>
            t0 = s_box(t0);
 8010e24:	4a04      	ldr	r2, [pc, #16]	; (8010e38 <lorawan_aes_set_key+0x100>)
 8010e26:	f812 8008 	ldrb.w	r8, [r2, r8]
            t1 = s_box(t1);
 8010e2a:	5dd7      	ldrb	r7, [r2, r7]
            t2 = s_box(t2);
 8010e2c:	5d96      	ldrb	r6, [r2, r6]
            t3 = s_box(t3);
 8010e2e:	5c51      	ldrb	r1, [r2, r1]
 8010e30:	e7b0      	b.n	8010d94 <lorawan_aes_set_key+0x5c>
    return 0;
 8010e32:	2000      	movs	r0, #0
 8010e34:	e794      	b.n	8010d60 <lorawan_aes_set_key+0x28>
 8010e36:	bf00      	nop
 8010e38:	080149f0 	.word	0x080149f0

08010e3c <lorawan_aes_encrypt>:

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
    if( ctx->rnd )
 8010e3c:	f892 30f0 	ldrb.w	r3, [r2, #240]	; 0xf0
 8010e40:	b31b      	cbz	r3, 8010e8a <lorawan_aes_encrypt+0x4e>
{
 8010e42:	b570      	push	{r4, r5, r6, lr}
 8010e44:	b084      	sub	sp, #16
 8010e46:	460e      	mov	r6, r1
 8010e48:	4615      	mov	r5, r2
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 8010e4a:	4601      	mov	r1, r0
 8010e4c:	4668      	mov	r0, sp
 8010e4e:	f7ff fdf5 	bl	8010a3c <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 8010e52:	2401      	movs	r4, #1
 8010e54:	e009      	b.n	8010e6a <lorawan_aes_encrypt+0x2e>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 8010e56:	4668      	mov	r0, sp
 8010e58:	f7ff fe88 	bl	8010b6c <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 8010e5c:	eb05 1104 	add.w	r1, r5, r4, lsl #4
 8010e60:	4668      	mov	r0, sp
 8010e62:	f7ff fe4a 	bl	8010afa <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 8010e66:	3401      	adds	r4, #1
 8010e68:	b2e4      	uxtb	r4, r4
 8010e6a:	f895 30f0 	ldrb.w	r3, [r5, #240]	; 0xf0
 8010e6e:	42a3      	cmp	r3, r4
 8010e70:	d8f1      	bhi.n	8010e56 <lorawan_aes_encrypt+0x1a>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 8010e72:	4668      	mov	r0, sp
 8010e74:	f7ff fe46 	bl	8010b04 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 8010e78:	eb05 1204 	add.w	r2, r5, r4, lsl #4
 8010e7c:	4669      	mov	r1, sp
 8010e7e:	4630      	mov	r0, r6
 8010e80:	f7ff fddc 	bl	8010a3c <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 8010e84:	2000      	movs	r0, #0
}
 8010e86:	b004      	add	sp, #16
 8010e88:	bd70      	pop	{r4, r5, r6, pc}
        return ( uint8_t )-1;
 8010e8a:	20ff      	movs	r0, #255	; 0xff
}
 8010e8c:	4770      	bx	lr
	...

08010e90 <GetKeyByID>:
}

#if (LORAWAN_KMS == 0)
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010e90:	2300      	movs	r3, #0
 8010e92:	2b0a      	cmp	r3, #10
 8010e94:	d817      	bhi.n	8010ec6 <GetKeyByID+0x36>
{
 8010e96:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010e98:	4a0c      	ldr	r2, [pc, #48]	; (8010ecc <GetKeyByID+0x3c>)
 8010e9a:	6814      	ldr	r4, [r2, #0]
 8010e9c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010ea0:	4422      	add	r2, r4
 8010ea2:	7e12      	ldrb	r2, [r2, #24]
 8010ea4:	4282      	cmp	r2, r0
 8010ea6:	d006      	beq.n	8010eb6 <GetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010ea8:	3301      	adds	r3, #1
 8010eaa:	b2db      	uxtb	r3, r3
 8010eac:	2b0a      	cmp	r3, #10
 8010eae:	d9f3      	bls.n	8010e98 <GetKeyByID+0x8>
        {
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010eb0:	2003      	movs	r0, #3
}
 8010eb2:	bc10      	pop	{r4}
 8010eb4:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010eb6:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010eba:	f10c 0c18 	add.w	ip, ip, #24
 8010ebe:	4464      	add	r4, ip
 8010ec0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010ec2:	2000      	movs	r0, #0
 8010ec4:	e7f5      	b.n	8010eb2 <GetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010ec6:	2003      	movs	r0, #3
}
 8010ec8:	4770      	bx	lr
 8010eca:	bf00      	nop
 8010ecc:	20001054 	.word	0x20001054

08010ed0 <ComputeCmac>:
}
#endif /* LORAWAN_KMS */

static SecureElementStatus_t ComputeCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                          uint32_t *cmac )
{
 8010ed0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ed4:	b0cc      	sub	sp, #304	; 0x130
 8010ed6:	9d52      	ldr	r5, [sp, #328]	; 0x148
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 8010ed8:	b3a9      	cbz	r1, 8010f46 <ComputeCmac+0x76>
 8010eda:	4607      	mov	r7, r0
 8010edc:	4616      	mov	r6, r2
 8010ede:	461c      	mov	r4, r3
 8010ee0:	4688      	mov	r8, r1
 8010ee2:	b395      	cbz	r5, 8010f4a <ComputeCmac+0x7a>

#if (LORAWAN_KMS == 0)
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 8010ee4:	a802      	add	r0, sp, #8
 8010ee6:	f7ff fbd7 	bl	8010698 <AES_CMAC_Init>

    Key_t                *keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 8010eea:	a901      	add	r1, sp, #4
 8010eec:	4620      	mov	r0, r4
 8010eee:	f7ff ffcf 	bl	8010e90 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 8010ef2:	4604      	mov	r4, r0
 8010ef4:	b118      	cbz	r0, 8010efe <ComputeCmac+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
}
 8010ef6:	4620      	mov	r0, r4
 8010ef8:	b04c      	add	sp, #304	; 0x130
 8010efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 8010efe:	9901      	ldr	r1, [sp, #4]
 8010f00:	3101      	adds	r1, #1
 8010f02:	a802      	add	r0, sp, #8
 8010f04:	f7ff fbd7 	bl	80106b6 <AES_CMAC_SetKey>
        if( micBxBuffer != NULL )
 8010f08:	b127      	cbz	r7, 8010f14 <ComputeCmac+0x44>
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, MIC_BLOCK_BX_SIZE );
 8010f0a:	2210      	movs	r2, #16
 8010f0c:	4639      	mov	r1, r7
 8010f0e:	a802      	add	r0, sp, #8
 8010f10:	f7ff fbd8 	bl	80106c4 <AES_CMAC_Update>
        AES_CMAC_Update( aesCmacCtx, buffer, size );
 8010f14:	4632      	mov	r2, r6
 8010f16:	4641      	mov	r1, r8
 8010f18:	a802      	add	r0, sp, #8
 8010f1a:	f7ff fbd3 	bl	80106c4 <AES_CMAC_Update>
        AES_CMAC_Final( Cmac, aesCmacCtx );
 8010f1e:	a902      	add	r1, sp, #8
 8010f20:	a848      	add	r0, sp, #288	; 0x120
 8010f22:	f7ff fc3d 	bl	80107a0 <AES_CMAC_Final>
        *cmac = GET_UINT32_LE( Cmac, 0 );
 8010f26:	f89d 3120 	ldrb.w	r3, [sp, #288]	; 0x120
 8010f2a:	f89d 2121 	ldrb.w	r2, [sp, #289]	; 0x121
 8010f2e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8010f32:	f89d 2122 	ldrb.w	r2, [sp, #290]	; 0x122
 8010f36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010f3a:	f89d 2123 	ldrb.w	r2, [sp, #291]	; 0x123
 8010f3e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8010f42:	602b      	str	r3, [r5, #0]
 8010f44:	e7d7      	b.n	8010ef6 <ComputeCmac+0x26>
        return SECURE_ELEMENT_ERROR_NPE;
 8010f46:	2402      	movs	r4, #2
 8010f48:	e7d5      	b.n	8010ef6 <ComputeCmac+0x26>
 8010f4a:	2402      	movs	r4, #2
 8010f4c:	e7d3      	b.n	8010ef6 <ComputeCmac+0x26>
	...

08010f50 <SecureElementInit>:
/*
 * API functions
 */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm )
{
    if( nvm == NULL )
 8010f50:	b140      	cbz	r0, 8010f64 <SecureElementInit+0x14>
{
 8010f52:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Initialize nvm pointer */
    SeNvm = nvm;
 8010f54:	4a04      	ldr	r2, [pc, #16]	; (8010f68 <SecureElementInit+0x18>)
 8010f56:	6010      	str	r0, [r2, #0]

#if (LORAWAN_KMS == 0)
    /* Initialize data */
    memcpy1( ( uint8_t * )SeNvm, ( uint8_t * )&seNvmInit, sizeof( seNvmInit ) );
 8010f58:	22d8      	movs	r2, #216	; 0xd8
 8010f5a:	4904      	ldr	r1, [pc, #16]	; (8010f6c <SecureElementInit+0x1c>)
 8010f5c:	f000 facd 	bl	80114fa <memcpy1>
        ( void )C_CloseSession( session );
    }

#endif /* LORAWAN_KMS */

    return SECURE_ELEMENT_SUCCESS;
 8010f60:	2000      	movs	r0, #0
}
 8010f62:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8010f64:	2002      	movs	r0, #2
}
 8010f66:	4770      	bx	lr
 8010f68:	20001054 	.word	0x20001054
 8010f6c:	0803e500 	.word	0x0803e500

08010f70 <SecureElementGetKeyByID>:

#if (LORAWAN_KMS == 0)
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem )
{
#if (KEY_EXTRACTABLE == 1)
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010f70:	2300      	movs	r3, #0
 8010f72:	2b0a      	cmp	r3, #10
 8010f74:	d817      	bhi.n	8010fa6 <SecureElementGetKeyByID+0x36>
{
 8010f76:	b410      	push	{r4}
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 8010f78:	4a0c      	ldr	r2, [pc, #48]	; (8010fac <SecureElementGetKeyByID+0x3c>)
 8010f7a:	6814      	ldr	r4, [r2, #0]
 8010f7c:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8010f80:	4422      	add	r2, r4
 8010f82:	7e12      	ldrb	r2, [r2, #24]
 8010f84:	4282      	cmp	r2, r0
 8010f86:	d006      	beq.n	8010f96 <SecureElementGetKeyByID+0x26>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8010f88:	3301      	adds	r3, #1
 8010f8a:	b2db      	uxtb	r3, r3
 8010f8c:	2b0a      	cmp	r3, #10
 8010f8e:	d9f3      	bls.n	8010f78 <SecureElementGetKeyByID+0x8>
            *keyItem = &( SeNvm->KeyList[i] );
            return SECURE_ELEMENT_SUCCESS;
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010f90:	2003      	movs	r0, #3
}
 8010f92:	bc10      	pop	{r4}
 8010f94:	4770      	bx	lr
            *keyItem = &( SeNvm->KeyList[i] );
 8010f96:	eb03 1c03 	add.w	ip, r3, r3, lsl #4
 8010f9a:	f10c 0c18 	add.w	ip, ip, #24
 8010f9e:	4464      	add	r4, ip
 8010fa0:	600c      	str	r4, [r1, #0]
            return SECURE_ELEMENT_SUCCESS;
 8010fa2:	2000      	movs	r0, #0
 8010fa4:	e7f5      	b.n	8010f92 <SecureElementGetKeyByID+0x22>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 8010fa6:	2003      	movs	r0, #3
}
 8010fa8:	4770      	bx	lr
 8010faa:	bf00      	nop
 8010fac:	20001054 	.word	0x20001054

08010fb0 <PrintKey>:
{
 8010fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010fb4:	b099      	sub	sp, #100	; 0x64
 8010fb6:	4605      	mov	r5, r0
    if( SECURE_ELEMENT_SUCCESS == SecureElementGetKeyByID( keyID, &keyItem ) )
 8010fb8:	a917      	add	r1, sp, #92	; 0x5c
 8010fba:	f7ff ffd9 	bl	8010f70 <SecureElementGetKeyByID>
 8010fbe:	4602      	mov	r2, r0
 8010fc0:	2800      	cmp	r0, #0
 8010fc2:	d043      	beq.n	801104c <PrintKey+0x9c>
}
 8010fc4:	b019      	add	sp, #100	; 0x64
 8010fc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                MW_LOG( TS_OFF, VLEVEL_M,
 8010fca:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010fcc:	7851      	ldrb	r1, [r2, #1]
 8010fce:	9113      	str	r1, [sp, #76]	; 0x4c
 8010fd0:	7890      	ldrb	r0, [r2, #2]
 8010fd2:	9014      	str	r0, [sp, #80]	; 0x50
 8010fd4:	78d4      	ldrb	r4, [r2, #3]
 8010fd6:	9415      	str	r4, [sp, #84]	; 0x54
 8010fd8:	7911      	ldrb	r1, [r2, #4]
 8010fda:	7950      	ldrb	r0, [r2, #5]
 8010fdc:	7994      	ldrb	r4, [r2, #6]
 8010fde:	79d5      	ldrb	r5, [r2, #7]
 8010fe0:	7a16      	ldrb	r6, [r2, #8]
 8010fe2:	7a57      	ldrb	r7, [r2, #9]
 8010fe4:	f892 c00a 	ldrb.w	ip, [r2, #10]
 8010fe8:	f892 e00b 	ldrb.w	lr, [r2, #11]
 8010fec:	f892 800c 	ldrb.w	r8, [r2, #12]
 8010ff0:	f892 900d 	ldrb.w	r9, [r2, #13]
 8010ff4:	f892 a00e 	ldrb.w	sl, [r2, #14]
 8010ff8:	f892 b00f 	ldrb.w	fp, [r2, #15]
 8010ffc:	7c12      	ldrb	r2, [r2, #16]
 8010ffe:	9210      	str	r2, [sp, #64]	; 0x40
 8011000:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
 8011004:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8011008:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 801100c:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
 8011010:	f8cd e02c 	str.w	lr, [sp, #44]	; 0x2c
 8011014:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
 8011018:	9709      	str	r7, [sp, #36]	; 0x24
 801101a:	9608      	str	r6, [sp, #32]
 801101c:	9507      	str	r5, [sp, #28]
 801101e:	9406      	str	r4, [sp, #24]
 8011020:	9005      	str	r0, [sp, #20]
 8011022:	9104      	str	r1, [sp, #16]
 8011024:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8011026:	9403      	str	r4, [sp, #12]
 8011028:	9814      	ldr	r0, [sp, #80]	; 0x50
 801102a:	9002      	str	r0, [sp, #8]
 801102c:	9913      	ldr	r1, [sp, #76]	; 0x4c
 801102e:	9101      	str	r1, [sp, #4]
 8011030:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011034:	4a0c      	ldr	r2, [pc, #48]	; (8011068 <PrintKey+0xb8>)
 8011036:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801103a:	689b      	ldr	r3, [r3, #8]
 801103c:	9300      	str	r3, [sp, #0]
 801103e:	4b0b      	ldr	r3, [pc, #44]	; (801106c <PrintKey+0xbc>)
 8011040:	2200      	movs	r2, #0
 8011042:	4611      	mov	r1, r2
 8011044:	2002      	movs	r0, #2
 8011046:	f002 f937 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
                return;
 801104a:	e7bb      	b.n	8010fc4 <PrintKey+0x14>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801104c:	2a0a      	cmp	r2, #10
 801104e:	d8b9      	bhi.n	8010fc4 <PrintKey+0x14>
            if( KeyLabel[i].keyID == keyID )
 8011050:	4613      	mov	r3, r2
 8011052:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8011056:	4804      	ldr	r0, [pc, #16]	; (8011068 <PrintKey+0xb8>)
 8011058:	f810 1021 	ldrb.w	r1, [r0, r1, lsl #2]
 801105c:	42a9      	cmp	r1, r5
 801105e:	d0b4      	beq.n	8010fca <PrintKey+0x1a>
        for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011060:	3201      	adds	r2, #1
 8011062:	b2d2      	uxtb	r2, r2
 8011064:	e7f2      	b.n	801104c <PrintKey+0x9c>
 8011066:	bf00      	nop
 8011068:	08014c88 	.word	0x08014c88
 801106c:	08014af0 	.word	0x08014af0

08011070 <SecureElementComputeAesCmac>:
}

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t *micBxBuffer, uint8_t *buffer, uint32_t size,
                                                   KeyIdentifier_t keyID, uint32_t *cmac )
{
    if( keyID >= MC_KE_KEY )
 8011070:	2b0b      	cmp	r3, #11
 8011072:	d80a      	bhi.n	801108a <SecureElementComputeAesCmac+0x1a>
{
 8011074:	b500      	push	{lr}
 8011076:	b083      	sub	sp, #12
    {
        /* Never accept multicast key identifier for cmac computation */
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 8011078:	f8dd c010 	ldr.w	ip, [sp, #16]
 801107c:	f8cd c000 	str.w	ip, [sp]
 8011080:	f7ff ff26 	bl	8010ed0 <ComputeCmac>
}
 8011084:	b003      	add	sp, #12
 8011086:	f85d fb04 	ldr.w	pc, [sp], #4
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801108a:	2003      	movs	r0, #3
}
 801108c:	4770      	bx	lr

0801108e <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t *buffer, uint32_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
    if( buffer == NULL )
 801108e:	b190      	cbz	r0, 80110b6 <SecureElementVerifyAesCmac+0x28>
{
 8011090:	b510      	push	{r4, lr}
 8011092:	b084      	sub	sp, #16
 8011094:	468c      	mov	ip, r1
 8011096:	4614      	mov	r4, r2
 8011098:	4601      	mov	r1, r0
        return SECURE_ELEMENT_ERROR_NPE;
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
#if (LORAWAN_KMS == 0)
    uint32_t              compCmac = 0;
 801109a:	2000      	movs	r0, #0
 801109c:	9003      	str	r0, [sp, #12]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 801109e:	aa03      	add	r2, sp, #12
 80110a0:	9200      	str	r2, [sp, #0]
 80110a2:	4662      	mov	r2, ip
 80110a4:	f7ff ff14 	bl	8010ed0 <ComputeCmac>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80110a8:	b918      	cbnz	r0, 80110b2 <SecureElementVerifyAesCmac+0x24>
    {
        return retval;
    }

    if( expectedCmac != compCmac )
 80110aa:	9b03      	ldr	r3, [sp, #12]
 80110ac:	42a3      	cmp	r3, r4
 80110ae:	d000      	beq.n	80110b2 <SecureElementVerifyAesCmac+0x24>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 80110b0:	2001      	movs	r0, #1
    }

#endif /* LORAWAN_KMS */

    return retval;
}
 80110b2:	b004      	add	sp, #16
 80110b4:	bd10      	pop	{r4, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80110b6:	2002      	movs	r0, #2
}
 80110b8:	4770      	bx	lr

080110ba <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t *buffer, uint32_t size, KeyIdentifier_t keyID,
                                               uint8_t *encBuffer )
{
 80110ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110be:	b0be      	sub	sp, #248	; 0xf8
    if( ( buffer == NULL ) || ( encBuffer == NULL ) )
 80110c0:	b348      	cbz	r0, 8011116 <SecureElementAesEncrypt+0x5c>
 80110c2:	460d      	mov	r5, r1
 80110c4:	4614      	mov	r4, r2
 80110c6:	461e      	mov	r6, r3
 80110c8:	4607      	mov	r7, r0
 80110ca:	b33b      	cbz	r3, 801111c <SecureElementAesEncrypt+0x62>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check if the size is divisible by 16 */
    if( ( size % 16 ) != 0 )
 80110cc:	f011 0f0f 	tst.w	r1, #15
 80110d0:	d127      	bne.n	8011122 <SecureElementAesEncrypt+0x68>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
    }

#if (LORAWAN_KMS == 0)
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 80110d2:	22f0      	movs	r2, #240	; 0xf0
 80110d4:	2100      	movs	r1, #0
 80110d6:	a801      	add	r0, sp, #4
 80110d8:	f000 fa27 	bl	801152a <memset1>

    Key_t                *pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 80110dc:	4669      	mov	r1, sp
 80110de:	4620      	mov	r0, r4
 80110e0:	f7ff fed6 	bl	8010e90 <GetKeyByID>

    if( retval == SECURE_ELEMENT_SUCCESS )
 80110e4:	4680      	mov	r8, r0
 80110e6:	b118      	cbz	r0, 80110f0 <SecureElementAesEncrypt+0x36>
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
}
 80110e8:	4640      	mov	r0, r8
 80110ea:	b03e      	add	sp, #248	; 0xf8
 80110ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        lorawan_aes_set_key( pItem->KeyValue, SE_KEY_SIZE, &aesContext );
 80110f0:	aa01      	add	r2, sp, #4
 80110f2:	2110      	movs	r1, #16
 80110f4:	9800      	ldr	r0, [sp, #0]
 80110f6:	3001      	adds	r0, #1
 80110f8:	f7ff fe1e 	bl	8010d38 <lorawan_aes_set_key>
        uint8_t block = 0;
 80110fc:	4644      	mov	r4, r8
        while( size != 0 )
 80110fe:	e007      	b.n	8011110 <SecureElementAesEncrypt+0x56>
            lorawan_aes_encrypt( &buffer[block], &encBuffer[block], &aesContext );
 8011100:	aa01      	add	r2, sp, #4
 8011102:	1931      	adds	r1, r6, r4
 8011104:	1938      	adds	r0, r7, r4
 8011106:	f7ff fe99 	bl	8010e3c <lorawan_aes_encrypt>
            block = block + 16;
 801110a:	3410      	adds	r4, #16
 801110c:	b2e4      	uxtb	r4, r4
            size  = size - 16;
 801110e:	3d10      	subs	r5, #16
        while( size != 0 )
 8011110:	2d00      	cmp	r5, #0
 8011112:	d1f5      	bne.n	8011100 <SecureElementAesEncrypt+0x46>
 8011114:	e7e8      	b.n	80110e8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_NPE;
 8011116:	f04f 0802 	mov.w	r8, #2
 801111a:	e7e5      	b.n	80110e8 <SecureElementAesEncrypt+0x2e>
 801111c:	f04f 0802 	mov.w	r8, #2
 8011120:	e7e2      	b.n	80110e8 <SecureElementAesEncrypt+0x2e>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 8011122:	f04f 0805 	mov.w	r8, #5
 8011126:	e7df      	b.n	80110e8 <SecureElementAesEncrypt+0x2e>

08011128 <SecureElementSetKey>:
{
 8011128:	b530      	push	{r4, r5, lr}
 801112a:	b085      	sub	sp, #20
    if( key == NULL )
 801112c:	2900      	cmp	r1, #0
 801112e:	d038      	beq.n	80111a2 <SecureElementSetKey+0x7a>
 8011130:	468c      	mov	ip, r1
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 8011132:	2300      	movs	r3, #0
 8011134:	2b0a      	cmp	r3, #10
 8011136:	d830      	bhi.n	801119a <SecureElementSetKey+0x72>
        if( SeNvm->KeyList[i].KeyID == keyID )
 8011138:	4a1b      	ldr	r2, [pc, #108]	; (80111a8 <SecureElementSetKey+0x80>)
 801113a:	6811      	ldr	r1, [r2, #0]
 801113c:	461c      	mov	r4, r3
 801113e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
 8011142:	440a      	add	r2, r1
 8011144:	7e12      	ldrb	r2, [r2, #24]
 8011146:	4282      	cmp	r2, r0
 8011148:	d002      	beq.n	8011150 <SecureElementSetKey+0x28>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 801114a:	3301      	adds	r3, #1
 801114c:	b2db      	uxtb	r3, r3
 801114e:	e7f1      	b.n	8011134 <SecureElementSetKey+0xc>
            if( keyID == MC_KEY_0 )
 8011150:	280d      	cmp	r0, #13
 8011152:	d00a      	beq.n	801116a <SecureElementSetKey+0x42>
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 8011154:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8011158:	3318      	adds	r3, #24
 801115a:	440b      	add	r3, r1
 801115c:	2210      	movs	r2, #16
 801115e:	4661      	mov	r1, ip
 8011160:	1c58      	adds	r0, r3, #1
 8011162:	f000 f9ca 	bl	80114fa <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 8011166:	2500      	movs	r5, #0
 8011168:	e018      	b.n	801119c <SecureElementSetKey+0x74>
                uint8_t decryptedKey[SE_KEY_SIZE] = { 0 };
 801116a:	2300      	movs	r3, #0
 801116c:	9300      	str	r3, [sp, #0]
 801116e:	9301      	str	r3, [sp, #4]
 8011170:	9302      	str	r3, [sp, #8]
 8011172:	9303      	str	r3, [sp, #12]
                retval = SecureElementAesEncrypt( key, SE_KEY_SIZE, MC_KE_KEY, decryptedKey );
 8011174:	466b      	mov	r3, sp
 8011176:	220c      	movs	r2, #12
 8011178:	2110      	movs	r1, #16
 801117a:	4660      	mov	r0, ip
 801117c:	f7ff ff9d 	bl	80110ba <SecureElementAesEncrypt>
 8011180:	4605      	mov	r5, r0
                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 8011182:	4b09      	ldr	r3, [pc, #36]	; (80111a8 <SecureElementSetKey+0x80>)
 8011184:	6818      	ldr	r0, [r3, #0]
 8011186:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801118a:	3418      	adds	r4, #24
 801118c:	4420      	add	r0, r4
 801118e:	2210      	movs	r2, #16
 8011190:	4669      	mov	r1, sp
 8011192:	3001      	adds	r0, #1
 8011194:	f000 f9b1 	bl	80114fa <memcpy1>
                return retval;
 8011198:	e000      	b.n	801119c <SecureElementSetKey+0x74>
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 801119a:	2503      	movs	r5, #3
}
 801119c:	4628      	mov	r0, r5
 801119e:	b005      	add	sp, #20
 80111a0:	bd30      	pop	{r4, r5, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80111a2:	2502      	movs	r5, #2
 80111a4:	e7fa      	b.n	801119c <SecureElementSetKey+0x74>
 80111a6:	bf00      	nop
 80111a8:	20001054 	.word	0x20001054

080111ac <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t *input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
    if( input == NULL )
 80111ac:	b1d0      	cbz	r0, 80111e4 <SecureElementDeriveAndStoreKey+0x38>
{
 80111ae:	b510      	push	{r4, lr}
 80111b0:	b084      	sub	sp, #16
 80111b2:	4614      	mov	r4, r2
 80111b4:	4684      	mov	ip, r0
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;

    /* In case of MC_KE_KEY, only McRootKey can be used as root key */
    if( targetKeyID == MC_KE_KEY )
 80111b6:	2a0c      	cmp	r2, #12
 80111b8:	d101      	bne.n	80111be <SecureElementDeriveAndStoreKey+0x12>
    {
        if( rootKeyID != MC_ROOT_KEY )
 80111ba:	290b      	cmp	r1, #11
 80111bc:	d114      	bne.n	80111e8 <SecureElementDeriveAndStoreKey+0x3c>
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
        }
    }

#if (LORAWAN_KMS == 0)
    uint8_t key[SE_KEY_SIZE] = { 0 };
 80111be:	2300      	movs	r3, #0
 80111c0:	9300      	str	r3, [sp, #0]
 80111c2:	9301      	str	r3, [sp, #4]
 80111c4:	9302      	str	r3, [sp, #8]
 80111c6:	9303      	str	r3, [sp, #12]
    /* Derive key */
    retval = SecureElementAesEncrypt( input, SE_KEY_SIZE, rootKeyID, key );
 80111c8:	466b      	mov	r3, sp
 80111ca:	460a      	mov	r2, r1
 80111cc:	2110      	movs	r1, #16
 80111ce:	4660      	mov	r0, ip
 80111d0:	f7ff ff73 	bl	80110ba <SecureElementAesEncrypt>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80111d4:	b108      	cbz	r0, 80111da <SecureElementDeriveAndStoreKey+0x2e>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 80111d6:	b004      	add	sp, #16
 80111d8:	bd10      	pop	{r4, pc}
    retval = SecureElementSetKey( targetKeyID, key );
 80111da:	4669      	mov	r1, sp
 80111dc:	4620      	mov	r0, r4
 80111de:	f7ff ffa3 	bl	8011128 <SecureElementSetKey>
    if( retval != SECURE_ELEMENT_SUCCESS )
 80111e2:	e7f8      	b.n	80111d6 <SecureElementDeriveAndStoreKey+0x2a>
        return SECURE_ELEMENT_ERROR_NPE;
 80111e4:	2002      	movs	r0, #2
}
 80111e6:	4770      	bx	lr
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 80111e8:	2003      	movs	r0, #3
 80111ea:	e7f4      	b.n	80111d6 <SecureElementDeriveAndStoreKey+0x2a>

080111ec <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t *joinEui,
                                                      uint16_t devNonce, uint8_t *encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t *decJoinAccept,
                                                      uint8_t *versionMinor )
{
 80111ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111ee:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80111f2:	9c07      	ldr	r4, [sp, #28]
 80111f4:	9e08      	ldr	r6, [sp, #32]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 80111f6:	b35b      	cbz	r3, 8011250 <SecureElementProcessJoinAccept+0x64>
 80111f8:	461f      	mov	r7, r3
 80111fa:	b35c      	cbz	r4, 8011254 <SecureElementProcessJoinAccept+0x68>
 80111fc:	b366      	cbz	r6, 8011258 <SecureElementProcessJoinAccept+0x6c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

    /* Check that frame size isn't bigger than a JoinAccept with CFList size */
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 80111fe:	2d21      	cmp	r5, #33	; 0x21
 8011200:	d82c      	bhi.n	801125c <SecureElementProcessJoinAccept+0x70>
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* LORAMAC_VERSION */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 8011202:	462a      	mov	r2, r5
 8011204:	4619      	mov	r1, r3
 8011206:	4620      	mov	r0, r4
 8011208:	f000 f977 	bl	80114fa <memcpy1>

    /* Decrypt JoinAccept, skip MHDR */
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 801120c:	1c63      	adds	r3, r4, #1
 801120e:	2201      	movs	r2, #1
 8011210:	1e69      	subs	r1, r5, #1
 8011212:	18b8      	adds	r0, r7, r2
 8011214:	f7ff ff51 	bl	80110ba <SecureElementAesEncrypt>
 8011218:	bb10      	cbnz	r0, 8011260 <SecureElementProcessJoinAccept+0x74>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 801121a:	7ae3      	ldrb	r3, [r4, #11]
 801121c:	09db      	lsrs	r3, r3, #7
 801121e:	7033      	strb	r3, [r6, #0]

    uint32_t mic = GET_UINT32_LE( decJoinAccept, encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE );
 8011220:	1961      	adds	r1, r4, r5
 8011222:	f811 2c04 	ldrb.w	r2, [r1, #-4]
 8011226:	f811 0c03 	ldrb.w	r0, [r1, #-3]
 801122a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 801122e:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8011232:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8011236:	f811 1c01 	ldrb.w	r1, [r1, #-1]
 801123a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
     *        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
     *        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]
     */

    /* Verify mic */
    if( *versionMinor == 0 )
 801123e:	b98b      	cbnz	r3, 8011264 <SecureElementProcessJoinAccept+0x78>
    {
        /* For LoRaWAN 1.0.x
         *   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
         *   CFListType)
         */
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 8011240:	2301      	movs	r3, #1
 8011242:	1f29      	subs	r1, r5, #4
 8011244:	4620      	mov	r0, r4
 8011246:	f7ff ff22 	bl	801108e <SecureElementVerifyAesCmac>
 801124a:	b140      	cbz	r0, 801125e <SecureElementProcessJoinAccept+0x72>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 801124c:	2001      	movs	r0, #1
 801124e:	e006      	b.n	801125e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_NPE;
 8011250:	2002      	movs	r0, #2
 8011252:	e004      	b.n	801125e <SecureElementProcessJoinAccept+0x72>
 8011254:	2002      	movs	r0, #2
 8011256:	e002      	b.n	801125e <SecureElementProcessJoinAccept+0x72>
 8011258:	2002      	movs	r0, #2
 801125a:	e000      	b.n	801125e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 801125c:	2005      	movs	r0, #5
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
    }

    return SECURE_ELEMENT_SUCCESS;
}
 801125e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 8011260:	2007      	movs	r0, #7
 8011262:	e7fc      	b.n	801125e <SecureElementProcessJoinAccept+0x72>
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 8011264:	2004      	movs	r0, #4
 8011266:	e7fa      	b.n	801125e <SecureElementProcessJoinAccept+0x72>

08011268 <SecureElementSetDevEui>:
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8011268:	b140      	cbz	r0, 801127c <SecureElementSetDevEui+0x14>
{
 801126a:	b508      	push	{r3, lr}
 801126c:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.DevEui, devEui, SE_EUI_SIZE );
 801126e:	2208      	movs	r2, #8
 8011270:	4b03      	ldr	r3, [pc, #12]	; (8011280 <SecureElementSetDevEui+0x18>)
 8011272:	6818      	ldr	r0, [r3, #0]
 8011274:	f000 f941 	bl	80114fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011278:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.DevEui, devEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 801127a:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 801127c:	2002      	movs	r0, #2
}
 801127e:	4770      	bx	lr
 8011280:	20001054 	.word	0x20001054

08011284 <SecureElementGetDevEui>:

SecureElementStatus_t SecureElementGetDevEui( uint8_t *devEui )
{
    if( devEui == NULL )
 8011284:	b138      	cbz	r0, 8011296 <SecureElementGetDevEui+0x12>
{
 8011286:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( devEui, SeNvm->SeNvmDevJoinKey.DevEui, SE_EUI_SIZE );
 8011288:	2208      	movs	r2, #8
 801128a:	4904      	ldr	r1, [pc, #16]	; (801129c <SecureElementGetDevEui+0x18>)
 801128c:	6809      	ldr	r1, [r1, #0]
 801128e:	f000 f934 	bl	80114fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 8011292:	2000      	movs	r0, #0
        /* get DevEui field in KMSKeyBlob handle */
        memcpy1( devEui, KMSKeyBlob.DevEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 8011294:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 8011296:	2002      	movs	r0, #2
}
 8011298:	4770      	bx	lr
 801129a:	bf00      	nop
 801129c:	20001054 	.word	0x20001054

080112a0 <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80112a0:	b148      	cbz	r0, 80112b6 <SecureElementSetJoinEui+0x16>
{
 80112a2:	b508      	push	{r3, lr}
 80112a4:	4601      	mov	r1, r0
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( SeNvm->SeNvmDevJoinKey.JoinEui, joinEui, SE_EUI_SIZE );
 80112a6:	4b05      	ldr	r3, [pc, #20]	; (80112bc <SecureElementSetJoinEui+0x1c>)
 80112a8:	6818      	ldr	r0, [r3, #0]
 80112aa:	2208      	movs	r2, #8
 80112ac:	4410      	add	r0, r2
 80112ae:	f000 f924 	bl	80114fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80112b2:	2000      	movs	r0, #0
        memcpy1( KMSKeyBlob.JoinEui, joinEui, SE_EUI_SIZE );
        status = SecureElementSetID( &KMSKeyBlob );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80112b4:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80112b6:	2002      	movs	r0, #2
}
 80112b8:	4770      	bx	lr
 80112ba:	bf00      	nop
 80112bc:	20001054 	.word	0x20001054

080112c0 <SecureElementGetJoinEui>:

SecureElementStatus_t SecureElementGetJoinEui( uint8_t *joinEui )
{
    if( joinEui == NULL )
 80112c0:	b140      	cbz	r0, 80112d4 <SecureElementGetJoinEui+0x14>
{
 80112c2:	b508      	push	{r3, lr}
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }

#if (LORAWAN_KMS == 0)
    memcpy1( joinEui, SeNvm->SeNvmDevJoinKey.JoinEui, SE_EUI_SIZE );
 80112c4:	4a04      	ldr	r2, [pc, #16]	; (80112d8 <SecureElementGetJoinEui+0x18>)
 80112c6:	6811      	ldr	r1, [r2, #0]
 80112c8:	2208      	movs	r2, #8
 80112ca:	4411      	add	r1, r2
 80112cc:	f000 f915 	bl	80114fa <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 80112d0:	2000      	movs	r0, #0
        /* get JoinEui field from KMSKeyBlob handle */
        memcpy1( joinEui, KMSKeyBlob.JoinEui, SE_EUI_SIZE );
    }
    return status;
#endif /* LORAWAN_KMS */
}
 80112d2:	bd08      	pop	{r3, pc}
        return SECURE_ELEMENT_ERROR_NPE;
 80112d4:	2002      	movs	r0, #2
}
 80112d6:	4770      	bx	lr
 80112d8:	20001054 	.word	0x20001054

080112dc <SecureElementSetDevAddr>:

SecureElementStatus_t SecureElementSetDevAddr( ActivationType_t mode, uint32_t devAddr )
{
#if (LORAWAN_KMS == 0)
    if( mode == ACTIVATION_TYPE_OTAA )
 80112dc:	2802      	cmp	r0, #2
 80112de:	d004      	beq.n	80112ea <SecureElementSetDevAddr+0xe>
    {
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
    }
    else
    {
        SeNvm->SeNvmDevJoinKey.DevAddrABP = devAddr;
 80112e0:	4b04      	ldr	r3, [pc, #16]	; (80112f4 <SecureElementSetDevAddr+0x18>)
 80112e2:	681b      	ldr	r3, [r3, #0]
 80112e4:	6159      	str	r1, [r3, #20]
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 80112e6:	2000      	movs	r0, #0
 80112e8:	4770      	bx	lr
        SeNvm->SeNvmDevJoinKey.DevAddrOTAA = devAddr;
 80112ea:	4b02      	ldr	r3, [pc, #8]	; (80112f4 <SecureElementSetDevAddr+0x18>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	6119      	str	r1, [r3, #16]
 80112f0:	e7f9      	b.n	80112e6 <SecureElementSetDevAddr+0xa>
 80112f2:	bf00      	nop
 80112f4:	20001054 	.word	0x20001054

080112f8 <SecureElementGetDevAddr>:

SecureElementStatus_t SecureElementGetDevAddr( ActivationType_t mode, uint32_t *devAddr )
{
    if( devAddr == NULL )
 80112f8:	b169      	cbz	r1, 8011316 <SecureElementGetDevAddr+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
    }
#if (LORAWAN_KMS == 0)
    /* Recover DevAddrABP or DevAddrOTAA depending on mode */
    if( mode == ACTIVATION_TYPE_OTAA )
 80112fa:	2802      	cmp	r0, #2
 80112fc:	d005      	beq.n	801130a <SecureElementGetDevAddr+0x12>
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
    }
    else
    {
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrABP;
 80112fe:	4a07      	ldr	r2, [pc, #28]	; (801131c <SecureElementGetDevAddr+0x24>)
 8011300:	6812      	ldr	r2, [r2, #0]
 8011302:	6952      	ldr	r2, [r2, #20]
 8011304:	600a      	str	r2, [r1, #0]
    }
    return SECURE_ELEMENT_SUCCESS;
 8011306:	2000      	movs	r0, #0
 8011308:	4770      	bx	lr
        *devAddr = SeNvm->SeNvmDevJoinKey.DevAddrOTAA;
 801130a:	4a04      	ldr	r2, [pc, #16]	; (801131c <SecureElementGetDevAddr+0x24>)
 801130c:	6812      	ldr	r2, [r2, #0]
 801130e:	6912      	ldr	r2, [r2, #16]
 8011310:	600a      	str	r2, [r1, #0]
    return SECURE_ELEMENT_SUCCESS;
 8011312:	2000      	movs	r0, #0
 8011314:	4770      	bx	lr
        return SECURE_ELEMENT_ERROR_NPE;
 8011316:	2002      	movs	r0, #2
        }
    }

    return status;
#endif /* LORAWAN_KMS */
}
 8011318:	4770      	bx	lr
 801131a:	bf00      	nop
 801131c:	20001054 	.word	0x20001054

08011320 <SecureElementInitMcuID>:
{
 8011320:	b530      	push	{r4, r5, lr}
 8011322:	b085      	sub	sp, #20
 8011324:	4605      	mov	r5, r0
 8011326:	460c      	mov	r4, r1
    uint32_t devAddrABP = 0;
 8011328:	2300      	movs	r3, #0
 801132a:	9301      	str	r3, [sp, #4]
    SecureElementGetDevEui( devEui );
 801132c:	a802      	add	r0, sp, #8
 801132e:	f7ff ffa9 	bl	8011284 <SecureElementGetDevEui>
    SecureElementGetDevAddr( ACTIVATION_TYPE_ABP, &devAddrABP );
 8011332:	a901      	add	r1, sp, #4
 8011334:	2001      	movs	r0, #1
 8011336:	f7ff ffdf 	bl	80112f8 <SecureElementGetDevAddr>
    if( seGetUniqueId != NULL )
 801133a:	b195      	cbz	r5, 8011362 <SecureElementInitMcuID+0x42>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801133c:	2300      	movs	r3, #0
 801133e:	2b07      	cmp	r3, #7
 8011340:	d808      	bhi.n	8011354 <SecureElementInitMcuID+0x34>
            if( devEui[index] != 0 )
 8011342:	f103 0210 	add.w	r2, r3, #16
 8011346:	446a      	add	r2, sp
 8011348:	f812 2c08 	ldrb.w	r2, [r2, #-8]
 801134c:	b9aa      	cbnz	r2, 801137a <SecureElementInitMcuID+0x5a>
        for( uint8_t index = 0; index < SE_EUI_SIZE; index++ )
 801134e:	3301      	adds	r3, #1
 8011350:	b2db      	uxtb	r3, r3
 8011352:	e7f4      	b.n	801133e <SecureElementInitMcuID+0x1e>
        bool id_init = false;
 8011354:	2300      	movs	r3, #0
        if( id_init == false )
 8011356:	b923      	cbnz	r3, 8011362 <SecureElementInitMcuID+0x42>
            seGetUniqueId( devEui );
 8011358:	a802      	add	r0, sp, #8
 801135a:	47a8      	blx	r5
            SecureElementSetDevEui( devEui );
 801135c:	a802      	add	r0, sp, #8
 801135e:	f7ff ff83 	bl	8011268 <SecureElementSetDevEui>
    if( ( seGetDevAddr != NULL ) && ( devAddrABP == 0 ) )
 8011362:	b13c      	cbz	r4, 8011374 <SecureElementInitMcuID+0x54>
 8011364:	9b01      	ldr	r3, [sp, #4]
 8011366:	b92b      	cbnz	r3, 8011374 <SecureElementInitMcuID+0x54>
        seGetDevAddr( &devAddrABP );
 8011368:	a801      	add	r0, sp, #4
 801136a:	47a0      	blx	r4
        SecureElementSetDevAddr( ACTIVATION_TYPE_ABP, devAddrABP );
 801136c:	9901      	ldr	r1, [sp, #4]
 801136e:	2001      	movs	r0, #1
 8011370:	f7ff ffb4 	bl	80112dc <SecureElementSetDevAddr>
}
 8011374:	2000      	movs	r0, #0
 8011376:	b005      	add	sp, #20
 8011378:	bd30      	pop	{r4, r5, pc}
                id_init = true;
 801137a:	2301      	movs	r3, #1
 801137c:	e7eb      	b.n	8011356 <SecureElementInitMcuID+0x36>
	...

08011380 <PrintIds>:
{
 8011380:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011382:	b08f      	sub	sp, #60	; 0x3c
 8011384:	4605      	mov	r5, r0
    uint32_t devAddr = 0;
 8011386:	2400      	movs	r4, #0
 8011388:	9409      	str	r4, [sp, #36]	; 0x24
    SecureElementGetDevEui( devEui );
 801138a:	a80a      	add	r0, sp, #40	; 0x28
 801138c:	f7ff ff7a 	bl	8011284 <SecureElementGetDevEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( devEui ) );
 8011390:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8011394:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 8011398:	f89d 102a 	ldrb.w	r1, [sp, #42]	; 0x2a
 801139c:	f89d 002b 	ldrb.w	r0, [sp, #43]	; 0x2b
 80113a0:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
 80113a4:	f89d 702d 	ldrb.w	r7, [sp, #45]	; 0x2d
 80113a8:	f89d c02e 	ldrb.w	ip, [sp, #46]	; 0x2e
 80113ac:	f89d e02f 	ldrb.w	lr, [sp, #47]	; 0x2f
 80113b0:	f8cd e01c 	str.w	lr, [sp, #28]
 80113b4:	f8cd c018 	str.w	ip, [sp, #24]
 80113b8:	9705      	str	r7, [sp, #20]
 80113ba:	9604      	str	r6, [sp, #16]
 80113bc:	9003      	str	r0, [sp, #12]
 80113be:	9102      	str	r1, [sp, #8]
 80113c0:	9201      	str	r2, [sp, #4]
 80113c2:	9300      	str	r3, [sp, #0]
 80113c4:	4b20      	ldr	r3, [pc, #128]	; (8011448 <PrintIds+0xc8>)
 80113c6:	4622      	mov	r2, r4
 80113c8:	4621      	mov	r1, r4
 80113ca:	2002      	movs	r0, #2
 80113cc:	f001 ff74 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetJoinEui( joinEui );
 80113d0:	a80c      	add	r0, sp, #48	; 0x30
 80113d2:	f7ff ff75 	bl	80112c0 <SecureElementGetJoinEui>
    MW_LOG( TS_OFF, VLEVEL_M, "###### AppEUI:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n", HEX8( joinEui ) );
 80113d6:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
 80113da:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
 80113de:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
 80113e2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
 80113e6:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 80113ea:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
 80113ee:	f89d c036 	ldrb.w	ip, [sp, #54]	; 0x36
 80113f2:	f89d e037 	ldrb.w	lr, [sp, #55]	; 0x37
 80113f6:	f8cd e01c 	str.w	lr, [sp, #28]
 80113fa:	f8cd c018 	str.w	ip, [sp, #24]
 80113fe:	9705      	str	r7, [sp, #20]
 8011400:	9604      	str	r6, [sp, #16]
 8011402:	9003      	str	r0, [sp, #12]
 8011404:	9102      	str	r1, [sp, #8]
 8011406:	9201      	str	r2, [sp, #4]
 8011408:	9300      	str	r3, [sp, #0]
 801140a:	4b10      	ldr	r3, [pc, #64]	; (801144c <PrintIds+0xcc>)
 801140c:	4622      	mov	r2, r4
 801140e:	4621      	mov	r1, r4
 8011410:	2002      	movs	r0, #2
 8011412:	f001 ff51 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
    SecureElementGetDevAddr( mode, &devAddr );
 8011416:	a909      	add	r1, sp, #36	; 0x24
 8011418:	4628      	mov	r0, r5
 801141a:	f7ff ff6d 	bl	80112f8 <SecureElementGetDevAddr>
    MW_LOG( TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 801141e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 8011422:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 8011426:	f89d 1025 	ldrb.w	r1, [sp, #37]	; 0x25
 801142a:	f89d 0024 	ldrb.w	r0, [sp, #36]	; 0x24
 801142e:	9003      	str	r0, [sp, #12]
 8011430:	9102      	str	r1, [sp, #8]
 8011432:	9201      	str	r2, [sp, #4]
 8011434:	9300      	str	r3, [sp, #0]
 8011436:	4b06      	ldr	r3, [pc, #24]	; (8011450 <PrintIds+0xd0>)
 8011438:	4622      	mov	r2, r4
 801143a:	4621      	mov	r1, r4
 801143c:	2002      	movs	r0, #2
 801143e:	f001 ff3b 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8011442:	b00f      	add	sp, #60	; 0x3c
 8011444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011446:	bf00      	nop
 8011448:	08014b4c 	.word	0x08014b4c
 801144c:	08014b8c 	.word	0x08014b8c
 8011450:	08014bcc 	.word	0x08014bcc

08011454 <SecureElementPrintKeys>:
{
 8011454:	b508      	push	{r3, lr}
    PrintKey( APP_KEY );
 8011456:	2000      	movs	r0, #0
 8011458:	f7ff fdaa 	bl	8010fb0 <PrintKey>
    PrintKey( NWK_KEY );
 801145c:	2001      	movs	r0, #1
 801145e:	f7ff fda7 	bl	8010fb0 <PrintKey>
    PrintKey( APP_S_KEY );
 8011462:	2009      	movs	r0, #9
 8011464:	f7ff fda4 	bl	8010fb0 <PrintKey>
    PrintKey( NWK_S_KEY );
 8011468:	2008      	movs	r0, #8
 801146a:	f7ff fda1 	bl	8010fb0 <PrintKey>
    PrintIds( ACTIVATION_TYPE_NONE );
 801146e:	2000      	movs	r0, #0
 8011470:	f7ff ff86 	bl	8011380 <PrintIds>
}
 8011474:	2000      	movs	r0, #0
 8011476:	bd08      	pop	{r3, pc}

08011478 <SecureElementPrintSessionKeys>:
{
 8011478:	b510      	push	{r4, lr}
 801147a:	4604      	mov	r4, r0
    PrintKey( MC_ROOT_KEY );
 801147c:	200b      	movs	r0, #11
 801147e:	f7ff fd97 	bl	8010fb0 <PrintKey>
    PrintKey( MC_KE_KEY );
 8011482:	200c      	movs	r0, #12
 8011484:	f7ff fd94 	bl	8010fb0 <PrintKey>
    PrintKey( APP_S_KEY );
 8011488:	2009      	movs	r0, #9
 801148a:	f7ff fd91 	bl	8010fb0 <PrintKey>
    PrintKey( NWK_S_KEY );
 801148e:	2008      	movs	r0, #8
 8011490:	f7ff fd8e 	bl	8010fb0 <PrintKey>
    PrintKey( DATABLOCK_INT_KEY );
 8011494:	200a      	movs	r0, #10
 8011496:	f7ff fd8b 	bl	8010fb0 <PrintKey>
    PrintIds( mode );
 801149a:	4620      	mov	r0, r4
 801149c:	f7ff ff70 	bl	8011380 <PrintIds>
}
 80114a0:	2000      	movs	r0, #0
 80114a2:	bd10      	pop	{r4, pc}

080114a4 <rand1>:

static int32_t rand1( void );

static int32_t rand1( void )
{
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80114a4:	4b09      	ldr	r3, [pc, #36]	; (80114cc <rand1+0x28>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	4909      	ldr	r1, [pc, #36]	; (80114d0 <rand1+0x2c>)
 80114aa:	f243 0039 	movw	r0, #12345	; 0x3039
 80114ae:	fb01 0002 	mla	r0, r1, r2, r0
 80114b2:	6018      	str	r0, [r3, #0]
 80114b4:	2303      	movs	r3, #3
 80114b6:	fba3 2300 	umull	r2, r3, r3, r0
 80114ba:	1ac2      	subs	r2, r0, r3
 80114bc:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80114c0:	0f9b      	lsrs	r3, r3, #30
 80114c2:	ebc3 73c3 	rsb	r3, r3, r3, lsl #31
}
 80114c6:	1ac0      	subs	r0, r0, r3
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	20000100 	.word	0x20000100
 80114d0:	41c64e6d 	.word	0x41c64e6d

080114d4 <srand1>:

void srand1( uint32_t seed )
{
    next = seed;
 80114d4:	4b01      	ldr	r3, [pc, #4]	; (80114dc <srand1+0x8>)
 80114d6:	6018      	str	r0, [r3, #0]
}
 80114d8:	4770      	bx	lr
 80114da:	bf00      	nop
 80114dc:	20000100 	.word	0x20000100

080114e0 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 80114e0:	b538      	push	{r3, r4, r5, lr}
 80114e2:	4605      	mov	r5, r0
 80114e4:	460c      	mov	r4, r1
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 80114e6:	f7ff ffdd 	bl	80114a4 <rand1>
 80114ea:	1b61      	subs	r1, r4, r5
 80114ec:	3101      	adds	r1, #1
 80114ee:	fb90 f3f1 	sdiv	r3, r0, r1
 80114f2:	fb01 0013 	mls	r0, r1, r3, r0
}
 80114f6:	4428      	add	r0, r5
 80114f8:	bd38      	pop	{r3, r4, r5, pc}

080114fa <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    while( size-- )
 80114fa:	e004      	b.n	8011506 <memcpy1+0xc>
    {
        *dst++ = *src++;
 80114fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011500:	f800 2b01 	strb.w	r2, [r0], #1
    while( size-- )
 8011504:	461a      	mov	r2, r3
 8011506:	1e53      	subs	r3, r2, #1
 8011508:	b29b      	uxth	r3, r3
 801150a:	2a00      	cmp	r2, #0
 801150c:	d1f6      	bne.n	80114fc <memcpy1+0x2>
    }
}
 801150e:	4770      	bx	lr

08011510 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
    dst = dst + ( size - 1 );
 8011510:	1e53      	subs	r3, r2, #1
 8011512:	4418      	add	r0, r3
    while( size-- )
 8011514:	e004      	b.n	8011520 <memcpyr+0x10>
    {
        *dst-- = *src++;
 8011516:	f811 2b01 	ldrb.w	r2, [r1], #1
 801151a:	f800 2901 	strb.w	r2, [r0], #-1
    while( size-- )
 801151e:	461a      	mov	r2, r3
 8011520:	1e53      	subs	r3, r2, #1
 8011522:	b29b      	uxth	r3, r3
 8011524:	2a00      	cmp	r2, #0
 8011526:	d1f6      	bne.n	8011516 <memcpyr+0x6>
    }
}
 8011528:	4770      	bx	lr

0801152a <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
    while( size-- )
 801152a:	e002      	b.n	8011532 <memset1+0x8>
    {
        *dst++ = value;
 801152c:	f800 1b01 	strb.w	r1, [r0], #1
    while( size-- )
 8011530:	461a      	mov	r2, r3
 8011532:	1e53      	subs	r3, r2, #1
 8011534:	b29b      	uxth	r3, r3
 8011536:	2a00      	cmp	r2, #0
 8011538:	d1f8      	bne.n	801152c <memset1+0x2>
    }
}
 801153a:	4770      	bx	lr

0801153c <Crc32>:
uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;

    if( buffer == NULL )
 801153c:	b1f0      	cbz	r0, 801157c <Crc32+0x40>
{
 801153e:	b510      	push	{r4, lr}
 8011540:	4604      	mov	r4, r0
    {
        return 0;
    }

    for( uint16_t i = 0; i < length; ++i )
 8011542:	f04f 0e00 	mov.w	lr, #0
    uint32_t crc = 0xFFFFFFFF;
 8011546:	f04f 30ff 	mov.w	r0, #4294967295
 801154a:	e00e      	b.n	801156a <Crc32+0x2e>
    {
        crc ^= ( uint32_t )buffer[i];
        for( uint16_t i = 0; i < 8; i++ )
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 801154c:	f340 0c00 	sbfx	ip, r0, #0, #1
 8011550:	4a0b      	ldr	r2, [pc, #44]	; (8011580 <Crc32+0x44>)
 8011552:	ea0c 0202 	and.w	r2, ip, r2
 8011556:	ea82 0050 	eor.w	r0, r2, r0, lsr #1
        for( uint16_t i = 0; i < 8; i++ )
 801155a:	3301      	adds	r3, #1
 801155c:	b29b      	uxth	r3, r3
 801155e:	2b07      	cmp	r3, #7
 8011560:	d9f4      	bls.n	801154c <Crc32+0x10>
    for( uint16_t i = 0; i < length; ++i )
 8011562:	f10e 0e01 	add.w	lr, lr, #1
 8011566:	fa1f fe8e 	uxth.w	lr, lr
 801156a:	458e      	cmp	lr, r1
 801156c:	d204      	bcs.n	8011578 <Crc32+0x3c>
        crc ^= ( uint32_t )buffer[i];
 801156e:	f814 300e 	ldrb.w	r3, [r4, lr]
 8011572:	4058      	eors	r0, r3
        for( uint16_t i = 0; i < 8; i++ )
 8011574:	2300      	movs	r3, #0
 8011576:	e7f2      	b.n	801155e <Crc32+0x22>
        }
    }

    return ~crc;
 8011578:	43c0      	mvns	r0, r0
}
 801157a:	bd10      	pop	{r4, pc}
        return 0;
 801157c:	2000      	movs	r0, #0
}
 801157e:	4770      	bx	lr
 8011580:	edb88320 	.word	0xedb88320

08011584 <RadioCheckRfFrequency>:
}

static bool RadioCheckRfFrequency( uint32_t frequency )
{
    return true;
}
 8011584:	2001      	movs	r0, #1
 8011586:	4770      	bx	lr

08011588 <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
    uint32_t bandwidthInHz = 0;

    switch( bw )
 8011588:	280a      	cmp	r0, #10
 801158a:	d807      	bhi.n	801159c <RadioGetLoRaBandwidthInHz+0x14>
 801158c:	e8df f000 	tbb	[pc, r0]
 8011590:	17110b20 	.word	0x17110b20
 8011594:	061e1c1a 	.word	0x061e1c1a
 8011598:	0e08      	.short	0x0e08
 801159a:	14          	.byte	0x14
 801159b:	00          	.byte	0x00
 801159c:	2000      	movs	r0, #0
 801159e:	4770      	bx	lr
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
        break;
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 80115a0:	f642 00b1 	movw	r0, #10417	; 0x28b1
        break;
 80115a4:	4770      	bx	lr
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 80115a6:	f643 5009 	movw	r0, #15625	; 0x3d09
        break;
 80115aa:	4770      	bx	lr
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 80115ac:	f245 1061 	movw	r0, #20833	; 0x5161
        break;
 80115b0:	4770      	bx	lr
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80115b2:	f647 2012 	movw	r0, #31250	; 0x7a12
        break;
 80115b6:	4770      	bx	lr
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80115b8:	f24a 20c3 	movw	r0, #41667	; 0xa2c3
        break;
 80115bc:	4770      	bx	lr
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80115be:	f24f 4024 	movw	r0, #62500	; 0xf424
        break;
 80115c2:	4770      	bx	lr
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80115c4:	4804      	ldr	r0, [pc, #16]	; (80115d8 <RadioGetLoRaBandwidthInHz+0x50>)
        break;
 80115c6:	4770      	bx	lr
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80115c8:	4804      	ldr	r0, [pc, #16]	; (80115dc <RadioGetLoRaBandwidthInHz+0x54>)
        break;
 80115ca:	4770      	bx	lr
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80115cc:	4804      	ldr	r0, [pc, #16]	; (80115e0 <RadioGetLoRaBandwidthInHz+0x58>)
        break;
 80115ce:	4770      	bx	lr
        bandwidthInHz = 7812UL;
 80115d0:	f641 6084 	movw	r0, #7812	; 0x1e84
    }

    return bandwidthInHz;
}
 80115d4:	4770      	bx	lr
 80115d6:	bf00      	nop
 80115d8:	0001e848 	.word	0x0001e848
 80115dc:	0003d090 	.word	0x0003d090
 80115e0:	0007a120 	.word	0x0007a120

080115e4 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80115e4:	f89d 1004 	ldrb.w	r1, [sp, #4]
    return ( preambleLen << 3 ) +
 80115e8:	00d2      	lsls	r2, r2, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80115ea:	b953      	cbnz	r3, 8011602 <RadioGetGfskTimeOnAirNumerator+0x1e>
 80115ec:	2008      	movs	r0, #8
    return ( preambleLen << 3 ) +
 80115ee:	4402      	add	r2, r0
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 80115f0:	3218      	adds	r2, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 80115f2:	b141      	cbz	r1, 8011606 <RadioGetGfskTimeOnAirNumerator+0x22>
 80115f4:	2302      	movs	r3, #2
 80115f6:	f89d 0000 	ldrb.w	r0, [sp]
 80115fa:	4418      	add	r0, r3
}
 80115fc:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
 8011600:	4770      	bx	lr
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8011602:	2000      	movs	r0, #0
 8011604:	e7f3      	b.n	80115ee <RadioGetGfskTimeOnAirNumerator+0xa>
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 8011606:	2300      	movs	r3, #0
 8011608:	e7f5      	b.n	80115f6 <RadioGetGfskTimeOnAirNumerator+0x12>

0801160a <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801160a:	b570      	push	{r4, r5, r6, lr}
 801160c:	f89d 4010 	ldrb.w	r4, [sp, #16]
 8011610:	f89d 5018 	ldrb.w	r5, [sp, #24]
    int32_t crDenom           = coderate + 4;
 8011614:	3204      	adds	r2, #4
    bool    lowDatareOptimize = false;

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 8011616:	f1a1 0c05 	sub.w	ip, r1, #5
 801161a:	f1bc 0f01 	cmp.w	ip, #1
 801161e:	d932      	bls.n	8011686 <RadioGetLoRaTimeOnAirNumerator+0x7c>
        {
            preambleLen = 12;
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8011620:	b918      	cbnz	r0, 801162a <RadioGetLoRaTimeOnAirNumerator+0x20>
 8011622:	f1a1 060b 	sub.w	r6, r1, #11
 8011626:	2e01      	cmp	r6, #1
 8011628:	d935      	bls.n	8011696 <RadioGetLoRaTimeOnAirNumerator+0x8c>
 801162a:	2801      	cmp	r0, #1
 801162c:	d02f      	beq.n	801168e <RadioGetLoRaTimeOnAirNumerator+0x84>
    bool    lowDatareOptimize = false;
 801162e:	2600      	movs	r6, #0
    {
        lowDatareOptimize = true;
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8011630:	f89d e014 	ldrb.w	lr, [sp, #20]
 8011634:	ea4f 0ece 	mov.w	lr, lr, lsl #3
                            ( crcOn ? 16 : 0 ) -
 8011638:	b38d      	cbz	r5, 801169e <RadioGetLoRaTimeOnAirNumerator+0x94>
 801163a:	f04f 0c10 	mov.w	ip, #16
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 801163e:	44e6      	add	lr, ip
                            ( 4 * datarate ) +
 8011640:	0088      	lsls	r0, r1, #2
                            ( crcOn ? 16 : 0 ) -
 8011642:	ebae 0e81 	sub.w	lr, lr, r1, lsl #2
                            ( fixLen ? 0 : 20 );
 8011646:	b36c      	cbz	r4, 80116a4 <RadioGetLoRaTimeOnAirNumerator+0x9a>
 8011648:	f04f 0c00 	mov.w	ip, #0
                            ( 4 * datarate ) +
 801164c:	44f4      	add	ip, lr

    if( datarate <= 6 )
 801164e:	2906      	cmp	r1, #6
 8011650:	d904      	bls.n	801165c <RadioGetLoRaTimeOnAirNumerator+0x52>
    {
        ceilDenominator = 4 * datarate;
    }
    else
    {
        ceilNumerator += 8;
 8011652:	f10c 0c08 	add.w	ip, ip, #8

        if( lowDatareOptimize == true )
 8011656:	b10e      	cbz	r6, 801165c <RadioGetLoRaTimeOnAirNumerator+0x52>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 8011658:	1e88      	subs	r0, r1, #2
 801165a:	0080      	lsls	r0, r0, #2
        {
            ceilDenominator = 4 * datarate;
        }
    }

    if( ceilNumerator < 0 )
 801165c:	f1bc 0f00 	cmp.w	ip, #0
 8011660:	db23      	blt.n	80116aa <RadioGetLoRaTimeOnAirNumerator+0xa0>
        ceilNumerator = 0;
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 8011662:	4484      	add	ip, r0
 8011664:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011668:	fb9c fcf0 	sdiv	ip, ip, r0
 801166c:	fb02 330c 	mla	r3, r2, ip, r3
    int32_t intermediate =
 8011670:	f103 000c 	add.w	r0, r3, #12

    if( datarate <= 6 )
 8011674:	2906      	cmp	r1, #6
 8011676:	d801      	bhi.n	801167c <RadioGetLoRaTimeOnAirNumerator+0x72>
    {
        intermediate += 2;
 8011678:	f103 000e 	add.w	r0, r3, #14
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 801167c:	0080      	lsls	r0, r0, #2
 801167e:	3001      	adds	r0, #1
 8011680:	3902      	subs	r1, #2
}
 8011682:	4088      	lsls	r0, r1
 8011684:	bd70      	pop	{r4, r5, r6, pc}
        if( preambleLen < 12 )
 8011686:	2b0b      	cmp	r3, #11
 8011688:	d8ca      	bhi.n	8011620 <RadioGetLoRaTimeOnAirNumerator+0x16>
            preambleLen = 12;
 801168a:	230c      	movs	r3, #12
 801168c:	e7c8      	b.n	8011620 <RadioGetLoRaTimeOnAirNumerator+0x16>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801168e:	290c      	cmp	r1, #12
 8011690:	d003      	beq.n	801169a <RadioGetLoRaTimeOnAirNumerator+0x90>
    bool    lowDatareOptimize = false;
 8011692:	2600      	movs	r6, #0
 8011694:	e7cc      	b.n	8011630 <RadioGetLoRaTimeOnAirNumerator+0x26>
        lowDatareOptimize = true;
 8011696:	2601      	movs	r6, #1
 8011698:	e7ca      	b.n	8011630 <RadioGetLoRaTimeOnAirNumerator+0x26>
 801169a:	2601      	movs	r6, #1
 801169c:	e7c8      	b.n	8011630 <RadioGetLoRaTimeOnAirNumerator+0x26>
                            ( crcOn ? 16 : 0 ) -
 801169e:	f04f 0c00 	mov.w	ip, #0
 80116a2:	e7cc      	b.n	801163e <RadioGetLoRaTimeOnAirNumerator+0x34>
                            ( fixLen ? 0 : 20 );
 80116a4:	f04f 0c14 	mov.w	ip, #20
 80116a8:	e7d0      	b.n	801164c <RadioGetLoRaTimeOnAirNumerator+0x42>
        ceilNumerator = 0;
 80116aa:	f04f 0c00 	mov.w	ip, #0
 80116ae:	e7d8      	b.n	8011662 <RadioGetLoRaTimeOnAirNumerator+0x58>

080116b0 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 80116b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80116b2:	b085      	sub	sp, #20
 80116b4:	460e      	mov	r6, r1
 80116b6:	4615      	mov	r5, r2
 80116b8:	4619      	mov	r1, r3
 80116ba:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 80116be:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
 80116c2:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
 80116c6:	f89d c034 	ldrb.w	ip, [sp, #52]	; 0x34
    uint32_t numerator = 0;
    uint32_t denominator = 1;

    switch( modem )
 80116ca:	b148      	cbz	r0, 80116e0 <RadioTimeOnAir+0x30>
 80116cc:	2801      	cmp	r0, #1
 80116ce:	d012      	beq.n	80116f6 <RadioTimeOnAir+0x46>
 80116d0:	2501      	movs	r5, #1
 80116d2:	2400      	movs	r4, #0
        break;
    default:
        break;
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator );
 80116d4:	442c      	add	r4, r5
 80116d6:	1e60      	subs	r0, r4, #1
}
 80116d8:	fbb0 f0f5 	udiv	r0, r0, r5
 80116dc:	b005      	add	sp, #20
 80116de:	bdf0      	pop	{r4, r5, r6, r7, pc}
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 80116e0:	f8cd c004 	str.w	ip, [sp, #4]
 80116e4:	9700      	str	r7, [sp, #0]
 80116e6:	4628      	mov	r0, r5
 80116e8:	f7ff ff7c 	bl	80115e4 <RadioGetGfskTimeOnAirNumerator>
 80116ec:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 80116f0:	fb00 f404 	mul.w	r4, r0, r4
        break;
 80116f4:	e7ee      	b.n	80116d4 <RadioTimeOnAir+0x24>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 80116f6:	f8cd c008 	str.w	ip, [sp, #8]
 80116fa:	9701      	str	r7, [sp, #4]
 80116fc:	9300      	str	r3, [sp, #0]
 80116fe:	4613      	mov	r3, r2
 8011700:	460a      	mov	r2, r1
 8011702:	4629      	mov	r1, r5
 8011704:	4630      	mov	r0, r6
 8011706:	f7ff ff80 	bl	801160a <RadioGetLoRaTimeOnAirNumerator>
 801170a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 801170e:	fb00 f404 	mul.w	r4, r0, r4
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 8011712:	4b03      	ldr	r3, [pc, #12]	; (8011720 <RadioTimeOnAir+0x70>)
 8011714:	5d98      	ldrb	r0, [r3, r6]
 8011716:	f7ff ff37 	bl	8011588 <RadioGetLoRaBandwidthInHz>
 801171a:	4605      	mov	r5, r0
        break;
 801171c:	e7da      	b.n	80116d4 <RadioTimeOnAir+0x24>
 801171e:	bf00      	nop
 8011720:	08014d78 	.word	0x08014d78

08011724 <RadioOnTxTimeoutProcess>:
{
    RADIO_RX_TIMEOUT_PROCESS();
}

static void RadioOnTxTimeoutProcess( void )
{
 8011724:	b508      	push	{r3, lr}
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 8011726:	4b05      	ldr	r3, [pc, #20]	; (801173c <RadioOnTxTimeoutProcess+0x18>)
 8011728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801172c:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_TX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 801172e:	4b04      	ldr	r3, [pc, #16]	; (8011740 <RadioOnTxTimeoutProcess+0x1c>)
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	b113      	cbz	r3, 801173a <RadioOnTxTimeoutProcess+0x16>
 8011734:	685b      	ldr	r3, [r3, #4]
 8011736:	b103      	cbz	r3, 801173a <RadioOnTxTimeoutProcess+0x16>
    {
        RadioEvents->TxTimeout( );
 8011738:	4798      	blx	r3
    }
}
 801173a:	bd08      	pop	{r3, pc}
 801173c:	48000400 	.word	0x48000400
 8011740:	20001158 	.word	0x20001158

08011744 <RadioOnTxTimeoutIrq>:
{
 8011744:	b508      	push	{r3, lr}
    RADIO_TX_TIMEOUT_PROCESS();
 8011746:	f7ff ffed 	bl	8011724 <RadioOnTxTimeoutProcess>
}
 801174a:	bd08      	pop	{r3, pc}

0801174c <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 801174c:	b508      	push	{r3, lr}
 801174e:	4b05      	ldr	r3, [pc, #20]	; (8011764 <RadioOnRxTimeoutProcess+0x18>)
 8011750:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011754:	629a      	str	r2, [r3, #40]	; 0x28
    DBG_GPIO_RADIO_RX( RST );

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011756:	4b04      	ldr	r3, [pc, #16]	; (8011768 <RadioOnRxTimeoutProcess+0x1c>)
 8011758:	681b      	ldr	r3, [r3, #0]
 801175a:	b113      	cbz	r3, 8011762 <RadioOnRxTimeoutProcess+0x16>
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	b103      	cbz	r3, 8011762 <RadioOnRxTimeoutProcess+0x16>
    {
        RadioEvents->RxTimeout( );
 8011760:	4798      	blx	r3
    }
}
 8011762:	bd08      	pop	{r3, pc}
 8011764:	48000400 	.word	0x48000400
 8011768:	20001158 	.word	0x20001158

0801176c <RadioOnRxTimeoutIrq>:
{
 801176c:	b508      	push	{r3, lr}
    RADIO_RX_TIMEOUT_PROCESS();
 801176e:	f7ff ffed 	bl	801174c <RadioOnRxTimeoutProcess>
}
 8011772:	bd08      	pop	{r3, pc}

08011774 <RadioSetRxGenericConfig>:
    }
    return status;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8011774:	f04f 30ff 	mov.w	r0, #4294967295
 8011778:	4770      	bx	lr

0801177a <RadioSetTxGenericConfig>:
    SubgRf.TxTimeout = timeout;
    return 0;
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801177a:	f04f 30ff 	mov.w	r0, #4294967295
 801177e:	4770      	bx	lr

08011780 <RadioLrFhssSetCfg>:
        return status;
    }
    SubgRf.lr_fhss.is_lr_fhss_on = true;
#endif /* RADIO_LR_FHSS_IS_ON == 1 */
    return  status;
}
 8011780:	2001      	movs	r0, #1
 8011782:	4770      	bx	lr

08011784 <RadioLrFhssGetTimeOnAirInMs>:

    return RADIO_STATUS_OK;
#else
    return RADIO_STATUS_UNSUPPORTED_FEATURE;
#endif /* RADIO_LR_FHSS_IS_ON */
 8011784:	2001      	movs	r0, #1
 8011786:	4770      	bx	lr

08011788 <RadioWrite>:
{
 8011788:	b508      	push	{r3, lr}
    SUBGRF_WriteRegister( addr, data );
 801178a:	f000 fe37 	bl	80123fc <SUBGRF_WriteRegister>
}
 801178e:	bd08      	pop	{r3, pc}

08011790 <RadioTxCw>:
{
 8011790:	b510      	push	{r4, lr}
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8011792:	f001 fbcf 	bl	8012f34 <SUBGRF_SetRfTxPower>
 8011796:	4604      	mov	r4, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011798:	210e      	movs	r1, #14
 801179a:	f640 101f 	movw	r0, #2335	; 0x91f
 801179e:	f000 fe2d 	bl	80123fc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 80117a2:	2101      	movs	r1, #1
 80117a4:	4620      	mov	r0, r4
 80117a6:	f001 fbb1 	bl	8012f0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 80117aa:	f000 fff7 	bl	801279c <SUBGRF_SetTxContinuousWave>
}
 80117ae:	bd10      	pop	{r4, pc}

080117b0 <RadioTxPrbs>:
{
 80117b0:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 80117b2:	2101      	movs	r1, #1
 80117b4:	4b07      	ldr	r3, [pc, #28]	; (80117d4 <RadioTxPrbs+0x24>)
 80117b6:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 80117ba:	f001 fba7 	bl	8012f0c <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 80117be:	212d      	movs	r1, #45	; 0x2d
 80117c0:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 80117c4:	f7ff ffe0 	bl	8011788 <RadioWrite>
    SUBGRF_SetTxInfinitePreamble( );
 80117c8:	f000 ffef 	bl	80127aa <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 80117cc:	4802      	ldr	r0, [pc, #8]	; (80117d8 <RadioTxPrbs+0x28>)
 80117ce:	f000 ff25 	bl	801261c <SUBGRF_SetTx>
}
 80117d2:	bd08      	pop	{r3, pc}
 80117d4:	20001174 	.word	0x20001174
 80117d8:	000fffff 	.word	0x000fffff

080117dc <RadioSetRxDutyCycle>:
{
 80117dc:	b570      	push	{r4, r5, r6, lr}
 80117de:	4604      	mov	r4, r0
 80117e0:	460d      	mov	r5, r1
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 80117e2:	eb01 0340 	add.w	r3, r1, r0, lsl #1
 80117e6:	4e09      	ldr	r6, [pc, #36]	; (801180c <RadioSetRxDutyCycle+0x30>)
 80117e8:	65b3      	str	r3, [r6, #88]	; 0x58
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 80117ea:	2300      	movs	r3, #0
 80117ec:	461a      	mov	r2, r3
 80117ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80117f2:	4608      	mov	r0, r1
 80117f4:	f001 f8a5 	bl	8012942 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80117f8:	2100      	movs	r1, #0
 80117fa:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 80117fe:	f001 fb85 	bl	8012f0c <SUBGRF_SetSwitch>
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8011802:	4629      	mov	r1, r5
 8011804:	4620      	mov	r0, r4
 8011806:	f000 ff99 	bl	801273c <SUBGRF_SetRxDutyCycle>
}
 801180a:	bd70      	pop	{r4, r5, r6, pc}
 801180c:	20001174 	.word	0x20001174

08011810 <RadioRxBoosted>:
{
 8011810:	b538      	push	{r3, r4, r5, lr}
 8011812:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init() )
 8011814:	f001 fc69 	bl	80130ea <RFW_Is_Init>
 8011818:	2801      	cmp	r0, #1
 801181a:	d019      	beq.n	8011850 <RadioRxBoosted+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801181c:	2300      	movs	r3, #0
 801181e:	461a      	mov	r2, r3
 8011820:	f240 2162 	movw	r1, #610	; 0x262
 8011824:	4608      	mov	r0, r1
 8011826:	f001 f88c 	bl	8012942 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 801182a:	b9a4      	cbnz	r4, 8011856 <RadioRxBoosted+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801182c:	4c11      	ldr	r4, [pc, #68]	; (8011874 <RadioRxBoosted+0x64>)
 801182e:	2100      	movs	r1, #0
 8011830:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8011832:	4b11      	ldr	r3, [pc, #68]	; (8011878 <RadioRxBoosted+0x68>)
 8011834:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011838:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801183a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 801183e:	f001 fb65 	bl	8012f0c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011842:	7863      	ldrb	r3, [r4, #1]
 8011844:	b183      	cbz	r3, 8011868 <RadioRxBoosted+0x58>
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 8011846:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 801184a:	f000 ff59 	bl	8012700 <SUBGRF_SetRxBoosted>
}
 801184e:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit();
 8011850:	f001 fc53 	bl	80130fa <RFW_ReceiveInit>
 8011854:	e7e9      	b.n	801182a <RadioRxBoosted+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011856:	4d09      	ldr	r5, [pc, #36]	; (801187c <RadioRxBoosted+0x6c>)
 8011858:	4621      	mov	r1, r4
 801185a:	4628      	mov	r0, r5
 801185c:	f002 f920 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011860:	4628      	mov	r0, r5
 8011862:	f002 f8d7 	bl	8013a14 <UTIL_TIMER_Start>
 8011866:	e7e1      	b.n	801182c <RadioRxBoosted+0x1c>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 8011868:	4b02      	ldr	r3, [pc, #8]	; (8011874 <RadioRxBoosted+0x64>)
 801186a:	6898      	ldr	r0, [r3, #8]
 801186c:	0180      	lsls	r0, r0, #6
 801186e:	f000 ff47 	bl	8012700 <SUBGRF_SetRxBoosted>
}
 8011872:	e7ec      	b.n	801184e <RadioRxBoosted+0x3e>
 8011874:	20001174 	.word	0x20001174
 8011878:	48000400 	.word	0x48000400
 801187c:	2000115c 	.word	0x2000115c

08011880 <RadioStandby>:
{
 8011880:	b508      	push	{r3, lr}
    SUBGRF_SetStandby( STDBY_RC );
 8011882:	2000      	movs	r0, #0
 8011884:	f000 feb0 	bl	80125e8 <SUBGRF_SetStandby>
}
 8011888:	bd08      	pop	{r3, pc}

0801188a <RadioRead>:
{
 801188a:	b508      	push	{r3, lr}
    return SUBGRF_ReadRegister( addr );
 801188c:	f000 fdc6 	bl	801241c <SUBGRF_ReadRegister>
}
 8011890:	bd08      	pop	{r3, pc}

08011892 <RadioGetStatus>:
{
 8011892:	b508      	push	{r3, lr}
    switch( SUBGRF_GetOperatingMode( ) )
 8011894:	f000 fda6 	bl	80123e4 <SUBGRF_GetOperatingMode>
 8011898:	2805      	cmp	r0, #5
 801189a:	d007      	beq.n	80118ac <RadioGetStatus+0x1a>
 801189c:	2807      	cmp	r0, #7
 801189e:	d007      	beq.n	80118b0 <RadioGetStatus+0x1e>
 80118a0:	2804      	cmp	r0, #4
 80118a2:	d001      	beq.n	80118a8 <RadioGetStatus+0x16>
            return RF_IDLE;
 80118a4:	2000      	movs	r0, #0
}
 80118a6:	bd08      	pop	{r3, pc}
    switch( SUBGRF_GetOperatingMode( ) )
 80118a8:	2002      	movs	r0, #2
 80118aa:	e7fc      	b.n	80118a6 <RadioGetStatus+0x14>
            return RF_RX_RUNNING;
 80118ac:	2001      	movs	r0, #1
 80118ae:	e7fa      	b.n	80118a6 <RadioGetStatus+0x14>
            return RF_CAD;
 80118b0:	2003      	movs	r0, #3
 80118b2:	e7f8      	b.n	80118a6 <RadioGetStatus+0x14>

080118b4 <RadioIrqProcess>:
{
 80118b4:	b530      	push	{r4, r5, lr}
 80118b6:	b083      	sub	sp, #12
    uint8_t size = 0;
 80118b8:	2300      	movs	r3, #0
 80118ba:	f88d 3007 	strb.w	r3, [sp, #7]
    int32_t cfo = 0;
 80118be:	9300      	str	r3, [sp, #0]
    switch( SubgRf.RadioIrq )
 80118c0:	4ba5      	ldr	r3, [pc, #660]	; (8011b58 <RadioIrqProcess+0x2a4>)
 80118c2:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80118c6:	2b20      	cmp	r3, #32
 80118c8:	d829      	bhi.n	801191e <RadioIrqProcess+0x6a>
 80118ca:	b21a      	sxth	r2, r3
 80118cc:	2a00      	cmp	r2, #0
 80118ce:	f000 8140 	beq.w	8011b52 <RadioIrqProcess+0x29e>
 80118d2:	3b01      	subs	r3, #1
 80118d4:	2b1f      	cmp	r3, #31
 80118d6:	f200 813c 	bhi.w	8011b52 <RadioIrqProcess+0x29e>
 80118da:	e8df f013 	tbh	[pc, r3, lsl #1]
 80118de:	0063      	.short	0x0063
 80118e0:	013a007f 	.word	0x013a007f
 80118e4:	013a00f7 	.word	0x013a00f7
 80118e8:	013a013a 	.word	0x013a013a
 80118ec:	013a0127 	.word	0x013a0127
 80118f0:	013a013a 	.word	0x013a013a
 80118f4:	013a013a 	.word	0x013a013a
 80118f8:	013a013a 	.word	0x013a013a
 80118fc:	013a0134 	.word	0x013a0134
 8011900:	013a013a 	.word	0x013a013a
 8011904:	013a013a 	.word	0x013a013a
 8011908:	013a013a 	.word	0x013a013a
 801190c:	013a013a 	.word	0x013a013a
 8011910:	013a013a 	.word	0x013a013a
 8011914:	013a013a 	.word	0x013a013a
 8011918:	013a013a 	.word	0x013a013a
 801191c:	0155      	.short	0x0155
 801191e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011922:	f000 80b3 	beq.w	8011a8c <RadioIrqProcess+0x1d8>
 8011926:	d928      	bls.n	801197a <RadioIrqProcess+0xc6>
 8011928:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801192c:	f040 8111 	bne.w	8011b52 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8011930:	4b8a      	ldr	r3, [pc, #552]	; (8011b5c <RadioIrqProcess+0x2a8>)
 8011932:	2201      	movs	r2, #1
 8011934:	2100      	movs	r1, #0
 8011936:	2002      	movs	r0, #2
 8011938:	f001 fcbe 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 801193c:	f000 fd52 	bl	80123e4 <SUBGRF_GetOperatingMode>
 8011940:	2804      	cmp	r0, #4
 8011942:	f000 80b0 	beq.w	8011aa6 <RadioIrqProcess+0x1f2>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8011946:	f000 fd4d 	bl	80123e4 <SUBGRF_GetOperatingMode>
 801194a:	2805      	cmp	r0, #5
 801194c:	f040 8101 	bne.w	8011b52 <RadioIrqProcess+0x29e>
  WRITE_REG(GPIOx->BRR, PinMask);
 8011950:	4b83      	ldr	r3, [pc, #524]	; (8011b60 <RadioIrqProcess+0x2ac>)
 8011952:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011956:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &RxTimeoutTimer );
 8011958:	4882      	ldr	r0, [pc, #520]	; (8011b64 <RadioIrqProcess+0x2b0>)
 801195a:	f002 f801 	bl	8013960 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 801195e:	2000      	movs	r0, #0
 8011960:	f000 fe42 	bl	80125e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011964:	4b80      	ldr	r3, [pc, #512]	; (8011b68 <RadioIrqProcess+0x2b4>)
 8011966:	681b      	ldr	r3, [r3, #0]
 8011968:	2b00      	cmp	r3, #0
 801196a:	f000 80f2 	beq.w	8011b52 <RadioIrqProcess+0x29e>
 801196e:	68db      	ldr	r3, [r3, #12]
 8011970:	2b00      	cmp	r3, #0
 8011972:	f000 80ee 	beq.w	8011b52 <RadioIrqProcess+0x29e>
                RadioEvents->RxTimeout( );
 8011976:	4798      	blx	r3
 8011978:	e0eb      	b.n	8011b52 <RadioIrqProcess+0x29e>
    switch( SubgRf.RadioIrq )
 801197a:	2b40      	cmp	r3, #64	; 0x40
 801197c:	f000 811d 	beq.w	8011bba <RadioIrqProcess+0x306>
 8011980:	2b80      	cmp	r3, #128	; 0x80
 8011982:	f040 80e6 	bne.w	8011b52 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011986:	2000      	movs	r0, #0
 8011988:	f000 fe2e 	bl	80125e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 801198c:	4b76      	ldr	r3, [pc, #472]	; (8011b68 <RadioIrqProcess+0x2b4>)
 801198e:	681b      	ldr	r3, [r3, #0]
 8011990:	2b00      	cmp	r3, #0
 8011992:	f000 80de 	beq.w	8011b52 <RadioIrqProcess+0x29e>
 8011996:	699b      	ldr	r3, [r3, #24]
 8011998:	2b00      	cmp	r3, #0
 801199a:	f000 80da 	beq.w	8011b52 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( false );
 801199e:	2000      	movs	r0, #0
 80119a0:	4798      	blx	r3
 80119a2:	e0d6      	b.n	8011b52 <RadioIrqProcess+0x29e>
 80119a4:	4b6e      	ldr	r3, [pc, #440]	; (8011b60 <RadioIrqProcess+0x2ac>)
 80119a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80119aa:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &TxTimeoutTimer );
 80119ac:	486f      	ldr	r0, [pc, #444]	; (8011b6c <RadioIrqProcess+0x2b8>)
 80119ae:	f001 ffd7 	bl	8013960 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 80119b2:	2000      	movs	r0, #0
 80119b4:	f000 fe18 	bl	80125e8 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 80119b8:	f001 fb99 	bl	80130ee <RFW_Is_LongPacketModeEnabled>
 80119bc:	2801      	cmp	r0, #1
 80119be:	d00a      	beq.n	80119d6 <RadioIrqProcess+0x122>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 80119c0:	4b69      	ldr	r3, [pc, #420]	; (8011b68 <RadioIrqProcess+0x2b4>)
 80119c2:	681b      	ldr	r3, [r3, #0]
 80119c4:	2b00      	cmp	r3, #0
 80119c6:	f000 80c4 	beq.w	8011b52 <RadioIrqProcess+0x29e>
 80119ca:	681b      	ldr	r3, [r3, #0]
 80119cc:	2b00      	cmp	r3, #0
 80119ce:	f000 80c0 	beq.w	8011b52 <RadioIrqProcess+0x29e>
            RadioEvents->TxDone( );
 80119d2:	4798      	blx	r3
 80119d4:	e0bd      	b.n	8011b52 <RadioIrqProcess+0x29e>
            RFW_DeInit_TxLongPacket( );
 80119d6:	f001 fb93 	bl	8013100 <RFW_DeInit_TxLongPacket>
 80119da:	e7f1      	b.n	80119c0 <RadioIrqProcess+0x10c>
 80119dc:	4b60      	ldr	r3, [pc, #384]	; (8011b60 <RadioIrqProcess+0x2ac>)
 80119de:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80119e2:	629a      	str	r2, [r3, #40]	; 0x28
        TimerStop( &RxTimeoutTimer );
 80119e4:	485f      	ldr	r0, [pc, #380]	; (8011b64 <RadioIrqProcess+0x2b0>)
 80119e6:	f001 ffbb 	bl	8013960 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 80119ea:	4b5b      	ldr	r3, [pc, #364]	; (8011b58 <RadioIrqProcess+0x2a4>)
 80119ec:	785b      	ldrb	r3, [r3, #1]
 80119ee:	b303      	cbz	r3, 8011a32 <RadioIrqProcess+0x17e>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 80119f0:	22ff      	movs	r2, #255	; 0xff
 80119f2:	f10d 0107 	add.w	r1, sp, #7
 80119f6:	485e      	ldr	r0, [pc, #376]	; (8011b70 <RadioIrqProcess+0x2bc>)
 80119f8:	f001 fa32 	bl	8012e60 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 80119fc:	485d      	ldr	r0, [pc, #372]	; (8011b74 <RadioIrqProcess+0x2c0>)
 80119fe:	f001 fa49 	bl	8012e94 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8011a02:	4b59      	ldr	r3, [pc, #356]	; (8011b68 <RadioIrqProcess+0x2b4>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	f000 80a3 	beq.w	8011b52 <RadioIrqProcess+0x29e>
 8011a0c:	689c      	ldr	r4, [r3, #8]
 8011a0e:	2c00      	cmp	r4, #0
 8011a10:	f000 809f 	beq.w	8011b52 <RadioIrqProcess+0x29e>
            switch( SubgRf.PacketStatus.packetType )
 8011a14:	4b50      	ldr	r3, [pc, #320]	; (8011b58 <RadioIrqProcess+0x2a4>)
 8011a16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8011a1a:	2b01      	cmp	r3, #1
 8011a1c:	d11d      	bne.n	8011a5a <RadioIrqProcess+0x1a6>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt,
 8011a1e:	4a4e      	ldr	r2, [pc, #312]	; (8011b58 <RadioIrqProcess+0x2a4>)
 8011a20:	f992 3031 	ldrsb.w	r3, [r2, #49]	; 0x31
 8011a24:	f992 2030 	ldrsb.w	r2, [r2, #48]	; 0x30
 8011a28:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011a2c:	4850      	ldr	r0, [pc, #320]	; (8011b70 <RadioIrqProcess+0x2bc>)
 8011a2e:	47a0      	blx	r4
                break;
 8011a30:	e08f      	b.n	8011b52 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011a32:	2000      	movs	r0, #0
 8011a34:	f000 fdd8 	bl	80125e8 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8011a38:	2100      	movs	r1, #0
 8011a3a:	f640 1002 	movw	r0, #2306	; 0x902
 8011a3e:	f000 fcdd 	bl	80123fc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8011a42:	f640 1044 	movw	r0, #2372	; 0x944
 8011a46:	f000 fce9 	bl	801241c <SUBGRF_ReadRegister>
 8011a4a:	f040 0102 	orr.w	r1, r0, #2
 8011a4e:	b2c9      	uxtb	r1, r1
 8011a50:	f640 1044 	movw	r0, #2372	; 0x944
 8011a54:	f000 fcd2 	bl	80123fc <SUBGRF_WriteRegister>
 8011a58:	e7ca      	b.n	80119f0 <RadioIrqProcess+0x13c>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8011a5a:	4c3f      	ldr	r4, [pc, #252]	; (8011b58 <RadioIrqProcess+0x2a4>)
 8011a5c:	4669      	mov	r1, sp
 8011a5e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8011a60:	f001 faf8 	bl	8013054 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, ( int8_t ) DIVR( cfo, 1000 ) );
 8011a64:	4b40      	ldr	r3, [pc, #256]	; (8011b68 <RadioIrqProcess+0x2b4>)
 8011a66:	681b      	ldr	r3, [r3, #0]
 8011a68:	689d      	ldr	r5, [r3, #8]
 8011a6a:	9b00      	ldr	r3, [sp, #0]
 8011a6c:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8011a70:	4a41      	ldr	r2, [pc, #260]	; (8011b78 <RadioIrqProcess+0x2c4>)
 8011a72:	fb82 1203 	smull	r1, r2, r2, r3
 8011a76:	17db      	asrs	r3, r3, #31
 8011a78:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
 8011a7c:	b25b      	sxtb	r3, r3
 8011a7e:	f994 2029 	ldrsb.w	r2, [r4, #41]	; 0x29
 8011a82:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011a86:	483a      	ldr	r0, [pc, #232]	; (8011b70 <RadioIrqProcess+0x2bc>)
 8011a88:	47a8      	blx	r5
                break;
 8011a8a:	e062      	b.n	8011b52 <RadioIrqProcess+0x29e>
        SUBGRF_SetStandby( STDBY_RC );
 8011a8c:	2000      	movs	r0, #0
 8011a8e:	f000 fdab 	bl	80125e8 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8011a92:	4b35      	ldr	r3, [pc, #212]	; (8011b68 <RadioIrqProcess+0x2b4>)
 8011a94:	681b      	ldr	r3, [r3, #0]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d05b      	beq.n	8011b52 <RadioIrqProcess+0x29e>
 8011a9a:	699b      	ldr	r3, [r3, #24]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d058      	beq.n	8011b52 <RadioIrqProcess+0x29e>
            RadioEvents->CadDone( true );
 8011aa0:	2001      	movs	r0, #1
 8011aa2:	4798      	blx	r3
 8011aa4:	e055      	b.n	8011b52 <RadioIrqProcess+0x29e>
 8011aa6:	4b2e      	ldr	r3, [pc, #184]	; (8011b60 <RadioIrqProcess+0x2ac>)
 8011aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011aac:	629a      	str	r2, [r3, #40]	; 0x28
            TimerStop( &TxTimeoutTimer );
 8011aae:	482f      	ldr	r0, [pc, #188]	; (8011b6c <RadioIrqProcess+0x2b8>)
 8011ab0:	f001 ff56 	bl	8013960 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	f000 fd97 	bl	80125e8 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8011aba:	4b2b      	ldr	r3, [pc, #172]	; (8011b68 <RadioIrqProcess+0x2b4>)
 8011abc:	681b      	ldr	r3, [r3, #0]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d047      	beq.n	8011b52 <RadioIrqProcess+0x29e>
 8011ac2:	685b      	ldr	r3, [r3, #4]
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d044      	beq.n	8011b52 <RadioIrqProcess+0x29e>
                RadioEvents->TxTimeout( );
 8011ac8:	4798      	blx	r3
 8011aca:	e042      	b.n	8011b52 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8011acc:	4b2b      	ldr	r3, [pc, #172]	; (8011b7c <RadioIrqProcess+0x2c8>)
 8011ace:	2201      	movs	r2, #1
 8011ad0:	2100      	movs	r1, #0
 8011ad2:	2002      	movs	r0, #2
 8011ad4:	f001 fbf0 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8011ad8:	4b1f      	ldr	r3, [pc, #124]	; (8011b58 <RadioIrqProcess+0x2a4>)
 8011ada:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011adc:	b3c9      	cbz	r1, 8011b52 <RadioIrqProcess+0x29e>
            Radio.Write( SUBGHZ_RTCPRDR2, ( SubgRf.RxDcPreambleDetectTimeout >> 16 ) & 0xFF ); /*Update Radio RTC Period MSB*/
 8011ade:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8011ae2:	f640 1003 	movw	r0, #2307	; 0x903
 8011ae6:	f7ff fe4f 	bl	8011788 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR1, ( SubgRf.RxDcPreambleDetectTimeout >> 8 ) & 0xFF ); /*Update Radio RTC Period MidByte*/
 8011aea:	4c1b      	ldr	r4, [pc, #108]	; (8011b58 <RadioIrqProcess+0x2a4>)
 8011aec:	f894 1059 	ldrb.w	r1, [r4, #89]	; 0x59
 8011af0:	f640 1004 	movw	r0, #2308	; 0x904
 8011af4:	f7ff fe48 	bl	8011788 <RadioWrite>
            Radio.Write( SUBGHZ_RTCPRDR0, ( SubgRf.RxDcPreambleDetectTimeout ) & 0xFF ); /*Update Radio RTC Period lsb*/
 8011af8:	f894 1058 	ldrb.w	r1, [r4, #88]	; 0x58
 8011afc:	f640 1005 	movw	r0, #2309	; 0x905
 8011b00:	f7ff fe42 	bl	8011788 <RadioWrite>
            Radio.Write( SUBGHZ_RTCCTLR, Radio.Read( SUBGHZ_RTCCTLR ) | 0x1 ); /*restart Radio RTC*/
 8011b04:	f640 1002 	movw	r0, #2306	; 0x902
 8011b08:	f7ff febf 	bl	801188a <RadioRead>
 8011b0c:	f040 0101 	orr.w	r1, r0, #1
 8011b10:	b2c9      	uxtb	r1, r1
 8011b12:	f640 1002 	movw	r0, #2306	; 0x902
 8011b16:	f7ff fe37 	bl	8011788 <RadioWrite>
            SubgRf.RxDcPreambleDetectTimeout = 0;
 8011b1a:	2200      	movs	r2, #0
 8011b1c:	65a2      	str	r2, [r4, #88]	; 0x58
            SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011b1e:	4613      	mov	r3, r2
 8011b20:	f240 2162 	movw	r1, #610	; 0x262
 8011b24:	4608      	mov	r0, r1
 8011b26:	f000 ff0c 	bl	8012942 <SUBGRF_SetDioIrqParams>
 8011b2a:	e012      	b.n	8011b52 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8011b2c:	4b14      	ldr	r3, [pc, #80]	; (8011b80 <RadioIrqProcess+0x2cc>)
 8011b2e:	2201      	movs	r2, #1
 8011b30:	2100      	movs	r1, #0
 8011b32:	2002      	movs	r0, #2
 8011b34:	f001 fbc0 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 8011b38:	f001 fad7 	bl	80130ea <RFW_Is_Init>
 8011b3c:	2801      	cmp	r0, #1
 8011b3e:	d108      	bne.n	8011b52 <RadioIrqProcess+0x29e>
            RFW_ReceivePayload( );
 8011b40:	f001 fadf 	bl	8013102 <RFW_ReceivePayload>
 8011b44:	e005      	b.n	8011b52 <RadioIrqProcess+0x29e>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 8011b46:	4b0f      	ldr	r3, [pc, #60]	; (8011b84 <RadioIrqProcess+0x2d0>)
 8011b48:	2201      	movs	r2, #1
 8011b4a:	2100      	movs	r1, #0
 8011b4c:	2002      	movs	r0, #2
 8011b4e:	f001 fbb3 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
}
 8011b52:	b003      	add	sp, #12
 8011b54:	bd30      	pop	{r4, r5, pc}
 8011b56:	bf00      	nop
 8011b58:	20001174 	.word	0x20001174
 8011b5c:	08014d0c 	.word	0x08014d0c
 8011b60:	48000400 	.word	0x48000400
 8011b64:	2000115c 	.word	0x2000115c
 8011b68:	20001158 	.word	0x20001158
 8011b6c:	200011d0 	.word	0x200011d0
 8011b70:	20001058 	.word	0x20001058
 8011b74:	20001198 	.word	0x20001198
 8011b78:	10624dd3 	.word	0x10624dd3
 8011b7c:	08014d20 	.word	0x08014d20
 8011b80:	08014d2c 	.word	0x08014d2c
 8011b84:	08014d38 	.word	0x08014d38
        TimerStop( &RxTimeoutTimer );
 8011b88:	4817      	ldr	r0, [pc, #92]	; (8011be8 <RadioIrqProcess+0x334>)
 8011b8a:	f001 fee9 	bl	8013960 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8011b8e:	4b17      	ldr	r3, [pc, #92]	; (8011bec <RadioIrqProcess+0x338>)
 8011b90:	785b      	ldrb	r3, [r3, #1]
 8011b92:	b173      	cbz	r3, 8011bb2 <RadioIrqProcess+0x2fe>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8011b94:	4b16      	ldr	r3, [pc, #88]	; (8011bf0 <RadioIrqProcess+0x33c>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d0da      	beq.n	8011b52 <RadioIrqProcess+0x29e>
 8011b9c:	68db      	ldr	r3, [r3, #12]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d0d7      	beq.n	8011b52 <RadioIrqProcess+0x29e>
            RadioEvents->RxTimeout( );
 8011ba2:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 8011ba4:	4b13      	ldr	r3, [pc, #76]	; (8011bf4 <RadioIrqProcess+0x340>)
 8011ba6:	2201      	movs	r2, #1
 8011ba8:	2100      	movs	r1, #0
 8011baa:	2002      	movs	r0, #2
 8011bac:	f001 fb84 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
 8011bb0:	e7cf      	b.n	8011b52 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011bb2:	2000      	movs	r0, #0
 8011bb4:	f000 fd18 	bl	80125e8 <SUBGRF_SetStandby>
 8011bb8:	e7ec      	b.n	8011b94 <RadioIrqProcess+0x2e0>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 8011bba:	4b0f      	ldr	r3, [pc, #60]	; (8011bf8 <RadioIrqProcess+0x344>)
 8011bbc:	2201      	movs	r2, #1
 8011bbe:	2100      	movs	r1, #0
 8011bc0:	2002      	movs	r0, #2
 8011bc2:	f001 fb79 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 8011bc6:	4b09      	ldr	r3, [pc, #36]	; (8011bec <RadioIrqProcess+0x338>)
 8011bc8:	785b      	ldrb	r3, [r3, #1]
 8011bca:	b143      	cbz	r3, 8011bde <RadioIrqProcess+0x32a>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 8011bcc:	4b08      	ldr	r3, [pc, #32]	; (8011bf0 <RadioIrqProcess+0x33c>)
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	2b00      	cmp	r3, #0
 8011bd2:	d0be      	beq.n	8011b52 <RadioIrqProcess+0x29e>
 8011bd4:	691b      	ldr	r3, [r3, #16]
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d0bb      	beq.n	8011b52 <RadioIrqProcess+0x29e>
            RadioEvents->RxError( );
 8011bda:	4798      	blx	r3
}
 8011bdc:	e7b9      	b.n	8011b52 <RadioIrqProcess+0x29e>
            SUBGRF_SetStandby( STDBY_RC );
 8011bde:	2000      	movs	r0, #0
 8011be0:	f000 fd02 	bl	80125e8 <SUBGRF_SetStandby>
 8011be4:	e7f2      	b.n	8011bcc <RadioIrqProcess+0x318>
 8011be6:	bf00      	nop
 8011be8:	2000115c 	.word	0x2000115c
 8011bec:	20001174 	.word	0x20001174
 8011bf0:	20001158 	.word	0x20001158
 8011bf4:	08014d44 	.word	0x08014d44
 8011bf8:	08014d50 	.word	0x08014d50

08011bfc <RadioOnDioIrq>:
{
 8011bfc:	b508      	push	{r3, lr}
    SubgRf.RadioIrq = radioIrq;
 8011bfe:	4b03      	ldr	r3, [pc, #12]	; (8011c0c <RadioOnDioIrq+0x10>)
 8011c00:	f8a3 0054 	strh.w	r0, [r3, #84]	; 0x54
    RADIO_IRQ_PROCESS();
 8011c04:	f7ff fe56 	bl	80118b4 <RadioIrqProcess>
}
 8011c08:	bd08      	pop	{r3, pc}
 8011c0a:	bf00      	nop
 8011c0c:	20001174 	.word	0x20001174

08011c10 <RadioGetWakeupTime>:
{
 8011c10:	b508      	push	{r3, lr}
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8011c12:	f001 f9a6 	bl	8012f62 <SUBGRF_GetRadioWakeUpTime>
}
 8011c16:	3003      	adds	r0, #3
 8011c18:	bd08      	pop	{r3, pc}
	...

08011c1c <RadioSetMaxPayloadLength>:
{
 8011c1c:	b508      	push	{r3, lr}
    if( modem == MODEM_LORA )
 8011c1e:	2801      	cmp	r0, #1
 8011c20:	d004      	beq.n	8011c2c <RadioSetMaxPayloadLength+0x10>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8011c22:	4b0a      	ldr	r3, [pc, #40]	; (8011c4c <RadioSetMaxPayloadLength+0x30>)
 8011c24:	7d5b      	ldrb	r3, [r3, #21]
 8011c26:	2b01      	cmp	r3, #1
 8011c28:	d008      	beq.n	8011c3c <RadioSetMaxPayloadLength+0x20>
}
 8011c2a:	bd08      	pop	{r3, pc}
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8011c2c:	4b08      	ldr	r3, [pc, #32]	; (8011c50 <RadioSetMaxPayloadLength+0x34>)
 8011c2e:	7019      	strb	r1, [r3, #0]
 8011c30:	4806      	ldr	r0, [pc, #24]	; (8011c4c <RadioSetMaxPayloadLength+0x30>)
 8011c32:	77c1      	strb	r1, [r0, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c34:	300e      	adds	r0, #14
 8011c36:	f001 f853 	bl	8012ce0 <SUBGRF_SetPacketParams>
 8011c3a:	e7f6      	b.n	8011c2a <RadioSetMaxPayloadLength+0xe>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8011c3c:	4b04      	ldr	r3, [pc, #16]	; (8011c50 <RadioSetMaxPayloadLength+0x34>)
 8011c3e:	7019      	strb	r1, [r3, #0]
 8011c40:	4802      	ldr	r0, [pc, #8]	; (8011c4c <RadioSetMaxPayloadLength+0x30>)
 8011c42:	7581      	strb	r1, [r0, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011c44:	300e      	adds	r0, #14
 8011c46:	f001 f84b 	bl	8012ce0 <SUBGRF_SetPacketParams>
}
 8011c4a:	e7ee      	b.n	8011c2a <RadioSetMaxPayloadLength+0xe>
 8011c4c:	20001174 	.word	0x20001174
 8011c50:	20000104 	.word	0x20000104

08011c54 <RadioReadRegisters>:
{
 8011c54:	b508      	push	{r3, lr}
    SUBGRF_ReadRegisters( addr, buffer, size );
 8011c56:	f000 fc5f 	bl	8012518 <SUBGRF_ReadRegisters>
}
 8011c5a:	bd08      	pop	{r3, pc}

08011c5c <RadioWriteRegisters>:
{
 8011c5c:	b508      	push	{r3, lr}
    SUBGRF_WriteRegisters( addr, buffer, size );
 8011c5e:	f000 fc19 	bl	8012494 <SUBGRF_WriteRegisters>
}
 8011c62:	bd08      	pop	{r3, pc}

08011c64 <RadioRssi>:
{
 8011c64:	b508      	push	{r3, lr}
    return SUBGRF_GetRssiInst( );
 8011c66:	f001 f8cb 	bl	8012e00 <SUBGRF_GetRssiInst>
}
 8011c6a:	b200      	sxth	r0, r0
 8011c6c:	bd08      	pop	{r3, pc}
	...

08011c70 <RadioSetTxContinuousWave>:
{
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	460d      	mov	r5, r1
    uint32_t timeout = ( uint32_t )time * 1000;
 8011c74:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
 8011c78:	fb02 f404 	mul.w	r4, r2, r4
    SUBGRF_SetRfFrequency( freq );
 8011c7c:	f000 fed4 	bl	8012a28 <SUBGRF_SetRfFrequency>
    antswitchpow = SUBGRF_SetRfTxPower( power );
 8011c80:	4628      	mov	r0, r5
 8011c82:	f001 f957 	bl	8012f34 <SUBGRF_SetRfTxPower>
 8011c86:	4605      	mov	r5, r0
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011c88:	210e      	movs	r1, #14
 8011c8a:	f640 101f 	movw	r0, #2335	; 0x91f
 8011c8e:	f000 fbb5 	bl	80123fc <SUBGRF_WriteRegister>
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8011c92:	2101      	movs	r1, #1
 8011c94:	4628      	mov	r0, r5
 8011c96:	f001 f939 	bl	8012f0c <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 8011c9a:	f000 fd7f 	bl	801279c <SUBGRF_SetTxContinuousWave>
    TimerSetValue( &TxTimeoutTimer, timeout );
 8011c9e:	4d04      	ldr	r5, [pc, #16]	; (8011cb0 <RadioSetTxContinuousWave+0x40>)
 8011ca0:	4621      	mov	r1, r4
 8011ca2:	4628      	mov	r0, r5
 8011ca4:	f001 fefc 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8011ca8:	4628      	mov	r0, r5
 8011caa:	f001 feb3 	bl	8013a14 <UTIL_TIMER_Start>
}
 8011cae:	bd38      	pop	{r3, r4, r5, pc}
 8011cb0:	200011d0 	.word	0x200011d0

08011cb4 <RadioSetChannel>:
{
 8011cb4:	b508      	push	{r3, lr}
    SUBGRF_SetRfFrequency( freq );
 8011cb6:	f000 feb7 	bl	8012a28 <SUBGRF_SetRfFrequency>
}
 8011cba:	bd08      	pop	{r3, pc}

08011cbc <RadioStartCad>:
{
 8011cbc:	b508      	push	{r3, lr}
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011cbe:	2100      	movs	r1, #0
 8011cc0:	4b07      	ldr	r3, [pc, #28]	; (8011ce0 <RadioStartCad+0x24>)
 8011cc2:	f893 0056 	ldrb.w	r0, [r3, #86]	; 0x56
 8011cc6:	f001 f921 	bl	8012f0c <SUBGRF_SetSwitch>
    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8011cca:	2300      	movs	r3, #0
 8011ccc:	461a      	mov	r2, r3
 8011cce:	f44f 71c0 	mov.w	r1, #384	; 0x180
 8011cd2:	4608      	mov	r0, r1
 8011cd4:	f000 fe35 	bl	8012942 <SUBGRF_SetDioIrqParams>
    SUBGRF_SetCad( );
 8011cd8:	f000 fd54 	bl	8012784 <SUBGRF_SetCad>
}
 8011cdc:	bd08      	pop	{r3, pc}
 8011cde:	bf00      	nop
 8011ce0:	20001174 	.word	0x20001174

08011ce4 <RadioRx>:
{
 8011ce4:	b538      	push	{r3, r4, r5, lr}
 8011ce6:	4604      	mov	r4, r0
    if( 1UL == RFW_Is_Init( ) )
 8011ce8:	f001 f9ff 	bl	80130ea <RFW_Is_Init>
 8011cec:	2801      	cmp	r0, #1
 8011cee:	d019      	beq.n	8011d24 <RadioRx+0x40>
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	461a      	mov	r2, r3
 8011cf4:	f240 2162 	movw	r1, #610	; 0x262
 8011cf8:	4608      	mov	r0, r1
 8011cfa:	f000 fe22 	bl	8012942 <SUBGRF_SetDioIrqParams>
    if( timeout != 0 )
 8011cfe:	b9a4      	cbnz	r4, 8011d2a <RadioRx+0x46>
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8011d00:	4c11      	ldr	r4, [pc, #68]	; (8011d48 <RadioRx+0x64>)
 8011d02:	2100      	movs	r1, #0
 8011d04:	65a1      	str	r1, [r4, #88]	; 0x58
  WRITE_REG(GPIOx->BSRR, PinMask);
 8011d06:	4b11      	ldr	r3, [pc, #68]	; (8011d4c <RadioRx+0x68>)
 8011d08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8011d0c:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8011d0e:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011d12:	f001 f8fb 	bl	8012f0c <SUBGRF_SetSwitch>
    if( SubgRf.RxContinuous == true )
 8011d16:	7863      	ldrb	r3, [r4, #1]
 8011d18:	b183      	cbz	r3, 8011d3c <RadioRx+0x58>
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8011d1a:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 8011d1e:	f000 fc9f 	bl	8012660 <SUBGRF_SetRx>
}
 8011d22:	bd38      	pop	{r3, r4, r5, pc}
        RFW_ReceiveInit( );
 8011d24:	f001 f9e9 	bl	80130fa <RFW_ReceiveInit>
 8011d28:	e7e9      	b.n	8011cfe <RadioRx+0x1a>
        TimerSetValue( &RxTimeoutTimer, timeout );
 8011d2a:	4d09      	ldr	r5, [pc, #36]	; (8011d50 <RadioRx+0x6c>)
 8011d2c:	4621      	mov	r1, r4
 8011d2e:	4628      	mov	r0, r5
 8011d30:	f001 feb6 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8011d34:	4628      	mov	r0, r5
 8011d36:	f001 fe6d 	bl	8013a14 <UTIL_TIMER_Start>
 8011d3a:	e7e1      	b.n	8011d00 <RadioRx+0x1c>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 8011d3c:	4b02      	ldr	r3, [pc, #8]	; (8011d48 <RadioRx+0x64>)
 8011d3e:	6898      	ldr	r0, [r3, #8]
 8011d40:	0180      	lsls	r0, r0, #6
 8011d42:	f000 fc8d 	bl	8012660 <SUBGRF_SetRx>
}
 8011d46:	e7ec      	b.n	8011d22 <RadioRx+0x3e>
 8011d48:	20001174 	.word	0x20001174
 8011d4c:	48000400 	.word	0x48000400
 8011d50:	2000115c 	.word	0x2000115c

08011d54 <RadioSleep>:
{
 8011d54:	b508      	push	{r3, lr}
    SUBGRF_SetSleep( params );
 8011d56:	f04f 0004 	mov.w	r0, #4
 8011d5a:	f000 fc25 	bl	80125a8 <SUBGRF_SetSleep>
    RADIO_DELAY_MS( 2 );
 8011d5e:	2002      	movs	r0, #2
 8011d60:	f7ef ff8c 	bl	8001c7c <HAL_Delay>
}
 8011d64:	bd08      	pop	{r3, pc}
	...

08011d68 <RadioSend>:
{
 8011d68:	b570      	push	{r4, r5, r6, lr}
 8011d6a:	b082      	sub	sp, #8
 8011d6c:	4605      	mov	r5, r0
 8011d6e:	460c      	mov	r4, r1
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 8011d70:	2300      	movs	r3, #0
 8011d72:	461a      	mov	r2, r3
 8011d74:	f240 2101 	movw	r1, #513	; 0x201
 8011d78:	4608      	mov	r0, r1
 8011d7a:	f000 fde2 	bl	8012942 <SUBGRF_SetDioIrqParams>
 8011d7e:	4b3f      	ldr	r3, [pc, #252]	; (8011e7c <RadioSend+0x114>)
 8011d80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8011d84:	619a      	str	r2, [r3, #24]
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8011d86:	4e3e      	ldr	r6, [pc, #248]	; (8011e80 <RadioSend+0x118>)
 8011d88:	2101      	movs	r1, #1
 8011d8a:	f896 0056 	ldrb.w	r0, [r6, #86]	; 0x56
 8011d8e:	f001 f8bd 	bl	8012f0c <SUBGRF_SetSwitch>
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 8011d92:	7833      	ldrb	r3, [r6, #0]
 8011d94:	2b01      	cmp	r3, #1
 8011d96:	d103      	bne.n	8011da0 <RadioSend+0x38>
 8011d98:	f896 3051 	ldrb.w	r3, [r6, #81]	; 0x51
 8011d9c:	2b06      	cmp	r3, #6
 8011d9e:	d012      	beq.n	8011dc6 <RadioSend+0x5e>
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8011da0:	f640 0089 	movw	r0, #2185	; 0x889
 8011da4:	f000 fb3a 	bl	801241c <SUBGRF_ReadRegister>
 8011da8:	f040 0104 	orr.w	r1, r0, #4
 8011dac:	b2c9      	uxtb	r1, r1
 8011dae:	f640 0089 	movw	r0, #2185	; 0x889
 8011db2:	f000 fb23 	bl	80123fc <SUBGRF_WriteRegister>
        switch( SubgRf.Modem )
 8011db6:	4b32      	ldr	r3, [pc, #200]	; (8011e80 <RadioSend+0x118>)
 8011db8:	781b      	ldrb	r3, [r3, #0]
 8011dba:	2b03      	cmp	r3, #3
 8011dbc:	d818      	bhi.n	8011df0 <RadioSend+0x88>
 8011dbe:	e8df f003 	tbb	[pc, r3]
 8011dc2:	0d23      	.short	0x0d23
 8011dc4:	4f23      	.short	0x4f23
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8011dc6:	f640 0089 	movw	r0, #2185	; 0x889
 8011dca:	f000 fb27 	bl	801241c <SUBGRF_ReadRegister>
 8011dce:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 8011dd2:	f640 0089 	movw	r0, #2185	; 0x889
 8011dd6:	f000 fb11 	bl	80123fc <SUBGRF_WriteRegister>
 8011dda:	e7ec      	b.n	8011db6 <RadioSend+0x4e>
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8011ddc:	4828      	ldr	r0, [pc, #160]	; (8011e80 <RadioSend+0x118>)
 8011dde:	77c4      	strb	r4, [r0, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011de0:	300e      	adds	r0, #14
 8011de2:	f000 ff7d 	bl	8012ce0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011de6:	2200      	movs	r2, #0
 8011de8:	4621      	mov	r1, r4
 8011dea:	4628      	mov	r0, r5
 8011dec:	f000 fc30 	bl	8012650 <SUBGRF_SendPayload>
        TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 8011df0:	4c24      	ldr	r4, [pc, #144]	; (8011e84 <RadioSend+0x11c>)
 8011df2:	4b23      	ldr	r3, [pc, #140]	; (8011e80 <RadioSend+0x118>)
 8011df4:	6859      	ldr	r1, [r3, #4]
 8011df6:	4620      	mov	r0, r4
 8011df8:	f001 fe52 	bl	8013aa0 <UTIL_TIMER_SetPeriod>
        TimerStart( &TxTimeoutTimer );
 8011dfc:	4620      	mov	r0, r4
 8011dfe:	f001 fe09 	bl	8013a14 <UTIL_TIMER_Start>
    return RADIO_STATUS_OK;
 8011e02:	2000      	movs	r0, #0
}
 8011e04:	b002      	add	sp, #8
 8011e06:	bd70      	pop	{r4, r5, r6, pc}
            if ( 1UL == RFW_Is_Init( ) )
 8011e08:	f001 f96f 	bl	80130ea <RFW_Is_Init>
 8011e0c:	2801      	cmp	r0, #1
 8011e0e:	d00a      	beq.n	8011e26 <RadioSend+0xbe>
                SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 8011e10:	481b      	ldr	r0, [pc, #108]	; (8011e80 <RadioSend+0x118>)
 8011e12:	7584      	strb	r4, [r0, #22]
                SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e14:	300e      	adds	r0, #14
 8011e16:	f000 ff63 	bl	8012ce0 <SUBGRF_SetPacketParams>
                SUBGRF_SendPayload( buffer, size, 0 );
 8011e1a:	2200      	movs	r2, #0
 8011e1c:	4621      	mov	r1, r4
 8011e1e:	4628      	mov	r0, r5
 8011e20:	f000 fc16 	bl	8012650 <SUBGRF_SendPayload>
 8011e24:	e7e4      	b.n	8011df0 <RadioSend+0x88>
                if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 8011e26:	f10d 0207 	add.w	r2, sp, #7
 8011e2a:	4621      	mov	r1, r4
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	f001 f961 	bl	80130f4 <RFW_TransmitInit>
 8011e32:	b968      	cbnz	r0, 8011e50 <RadioSend+0xe8>
                    SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 8011e34:	4812      	ldr	r0, [pc, #72]	; (8011e80 <RadioSend+0x118>)
 8011e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8011e3a:	7583      	strb	r3, [r0, #22]
                    SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e3c:	300e      	adds	r0, #14
 8011e3e:	f000 ff4f 	bl	8012ce0 <SUBGRF_SetPacketParams>
                    SUBGRF_SendPayload( buffer, outsize, 0 );
 8011e42:	2200      	movs	r2, #0
 8011e44:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8011e48:	4628      	mov	r0, r5
 8011e4a:	f000 fc01 	bl	8012650 <SUBGRF_SendPayload>
 8011e4e:	e7cf      	b.n	8011df0 <RadioSend+0x88>
                    MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n" );
 8011e50:	4b0d      	ldr	r3, [pc, #52]	; (8011e88 <RadioSend+0x120>)
 8011e52:	2201      	movs	r2, #1
 8011e54:	2100      	movs	r1, #0
 8011e56:	2002      	movs	r0, #2
 8011e58:	f001 fa2e 	bl	80132b8 <UTIL_ADV_TRACE_COND_FSend>
                    return RADIO_STATUS_ERROR;
 8011e5c:	2003      	movs	r0, #3
 8011e5e:	e7d1      	b.n	8011e04 <RadioSend+0x9c>
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8011e60:	4807      	ldr	r0, [pc, #28]	; (8011e80 <RadioSend+0x118>)
 8011e62:	2302      	movs	r3, #2
 8011e64:	7383      	strb	r3, [r0, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8011e66:	7684      	strb	r4, [r0, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011e68:	300e      	adds	r0, #14
 8011e6a:	f000 ff39 	bl	8012ce0 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8011e6e:	2200      	movs	r2, #0
 8011e70:	4621      	mov	r1, r4
 8011e72:	4628      	mov	r0, r5
 8011e74:	f000 fbec 	bl	8012650 <SUBGRF_SendPayload>
            break;
 8011e78:	e7ba      	b.n	8011df0 <RadioSend+0x88>
 8011e7a:	bf00      	nop
 8011e7c:	48000400 	.word	0x48000400
 8011e80:	20001174 	.word	0x20001174
 8011e84:	200011d0 	.word	0x200011d0
 8011e88:	08014d60 	.word	0x08014d60

08011e8c <RadioRandom>:
{
 8011e8c:	b508      	push	{r3, lr}
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8011e8e:	2300      	movs	r3, #0
 8011e90:	461a      	mov	r2, r3
 8011e92:	4619      	mov	r1, r3
 8011e94:	4618      	mov	r0, r3
 8011e96:	f000 fd54 	bl	8012942 <SUBGRF_SetDioIrqParams>
    rnd = SUBGRF_GetRandom();
 8011e9a:	f000 fbfb 	bl	8012694 <SUBGRF_GetRandom>
}
 8011e9e:	bd08      	pop	{r3, pc}

08011ea0 <RadioSetModem>:
{
 8011ea0:	b510      	push	{r4, lr}
 8011ea2:	4604      	mov	r4, r0
    SubgRf.Modem = modem;
 8011ea4:	4b14      	ldr	r3, [pc, #80]	; (8011ef8 <RadioSetModem+0x58>)
 8011ea6:	7018      	strb	r0, [r3, #0]
    RFW_SetRadioModem( modem );
 8011ea8:	f001 f92c 	bl	8013104 <RFW_SetRadioModem>
    switch( modem )
 8011eac:	2c01      	cmp	r4, #1
 8011eae:	d010      	beq.n	8011ed2 <RadioSetModem+0x32>
 8011eb0:	2c03      	cmp	r4, #3
 8011eb2:	d01a      	beq.n	8011eea <RadioSetModem+0x4a>
 8011eb4:	b134      	cbz	r4, 8011ec4 <RadioSetModem+0x24>
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8011eb6:	2003      	movs	r0, #3
 8011eb8:	f000 fde2 	bl	8012a80 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011ebc:	4b0e      	ldr	r3, [pc, #56]	; (8011ef8 <RadioSetModem+0x58>)
 8011ebe:	2200      	movs	r2, #0
 8011ec0:	735a      	strb	r2, [r3, #13]
}
 8011ec2:	bd10      	pop	{r4, pc}
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8011ec4:	2000      	movs	r0, #0
 8011ec6:	f000 fddb 	bl	8012a80 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011eca:	4b0b      	ldr	r3, [pc, #44]	; (8011ef8 <RadioSetModem+0x58>)
 8011ecc:	2200      	movs	r2, #0
 8011ece:	735a      	strb	r2, [r3, #13]
        break;
 8011ed0:	e7f7      	b.n	8011ec2 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8011ed2:	2001      	movs	r0, #1
 8011ed4:	f000 fdd4 	bl	8012a80 <SUBGRF_SetPacketType>
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8011ed8:	4b07      	ldr	r3, [pc, #28]	; (8011ef8 <RadioSetModem+0x58>)
 8011eda:	7b5a      	ldrb	r2, [r3, #13]
 8011edc:	7b18      	ldrb	r0, [r3, #12]
 8011ede:	4282      	cmp	r2, r0
 8011ee0:	d0ef      	beq.n	8011ec2 <RadioSetModem+0x22>
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8011ee2:	7358      	strb	r0, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8011ee4:	f000 f80a 	bl	8011efc <RadioSetPublicNetwork>
 8011ee8:	e7eb      	b.n	8011ec2 <RadioSetModem+0x22>
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8011eea:	2002      	movs	r0, #2
 8011eec:	f000 fdc8 	bl	8012a80 <SUBGRF_SetPacketType>
        SubgRf.PublicNetwork.Current = false;
 8011ef0:	4b01      	ldr	r3, [pc, #4]	; (8011ef8 <RadioSetModem+0x58>)
 8011ef2:	2200      	movs	r2, #0
 8011ef4:	735a      	strb	r2, [r3, #13]
}
 8011ef6:	e7e4      	b.n	8011ec2 <RadioSetModem+0x22>
 8011ef8:	20001174 	.word	0x20001174

08011efc <RadioSetPublicNetwork>:
{
 8011efc:	b510      	push	{r4, lr}
 8011efe:	4604      	mov	r4, r0
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8011f00:	4b0e      	ldr	r3, [pc, #56]	; (8011f3c <RadioSetPublicNetwork+0x40>)
 8011f02:	7318      	strb	r0, [r3, #12]
 8011f04:	7358      	strb	r0, [r3, #13]
    RadioSetModem( MODEM_LORA );
 8011f06:	2001      	movs	r0, #1
 8011f08:	f7ff ffca 	bl	8011ea0 <RadioSetModem>
    if( enable == true )
 8011f0c:	b154      	cbz	r4, 8011f24 <RadioSetPublicNetwork+0x28>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8011f0e:	2134      	movs	r1, #52	; 0x34
 8011f10:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011f14:	f000 fa72 	bl	80123fc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8011f18:	2144      	movs	r1, #68	; 0x44
 8011f1a:	f240 7041 	movw	r0, #1857	; 0x741
 8011f1e:	f000 fa6d 	bl	80123fc <SUBGRF_WriteRegister>
}
 8011f22:	bd10      	pop	{r4, pc}
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8011f24:	2114      	movs	r1, #20
 8011f26:	f44f 60e8 	mov.w	r0, #1856	; 0x740
 8011f2a:	f000 fa67 	bl	80123fc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8011f2e:	2124      	movs	r1, #36	; 0x24
 8011f30:	f240 7041 	movw	r0, #1857	; 0x741
 8011f34:	f000 fa62 	bl	80123fc <SUBGRF_WriteRegister>
}
 8011f38:	e7f3      	b.n	8011f22 <RadioSetPublicNetwork+0x26>
 8011f3a:	bf00      	nop
 8011f3c:	20001174 	.word	0x20001174

08011f40 <RadioSetTxConfig>:
{
 8011f40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f44:	b083      	sub	sp, #12
 8011f46:	4604      	mov	r4, r0
 8011f48:	460e      	mov	r6, r1
 8011f4a:	4617      	mov	r7, r2
 8011f4c:	461d      	mov	r5, r3
 8011f4e:	f8bd 8038 	ldrh.w	r8, [sp, #56]	; 0x38
 8011f52:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
 8011f56:	f89d a040 	ldrb.w	sl, [sp, #64]	; 0x40
    RFW_DeInit();
 8011f5a:	f001 f8c5 	bl	80130e8 <RFW_DeInit>
    switch( modem )
 8011f5e:	b1ac      	cbz	r4, 8011f8c <RadioSetTxConfig+0x4c>
 8011f60:	2c01      	cmp	r4, #1
 8011f62:	d05a      	beq.n	801201a <RadioSetTxConfig+0xda>
    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8011f64:	4630      	mov	r0, r6
 8011f66:	f000 ffe5 	bl	8012f34 <SUBGRF_SetRfTxPower>
 8011f6a:	4c55      	ldr	r4, [pc, #340]	; (80120c0 <RadioSetTxConfig+0x180>)
 8011f6c:	f884 0056 	strb.w	r0, [r4, #86]	; 0x56
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 8011f70:	210e      	movs	r1, #14
 8011f72:	f640 101f 	movw	r0, #2335	; 0x91f
 8011f76:	f000 fa41 	bl	80123fc <SUBGRF_WriteRegister>
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8011f7a:	f894 0056 	ldrb.w	r0, [r4, #86]	; 0x56
 8011f7e:	f001 f8b8 	bl	80130f2 <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8011f82:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8011f84:	6063      	str	r3, [r4, #4]
}
 8011f86:	b003      	add	sp, #12
 8011f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8011f8c:	4c4c      	ldr	r4, [pc, #304]	; (80120c0 <RadioSetTxConfig+0x180>)
 8011f8e:	f04f 0b00 	mov.w	fp, #0
 8011f92:	f884 b038 	strb.w	fp, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8011f96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011f98:	63e3      	str	r3, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8011f9a:	230b      	movs	r3, #11
 8011f9c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8011fa0:	4628      	mov	r0, r5
 8011fa2:	f001 f83f 	bl	8013024 <SUBGRF_GetFskBandwidthRegValue>
 8011fa6:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8011faa:	6427      	str	r7, [r4, #64]	; 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8011fac:	f884 b00e 	strb.w	fp, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8011fb0:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 8011fb4:	f8a4 8010 	strh.w	r8, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8011fb8:	2304      	movs	r3, #4
 8011fba:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8011fbc:	2318      	movs	r3, #24
 8011fbe:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8011fc0:	f884 b014 	strb.w	fp, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8011fc4:	f089 0901 	eor.w	r9, r9, #1
 8011fc8:	f884 9015 	strb.w	r9, [r4, #21]
            if( crcOn == true )
 8011fcc:	f1ba 0f00 	cmp.w	sl, #0
 8011fd0:	d01f      	beq.n	8012012 <RadioSetTxConfig+0xd2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8011fd2:	22f2      	movs	r2, #242	; 0xf2
 8011fd4:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8011fd6:	4c3a      	ldr	r4, [pc, #232]	; (80120c0 <RadioSetTxConfig+0x180>)
 8011fd8:	2301      	movs	r3, #1
 8011fda:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 8011fdc:	f7ff fc50 	bl	8011880 <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 8011fe0:	2000      	movs	r0, #0
 8011fe2:	f7ff ff5d 	bl	8011ea0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8011fe6:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8011fea:	f000 fdf1 	bl	8012bd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8011fee:	f104 000e 	add.w	r0, r4, #14
 8011ff2:	f000 fe75 	bl	8012ce0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8011ff6:	4a33      	ldr	r2, [pc, #204]	; (80120c4 <RadioSetTxConfig+0x184>)
 8011ff8:	466b      	mov	r3, sp
 8011ffa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011ffe:	e883 0003 	stmia.w	r3, {r0, r1}
 8012002:	4618      	mov	r0, r3
 8012004:	f000 fa56 	bl	80124b4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8012008:	f240 10ff 	movw	r0, #511	; 0x1ff
 801200c:	f000 fa29 	bl	8012462 <SUBGRF_SetWhiteningSeed>
            break;
 8012010:	e7a8      	b.n	8011f64 <RadioSetTxConfig+0x24>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8012012:	4b2b      	ldr	r3, [pc, #172]	; (80120c0 <RadioSetTxConfig+0x180>)
 8012014:	2201      	movs	r2, #1
 8012016:	75da      	strb	r2, [r3, #23]
 8012018:	e7dd      	b.n	8011fd6 <RadioSetTxConfig+0x96>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801201a:	4a29      	ldr	r2, [pc, #164]	; (80120c0 <RadioSetTxConfig+0x180>)
 801201c:	2301      	movs	r3, #1
 801201e:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 8012022:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8012024:	b2db      	uxtb	r3, r3
 8012026:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 801202a:	4927      	ldr	r1, [pc, #156]	; (80120c8 <RadioSetTxConfig+0x188>)
 801202c:	5d49      	ldrb	r1, [r1, r5]
 801202e:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8012032:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8012036:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801203a:	b91d      	cbnz	r5, 8012044 <RadioSetTxConfig+0x104>
 801203c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801203e:	3a0b      	subs	r2, #11
 8012040:	2a01      	cmp	r2, #1
 8012042:	d92c      	bls.n	801209e <RadioSetTxConfig+0x15e>
 8012044:	2d01      	cmp	r5, #1
 8012046:	d027      	beq.n	8012098 <RadioSetTxConfig+0x158>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8012048:	4a1d      	ldr	r2, [pc, #116]	; (80120c0 <RadioSetTxConfig+0x180>)
 801204a:	2100      	movs	r1, #0
 801204c:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8012050:	4a1b      	ldr	r2, [pc, #108]	; (80120c0 <RadioSetTxConfig+0x180>)
 8012052:	2101      	movs	r1, #1
 8012054:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012056:	3b05      	subs	r3, #5
 8012058:	b2db      	uxtb	r3, r3
 801205a:	428b      	cmp	r3, r1
 801205c:	d924      	bls.n	80120a8 <RadioSetTxConfig+0x168>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801205e:	4b18      	ldr	r3, [pc, #96]	; (80120c0 <RadioSetTxConfig+0x180>)
 8012060:	f8a3 801c 	strh.w	r8, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012064:	4c16      	ldr	r4, [pc, #88]	; (80120c0 <RadioSetTxConfig+0x180>)
 8012066:	f884 901e 	strb.w	r9, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801206a:	4b18      	ldr	r3, [pc, #96]	; (80120cc <RadioSetTxConfig+0x18c>)
 801206c:	781b      	ldrb	r3, [r3, #0]
 801206e:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8012070:	f884 a020 	strb.w	sl, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012074:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
 8012078:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 801207c:	f7ff fc00 	bl	8011880 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 8012080:	2001      	movs	r0, #1
 8012082:	f7ff ff0d 	bl	8011ea0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012086:	f104 0038 	add.w	r0, r4, #56	; 0x38
 801208a:	f000 fda1 	bl	8012bd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801208e:	f104 000e 	add.w	r0, r4, #14
 8012092:	f000 fe25 	bl	8012ce0 <SUBGRF_SetPacketParams>
            break;
 8012096:	e765      	b.n	8011f64 <RadioSetTxConfig+0x24>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012098:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801209a:	2a0c      	cmp	r2, #12
 801209c:	d1d4      	bne.n	8012048 <RadioSetTxConfig+0x108>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801209e:	4a08      	ldr	r2, [pc, #32]	; (80120c0 <RadioSetTxConfig+0x180>)
 80120a0:	2101      	movs	r1, #1
 80120a2:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 80120a6:	e7d3      	b.n	8012050 <RadioSetTxConfig+0x110>
                if( preambleLen < 12 )
 80120a8:	f1b8 0f0b 	cmp.w	r8, #11
 80120ac:	d803      	bhi.n	80120b6 <RadioSetTxConfig+0x176>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 80120ae:	4613      	mov	r3, r2
 80120b0:	220c      	movs	r2, #12
 80120b2:	839a      	strh	r2, [r3, #28]
 80120b4:	e7d6      	b.n	8012064 <RadioSetTxConfig+0x124>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80120b6:	4b02      	ldr	r3, [pc, #8]	; (80120c0 <RadioSetTxConfig+0x180>)
 80120b8:	f8a3 801c 	strh.w	r8, [r3, #28]
 80120bc:	e7d2      	b.n	8012064 <RadioSetTxConfig+0x124>
 80120be:	bf00      	nop
 80120c0:	20001174 	.word	0x20001174
 80120c4:	08014020 	.word	0x08014020
 80120c8:	08014d78 	.word	0x08014d78
 80120cc:	20000104 	.word	0x20000104

080120d0 <RadioSetRxConfig>:
{
 80120d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120d4:	b085      	sub	sp, #20
 80120d6:	4604      	mov	r4, r0
 80120d8:	460d      	mov	r5, r1
 80120da:	4616      	mov	r6, r2
 80120dc:	9301      	str	r3, [sp, #4]
 80120de:	f8bd 903c 	ldrh.w	r9, [sp, #60]	; 0x3c
 80120e2:	f8bd a040 	ldrh.w	sl, [sp, #64]	; 0x40
 80120e6:	f89d 7044 	ldrb.w	r7, [sp, #68]	; 0x44
 80120ea:	f89d b04c 	ldrb.w	fp, [sp, #76]	; 0x4c
 80120ee:	f89d 805c 	ldrb.w	r8, [sp, #92]	; 0x5c
    SubgRf.RxContinuous = rxContinuous;
 80120f2:	4b73      	ldr	r3, [pc, #460]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 80120f4:	f883 8001 	strb.w	r8, [r3, #1]
    RFW_DeInit();
 80120f8:	f000 fff6 	bl	80130e8 <RFW_DeInit>
    if( rxContinuous == true )
 80120fc:	f1b8 0f00 	cmp.w	r8, #0
 8012100:	d001      	beq.n	8012106 <RadioSetRxConfig+0x36>
        symbTimeout = 0;
 8012102:	f04f 0a00 	mov.w	sl, #0
    if( fixLen == true )
 8012106:	b14f      	cbz	r7, 801211c <RadioSetRxConfig+0x4c>
        MaxPayloadLength = payloadLen;
 8012108:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
 801210c:	4b6d      	ldr	r3, [pc, #436]	; (80122c4 <RadioSetRxConfig+0x1f4>)
 801210e:	701a      	strb	r2, [r3, #0]
    switch( modem )
 8012110:	b144      	cbz	r4, 8012124 <RadioSetRxConfig+0x54>
 8012112:	2c01      	cmp	r4, #1
 8012114:	d057      	beq.n	80121c6 <RadioSetRxConfig+0xf6>
}
 8012116:	b005      	add	sp, #20
 8012118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        MaxPayloadLength = 0xFF;
 801211c:	4b69      	ldr	r3, [pc, #420]	; (80122c4 <RadioSetRxConfig+0x1f4>)
 801211e:	22ff      	movs	r2, #255	; 0xff
 8012120:	701a      	strb	r2, [r3, #0]
 8012122:	e7f5      	b.n	8012110 <RadioSetRxConfig+0x40>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8012124:	2000      	movs	r0, #0
 8012126:	f000 fb47 	bl	80127b8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801212a:	4c65      	ldr	r4, [pc, #404]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 801212c:	f04f 0800 	mov.w	r8, #0
 8012130:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8012134:	63e6      	str	r6, [r4, #60]	; 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8012136:	230b      	movs	r3, #11
 8012138:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 801213c:	4628      	mov	r0, r5
 801213e:	f000 ff71 	bl	8013024 <SUBGRF_GetFskBandwidthRegValue>
 8012142:	f884 0045 	strb.w	r0, [r4, #69]	; 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8012146:	f884 800e 	strb.w	r8, [r4, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 801214a:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 801214e:	f8a4 9010 	strh.w	r9, [r4, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8012152:	2304      	movs	r3, #4
 8012154:	74a3      	strb	r3, [r4, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8012156:	2318      	movs	r3, #24
 8012158:	74e3      	strb	r3, [r4, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801215a:	f884 8014 	strb.w	r8, [r4, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801215e:	f087 0701 	eor.w	r7, r7, #1
 8012162:	7567      	strb	r7, [r4, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8012164:	4b57      	ldr	r3, [pc, #348]	; (80122c4 <RadioSetRxConfig+0x1f4>)
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	75a3      	strb	r3, [r4, #22]
            if( crcOn == true )
 801216a:	f1bb 0f00 	cmp.w	fp, #0
 801216e:	d026      	beq.n	80121be <RadioSetRxConfig+0xee>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8012170:	22f2      	movs	r2, #242	; 0xf2
 8012172:	75e2      	strb	r2, [r4, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8012174:	4c52      	ldr	r4, [pc, #328]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 8012176:	2301      	movs	r3, #1
 8012178:	7623      	strb	r3, [r4, #24]
            RadioStandby( );
 801217a:	f7ff fb81 	bl	8011880 <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801217e:	2000      	movs	r0, #0
 8012180:	f7ff fe8e 	bl	8011ea0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012184:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012188:	f000 fd22 	bl	8012bd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801218c:	f104 000e 	add.w	r0, r4, #14
 8012190:	f000 fda6 	bl	8012ce0 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8012194:	4a4c      	ldr	r2, [pc, #304]	; (80122c8 <RadioSetRxConfig+0x1f8>)
 8012196:	ab02      	add	r3, sp, #8
 8012198:	e892 0003 	ldmia.w	r2, {r0, r1}
 801219c:	e883 0003 	stmia.w	r3, {r0, r1}
 80121a0:	4618      	mov	r0, r3
 80121a2:	f000 f987 	bl	80124b4 <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80121a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80121aa:	f000 f95a 	bl	8012462 <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 80121ae:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80121b2:	fb02 fa0a 	mul.w	sl, r2, sl
 80121b6:	fbba f6f6 	udiv	r6, sl, r6
 80121ba:	60a6      	str	r6, [r4, #8]
            break;
 80121bc:	e7ab      	b.n	8012116 <RadioSetRxConfig+0x46>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80121be:	4b40      	ldr	r3, [pc, #256]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 80121c0:	2201      	movs	r2, #1
 80121c2:	75da      	strb	r2, [r3, #23]
 80121c4:	e7d6      	b.n	8012174 <RadioSetRxConfig+0xa4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80121c6:	2000      	movs	r0, #0
 80121c8:	f000 faf6 	bl	80127b8 <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80121cc:	4a3c      	ldr	r2, [pc, #240]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 80121ce:	2301      	movs	r3, #1
 80121d0:	f882 3038 	strb.w	r3, [r2, #56]	; 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80121d4:	b2f3      	uxtb	r3, r6
 80121d6:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80121da:	493c      	ldr	r1, [pc, #240]	; (80122cc <RadioSetRxConfig+0x1fc>)
 80121dc:	5d49      	ldrb	r1, [r1, r5]
 80121de:	f882 1051 	strb.w	r1, [r2, #81]	; 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80121e2:	9901      	ldr	r1, [sp, #4]
 80121e4:	f882 1052 	strb.w	r1, [r2, #82]	; 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80121e8:	b91d      	cbnz	r5, 80121f2 <RadioSetRxConfig+0x122>
 80121ea:	f1a6 020b 	sub.w	r2, r6, #11
 80121ee:	2a01      	cmp	r2, #1
 80121f0:	d94b      	bls.n	801228a <RadioSetRxConfig+0x1ba>
 80121f2:	2d01      	cmp	r5, #1
 80121f4:	d047      	beq.n	8012286 <RadioSetRxConfig+0x1b6>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 80121f6:	4a32      	ldr	r2, [pc, #200]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 80121f8:	2100      	movs	r1, #0
 80121fa:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80121fe:	4a30      	ldr	r2, [pc, #192]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 8012200:	2101      	movs	r1, #1
 8012202:	7391      	strb	r1, [r2, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8012204:	3b05      	subs	r3, #5
 8012206:	b2db      	uxtb	r3, r3
 8012208:	428b      	cmp	r3, r1
 801220a:	d943      	bls.n	8012294 <RadioSetRxConfig+0x1c4>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801220c:	4b2c      	ldr	r3, [pc, #176]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 801220e:	f8a3 901c 	strh.w	r9, [r3, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8012212:	4c2b      	ldr	r4, [pc, #172]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 8012214:	77a7      	strb	r7, [r4, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8012216:	4b2b      	ldr	r3, [pc, #172]	; (80122c4 <RadioSetRxConfig+0x1f4>)
 8012218:	781b      	ldrb	r3, [r3, #0]
 801221a:	77e3      	strb	r3, [r4, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 801221c:	f884 b020 	strb.w	fp, [r4, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8012220:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
 8012224:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
            RadioStandby( );
 8012228:	f7ff fb2a 	bl	8011880 <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801222c:	2001      	movs	r0, #1
 801222e:	f7ff fe37 	bl	8011ea0 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8012232:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8012236:	f000 fccb 	bl	8012bd0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801223a:	f104 000e 	add.w	r0, r4, #14
 801223e:	f000 fd4f 	bl	8012ce0 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8012242:	fa5f f08a 	uxtb.w	r0, sl
 8012246:	f000 fac4 	bl	80127d2 <SUBGRF_SetLoRaSymbNumTimeout>
            SUBGRF_WriteRegister(SUBGHZ_AGCCFG,SUBGRF_ReadRegister(SUBGHZ_AGCCFG)&0x1);
 801224a:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801224e:	f000 f8e5 	bl	801241c <SUBGRF_ReadRegister>
 8012252:	f000 0101 	and.w	r1, r0, #1
 8012256:	f640 00a3 	movw	r0, #2211	; 0x8a3
 801225a:	f000 f8cf 	bl	80123fc <SUBGRF_WriteRegister>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 801225e:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
 8012262:	2b01      	cmp	r3, #1
 8012264:	d021      	beq.n	80122aa <RadioSetRxConfig+0x1da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8012266:	f240 7036 	movw	r0, #1846	; 0x736
 801226a:	f000 f8d7 	bl	801241c <SUBGRF_ReadRegister>
 801226e:	f040 0104 	orr.w	r1, r0, #4
 8012272:	b2c9      	uxtb	r1, r1
 8012274:	f240 7036 	movw	r0, #1846	; 0x736
 8012278:	f000 f8c0 	bl	80123fc <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 801227c:	4b10      	ldr	r3, [pc, #64]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 801227e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012282:	609a      	str	r2, [r3, #8]
}
 8012284:	e747      	b.n	8012116 <RadioSetRxConfig+0x46>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8012286:	2e0c      	cmp	r6, #12
 8012288:	d1b5      	bne.n	80121f6 <RadioSetRxConfig+0x126>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 801228a:	4a0d      	ldr	r2, [pc, #52]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 801228c:	2101      	movs	r1, #1
 801228e:	f882 1053 	strb.w	r1, [r2, #83]	; 0x53
 8012292:	e7b4      	b.n	80121fe <RadioSetRxConfig+0x12e>
                if( preambleLen < 12 )
 8012294:	f1b9 0f0b 	cmp.w	r9, #11
 8012298:	d803      	bhi.n	80122a2 <RadioSetRxConfig+0x1d2>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801229a:	4613      	mov	r3, r2
 801229c:	220c      	movs	r2, #12
 801229e:	839a      	strh	r2, [r3, #28]
 80122a0:	e7b7      	b.n	8012212 <RadioSetRxConfig+0x142>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 80122a2:	4b07      	ldr	r3, [pc, #28]	; (80122c0 <RadioSetRxConfig+0x1f0>)
 80122a4:	f8a3 901c 	strh.w	r9, [r3, #28]
 80122a8:	e7b3      	b.n	8012212 <RadioSetRxConfig+0x142>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80122aa:	f240 7036 	movw	r0, #1846	; 0x736
 80122ae:	f000 f8b5 	bl	801241c <SUBGRF_ReadRegister>
 80122b2:	f000 01fb 	and.w	r1, r0, #251	; 0xfb
 80122b6:	f240 7036 	movw	r0, #1846	; 0x736
 80122ba:	f000 f89f 	bl	80123fc <SUBGRF_WriteRegister>
 80122be:	e7dd      	b.n	801227c <RadioSetRxConfig+0x1ac>
 80122c0:	20001174 	.word	0x20001174
 80122c4:	20000104 	.word	0x20000104
 80122c8:	08014020 	.word	0x08014020
 80122cc:	08014d78 	.word	0x08014d78

080122d0 <RadioIsChannelFree>:
{
 80122d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80122d2:	b08b      	sub	sp, #44	; 0x2c
 80122d4:	4604      	mov	r4, r0
 80122d6:	460f      	mov	r7, r1
 80122d8:	4616      	mov	r6, r2
 80122da:	461d      	mov	r5, r3
    RadioStandby( );
 80122dc:	f7ff fad0 	bl	8011880 <RadioStandby>
    RadioSetModem( MODEM_FSK );
 80122e0:	2000      	movs	r0, #0
 80122e2:	f7ff fddd 	bl	8011ea0 <RadioSetModem>
    RadioSetChannel( freq );
 80122e6:	4620      	mov	r0, r4
 80122e8:	f7ff fce4 	bl	8011cb4 <RadioSetChannel>
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 80122ec:	2301      	movs	r3, #1
 80122ee:	9309      	str	r3, [sp, #36]	; 0x24
 80122f0:	2400      	movs	r4, #0
 80122f2:	9408      	str	r4, [sp, #32]
 80122f4:	9407      	str	r4, [sp, #28]
 80122f6:	9406      	str	r4, [sp, #24]
 80122f8:	9405      	str	r4, [sp, #20]
 80122fa:	9404      	str	r4, [sp, #16]
 80122fc:	9403      	str	r4, [sp, #12]
 80122fe:	9402      	str	r4, [sp, #8]
 8012300:	2303      	movs	r3, #3
 8012302:	9301      	str	r3, [sp, #4]
 8012304:	9700      	str	r7, [sp, #0]
 8012306:	4623      	mov	r3, r4
 8012308:	f44f 7216 	mov.w	r2, #600	; 0x258
 801230c:	4639      	mov	r1, r7
 801230e:	4620      	mov	r0, r4
 8012310:	f7ff fede 	bl	80120d0 <RadioSetRxConfig>
    RadioRx( 0 );
 8012314:	4620      	mov	r0, r4
 8012316:	f7ff fce5 	bl	8011ce4 <RadioRx>
    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 801231a:	f7ff fc79 	bl	8011c10 <RadioGetWakeupTime>
 801231e:	f7ef fcad 	bl	8001c7c <HAL_Delay>
    carrierSenseTime = TimerGetCurrentTime( );
 8012322:	f001 fadd 	bl	80138e0 <UTIL_TIMER_GetCurrentTime>
 8012326:	4604      	mov	r4, r0
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8012328:	4620      	mov	r0, r4
 801232a:	f001 fae3 	bl	80138f4 <UTIL_TIMER_GetElapsedTime>
 801232e:	42a8      	cmp	r0, r5
 8012330:	d206      	bcs.n	8012340 <RadioIsChannelFree+0x70>
        rssi = RadioRssi( MODEM_FSK );
 8012332:	2000      	movs	r0, #0
 8012334:	f7ff fc96 	bl	8011c64 <RadioRssi>
        if( rssi > rssiThresh )
 8012338:	42b0      	cmp	r0, r6
 801233a:	ddf5      	ble.n	8012328 <RadioIsChannelFree+0x58>
            status = false;
 801233c:	2400      	movs	r4, #0
 801233e:	e000      	b.n	8012342 <RadioIsChannelFree+0x72>
    bool status = true;
 8012340:	2401      	movs	r4, #1
    RadioStandby( );
 8012342:	f7ff fa9d 	bl	8011880 <RadioStandby>
}
 8012346:	4620      	mov	r0, r4
 8012348:	b00b      	add	sp, #44	; 0x2c
 801234a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801234c <RadioInit>:
{
 801234c:	b570      	push	{r4, r5, r6, lr}
 801234e:	b082      	sub	sp, #8
    RadioEvents = events;
 8012350:	4b1d      	ldr	r3, [pc, #116]	; (80123c8 <RadioInit+0x7c>)
 8012352:	6018      	str	r0, [r3, #0]
    SubgRf.RxContinuous = false;
 8012354:	4d1d      	ldr	r5, [pc, #116]	; (80123cc <RadioInit+0x80>)
 8012356:	2400      	movs	r4, #0
 8012358:	706c      	strb	r4, [r5, #1]
    SubgRf.TxTimeout = 0;
 801235a:	606c      	str	r4, [r5, #4]
    SubgRf.RxTimeout = 0;
 801235c:	60ac      	str	r4, [r5, #8]
    SubgRf.RxDcPreambleDetectTimeout = 0;
 801235e:	65ac      	str	r4, [r5, #88]	; 0x58
    SUBGRF_Init( RadioOnDioIrq );
 8012360:	481b      	ldr	r0, [pc, #108]	; (80123d0 <RadioInit+0x84>)
 8012362:	f000 fb27 	bl	80129b4 <SUBGRF_Init>
    SubgRf.PublicNetwork.Current = false;
 8012366:	736c      	strb	r4, [r5, #13]
    SubgRf.PublicNetwork.Previous = false;
 8012368:	732c      	strb	r4, [r5, #12]
    SUBGRF_SetRegulatorMode( );
 801236a:	f000 fa53 	bl	8012814 <SUBGRF_SetRegulatorMode>
    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 801236e:	4621      	mov	r1, r4
 8012370:	4620      	mov	r0, r4
 8012372:	f000 fd27 	bl	8012dc4 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8012376:	2204      	movs	r2, #4
 8012378:	4621      	mov	r1, r4
 801237a:	2001      	movs	r0, #1
 801237c:	f000 fb9a 	bl	8012ab4 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8012380:	4623      	mov	r3, r4
 8012382:	4622      	mov	r2, r4
 8012384:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8012388:	4608      	mov	r0, r1
 801238a:	f000 fada 	bl	8012942 <SUBGRF_SetDioIrqParams>
    RadioSleep();
 801238e:	f7ff fce1 	bl	8011d54 <RadioSleep>
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8012392:	4e10      	ldr	r6, [pc, #64]	; (80123d4 <RadioInit+0x88>)
 8012394:	9400      	str	r4, [sp, #0]
 8012396:	4b10      	ldr	r3, [pc, #64]	; (80123d8 <RadioInit+0x8c>)
 8012398:	4622      	mov	r2, r4
 801239a:	f04f 31ff 	mov.w	r1, #4294967295
 801239e:	4630      	mov	r0, r6
 80123a0:	f001 fa80 	bl	80138a4 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 80123a4:	4d0d      	ldr	r5, [pc, #52]	; (80123dc <RadioInit+0x90>)
 80123a6:	9400      	str	r4, [sp, #0]
 80123a8:	4b0d      	ldr	r3, [pc, #52]	; (80123e0 <RadioInit+0x94>)
 80123aa:	4622      	mov	r2, r4
 80123ac:	f04f 31ff 	mov.w	r1, #4294967295
 80123b0:	4628      	mov	r0, r5
 80123b2:	f001 fa77 	bl	80138a4 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 80123b6:	4630      	mov	r0, r6
 80123b8:	f001 fad2 	bl	8013960 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 80123bc:	4628      	mov	r0, r5
 80123be:	f001 facf 	bl	8013960 <UTIL_TIMER_Stop>
}
 80123c2:	b002      	add	sp, #8
 80123c4:	bd70      	pop	{r4, r5, r6, pc}
 80123c6:	bf00      	nop
 80123c8:	20001158 	.word	0x20001158
 80123cc:	20001174 	.word	0x20001174
 80123d0:	08011bfd 	.word	0x08011bfd
 80123d4:	200011d0 	.word	0x200011d0
 80123d8:	08011745 	.word	0x08011745
 80123dc:	2000115c 	.word	0x2000115c
 80123e0:	0801176d 	.word	0x0801176d

080123e4 <SUBGRF_GetOperatingMode>:
}

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
    return OperatingMode;
}
 80123e4:	4b01      	ldr	r3, [pc, #4]	; (80123ec <SUBGRF_GetOperatingMode+0x8>)
 80123e6:	7818      	ldrb	r0, [r3, #0]
 80123e8:	4770      	bx	lr
 80123ea:	bf00      	nop
 80123ec:	200011ee 	.word	0x200011ee

080123f0 <SUBGRF_GetPacketType>:
}

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
    return PacketType;
}
 80123f0:	4b01      	ldr	r3, [pc, #4]	; (80123f8 <SUBGRF_GetPacketType+0x8>)
 80123f2:	7818      	ldrb	r0, [r3, #0]
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	200011ef 	.word	0x200011ef

080123fc <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80123fc:	b500      	push	{lr}
 80123fe:	b083      	sub	sp, #12
 8012400:	f88d 1007 	strb.w	r1, [sp, #7]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 8012404:	2301      	movs	r3, #1
 8012406:	f10d 0207 	add.w	r2, sp, #7
 801240a:	4601      	mov	r1, r0
 801240c:	4802      	ldr	r0, [pc, #8]	; (8012418 <SUBGRF_WriteRegister+0x1c>)
 801240e:	f7f4 f9e3 	bl	80067d8 <HAL_SUBGHZ_WriteRegisters>
}
 8012412:	b003      	add	sp, #12
 8012414:	f85d fb04 	ldr.w	pc, [sp], #4
 8012418:	200002c0 	.word	0x200002c0

0801241c <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 801241c:	b500      	push	{lr}
 801241e:	b083      	sub	sp, #12
 8012420:	4601      	mov	r1, r0
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8012422:	2301      	movs	r3, #1
 8012424:	f10d 0207 	add.w	r2, sp, #7
 8012428:	4803      	ldr	r0, [pc, #12]	; (8012438 <SUBGRF_ReadRegister+0x1c>)
 801242a:	f7f4 fa25 	bl	8006878 <HAL_SUBGHZ_ReadRegisters>
    return data;
}
 801242e:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012432:	b003      	add	sp, #12
 8012434:	f85d fb04 	ldr.w	pc, [sp], #4
 8012438:	200002c0 	.word	0x200002c0

0801243c <Radio_SMPS_Set>:
{
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
}

static void Radio_SMPS_Set(uint8_t level)
{
 801243c:	b510      	push	{r4, lr}
 801243e:	4604      	mov	r4, r0
  if ( 1U == RBI_IsDCDC() )
 8012440:	f7f0 fcb6 	bl	8002db0 <RBI_IsDCDC>
 8012444:	2801      	cmp	r0, #1
 8012446:	d000      	beq.n	801244a <Radio_SMPS_Set+0xe>
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
    modReg&= (~SMPS_DRV_MASK);
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
  }
}
 8012448:	bd10      	pop	{r4, pc}
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 801244a:	f640 1023 	movw	r0, #2339	; 0x923
 801244e:	f7ff ffe5 	bl	801241c <SUBGRF_ReadRegister>
    modReg&= (~SMPS_DRV_MASK);
 8012452:	f000 01f9 	and.w	r1, r0, #249	; 0xf9
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8012456:	4321      	orrs	r1, r4
 8012458:	f640 1023 	movw	r0, #2339	; 0x923
 801245c:	f7ff ffce 	bl	80123fc <SUBGRF_WriteRegister>
}
 8012460:	e7f2      	b.n	8012448 <Radio_SMPS_Set+0xc>

08012462 <SUBGRF_SetWhiteningSeed>:
{
 8012462:	b510      	push	{r4, lr}
 8012464:	4604      	mov	r4, r0
    switch( SUBGRF_GetPacketType( ) )
 8012466:	f7ff ffc3 	bl	80123f0 <SUBGRF_GetPacketType>
 801246a:	b100      	cbz	r0, 801246e <SUBGRF_SetWhiteningSeed+0xc>
}
 801246c:	bd10      	pop	{r4, pc}
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 801246e:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012472:	f7ff ffd3 	bl	801241c <SUBGRF_ReadRegister>
 8012476:	f000 00fe 	and.w	r0, r0, #254	; 0xfe
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 801247a:	f3c4 2100 	ubfx	r1, r4, #8, #1
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 801247e:	4301      	orrs	r1, r0
 8012480:	f44f 60d7 	mov.w	r0, #1720	; 0x6b8
 8012484:	f7ff ffba 	bl	80123fc <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8012488:	b2e1      	uxtb	r1, r4
 801248a:	f240 60b9 	movw	r0, #1721	; 0x6b9
 801248e:	f7ff ffb5 	bl	80123fc <SUBGRF_WriteRegister>
}
 8012492:	e7eb      	b.n	801246c <SUBGRF_SetWhiteningSeed+0xa>

08012494 <SUBGRF_WriteRegisters>:
{
 8012494:	b510      	push	{r4, lr}
 8012496:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012498:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801249c:	b672      	cpsid	i
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 801249e:	460a      	mov	r2, r1
 80124a0:	4601      	mov	r1, r0
 80124a2:	4803      	ldr	r0, [pc, #12]	; (80124b0 <SUBGRF_WriteRegisters+0x1c>)
 80124a4:	f7f4 f998 	bl	80067d8 <HAL_SUBGHZ_WriteRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80124a8:	f384 8810 	msr	PRIMASK, r4
}
 80124ac:	bd10      	pop	{r4, pc}
 80124ae:	bf00      	nop
 80124b0:	200002c0 	.word	0x200002c0

080124b4 <SUBGRF_SetSyncWord>:
{
 80124b4:	b508      	push	{r3, lr}
 80124b6:	4601      	mov	r1, r0
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 80124b8:	2208      	movs	r2, #8
 80124ba:	f44f 60d8 	mov.w	r0, #1728	; 0x6c0
 80124be:	f7ff ffe9 	bl	8012494 <SUBGRF_WriteRegisters>
}
 80124c2:	2000      	movs	r0, #0
 80124c4:	bd08      	pop	{r3, pc}

080124c6 <SUBGRF_SetCrcSeed>:
{
 80124c6:	b500      	push	{lr}
 80124c8:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 80124ca:	0a03      	lsrs	r3, r0, #8
 80124cc:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( seed & 0xFF );
 80124d0:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80124d4:	f7ff ff8c 	bl	80123f0 <SUBGRF_GetPacketType>
 80124d8:	b110      	cbz	r0, 80124e0 <SUBGRF_SetCrcSeed+0x1a>
}
 80124da:	b003      	add	sp, #12
 80124dc:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 80124e0:	2202      	movs	r2, #2
 80124e2:	a901      	add	r1, sp, #4
 80124e4:	f240 60bc 	movw	r0, #1724	; 0x6bc
 80124e8:	f7ff ffd4 	bl	8012494 <SUBGRF_WriteRegisters>
}
 80124ec:	e7f5      	b.n	80124da <SUBGRF_SetCrcSeed+0x14>

080124ee <SUBGRF_SetCrcPolynomial>:
{
 80124ee:	b500      	push	{lr}
 80124f0:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 80124f2:	0a03      	lsrs	r3, r0, #8
 80124f4:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 80124f8:	f88d 0005 	strb.w	r0, [sp, #5]
    switch( SUBGRF_GetPacketType( ) )
 80124fc:	f7ff ff78 	bl	80123f0 <SUBGRF_GetPacketType>
 8012500:	b110      	cbz	r0, 8012508 <SUBGRF_SetCrcPolynomial+0x1a>
}
 8012502:	b003      	add	sp, #12
 8012504:	f85d fb04 	ldr.w	pc, [sp], #4
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8012508:	2202      	movs	r2, #2
 801250a:	a901      	add	r1, sp, #4
 801250c:	f240 60be 	movw	r0, #1726	; 0x6be
 8012510:	f7ff ffc0 	bl	8012494 <SUBGRF_WriteRegisters>
}
 8012514:	e7f5      	b.n	8012502 <SUBGRF_SetCrcPolynomial+0x14>
	...

08012518 <SUBGRF_ReadRegisters>:
{
 8012518:	b510      	push	{r4, lr}
 801251a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801251c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012520:	b672      	cpsid	i
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8012522:	460a      	mov	r2, r1
 8012524:	4601      	mov	r1, r0
 8012526:	4803      	ldr	r0, [pc, #12]	; (8012534 <SUBGRF_ReadRegisters+0x1c>)
 8012528:	f7f4 f9a6 	bl	8006878 <HAL_SUBGHZ_ReadRegisters>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801252c:	f384 8810 	msr	PRIMASK, r4
}
 8012530:	bd10      	pop	{r4, pc}
 8012532:	bf00      	nop
 8012534:	200002c0 	.word	0x200002c0

08012538 <SUBGRF_WriteBuffer>:
{
 8012538:	b510      	push	{r4, lr}
 801253a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801253c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012540:	b672      	cpsid	i
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 8012542:	460a      	mov	r2, r1
 8012544:	4601      	mov	r1, r0
 8012546:	4803      	ldr	r0, [pc, #12]	; (8012554 <SUBGRF_WriteBuffer+0x1c>)
 8012548:	f7f4 faf4 	bl	8006b34 <HAL_SUBGHZ_WriteBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801254c:	f384 8810 	msr	PRIMASK, r4
}
 8012550:	bd10      	pop	{r4, pc}
 8012552:	bf00      	nop
 8012554:	200002c0 	.word	0x200002c0

08012558 <SUBGRF_SetPayload>:
{
 8012558:	b508      	push	{r3, lr}
 801255a:	460a      	mov	r2, r1
    SUBGRF_WriteBuffer( 0x00, payload, size );
 801255c:	4601      	mov	r1, r0
 801255e:	2000      	movs	r0, #0
 8012560:	f7ff ffea 	bl	8012538 <SUBGRF_WriteBuffer>
}
 8012564:	bd08      	pop	{r3, pc}
	...

08012568 <SUBGRF_ReadBuffer>:
{
 8012568:	b510      	push	{r4, lr}
 801256a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801256c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012570:	b672      	cpsid	i
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8012572:	460a      	mov	r2, r1
 8012574:	4601      	mov	r1, r0
 8012576:	4803      	ldr	r0, [pc, #12]	; (8012584 <SUBGRF_ReadBuffer+0x1c>)
 8012578:	f7f4 fb26 	bl	8006bc8 <HAL_SUBGHZ_ReadBuffer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801257c:	f384 8810 	msr	PRIMASK, r4
}
 8012580:	bd10      	pop	{r4, pc}
 8012582:	bf00      	nop
 8012584:	200002c0 	.word	0x200002c0

08012588 <SUBGRF_WriteCommand>:
{
 8012588:	b510      	push	{r4, lr}
 801258a:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801258c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012590:	b672      	cpsid	i
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8012592:	460a      	mov	r2, r1
 8012594:	4601      	mov	r1, r0
 8012596:	4803      	ldr	r0, [pc, #12]	; (80125a4 <SUBGRF_WriteCommand+0x1c>)
 8012598:	f7f4 f9c2 	bl	8006920 <HAL_SUBGHZ_ExecSetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801259c:	f384 8810 	msr	PRIMASK, r4
}
 80125a0:	bd10      	pop	{r4, pc}
 80125a2:	bf00      	nop
 80125a4:	200002c0 	.word	0x200002c0

080125a8 <SUBGRF_SetSleep>:
{
 80125a8:	b510      	push	{r4, lr}
 80125aa:	b082      	sub	sp, #8
 80125ac:	4604      	mov	r4, r0
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 80125ae:	2000      	movs	r0, #0
 80125b0:	f7f0 fbf2 	bl	8002d98 <RBI_ConfigRFSwitch>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80125b4:	2002      	movs	r0, #2
 80125b6:	f7ff ff41 	bl	801243c <Radio_SMPS_Set>
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80125ba:	f004 0004 	and.w	r0, r4, #4
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80125be:	f004 0302 	and.w	r3, r4, #2
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80125c2:	4318      	orrs	r0, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 80125c4:	f004 0401 	and.w	r4, r4, #1
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 80125c8:	4304      	orrs	r4, r0
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 80125ca:	f88d 4007 	strb.w	r4, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 80125ce:	2201      	movs	r2, #1
 80125d0:	f10d 0107 	add.w	r1, sp, #7
 80125d4:	2084      	movs	r0, #132	; 0x84
 80125d6:	f7ff ffd7 	bl	8012588 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 80125da:	4b02      	ldr	r3, [pc, #8]	; (80125e4 <SUBGRF_SetSleep+0x3c>)
 80125dc:	2200      	movs	r2, #0
 80125de:	701a      	strb	r2, [r3, #0]
}
 80125e0:	b002      	add	sp, #8
 80125e2:	bd10      	pop	{r4, pc}
 80125e4:	200011ee 	.word	0x200011ee

080125e8 <SUBGRF_SetStandby>:
{
 80125e8:	b500      	push	{lr}
 80125ea:	b083      	sub	sp, #12
 80125ec:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 80125f0:	2201      	movs	r2, #1
 80125f2:	f10d 0107 	add.w	r1, sp, #7
 80125f6:	2080      	movs	r0, #128	; 0x80
 80125f8:	f7ff ffc6 	bl	8012588 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 80125fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8012600:	b92b      	cbnz	r3, 801260e <SUBGRF_SetStandby+0x26>
        OperatingMode = MODE_STDBY_RC;
 8012602:	4b05      	ldr	r3, [pc, #20]	; (8012618 <SUBGRF_SetStandby+0x30>)
 8012604:	2201      	movs	r2, #1
 8012606:	701a      	strb	r2, [r3, #0]
}
 8012608:	b003      	add	sp, #12
 801260a:	f85d fb04 	ldr.w	pc, [sp], #4
        OperatingMode = MODE_STDBY_XOSC;
 801260e:	4b02      	ldr	r3, [pc, #8]	; (8012618 <SUBGRF_SetStandby+0x30>)
 8012610:	2202      	movs	r2, #2
 8012612:	701a      	strb	r2, [r3, #0]
}
 8012614:	e7f8      	b.n	8012608 <SUBGRF_SetStandby+0x20>
 8012616:	bf00      	nop
 8012618:	200011ee 	.word	0x200011ee

0801261c <SUBGRF_SetTx>:
{
 801261c:	b500      	push	{lr}
 801261e:	b083      	sub	sp, #12
    OperatingMode = MODE_TX;
 8012620:	4b0a      	ldr	r3, [pc, #40]	; (801264c <SUBGRF_SetTx+0x30>)
 8012622:	2204      	movs	r2, #4
 8012624:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012626:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801262a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801262e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012632:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012636:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 801263a:	2203      	movs	r2, #3
 801263c:	a901      	add	r1, sp, #4
 801263e:	2083      	movs	r0, #131	; 0x83
 8012640:	f7ff ffa2 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012644:	b003      	add	sp, #12
 8012646:	f85d fb04 	ldr.w	pc, [sp], #4
 801264a:	bf00      	nop
 801264c:	200011ee 	.word	0x200011ee

08012650 <SUBGRF_SendPayload>:
{
 8012650:	b510      	push	{r4, lr}
 8012652:	4614      	mov	r4, r2
    SUBGRF_SetPayload( payload, size );
 8012654:	f7ff ff80 	bl	8012558 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8012658:	4620      	mov	r0, r4
 801265a:	f7ff ffdf 	bl	801261c <SUBGRF_SetTx>
}
 801265e:	bd10      	pop	{r4, pc}

08012660 <SUBGRF_SetRx>:
{
 8012660:	b500      	push	{lr}
 8012662:	b083      	sub	sp, #12
    OperatingMode = MODE_RX;
 8012664:	4b0a      	ldr	r3, [pc, #40]	; (8012690 <SUBGRF_SetRx+0x30>)
 8012666:	2205      	movs	r2, #5
 8012668:	701a      	strb	r2, [r3, #0]
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801266a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 801266e:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012672:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012676:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 801267a:	f88d 0006 	strb.w	r0, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801267e:	2203      	movs	r2, #3
 8012680:	a901      	add	r1, sp, #4
 8012682:	2082      	movs	r0, #130	; 0x82
 8012684:	f7ff ff80 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012688:	b003      	add	sp, #12
 801268a:	f85d fb04 	ldr.w	pc, [sp], #4
 801268e:	bf00      	nop
 8012690:	200011ee 	.word	0x200011ee

08012694 <SUBGRF_GetRandom>:
{
 8012694:	b570      	push	{r4, r5, r6, lr}
 8012696:	b082      	sub	sp, #8
    uint32_t number = 0;
 8012698:	2600      	movs	r6, #0
 801269a:	9601      	str	r6, [sp, #4]
    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 801269c:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80126a0:	f7ff febc 	bl	801241c <SUBGRF_ReadRegister>
 80126a4:	4605      	mov	r5, r0
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 80126a6:	f000 01fe 	and.w	r1, r0, #254	; 0xfe
 80126aa:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80126ae:	f7ff fea5 	bl	80123fc <SUBGRF_WriteRegister>
    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 80126b2:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80126b6:	f7ff feb1 	bl	801241c <SUBGRF_ReadRegister>
 80126ba:	4604      	mov	r4, r0
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 80126bc:	f000 017f 	and.w	r1, r0, #127	; 0x7f
 80126c0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80126c4:	f7ff fe9a 	bl	80123fc <SUBGRF_WriteRegister>
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 80126c8:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
 80126cc:	f7ff ffc8 	bl	8012660 <SUBGRF_SetRx>
    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 80126d0:	2204      	movs	r2, #4
 80126d2:	eb0d 0102 	add.w	r1, sp, r2
 80126d6:	f640 0019 	movw	r0, #2073	; 0x819
 80126da:	f7ff ff1d 	bl	8012518 <SUBGRF_ReadRegisters>
    SUBGRF_SetStandby( STDBY_RC );
 80126de:	4630      	mov	r0, r6
 80126e0:	f7ff ff82 	bl	80125e8 <SUBGRF_SetStandby>
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 80126e4:	4629      	mov	r1, r5
 80126e6:	f640 00e2 	movw	r0, #2274	; 0x8e2
 80126ea:	f7ff fe87 	bl	80123fc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 80126ee:	4621      	mov	r1, r4
 80126f0:	f640 00e5 	movw	r0, #2277	; 0x8e5
 80126f4:	f7ff fe82 	bl	80123fc <SUBGRF_WriteRegister>
}
 80126f8:	9801      	ldr	r0, [sp, #4]
 80126fa:	b002      	add	sp, #8
 80126fc:	bd70      	pop	{r4, r5, r6, pc}
	...

08012700 <SUBGRF_SetRxBoosted>:
{
 8012700:	b510      	push	{r4, lr}
 8012702:	b082      	sub	sp, #8
 8012704:	4604      	mov	r4, r0
    OperatingMode = MODE_RX;
 8012706:	4b0c      	ldr	r3, [pc, #48]	; (8012738 <SUBGRF_SetRxBoosted+0x38>)
 8012708:	2205      	movs	r2, #5
 801270a:	701a      	strb	r2, [r3, #0]
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 801270c:	2197      	movs	r1, #151	; 0x97
 801270e:	f640 00ac 	movw	r0, #2220	; 0x8ac
 8012712:	f7ff fe73 	bl	80123fc <SUBGRF_WriteRegister>
    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8012716:	f3c4 4307 	ubfx	r3, r4, #16, #8
 801271a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 801271e:	f3c4 2307 	ubfx	r3, r4, #8, #8
 8012722:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8012726:	f88d 4006 	strb.w	r4, [sp, #6]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 801272a:	2203      	movs	r2, #3
 801272c:	a901      	add	r1, sp, #4
 801272e:	2082      	movs	r0, #130	; 0x82
 8012730:	f7ff ff2a 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012734:	b002      	add	sp, #8
 8012736:	bd10      	pop	{r4, pc}
 8012738:	200011ee 	.word	0x200011ee

0801273c <SUBGRF_SetRxDutyCycle>:
{
 801273c:	b500      	push	{lr}
 801273e:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8012740:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012744:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8012748:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801274c:	f88d 3001 	strb.w	r3, [sp, #1]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8012750:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8012754:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012758:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 801275c:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012760:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8012764:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8012768:	2206      	movs	r2, #6
 801276a:	4669      	mov	r1, sp
 801276c:	2094      	movs	r0, #148	; 0x94
 801276e:	f7ff ff0b 	bl	8012588 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8012772:	4b03      	ldr	r3, [pc, #12]	; (8012780 <SUBGRF_SetRxDutyCycle+0x44>)
 8012774:	2206      	movs	r2, #6
 8012776:	701a      	strb	r2, [r3, #0]
}
 8012778:	b003      	add	sp, #12
 801277a:	f85d fb04 	ldr.w	pc, [sp], #4
 801277e:	bf00      	nop
 8012780:	200011ee 	.word	0x200011ee

08012784 <SUBGRF_SetCad>:
{
 8012784:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8012786:	2200      	movs	r2, #0
 8012788:	4611      	mov	r1, r2
 801278a:	20c5      	movs	r0, #197	; 0xc5
 801278c:	f7ff fefc 	bl	8012588 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8012790:	4b01      	ldr	r3, [pc, #4]	; (8012798 <SUBGRF_SetCad+0x14>)
 8012792:	2207      	movs	r2, #7
 8012794:	701a      	strb	r2, [r3, #0]
}
 8012796:	bd08      	pop	{r3, pc}
 8012798:	200011ee 	.word	0x200011ee

0801279c <SUBGRF_SetTxContinuousWave>:
{
 801279c:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 801279e:	2200      	movs	r2, #0
 80127a0:	4611      	mov	r1, r2
 80127a2:	20d1      	movs	r0, #209	; 0xd1
 80127a4:	f7ff fef0 	bl	8012588 <SUBGRF_WriteCommand>
}
 80127a8:	bd08      	pop	{r3, pc}

080127aa <SUBGRF_SetTxInfinitePreamble>:
{
 80127aa:	b508      	push	{r3, lr}
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 80127ac:	2200      	movs	r2, #0
 80127ae:	4611      	mov	r1, r2
 80127b0:	20d2      	movs	r0, #210	; 0xd2
 80127b2:	f7ff fee9 	bl	8012588 <SUBGRF_WriteCommand>
}
 80127b6:	bd08      	pop	{r3, pc}

080127b8 <SUBGRF_SetStopRxTimerOnPreambleDetect>:
{
 80127b8:	b500      	push	{lr}
 80127ba:	b083      	sub	sp, #12
 80127bc:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 80127c0:	2201      	movs	r2, #1
 80127c2:	f10d 0107 	add.w	r1, sp, #7
 80127c6:	209f      	movs	r0, #159	; 0x9f
 80127c8:	f7ff fede 	bl	8012588 <SUBGRF_WriteCommand>
}
 80127cc:	b003      	add	sp, #12
 80127ce:	f85d fb04 	ldr.w	pc, [sp], #4

080127d2 <SUBGRF_SetLoRaSymbNumTimeout>:
{
 80127d2:	b500      	push	{lr}
 80127d4:	b083      	sub	sp, #12
 80127d6:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 80127da:	2201      	movs	r2, #1
 80127dc:	f10d 0107 	add.w	r1, sp, #7
 80127e0:	20a0      	movs	r0, #160	; 0xa0
 80127e2:	f7ff fed1 	bl	8012588 <SUBGRF_WriteCommand>
    if( symbNum >= 64 )
 80127e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80127ea:	2b3f      	cmp	r3, #63	; 0x3f
 80127ec:	d90f      	bls.n	801280e <SUBGRF_SetLoRaSymbNumTimeout+0x3c>
        uint8_t mant = symbNum >> 1;
 80127ee:	085b      	lsrs	r3, r3, #1
        uint8_t exp  = 0;
 80127f0:	2200      	movs	r2, #0
        while( mant > 31 )
 80127f2:	e002      	b.n	80127fa <SUBGRF_SetLoRaSymbNumTimeout+0x28>
            mant >>= 2;
 80127f4:	089b      	lsrs	r3, r3, #2
            exp++;
 80127f6:	1c51      	adds	r1, r2, #1
 80127f8:	b2ca      	uxtb	r2, r1
        while( mant > 31 )
 80127fa:	2b1f      	cmp	r3, #31
 80127fc:	d8fa      	bhi.n	80127f4 <SUBGRF_SetLoRaSymbNumTimeout+0x22>
        reg = exp + ( mant << 3 );
 80127fe:	00d9      	lsls	r1, r3, #3
 8012800:	b2c9      	uxtb	r1, r1
 8012802:	4411      	add	r1, r2
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8012804:	b2c9      	uxtb	r1, r1
 8012806:	f240 7006 	movw	r0, #1798	; 0x706
 801280a:	f7ff fdf7 	bl	80123fc <SUBGRF_WriteRegister>
}
 801280e:	b003      	add	sp, #12
 8012810:	f85d fb04 	ldr.w	pc, [sp], #4

08012814 <SUBGRF_SetRegulatorMode>:
{
 8012814:	b500      	push	{lr}
 8012816:	b083      	sub	sp, #12
    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8012818:	f7f0 faca 	bl	8002db0 <RBI_IsDCDC>
 801281c:	2801      	cmp	r0, #1
 801281e:	d00b      	beq.n	8012838 <SUBGRF_SetRegulatorMode+0x24>
        mode = USE_LDO ;
 8012820:	2300      	movs	r3, #0
 8012822:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8012826:	2201      	movs	r2, #1
 8012828:	f10d 0107 	add.w	r1, sp, #7
 801282c:	2096      	movs	r0, #150	; 0x96
 801282e:	f7ff feab 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012832:	b003      	add	sp, #12
 8012834:	f85d fb04 	ldr.w	pc, [sp], #4
        mode = USE_DCDC ;
 8012838:	2301      	movs	r3, #1
 801283a:	f88d 3007 	strb.w	r3, [sp, #7]
 801283e:	e7f2      	b.n	8012826 <SUBGRF_SetRegulatorMode+0x12>

08012840 <SUBGRF_Calibrate>:
{
 8012840:	b500      	push	{lr}
 8012842:	b083      	sub	sp, #12
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8012844:	f000 0340 	and.w	r3, r0, #64	; 0x40
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012848:	f000 0220 	and.w	r2, r0, #32
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801284c:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801284e:	f000 0210 	and.w	r2, r0, #16
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8012852:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8012854:	f000 0208 	and.w	r2, r0, #8
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8012858:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801285a:	f000 0204 	and.w	r2, r0, #4
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801285e:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8012860:	f000 0202 	and.w	r2, r0, #2
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8012864:	4313      	orrs	r3, r2
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 8012866:	f000 0001 	and.w	r0, r0, #1
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801286a:	4318      	orrs	r0, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801286c:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 8012870:	2201      	movs	r2, #1
 8012872:	f10d 0107 	add.w	r1, sp, #7
 8012876:	2089      	movs	r0, #137	; 0x89
 8012878:	f7ff fe86 	bl	8012588 <SUBGRF_WriteCommand>
}
 801287c:	b003      	add	sp, #12
 801287e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08012884 <SUBGRF_CalibrateImage>:
{
 8012884:	b500      	push	{lr}
 8012886:	b083      	sub	sp, #12
    if( freq > 900000000 )
 8012888:	4b1f      	ldr	r3, [pc, #124]	; (8012908 <SUBGRF_CalibrateImage+0x84>)
 801288a:	4298      	cmp	r0, r3
 801288c:	d90d      	bls.n	80128aa <SUBGRF_CalibrateImage+0x26>
        calFreq[0] = 0xE1;
 801288e:	23e1      	movs	r3, #225	; 0xe1
 8012890:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xE9;
 8012894:	23e9      	movs	r3, #233	; 0xe9
 8012896:	f88d 3005 	strb.w	r3, [sp, #5]
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 801289a:	2202      	movs	r2, #2
 801289c:	a901      	add	r1, sp, #4
 801289e:	2098      	movs	r0, #152	; 0x98
 80128a0:	f7ff fe72 	bl	8012588 <SUBGRF_WriteCommand>
}
 80128a4:	b003      	add	sp, #12
 80128a6:	f85d fb04 	ldr.w	pc, [sp], #4
    else if( freq > 850000000 )
 80128aa:	4b18      	ldr	r3, [pc, #96]	; (801290c <SUBGRF_CalibrateImage+0x88>)
 80128ac:	4298      	cmp	r0, r3
 80128ae:	d906      	bls.n	80128be <SUBGRF_CalibrateImage+0x3a>
        calFreq[0] = 0xD7;
 80128b0:	23d7      	movs	r3, #215	; 0xd7
 80128b2:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xDB;
 80128b6:	23db      	movs	r3, #219	; 0xdb
 80128b8:	f88d 3005 	strb.w	r3, [sp, #5]
 80128bc:	e7ed      	b.n	801289a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 770000000 )
 80128be:	4b14      	ldr	r3, [pc, #80]	; (8012910 <SUBGRF_CalibrateImage+0x8c>)
 80128c0:	4298      	cmp	r0, r3
 80128c2:	d906      	bls.n	80128d2 <SUBGRF_CalibrateImage+0x4e>
        calFreq[0] = 0xC1;
 80128c4:	23c1      	movs	r3, #193	; 0xc1
 80128c6:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0xC5;
 80128ca:	23c5      	movs	r3, #197	; 0xc5
 80128cc:	f88d 3005 	strb.w	r3, [sp, #5]
 80128d0:	e7e3      	b.n	801289a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 460000000 )
 80128d2:	4b10      	ldr	r3, [pc, #64]	; (8012914 <SUBGRF_CalibrateImage+0x90>)
 80128d4:	4298      	cmp	r0, r3
 80128d6:	d906      	bls.n	80128e6 <SUBGRF_CalibrateImage+0x62>
        calFreq[0] = 0x75;
 80128d8:	2375      	movs	r3, #117	; 0x75
 80128da:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x81;
 80128de:	2381      	movs	r3, #129	; 0x81
 80128e0:	f88d 3005 	strb.w	r3, [sp, #5]
 80128e4:	e7d9      	b.n	801289a <SUBGRF_CalibrateImage+0x16>
    else if( freq > 425000000 )
 80128e6:	4b0c      	ldr	r3, [pc, #48]	; (8012918 <SUBGRF_CalibrateImage+0x94>)
 80128e8:	4298      	cmp	r0, r3
 80128ea:	d906      	bls.n	80128fa <SUBGRF_CalibrateImage+0x76>
        calFreq[0] = 0x6B;
 80128ec:	236b      	movs	r3, #107	; 0x6b
 80128ee:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x6F;
 80128f2:	236f      	movs	r3, #111	; 0x6f
 80128f4:	f88d 3005 	strb.w	r3, [sp, #5]
 80128f8:	e7cf      	b.n	801289a <SUBGRF_CalibrateImage+0x16>
        calFreq[0] = 0x29;
 80128fa:	2329      	movs	r3, #41	; 0x29
 80128fc:	f88d 3004 	strb.w	r3, [sp, #4]
        calFreq[1] = 0x2B ;
 8012900:	232b      	movs	r3, #43	; 0x2b
 8012902:	f88d 3005 	strb.w	r3, [sp, #5]
 8012906:	e7c8      	b.n	801289a <SUBGRF_CalibrateImage+0x16>
 8012908:	35a4e900 	.word	0x35a4e900
 801290c:	32a9f880 	.word	0x32a9f880
 8012910:	2de54480 	.word	0x2de54480
 8012914:	1b6b0b00 	.word	0x1b6b0b00
 8012918:	1954fc40 	.word	0x1954fc40

0801291c <SUBGRF_SetPaConfig>:
{
 801291c:	b500      	push	{lr}
 801291e:	b083      	sub	sp, #12
    buf[0] = paDutyCycle;
 8012920:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = hpMax;
 8012924:	f88d 1005 	strb.w	r1, [sp, #5]
    buf[2] = deviceSel;
 8012928:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[3] = paLut;
 801292c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 8012930:	2204      	movs	r2, #4
 8012932:	eb0d 0102 	add.w	r1, sp, r2
 8012936:	2095      	movs	r0, #149	; 0x95
 8012938:	f7ff fe26 	bl	8012588 <SUBGRF_WriteCommand>
}
 801293c:	b003      	add	sp, #12
 801293e:	f85d fb04 	ldr.w	pc, [sp], #4

08012942 <SUBGRF_SetDioIrqParams>:
{
 8012942:	b500      	push	{lr}
 8012944:	b083      	sub	sp, #12
    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8012946:	ea4f 2c10 	mov.w	ip, r0, lsr #8
 801294a:	f88d c000 	strb.w	ip, [sp]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801294e:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 8012952:	0a08      	lsrs	r0, r1, #8
 8012954:	f88d 0002 	strb.w	r0, [sp, #2]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 8012958:	f88d 1003 	strb.w	r1, [sp, #3]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 801295c:	0a11      	lsrs	r1, r2, #8
 801295e:	f88d 1004 	strb.w	r1, [sp, #4]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 8012962:	f88d 2005 	strb.w	r2, [sp, #5]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 8012966:	0a1a      	lsrs	r2, r3, #8
 8012968:	f88d 2006 	strb.w	r2, [sp, #6]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 801296c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 8012970:	2208      	movs	r2, #8
 8012972:	4669      	mov	r1, sp
 8012974:	4610      	mov	r0, r2
 8012976:	f7ff fe07 	bl	8012588 <SUBGRF_WriteCommand>
}
 801297a:	b003      	add	sp, #12
 801297c:	f85d fb04 	ldr.w	pc, [sp], #4

08012980 <SUBGRF_SetTcxoMode>:
{
 8012980:	b500      	push	{lr}
 8012982:	b083      	sub	sp, #12
    buf[0] = tcxoVoltage & 0x07;
 8012984:	f000 0007 	and.w	r0, r0, #7
 8012988:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 801298c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8012990:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8012994:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8012998:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801299c:	f88d 1007 	strb.w	r1, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 80129a0:	2204      	movs	r2, #4
 80129a2:	eb0d 0102 	add.w	r1, sp, r2
 80129a6:	2097      	movs	r0, #151	; 0x97
 80129a8:	f7ff fdee 	bl	8012588 <SUBGRF_WriteCommand>
}
 80129ac:	b003      	add	sp, #12
 80129ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080129b4 <SUBGRF_Init>:
{
 80129b4:	b508      	push	{r3, lr}
    if ( dioIrq != NULL)
 80129b6:	b108      	cbz	r0, 80129bc <SUBGRF_Init+0x8>
        RadioOnDioIrqCb = dioIrq;
 80129b8:	4a18      	ldr	r2, [pc, #96]	; (8012a1c <SUBGRF_Init+0x68>)
 80129ba:	6010      	str	r0, [r2, #0]
    RADIO_INIT();
 80129bc:	f7ef f854 	bl	8001a68 <MX_SUBGHZ_Init>
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 80129c0:	2002      	movs	r0, #2
 80129c2:	f7ff fd3b 	bl	801243c <Radio_SMPS_Set>
    ImageCalibrated = false;
 80129c6:	2000      	movs	r0, #0
 80129c8:	4b15      	ldr	r3, [pc, #84]	; (8012a20 <SUBGRF_Init+0x6c>)
 80129ca:	7018      	strb	r0, [r3, #0]
    SUBGRF_SetStandby( STDBY_RC );
 80129cc:	f7ff fe0c 	bl	80125e8 <SUBGRF_SetStandby>
    if (1U == RBI_IsTCXO() )
 80129d0:	f7f0 f9ea 	bl	8002da8 <RBI_IsTCXO>
 80129d4:	2801      	cmp	r0, #1
 80129d6:	d014      	beq.n	8012a02 <SUBGRF_Init+0x4e>
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80129d8:	2120      	movs	r1, #32
 80129da:	f640 1011 	movw	r0, #2321	; 0x911
 80129de:	f7ff fd0d 	bl	80123fc <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 80129e2:	2120      	movs	r1, #32
 80129e4:	f640 1012 	movw	r0, #2322	; 0x912
 80129e8:	f7ff fd08 	bl	80123fc <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister(REG_DRV_CTRL, 0x7 << 1);
 80129ec:	210e      	movs	r1, #14
 80129ee:	f640 101f 	movw	r0, #2335	; 0x91f
 80129f2:	f7ff fd03 	bl	80123fc <SUBGRF_WriteRegister>
    RBI_Init();
 80129f6:	f7f0 f9cb 	bl	8002d90 <RBI_Init>
    OperatingMode = MODE_STDBY_RC;
 80129fa:	4b0a      	ldr	r3, [pc, #40]	; (8012a24 <SUBGRF_Init+0x70>)
 80129fc:	2201      	movs	r2, #1
 80129fe:	701a      	strb	r2, [r3, #0]
}
 8012a00:	bd08      	pop	{r3, pc}
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8012a02:	2140      	movs	r1, #64	; 0x40
 8012a04:	f7ff ffbc 	bl	8012980 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8012a08:	2100      	movs	r1, #0
 8012a0a:	f640 1011 	movw	r0, #2321	; 0x911
 8012a0e:	f7ff fcf5 	bl	80123fc <SUBGRF_WriteRegister>
        SUBGRF_Calibrate( calibParam );
 8012a12:	f04f 007f 	mov.w	r0, #127	; 0x7f
 8012a16:	f7ff ff13 	bl	8012840 <SUBGRF_Calibrate>
 8012a1a:	e7e7      	b.n	80129ec <SUBGRF_Init+0x38>
 8012a1c:	200011f0 	.word	0x200011f0
 8012a20:	200011ec 	.word	0x200011ec
 8012a24:	200011ee 	.word	0x200011ee

08012a28 <SUBGRF_SetRfFrequency>:
{
 8012a28:	b510      	push	{r4, lr}
 8012a2a:	b082      	sub	sp, #8
 8012a2c:	4604      	mov	r4, r0
    if( ImageCalibrated == false )
 8012a2e:	4b12      	ldr	r3, [pc, #72]	; (8012a78 <SUBGRF_SetRfFrequency+0x50>)
 8012a30:	781b      	ldrb	r3, [r3, #0]
 8012a32:	b1d3      	cbz	r3, 8012a6a <SUBGRF_SetRfFrequency+0x42>
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8012a34:	4a11      	ldr	r2, [pc, #68]	; (8012a7c <SUBGRF_SetRfFrequency+0x54>)
 8012a36:	2300      	movs	r3, #0
 8012a38:	0660      	lsls	r0, r4, #25
 8012a3a:	09e1      	lsrs	r1, r4, #7
 8012a3c:	f7ee f8b4 	bl	8000ba8 <__aeabi_uldivmod>
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 8012a40:	0e03      	lsrs	r3, r0, #24
 8012a42:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8012a46:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8012a4a:	f88d 3005 	strb.w	r3, [sp, #5]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 8012a4e:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8012a52:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8012a56:	f88d 0007 	strb.w	r0, [sp, #7]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8012a5a:	2204      	movs	r2, #4
 8012a5c:	eb0d 0102 	add.w	r1, sp, r2
 8012a60:	2086      	movs	r0, #134	; 0x86
 8012a62:	f7ff fd91 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012a66:	b002      	add	sp, #8
 8012a68:	bd10      	pop	{r4, pc}
        SUBGRF_CalibrateImage( frequency );
 8012a6a:	f7ff ff0b 	bl	8012884 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 8012a6e:	4b02      	ldr	r3, [pc, #8]	; (8012a78 <SUBGRF_SetRfFrequency+0x50>)
 8012a70:	2201      	movs	r2, #1
 8012a72:	701a      	strb	r2, [r3, #0]
 8012a74:	e7de      	b.n	8012a34 <SUBGRF_SetRfFrequency+0xc>
 8012a76:	bf00      	nop
 8012a78:	200011ec 	.word	0x200011ec
 8012a7c:	01e84800 	.word	0x01e84800

08012a80 <SUBGRF_SetPacketType>:
{
 8012a80:	b500      	push	{lr}
 8012a82:	b083      	sub	sp, #12
 8012a84:	f88d 0007 	strb.w	r0, [sp, #7]
    PacketType = packetType;
 8012a88:	b2c3      	uxtb	r3, r0
 8012a8a:	4a09      	ldr	r2, [pc, #36]	; (8012ab0 <SUBGRF_SetPacketType+0x30>)
 8012a8c:	7013      	strb	r3, [r2, #0]
    if( packetType == PACKET_TYPE_GFSK )
 8012a8e:	b143      	cbz	r3, 8012aa2 <SUBGRF_SetPacketType+0x22>
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 8012a90:	2201      	movs	r2, #1
 8012a92:	f10d 0107 	add.w	r1, sp, #7
 8012a96:	208a      	movs	r0, #138	; 0x8a
 8012a98:	f7ff fd76 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012a9c:	b003      	add	sp, #12
 8012a9e:	f85d fb04 	ldr.w	pc, [sp], #4
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 8012aa2:	2100      	movs	r1, #0
 8012aa4:	f240 60ac 	movw	r0, #1708	; 0x6ac
 8012aa8:	f7ff fca8 	bl	80123fc <SUBGRF_WriteRegister>
 8012aac:	e7f0      	b.n	8012a90 <SUBGRF_SetPacketType+0x10>
 8012aae:	bf00      	nop
 8012ab0:	200011ef 	.word	0x200011ef

08012ab4 <SUBGRF_SetTxParams>:
{
 8012ab4:	b570      	push	{r4, r5, r6, lr}
 8012ab6:	b082      	sub	sp, #8
 8012ab8:	460c      	mov	r4, r1
 8012aba:	4616      	mov	r6, r2
    if (paSelect == RFO_LP)
 8012abc:	2801      	cmp	r0, #1
 8012abe:	d035      	beq.n	8012b2c <SUBGRF_SetTxParams+0x78>
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 8012ac0:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012ac4:	f7ff fcaa 	bl	801241c <SUBGRF_ReadRegister>
 8012ac8:	f040 011e 	orr.w	r1, r0, #30
 8012acc:	b2c9      	uxtb	r1, r1
 8012ace:	f640 00d8 	movw	r0, #2264	; 0x8d8
 8012ad2:	f7ff fc93 	bl	80123fc <SUBGRF_WriteRegister>
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 8012ad6:	2001      	movs	r0, #1
 8012ad8:	f7f0 f96e 	bl	8002db8 <RBI_GetRFOMaxPowerConfig>
 8012adc:	4605      	mov	r5, r0
        if (power > max_power)
 8012ade:	4284      	cmp	r4, r0
 8012ae0:	dd00      	ble.n	8012ae4 <SUBGRF_SetTxParams+0x30>
            power = max_power;
 8012ae2:	b244      	sxtb	r4, r0
        if (max_power == 20)
 8012ae4:	2d14      	cmp	r5, #20
 8012ae6:	d054      	beq.n	8012b92 <SUBGRF_SetTxParams+0xde>
        else if (max_power == 17)
 8012ae8:	2d11      	cmp	r5, #17
 8012aea:	d05c      	beq.n	8012ba6 <SUBGRF_SetTxParams+0xf2>
        else if (max_power == 14)
 8012aec:	2d0e      	cmp	r5, #14
 8012aee:	d064      	beq.n	8012bba <SUBGRF_SetTxParams+0x106>
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 8012af0:	2301      	movs	r3, #1
 8012af2:	2200      	movs	r2, #0
 8012af4:	2107      	movs	r1, #7
 8012af6:	2004      	movs	r0, #4
 8012af8:	f7ff ff10 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012afc:	1b64      	subs	r4, r4, r5
 8012afe:	3416      	adds	r4, #22
 8012b00:	b264      	sxtb	r4, r4
        if (power < -9)
 8012b02:	f114 0f09 	cmn.w	r4, #9
 8012b06:	da01      	bge.n	8012b0c <SUBGRF_SetTxParams+0x58>
            power = -9;
 8012b08:	f06f 0408 	mvn.w	r4, #8
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8012b0c:	2138      	movs	r1, #56	; 0x38
 8012b0e:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012b12:	f7ff fc73 	bl	80123fc <SUBGRF_WriteRegister>
    buf[0] = power;
 8012b16:	f88d 4004 	strb.w	r4, [sp, #4]
    buf[1] = (uint8_t)rampTime;
 8012b1a:	f88d 6005 	strb.w	r6, [sp, #5]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8012b1e:	2202      	movs	r2, #2
 8012b20:	a901      	add	r1, sp, #4
 8012b22:	208e      	movs	r0, #142	; 0x8e
 8012b24:	f7ff fd30 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012b28:	b002      	add	sp, #8
 8012b2a:	bd70      	pop	{r4, r5, r6, pc}
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 8012b2c:	2000      	movs	r0, #0
 8012b2e:	f7f0 f943 	bl	8002db8 <RBI_GetRFOMaxPowerConfig>
 8012b32:	4605      	mov	r5, r0
        if (power >  max_power)
 8012b34:	4284      	cmp	r4, r0
 8012b36:	dd00      	ble.n	8012b3a <SUBGRF_SetTxParams+0x86>
          power = max_power;
 8012b38:	b244      	sxtb	r4, r0
        if (max_power == 14)
 8012b3a:	2d0e      	cmp	r5, #14
 8012b3c:	d015      	beq.n	8012b6a <SUBGRF_SetTxParams+0xb6>
        else if (max_power == 10)
 8012b3e:	2d0a      	cmp	r5, #10
 8012b40:	d01d      	beq.n	8012b7e <SUBGRF_SetTxParams+0xca>
            SUBGRF_SetPaConfig(0x07, 0x00, 0x01, 0x01);
 8012b42:	2301      	movs	r3, #1
 8012b44:	461a      	mov	r2, r3
 8012b46:	2100      	movs	r1, #0
 8012b48:	2007      	movs	r0, #7
 8012b4a:	f7ff fee7 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012b4e:	1b64      	subs	r4, r4, r5
 8012b50:	340e      	adds	r4, #14
 8012b52:	b264      	sxtb	r4, r4
        if (power < -17)
 8012b54:	f114 0f11 	cmn.w	r4, #17
 8012b58:	da01      	bge.n	8012b5e <SUBGRF_SetTxParams+0xaa>
            power = -17;
 8012b5a:	f06f 0410 	mvn.w	r4, #16
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 8012b5e:	2118      	movs	r1, #24
 8012b60:	f640 00e7 	movw	r0, #2279	; 0x8e7
 8012b64:	f7ff fc4a 	bl	80123fc <SUBGRF_WriteRegister>
 8012b68:	e7d5      	b.n	8012b16 <SUBGRF_SetTxParams+0x62>
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8012b6a:	2301      	movs	r3, #1
 8012b6c:	461a      	mov	r2, r3
 8012b6e:	2100      	movs	r1, #0
 8012b70:	2004      	movs	r0, #4
 8012b72:	f7ff fed3 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012b76:	1b64      	subs	r4, r4, r5
 8012b78:	340e      	adds	r4, #14
 8012b7a:	b264      	sxtb	r4, r4
 8012b7c:	e7ea      	b.n	8012b54 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 8012b7e:	2301      	movs	r3, #1
 8012b80:	461a      	mov	r2, r3
 8012b82:	2100      	movs	r1, #0
 8012b84:	4618      	mov	r0, r3
 8012b86:	f7ff fec9 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8012b8a:	1b64      	subs	r4, r4, r5
 8012b8c:	340d      	adds	r4, #13
 8012b8e:	b264      	sxtb	r4, r4
 8012b90:	e7e0      	b.n	8012b54 <SUBGRF_SetTxParams+0xa0>
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 8012b92:	2301      	movs	r3, #1
 8012b94:	2200      	movs	r2, #0
 8012b96:	2105      	movs	r1, #5
 8012b98:	2003      	movs	r0, #3
 8012b9a:	f7ff febf 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012b9e:	1b64      	subs	r4, r4, r5
 8012ba0:	3416      	adds	r4, #22
 8012ba2:	b264      	sxtb	r4, r4
 8012ba4:	e7ad      	b.n	8012b02 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 8012ba6:	2301      	movs	r3, #1
 8012ba8:	2200      	movs	r2, #0
 8012baa:	2103      	movs	r1, #3
 8012bac:	2002      	movs	r0, #2
 8012bae:	f7ff feb5 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8012bb2:	1b64      	subs	r4, r4, r5
 8012bb4:	3416      	adds	r4, #22
 8012bb6:	b264      	sxtb	r4, r4
 8012bb8:	e7a3      	b.n	8012b02 <SUBGRF_SetTxParams+0x4e>
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 8012bba:	2301      	movs	r3, #1
 8012bbc:	2200      	movs	r2, #0
 8012bbe:	2102      	movs	r1, #2
 8012bc0:	4608      	mov	r0, r1
 8012bc2:	f7ff feab 	bl	801291c <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8012bc6:	1b64      	subs	r4, r4, r5
 8012bc8:	340e      	adds	r4, #14
 8012bca:	b264      	sxtb	r4, r4
 8012bcc:	e799      	b.n	8012b02 <SUBGRF_SetTxParams+0x4e>
	...

08012bd0 <SUBGRF_SetModulationParams>:
{
 8012bd0:	b510      	push	{r4, lr}
 8012bd2:	b082      	sub	sp, #8
 8012bd4:	4604      	mov	r4, r0
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012bd6:	4b3e      	ldr	r3, [pc, #248]	; (8012cd0 <SUBGRF_SetModulationParams+0x100>)
 8012bd8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012bdc:	ab02      	add	r3, sp, #8
 8012bde:	e903 0003 	stmdb	r3, {r0, r1}
    if( PacketType != modulationParams->PacketType )
 8012be2:	7820      	ldrb	r0, [r4, #0]
 8012be4:	4b3b      	ldr	r3, [pc, #236]	; (8012cd4 <SUBGRF_SetModulationParams+0x104>)
 8012be6:	781b      	ldrb	r3, [r3, #0]
 8012be8:	4298      	cmp	r0, r3
 8012bea:	d106      	bne.n	8012bfa <SUBGRF_SetModulationParams+0x2a>
    switch( modulationParams->PacketType )
 8012bec:	7823      	ldrb	r3, [r4, #0]
 8012bee:	2b03      	cmp	r3, #3
 8012bf0:	d82c      	bhi.n	8012c4c <SUBGRF_SetModulationParams+0x7c>
 8012bf2:	e8df f003 	tbb	[pc, r3]
 8012bf6:	4205      	.short	0x4205
 8012bf8:	542d      	.short	0x542d
        SUBGRF_SetPacketType( modulationParams->PacketType );
 8012bfa:	f7ff ff41 	bl	8012a80 <SUBGRF_SetPacketType>
 8012bfe:	e7f5      	b.n	8012bec <SUBGRF_SetModulationParams+0x1c>
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 8012c00:	6862      	ldr	r2, [r4, #4]
 8012c02:	4b35      	ldr	r3, [pc, #212]	; (8012cd8 <SUBGRF_SetModulationParams+0x108>)
 8012c04:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012c08:	0c1a      	lsrs	r2, r3, #16
 8012c0a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012c0e:	0a1a      	lsrs	r2, r3, #8
 8012c10:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012c14:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012c18:	7b23      	ldrb	r3, [r4, #12]
 8012c1a:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012c1e:	7b63      	ldrb	r3, [r4, #13]
 8012c20:	f88d 3004 	strb.w	r3, [sp, #4]
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8012c24:	68a1      	ldr	r1, [r4, #8]
 8012c26:	4a2d      	ldr	r2, [pc, #180]	; (8012cdc <SUBGRF_SetModulationParams+0x10c>)
 8012c28:	2300      	movs	r3, #0
 8012c2a:	0648      	lsls	r0, r1, #25
 8012c2c:	09c9      	lsrs	r1, r1, #7
 8012c2e:	f7ed ffbb 	bl	8000ba8 <__aeabi_uldivmod>
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 8012c32:	0c03      	lsrs	r3, r0, #16
 8012c34:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8012c38:	0a03      	lsrs	r3, r0, #8
 8012c3a:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[7] = ( tempVal& 0xFF );
 8012c3e:	f88d 0007 	strb.w	r0, [sp, #7]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012c42:	2208      	movs	r2, #8
 8012c44:	4669      	mov	r1, sp
 8012c46:	208b      	movs	r0, #139	; 0x8b
 8012c48:	f7ff fc9e 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012c4c:	b002      	add	sp, #8
 8012c4e:	bd10      	pop	{r4, pc}
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 8012c50:	6922      	ldr	r2, [r4, #16]
 8012c52:	4b21      	ldr	r3, [pc, #132]	; (8012cd8 <SUBGRF_SetModulationParams+0x108>)
 8012c54:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012c58:	0c1a      	lsrs	r2, r3, #16
 8012c5a:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012c5e:	0a1a      	lsrs	r2, r3, #8
 8012c60:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012c64:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 8012c68:	7d23      	ldrb	r3, [r4, #20]
 8012c6a:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012c6e:	2204      	movs	r2, #4
 8012c70:	4669      	mov	r1, sp
 8012c72:	208b      	movs	r0, #139	; 0x8b
 8012c74:	f7ff fc88 	bl	8012588 <SUBGRF_WriteCommand>
        break;
 8012c78:	e7e8      	b.n	8012c4c <SUBGRF_SetModulationParams+0x7c>
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 8012c7a:	7e23      	ldrb	r3, [r4, #24]
 8012c7c:	f88d 3000 	strb.w	r3, [sp]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 8012c80:	7e63      	ldrb	r3, [r4, #25]
 8012c82:	f88d 3001 	strb.w	r3, [sp, #1]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 8012c86:	7ea3      	ldrb	r3, [r4, #26]
 8012c88:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 8012c8c:	7ee3      	ldrb	r3, [r4, #27]
 8012c8e:	f88d 3003 	strb.w	r3, [sp, #3]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012c92:	2204      	movs	r2, #4
 8012c94:	4669      	mov	r1, sp
 8012c96:	208b      	movs	r0, #139	; 0x8b
 8012c98:	f7ff fc76 	bl	8012588 <SUBGRF_WriteCommand>
        break;
 8012c9c:	e7d6      	b.n	8012c4c <SUBGRF_SetModulationParams+0x7c>
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 8012c9e:	6862      	ldr	r2, [r4, #4]
 8012ca0:	4b0d      	ldr	r3, [pc, #52]	; (8012cd8 <SUBGRF_SetModulationParams+0x108>)
 8012ca2:	fbb3 f3f2 	udiv	r3, r3, r2
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8012ca6:	0c1a      	lsrs	r2, r3, #16
 8012ca8:	f88d 2000 	strb.w	r2, [sp]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 8012cac:	0a1a      	lsrs	r2, r3, #8
 8012cae:	f88d 2001 	strb.w	r2, [sp, #1]
        buf[2] = tempVal & 0xFF;
 8012cb2:	f88d 3002 	strb.w	r3, [sp, #2]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8012cb6:	7b23      	ldrb	r3, [r4, #12]
 8012cb8:	f88d 3003 	strb.w	r3, [sp, #3]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8012cbc:	7b63      	ldrb	r3, [r4, #13]
 8012cbe:	f88d 3004 	strb.w	r3, [sp, #4]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8012cc2:	2205      	movs	r2, #5
 8012cc4:	4669      	mov	r1, sp
 8012cc6:	208b      	movs	r0, #139	; 0x8b
 8012cc8:	f7ff fc5e 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012ccc:	e7be      	b.n	8012c4c <SUBGRF_SetModulationParams+0x7c>
 8012cce:	bf00      	nop
 8012cd0:	08014028 	.word	0x08014028
 8012cd4:	200011ef 	.word	0x200011ef
 8012cd8:	3d090000 	.word	0x3d090000
 8012cdc:	01e84800 	.word	0x01e84800

08012ce0 <SUBGRF_SetPacketParams>:
{
 8012ce0:	b510      	push	{r4, lr}
 8012ce2:	b084      	sub	sp, #16
 8012ce4:	4604      	mov	r4, r0
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8012ce6:	ab01      	add	r3, sp, #4
 8012ce8:	4a33      	ldr	r2, [pc, #204]	; (8012db8 <SUBGRF_SetPacketParams+0xd8>)
 8012cea:	ca07      	ldmia	r2, {r0, r1, r2}
 8012cec:	c303      	stmia	r3!, {r0, r1}
 8012cee:	701a      	strb	r2, [r3, #0]
    if( PacketType != packetParams->PacketType )
 8012cf0:	7820      	ldrb	r0, [r4, #0]
 8012cf2:	4b32      	ldr	r3, [pc, #200]	; (8012dbc <SUBGRF_SetPacketParams+0xdc>)
 8012cf4:	781b      	ldrb	r3, [r3, #0]
 8012cf6:	4298      	cmp	r0, r3
 8012cf8:	d106      	bne.n	8012d08 <SUBGRF_SetPacketParams+0x28>
    switch( packetParams->PacketType )
 8012cfa:	7823      	ldrb	r3, [r4, #0]
 8012cfc:	2b03      	cmp	r3, #3
 8012cfe:	d82a      	bhi.n	8012d56 <SUBGRF_SetPacketParams+0x76>
 8012d00:	e8df f003 	tbb	[pc, r3]
 8012d04:	053f4405 	.word	0x053f4405
        SUBGRF_SetPacketType( packetParams->PacketType );
 8012d08:	f7ff feba 	bl	8012a80 <SUBGRF_SetPacketType>
 8012d0c:	e7f5      	b.n	8012cfa <SUBGRF_SetPacketParams+0x1a>
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8012d0e:	7a63      	ldrb	r3, [r4, #9]
 8012d10:	2bf1      	cmp	r3, #241	; 0xf1
 8012d12:	d022      	beq.n	8012d5a <SUBGRF_SetPacketParams+0x7a>
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 8012d14:	2bf2      	cmp	r3, #242	; 0xf2
 8012d16:	d02a      	beq.n	8012d6e <SUBGRF_SetPacketParams+0x8e>
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 8012d18:	8862      	ldrh	r2, [r4, #2]
 8012d1a:	0a11      	lsrs	r1, r2, #8
 8012d1c:	f88d 1004 	strb.w	r1, [sp, #4]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 8012d20:	f88d 2005 	strb.w	r2, [sp, #5]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 8012d24:	7922      	ldrb	r2, [r4, #4]
 8012d26:	f88d 2006 	strb.w	r2, [sp, #6]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 8012d2a:	7962      	ldrb	r2, [r4, #5]
 8012d2c:	f88d 2007 	strb.w	r2, [sp, #7]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 8012d30:	79a2      	ldrb	r2, [r4, #6]
 8012d32:	f88d 2008 	strb.w	r2, [sp, #8]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 8012d36:	79e2      	ldrb	r2, [r4, #7]
 8012d38:	f88d 2009 	strb.w	r2, [sp, #9]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8012d3c:	7a22      	ldrb	r2, [r4, #8]
 8012d3e:	f88d 200a 	strb.w	r2, [sp, #10]
        buf[7] = crcVal;
 8012d42:	f88d 300b 	strb.w	r3, [sp, #11]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 8012d46:	7aa3      	ldrb	r3, [r4, #10]
 8012d48:	f88d 300c 	strb.w	r3, [sp, #12]
        n = 9;
 8012d4c:	2209      	movs	r2, #9
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 8012d4e:	a901      	add	r1, sp, #4
 8012d50:	208c      	movs	r0, #140	; 0x8c
 8012d52:	f7ff fc19 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012d56:	b004      	add	sp, #16
 8012d58:	bd10      	pop	{r4, pc}
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8012d5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8012d5e:	f7ff fbb2 	bl	80124c6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 8012d62:	f248 0005 	movw	r0, #32773	; 0x8005
 8012d66:	f7ff fbc2 	bl	80124ee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 8012d6a:	2302      	movs	r3, #2
 8012d6c:	e7d4      	b.n	8012d18 <SUBGRF_SetPacketParams+0x38>
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 8012d6e:	f641 500f 	movw	r0, #7439	; 0x1d0f
 8012d72:	f7ff fba8 	bl	80124c6 <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 8012d76:	f241 0021 	movw	r0, #4129	; 0x1021
 8012d7a:	f7ff fbb8 	bl	80124ee <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 8012d7e:	2306      	movs	r3, #6
 8012d80:	e7ca      	b.n	8012d18 <SUBGRF_SetPacketParams+0x38>
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8012d82:	7b23      	ldrb	r3, [r4, #12]
 8012d84:	f88d 3004 	strb.w	r3, [sp, #4]
        n = 1;
 8012d88:	2201      	movs	r2, #1
        break;
 8012d8a:	e7e0      	b.n	8012d4e <SUBGRF_SetPacketParams+0x6e>
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8012d8c:	89e3      	ldrh	r3, [r4, #14]
 8012d8e:	0a1a      	lsrs	r2, r3, #8
 8012d90:	f88d 2004 	strb.w	r2, [sp, #4]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8012d94:	f88d 3005 	strb.w	r3, [sp, #5]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8012d98:	7c23      	ldrb	r3, [r4, #16]
 8012d9a:	4a09      	ldr	r2, [pc, #36]	; (8012dc0 <SUBGRF_SetPacketParams+0xe0>)
 8012d9c:	7013      	strb	r3, [r2, #0]
 8012d9e:	f88d 3006 	strb.w	r3, [sp, #6]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8012da2:	7c63      	ldrb	r3, [r4, #17]
 8012da4:	f88d 3007 	strb.w	r3, [sp, #7]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 8012da8:	7ca3      	ldrb	r3, [r4, #18]
 8012daa:	f88d 3008 	strb.w	r3, [sp, #8]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8012dae:	7ce3      	ldrb	r3, [r4, #19]
 8012db0:	f88d 3009 	strb.w	r3, [sp, #9]
        n = 6;
 8012db4:	2206      	movs	r2, #6
        break;
 8012db6:	e7ca      	b.n	8012d4e <SUBGRF_SetPacketParams+0x6e>
 8012db8:	08014030 	.word	0x08014030
 8012dbc:	200011ef 	.word	0x200011ef
 8012dc0:	200011ed 	.word	0x200011ed

08012dc4 <SUBGRF_SetBufferBaseAddress>:
{
 8012dc4:	b500      	push	{lr}
 8012dc6:	b083      	sub	sp, #12
    buf[0] = txBaseAddress;
 8012dc8:	f88d 0004 	strb.w	r0, [sp, #4]
    buf[1] = rxBaseAddress;
 8012dcc:	f88d 1005 	strb.w	r1, [sp, #5]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8012dd0:	2202      	movs	r2, #2
 8012dd2:	a901      	add	r1, sp, #4
 8012dd4:	208f      	movs	r0, #143	; 0x8f
 8012dd6:	f7ff fbd7 	bl	8012588 <SUBGRF_WriteCommand>
}
 8012dda:	b003      	add	sp, #12
 8012ddc:	f85d fb04 	ldr.w	pc, [sp], #4

08012de0 <SUBGRF_ReadCommand>:
{
 8012de0:	b510      	push	{r4, lr}
 8012de2:	4613      	mov	r3, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8012de4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8012de8:	b672      	cpsid	i
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8012dea:	460a      	mov	r2, r1
 8012dec:	4601      	mov	r1, r0
 8012dee:	4803      	ldr	r0, [pc, #12]	; (8012dfc <SUBGRF_ReadCommand+0x1c>)
 8012df0:	f7f3 fdec 	bl	80069cc <HAL_SUBGHZ_ExecGetCmd>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8012df4:	f384 8810 	msr	PRIMASK, r4
}
 8012df8:	bd10      	pop	{r4, pc}
 8012dfa:	bf00      	nop
 8012dfc:	200002c0 	.word	0x200002c0

08012e00 <SUBGRF_GetRssiInst>:
{
 8012e00:	b500      	push	{lr}
 8012e02:	b083      	sub	sp, #12
    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 8012e04:	2201      	movs	r2, #1
 8012e06:	a901      	add	r1, sp, #4
 8012e08:	2015      	movs	r0, #21
 8012e0a:	f7ff ffe9 	bl	8012de0 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 8012e0e:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8012e12:	4240      	negs	r0, r0
}
 8012e14:	1040      	asrs	r0, r0, #1
 8012e16:	b003      	add	sp, #12
 8012e18:	f85d fb04 	ldr.w	pc, [sp], #4

08012e1c <SUBGRF_GetRxBufferStatus>:
{
 8012e1c:	b530      	push	{r4, r5, lr}
 8012e1e:	b083      	sub	sp, #12
 8012e20:	4605      	mov	r5, r0
 8012e22:	460c      	mov	r4, r1
    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 8012e24:	2202      	movs	r2, #2
 8012e26:	a901      	add	r1, sp, #4
 8012e28:	2013      	movs	r0, #19
 8012e2a:	f7ff ffd9 	bl	8012de0 <SUBGRF_ReadCommand>
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012e2e:	f7ff fadf 	bl	80123f0 <SUBGRF_GetPacketType>
 8012e32:	2801      	cmp	r0, #1
 8012e34:	d007      	beq.n	8012e46 <SUBGRF_GetRxBufferStatus+0x2a>
        *payloadLength = status[0];
 8012e36:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012e3a:	702b      	strb	r3, [r5, #0]
    *rxStartBufferPointer = status[1];
 8012e3c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012e40:	7023      	strb	r3, [r4, #0]
}
 8012e42:	b003      	add	sp, #12
 8012e44:	bd30      	pop	{r4, r5, pc}
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 8012e46:	4b05      	ldr	r3, [pc, #20]	; (8012e5c <SUBGRF_GetRxBufferStatus+0x40>)
 8012e48:	781b      	ldrb	r3, [r3, #0]
 8012e4a:	b2db      	uxtb	r3, r3
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	d1f2      	bne.n	8012e36 <SUBGRF_GetRxBufferStatus+0x1a>
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8012e50:	f240 7002 	movw	r0, #1794	; 0x702
 8012e54:	f7ff fae2 	bl	801241c <SUBGRF_ReadRegister>
 8012e58:	7028      	strb	r0, [r5, #0]
 8012e5a:	e7ef      	b.n	8012e3c <SUBGRF_GetRxBufferStatus+0x20>
 8012e5c:	200011ed 	.word	0x200011ed

08012e60 <SUBGRF_GetPayload>:
{
 8012e60:	b570      	push	{r4, r5, r6, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	4606      	mov	r6, r0
 8012e66:	460c      	mov	r4, r1
 8012e68:	4615      	mov	r5, r2
    uint8_t offset = 0;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	f88d 3007 	strb.w	r3, [sp, #7]
    SUBGRF_GetRxBufferStatus( size, &offset );
 8012e70:	f10d 0107 	add.w	r1, sp, #7
 8012e74:	4620      	mov	r0, r4
 8012e76:	f7ff ffd1 	bl	8012e1c <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8012e7a:	7822      	ldrb	r2, [r4, #0]
 8012e7c:	42aa      	cmp	r2, r5
 8012e7e:	d902      	bls.n	8012e86 <SUBGRF_GetPayload+0x26>
        return 1;
 8012e80:	2001      	movs	r0, #1
}
 8012e82:	b002      	add	sp, #8
 8012e84:	bd70      	pop	{r4, r5, r6, pc}
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8012e86:	4631      	mov	r1, r6
 8012e88:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8012e8c:	f7ff fb6c 	bl	8012568 <SUBGRF_ReadBuffer>
    return 0;
 8012e90:	2000      	movs	r0, #0
 8012e92:	e7f6      	b.n	8012e82 <SUBGRF_GetPayload+0x22>

08012e94 <SUBGRF_GetPacketStatus>:
{
 8012e94:	b510      	push	{r4, lr}
 8012e96:	b082      	sub	sp, #8
 8012e98:	4604      	mov	r4, r0
    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8012e9a:	2203      	movs	r2, #3
 8012e9c:	a901      	add	r1, sp, #4
 8012e9e:	2014      	movs	r0, #20
 8012ea0:	f7ff ff9e 	bl	8012de0 <SUBGRF_ReadCommand>
    pktStatus->packetType = SUBGRF_GetPacketType( );
 8012ea4:	f7ff faa4 	bl	80123f0 <SUBGRF_GetPacketType>
 8012ea8:	7020      	strb	r0, [r4, #0]
    switch( pktStatus->packetType )
 8012eaa:	b148      	cbz	r0, 8012ec0 <SUBGRF_GetPacketStatus+0x2c>
 8012eac:	2801      	cmp	r0, #1
 8012eae:	d018      	beq.n	8012ee2 <SUBGRF_GetPacketStatus+0x4e>
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 8012eb0:	2214      	movs	r2, #20
 8012eb2:	2100      	movs	r1, #0
 8012eb4:	4620      	mov	r0, r4
 8012eb6:	f000 fb20 	bl	80134fa <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 8012eba:	230f      	movs	r3, #15
 8012ebc:	7023      	strb	r3, [r4, #0]
}
 8012ebe:	e00e      	b.n	8012ede <SUBGRF_GetPacketStatus+0x4a>
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8012ec0:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ec4:	7123      	strb	r3, [r4, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8012ec6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8012eca:	425b      	negs	r3, r3
 8012ecc:	105b      	asrs	r3, r3, #1
 8012ece:	71a3      	strb	r3, [r4, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8012ed0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012ed4:	425b      	negs	r3, r3
 8012ed6:	105b      	asrs	r3, r3, #1
 8012ed8:	7163      	strb	r3, [r4, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	60a3      	str	r3, [r4, #8]
}
 8012ede:	b002      	add	sp, #8
 8012ee0:	bd10      	pop	{r4, pc}
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8012ee2:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8012ee6:	425b      	negs	r3, r3
 8012ee8:	105b      	asrs	r3, r3, #1
 8012eea:	7323      	strb	r3, [r4, #12]
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8012eec:	f99d 3005 	ldrsb.w	r3, [sp, #5]
 8012ef0:	3302      	adds	r3, #2
 8012ef2:	109b      	asrs	r3, r3, #2
 8012ef4:	7363      	strb	r3, [r4, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 8012ef6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8012efa:	425b      	negs	r3, r3
 8012efc:	105b      	asrs	r3, r3, #1
 8012efe:	73a3      	strb	r3, [r4, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 8012f00:	4b01      	ldr	r3, [pc, #4]	; (8012f08 <SUBGRF_GetPacketStatus+0x74>)
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	6123      	str	r3, [r4, #16]
            break;
 8012f06:	e7ea      	b.n	8012ede <SUBGRF_GetPacketStatus+0x4a>
 8012f08:	200011e8 	.word	0x200011e8

08012f0c <SUBGRF_SetSwitch>:
{
 8012f0c:	b510      	push	{r4, lr}
    if (rxtx == RFSWITCH_TX)
 8012f0e:	2901      	cmp	r1, #1
 8012f10:	d003      	beq.n	8012f1a <SUBGRF_SetSwitch+0xe>
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8012f12:	2001      	movs	r0, #1
    RBI_ConfigRFSwitch(state);
 8012f14:	f7ef ff40 	bl	8002d98 <RBI_ConfigRFSwitch>
}
 8012f18:	bd10      	pop	{r4, pc}
 8012f1a:	4604      	mov	r4, r0
 8012f1c:	4608      	mov	r0, r1
        if (paSelect == RFO_LP)
 8012f1e:	2c01      	cmp	r4, #1
 8012f20:	d003      	beq.n	8012f2a <SUBGRF_SetSwitch+0x1e>
        if (paSelect == RFO_HP)
 8012f22:	2c02      	cmp	r4, #2
 8012f24:	d1f6      	bne.n	8012f14 <SUBGRF_SetSwitch+0x8>
            state = RBI_SWITCH_RFO_HP;
 8012f26:	2003      	movs	r0, #3
 8012f28:	e7f4      	b.n	8012f14 <SUBGRF_SetSwitch+0x8>
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8012f2a:	2004      	movs	r0, #4
 8012f2c:	f7ff fa86 	bl	801243c <Radio_SMPS_Set>
            state = RBI_SWITCH_RFO_LP;
 8012f30:	2002      	movs	r0, #2
 8012f32:	e7f6      	b.n	8012f22 <SUBGRF_SetSwitch+0x16>

08012f34 <SUBGRF_SetRfTxPower>:
{
 8012f34:	b538      	push	{r3, r4, r5, lr}
 8012f36:	4604      	mov	r4, r0
    int32_t TxConfig = RBI_GetTxConfig();
 8012f38:	f7ef ff32 	bl	8002da0 <RBI_GetTxConfig>
    switch (TxConfig)
 8012f3c:	b148      	cbz	r0, 8012f52 <SUBGRF_SetRfTxPower+0x1e>
 8012f3e:	2802      	cmp	r0, #2
 8012f40:	d10d      	bne.n	8012f5e <SUBGRF_SetRfTxPower+0x2a>
            paSelect = RFO_HP;
 8012f42:	2502      	movs	r5, #2
    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8012f44:	2202      	movs	r2, #2
 8012f46:	4621      	mov	r1, r4
 8012f48:	4628      	mov	r0, r5
 8012f4a:	f7ff fdb3 	bl	8012ab4 <SUBGRF_SetTxParams>
}
 8012f4e:	4628      	mov	r0, r5
 8012f50:	bd38      	pop	{r3, r4, r5, pc}
            if (power > 15)
 8012f52:	2c0f      	cmp	r4, #15
 8012f54:	dc01      	bgt.n	8012f5a <SUBGRF_SetRfTxPower+0x26>
                paSelect = RFO_LP;
 8012f56:	2501      	movs	r5, #1
 8012f58:	e7f4      	b.n	8012f44 <SUBGRF_SetRfTxPower+0x10>
                paSelect = RFO_HP;
 8012f5a:	2502      	movs	r5, #2
 8012f5c:	e7f2      	b.n	8012f44 <SUBGRF_SetRfTxPower+0x10>
    switch (TxConfig)
 8012f5e:	2501      	movs	r5, #1
 8012f60:	e7f0      	b.n	8012f44 <SUBGRF_SetRfTxPower+0x10>

08012f62 <SUBGRF_GetRadioWakeUpTime>:
}
 8012f62:	2001      	movs	r0, #1
 8012f64:	4770      	bx	lr
	...

08012f68 <HAL_SUBGHZ_TxCpltCallback>:
{
 8012f68:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8012f6a:	4b02      	ldr	r3, [pc, #8]	; (8012f74 <HAL_SUBGHZ_TxCpltCallback+0xc>)
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	2001      	movs	r0, #1
 8012f70:	4798      	blx	r3
}
 8012f72:	bd08      	pop	{r3, pc}
 8012f74:	200011f0 	.word	0x200011f0

08012f78 <HAL_SUBGHZ_RxCpltCallback>:
{
 8012f78:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8012f7a:	4b02      	ldr	r3, [pc, #8]	; (8012f84 <HAL_SUBGHZ_RxCpltCallback+0xc>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2002      	movs	r0, #2
 8012f80:	4798      	blx	r3
}
 8012f82:	bd08      	pop	{r3, pc}
 8012f84:	200011f0 	.word	0x200011f0

08012f88 <HAL_SUBGHZ_CRCErrorCallback>:
{
 8012f88:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8012f8a:	4b02      	ldr	r3, [pc, #8]	; (8012f94 <HAL_SUBGHZ_CRCErrorCallback+0xc>)
 8012f8c:	681b      	ldr	r3, [r3, #0]
 8012f8e:	2040      	movs	r0, #64	; 0x40
 8012f90:	4798      	blx	r3
}
 8012f92:	bd08      	pop	{r3, pc}
 8012f94:	200011f0 	.word	0x200011f0

08012f98 <HAL_SUBGHZ_CADStatusCallback>:
{
 8012f98:	b508      	push	{r3, lr}
    switch (cadstatus)
 8012f9a:	b111      	cbz	r1, 8012fa2 <HAL_SUBGHZ_CADStatusCallback+0xa>
 8012f9c:	2901      	cmp	r1, #1
 8012f9e:	d005      	beq.n	8012fac <HAL_SUBGHZ_CADStatusCallback+0x14>
}
 8012fa0:	bd08      	pop	{r3, pc}
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8012fa2:	4b05      	ldr	r3, [pc, #20]	; (8012fb8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2080      	movs	r0, #128	; 0x80
 8012fa8:	4798      	blx	r3
            break;
 8012faa:	e7f9      	b.n	8012fa0 <HAL_SUBGHZ_CADStatusCallback+0x8>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8012fac:	4b02      	ldr	r3, [pc, #8]	; (8012fb8 <HAL_SUBGHZ_CADStatusCallback+0x20>)
 8012fae:	681b      	ldr	r3, [r3, #0]
 8012fb0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8012fb4:	4798      	blx	r3
}
 8012fb6:	e7f3      	b.n	8012fa0 <HAL_SUBGHZ_CADStatusCallback+0x8>
 8012fb8:	200011f0 	.word	0x200011f0

08012fbc <HAL_SUBGHZ_RxTxTimeoutCallback>:
{
 8012fbc:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8012fbe:	4b03      	ldr	r3, [pc, #12]	; (8012fcc <HAL_SUBGHZ_RxTxTimeoutCallback+0x10>)
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8012fc6:	4798      	blx	r3
}
 8012fc8:	bd08      	pop	{r3, pc}
 8012fca:	bf00      	nop
 8012fcc:	200011f0 	.word	0x200011f0

08012fd0 <HAL_SUBGHZ_HeaderErrorCallback>:
{
 8012fd0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8012fd2:	4b02      	ldr	r3, [pc, #8]	; (8012fdc <HAL_SUBGHZ_HeaderErrorCallback+0xc>)
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2020      	movs	r0, #32
 8012fd8:	4798      	blx	r3
}
 8012fda:	bd08      	pop	{r3, pc}
 8012fdc:	200011f0 	.word	0x200011f0

08012fe0 <HAL_SUBGHZ_PreambleDetectedCallback>:
{
 8012fe0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8012fe2:	4b02      	ldr	r3, [pc, #8]	; (8012fec <HAL_SUBGHZ_PreambleDetectedCallback+0xc>)
 8012fe4:	681b      	ldr	r3, [r3, #0]
 8012fe6:	2004      	movs	r0, #4
 8012fe8:	4798      	blx	r3
}
 8012fea:	bd08      	pop	{r3, pc}
 8012fec:	200011f0 	.word	0x200011f0

08012ff0 <HAL_SUBGHZ_SyncWordValidCallback>:
{
 8012ff0:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8012ff2:	4b02      	ldr	r3, [pc, #8]	; (8012ffc <HAL_SUBGHZ_SyncWordValidCallback+0xc>)
 8012ff4:	681b      	ldr	r3, [r3, #0]
 8012ff6:	2008      	movs	r0, #8
 8012ff8:	4798      	blx	r3
}
 8012ffa:	bd08      	pop	{r3, pc}
 8012ffc:	200011f0 	.word	0x200011f0

08013000 <HAL_SUBGHZ_HeaderValidCallback>:
{
 8013000:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8013002:	4b02      	ldr	r3, [pc, #8]	; (801300c <HAL_SUBGHZ_HeaderValidCallback+0xc>)
 8013004:	681b      	ldr	r3, [r3, #0]
 8013006:	2010      	movs	r0, #16
 8013008:	4798      	blx	r3
}
 801300a:	bd08      	pop	{r3, pc}
 801300c:	200011f0 	.word	0x200011f0

08013010 <HAL_SUBGHZ_LrFhssHopCallback>:
{
 8013010:	b508      	push	{r3, lr}
    RadioOnDioIrqCb( IRQ_LR_FHSS_HOP );
 8013012:	4b03      	ldr	r3, [pc, #12]	; (8013020 <HAL_SUBGHZ_LrFhssHopCallback+0x10>)
 8013014:	681b      	ldr	r3, [r3, #0]
 8013016:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 801301a:	4798      	blx	r3
}
 801301c:	bd08      	pop	{r3, pc}
 801301e:	bf00      	nop
 8013020:	200011f0 	.word	0x200011f0

08013024 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
    uint8_t i;

    if( bandwidth == 0 )
 8013024:	4601      	mov	r1, r0
 8013026:	b188      	cbz	r0, 801304c <SUBGRF_GetFskBandwidthRegValue+0x28>
    {
        return( 0x1F );
    }

    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8013028:	2300      	movs	r3, #0
 801302a:	2b15      	cmp	r3, #21
 801302c:	d80d      	bhi.n	801304a <SUBGRF_GetFskBandwidthRegValue+0x26>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 801302e:	4618      	mov	r0, r3
 8013030:	4a07      	ldr	r2, [pc, #28]	; (8013050 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013032:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013036:	428a      	cmp	r2, r1
 8013038:	d802      	bhi.n	8013040 <SUBGRF_GetFskBandwidthRegValue+0x1c>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 801303a:	3301      	adds	r3, #1
 801303c:	b2db      	uxtb	r3, r3
 801303e:	e7f4      	b.n	801302a <SUBGRF_GetFskBandwidthRegValue+0x6>
        {
            return FskBandwidths[i].RegValue;
 8013040:	4b03      	ldr	r3, [pc, #12]	; (8013050 <SUBGRF_GetFskBandwidthRegValue+0x2c>)
 8013042:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8013046:	7900      	ldrb	r0, [r0, #4]
 8013048:	4770      	bx	lr
        }
    }
    // ERROR: Value not found
    while( 1 );
 801304a:	e7fe      	b.n	801304a <SUBGRF_GetFskBandwidthRegValue+0x26>
        return( 0x1F );
 801304c:	201f      	movs	r0, #31
}
 801304e:	4770      	bx	lr
 8013050:	08014e08 	.word	0x08014e08

08013054 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8013054:	b570      	push	{r4, r5, r6, lr}
 8013056:	b082      	sub	sp, #8
 8013058:	4606      	mov	r6, r0
 801305a:	460c      	mov	r4, r1
  uint8_t BwMant[] = {4, 8, 10, 12};
 801305c:	4b1d      	ldr	r3, [pc, #116]	; (80130d4 <SUBGRF_GetCFO+0x80>)
 801305e:	9301      	str	r3, [sp, #4]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8013060:	f640 0007 	movw	r0, #2055	; 0x807
 8013064:	f7ff f9da 	bl	801241c <SUBGRF_ReadRegister>
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8013068:	f3c0 03c1 	ubfx	r3, r0, #3, #2
 801306c:	3308      	adds	r3, #8
 801306e:	446b      	add	r3, sp
 8013070:	f813 5c04 	ldrb.w	r5, [r3, #-4]
  uint8_t bandwidth_exp = reg & 0x7;
 8013074:	f000 0307 	and.w	r3, r0, #7
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp + 1 )));
 8013078:	3301      	adds	r3, #1
 801307a:	fa05 f303 	lsl.w	r3, r5, r3
 801307e:	4d16      	ldr	r5, [pc, #88]	; (80130d8 <SUBGRF_GetCFO+0x84>)
 8013080:	fbb5 f5f3 	udiv	r5, r5, r3
  uint32_t cf_osr = cf_fs / bitRate;
 8013084:	fbb5 f2f6 	udiv	r2, r5, r6
  uint8_t interp = 1;
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8013088:	2a07      	cmp	r2, #7
 801308a:	d921      	bls.n	80130d0 <SUBGRF_GetCFO+0x7c>
  uint8_t interp = 1;
 801308c:	2001      	movs	r0, #1
  {
    interp = 2;
  }
  if (cf_osr * interp < 4)
 801308e:	fb00 f202 	mul.w	r2, r0, r2
 8013092:	2a03      	cmp	r2, #3
 8013094:	d800      	bhi.n	8013098 <SUBGRF_GetCFO+0x44>
  {
    interp = 4;
 8013096:	2004      	movs	r0, #4
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8013098:	fb00 f505 	mul.w	r5, r0, r5
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 801309c:	f44f 60d6 	mov.w	r0, #1712	; 0x6b0
 80130a0:	f7ff f9bc 	bl	801241c <SUBGRF_ReadRegister>
 80130a4:	0200      	lsls	r0, r0, #8
 80130a6:	f400 6670 	and.w	r6, r0, #3840	; 0xf00
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 80130aa:	f240 60b1 	movw	r0, #1713	; 0x6b1
 80130ae:	f7ff f9b5 	bl	801241c <SUBGRF_ReadRegister>
 80130b2:	4330      	orrs	r0, r6
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 80130b4:	f410 6f00 	tst.w	r0, #2048	; 0x800
 80130b8:	d003      	beq.n	80130c2 <SUBGRF_GetCFO+0x6e>
  {
    cfo_bin |= 0xFFFFF000;
 80130ba:	ea6f 5000 	mvn.w	r0, r0, lsl #20
 80130be:	ea6f 5010 	mvn.w	r0, r0, lsr #20
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 80130c2:	096d      	lsrs	r5, r5, #5
 80130c4:	fb05 f000 	mul.w	r0, r5, r0
 80130c8:	11c0      	asrs	r0, r0, #7
 80130ca:	6020      	str	r0, [r4, #0]
}
 80130cc:	b002      	add	sp, #8
 80130ce:	bd70      	pop	{r4, r5, r6, pc}
    interp = 2;
 80130d0:	2002      	movs	r0, #2
 80130d2:	e7dc      	b.n	801308e <SUBGRF_GetCFO+0x3a>
 80130d4:	0c0a0804 	.word	0x0c0a0804
 80130d8:	01e84800 	.word	0x01e84800

080130dc <RFW_TransmitLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80130dc:	f04f 30ff 	mov.w	r0, #4294967295
 80130e0:	4770      	bx	lr

080130e2 <RFW_ReceiveLongPacket>:
    }
#else
    status = -1;
#endif /* RFW_LONGPACKET_ENABLE == 1 */
    return status;
}
 80130e2:	f04f 30ff 	mov.w	r0, #4294967295
 80130e6:	4770      	bx	lr

080130e8 <RFW_DeInit>:
void RFW_DeInit( void )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Enable = 0; /*Disable the RFWPacket decoding*/
#endif /* RFW_ENABLE == 1 */
}
 80130e8:	4770      	bx	lr

080130ea <RFW_Is_Init>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.Init.Enable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80130ea:	2000      	movs	r0, #0
 80130ec:	4770      	bx	lr

080130ee <RFW_Is_LongPacketModeEnabled>:
#if (RFW_ENABLE == 1 )
    return RFWPacket.LongPacketModeEnable;
#else
    return 0;
#endif /* RFW_ENABLE == 1 */
}
 80130ee:	2000      	movs	r0, #0
 80130f0:	4770      	bx	lr

080130f2 <RFW_SetAntSwitch>:
void RFW_SetAntSwitch( uint8_t AntSwitch )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.AntSwitchPaSelect = AntSwitch;
#endif /* RFW_ENABLE == 1 */
}
 80130f2:	4770      	bx	lr

080130f4 <RFW_TransmitInit>:

        status = 0;
    }
#endif /* RFW_ENABLE == 1 */
    return status;
}
 80130f4:	f04f 30ff 	mov.w	r0, #4294967295
 80130f8:	4770      	bx	lr

080130fa <RFW_ReceiveInit>:
    RFWPacket.LongPacketModeEnable = 0;
    return 0;
#else
    return -1;
#endif /* RFW_ENABLE == 1 */
}
 80130fa:	f04f 30ff 	mov.w	r0, #4294967295
 80130fe:	4770      	bx	lr

08013100 <RFW_DeInit_TxLongPacket>:
    /*long packet WA*/
    uint8_t reg = SUBGRF_ReadRegister( SUBGHZ_GPKTCTL1AR );
    SUBGRF_WriteRegister( SUBGHZ_GPKTCTL1AR, reg & ~0x02 ); /* clear infinite_sequence bit */
    SUBGRF_WriteRegister( SUBGHZ_GRTXPLDLEN, 0xFF ); /* RxTxPldLen: reset to 0xFF */
#endif /* RFW_LONGPACKET_ENABLE == 1 */
}
 8013100:	4770      	bx	lr

08013102 <RFW_ReceivePayload>:
        /*timeout*/
        SUBGRF_SetStandby( STDBY_RC );
        RFWPacket.Init.RadioEvents->RxTimeout( );
    }
#endif /* RFW_ENABLE == 1 */
}
 8013102:	4770      	bx	lr

08013104 <RFW_SetRadioModem>:
void RFW_SetRadioModem( RadioModems_t Modem )
{
#if (RFW_ENABLE == 1 )
    RFWPacket.Init.Modem = Modem;
#endif /* RFW_ENABLE == 1 */
}
 8013104:	4770      	bx	lr
	...

08013108 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 8013108:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801310a:	f3ef 8e10 	mrs	lr, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801310e:	b672      	cpsid	i
  uint16_t freesize;
  int16_t ret = -1;

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 8013110:	4b1e      	ldr	r3, [pc, #120]	; (801318c <TRACE_AllocateBufer+0x84>)
 8013112:	f8b3 c012 	ldrh.w	ip, [r3, #18]
 8013116:	8a1a      	ldrh	r2, [r3, #16]
 8013118:	4594      	cmp	ip, r2
 801311a:	d011      	beq.n	8013140 <TRACE_AllocateBufer+0x38>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801311c:	4594      	cmp	ip, r2
 801311e:	d921      	bls.n	8013164 <TRACE_AllocateBufer+0x5c>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013120:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8013124:	b29b      	uxth	r3, r3
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 8013126:	4283      	cmp	r3, r0
 8013128:	d81f      	bhi.n	801316a <TRACE_AllocateBufer+0x62>
 801312a:	4282      	cmp	r2, r0
 801312c:	d91d      	bls.n	801316a <TRACE_AllocateBufer+0x62>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801312e:	4b17      	ldr	r3, [pc, #92]	; (801318c <TRACE_AllocateBufer+0x84>)
 8013130:	2401      	movs	r4, #1
 8013132:	709c      	strb	r4, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013134:	f8a3 c000 	strh.w	ip, [r3]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013138:	2400      	movs	r4, #0
 801313a:	825c      	strh	r4, [r3, #18]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801313c:	4613      	mov	r3, r2
 801313e:	e014      	b.n	801316a <TRACE_AllocateBufer+0x62>
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 8013140:	f5cc 6380 	rsb	r3, ip, #1024	; 0x400
 8013144:	b29b      	uxth	r3, r3
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 8013146:	4298      	cmp	r0, r3
 8013148:	d30f      	bcc.n	801316a <TRACE_AllocateBufer+0x62>
 801314a:	4282      	cmp	r2, r0
 801314c:	d90d      	bls.n	801316a <TRACE_AllocateBufer+0x62>
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801314e:	4b0f      	ldr	r3, [pc, #60]	; (801318c <TRACE_AllocateBufer+0x84>)
 8013150:	2401      	movs	r4, #1
 8013152:	709c      	strb	r4, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 8013154:	f8a3 c000 	strh.w	ip, [r3]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 8013158:	f04f 0c00 	mov.w	ip, #0
 801315c:	f8a3 c012 	strh.w	ip, [r3, #18]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 8013160:	4613      	mov	r3, r2
 8013162:	e002      	b.n	801316a <TRACE_AllocateBufer+0x62>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 8013164:	eba2 030c 	sub.w	r3, r2, ip
 8013168:	b29b      	uxth	r3, r3
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801316a:	4283      	cmp	r3, r0
 801316c:	d90a      	bls.n	8013184 <TRACE_AllocateBufer+0x7c>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801316e:	4a07      	ldr	r2, [pc, #28]	; (801318c <TRACE_AllocateBufer+0x84>)
 8013170:	8a53      	ldrh	r3, [r2, #18]
 8013172:	800b      	strh	r3, [r1, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 8013174:	4403      	add	r3, r0
 8013176:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801317a:	8253      	strh	r3, [r2, #18]
    ret = 0;
 801317c:	2000      	movs	r0, #0
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801317e:	f38e 8810 	msr	PRIMASK, lr
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
}
 8013182:	bd10      	pop	{r4, pc}
  int16_t ret = -1;
 8013184:	f04f 30ff 	mov.w	r0, #4294967295
 8013188:	e7f9      	b.n	801317e <TRACE_AllocateBufer+0x76>
 801318a:	bf00      	nop
 801318c:	200015f4 	.word	0x200015f4

08013190 <TRACE_Lock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013190:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013194:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_Lock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock++;
 8013196:	4a03      	ldr	r2, [pc, #12]	; (80131a4 <TRACE_Lock+0x14>)
 8013198:	8ad3      	ldrh	r3, [r2, #22]
 801319a:	3301      	adds	r3, #1
 801319c:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801319e:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80131a2:	4770      	bx	lr
 80131a4:	200015f4 	.word	0x200015f4

080131a8 <TRACE_UnLock>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80131a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80131ac:	b672      	cpsid	i
 * @retval None.
 */
static void TRACE_UnLock(void)
{
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
  ADV_TRACE_Ctx.TraceLock--;
 80131ae:	4a03      	ldr	r2, [pc, #12]	; (80131bc <TRACE_UnLock+0x14>)
 80131b0:	8ad3      	ldrh	r3, [r2, #22]
 80131b2:	3b01      	subs	r3, #1
 80131b4:	82d3      	strh	r3, [r2, #22]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80131b6:	f381 8810 	msr	PRIMASK, r1
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 80131ba:	4770      	bx	lr
 80131bc:	200015f4 	.word	0x200015f4

080131c0 <TRACE_IsLocked>:
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 80131c0:	4b02      	ldr	r3, [pc, #8]	; (80131cc <TRACE_IsLocked+0xc>)
 80131c2:	8ad8      	ldrh	r0, [r3, #22]
}
 80131c4:	3800      	subs	r0, #0
 80131c6:	bf18      	it	ne
 80131c8:	2001      	movne	r0, #1
 80131ca:	4770      	bx	lr
 80131cc:	200015f4 	.word	0x200015f4

080131d0 <UTIL_ADV_TRACE_Init>:
{
 80131d0:	b508      	push	{r3, lr}
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 80131d2:	2218      	movs	r2, #24
 80131d4:	2100      	movs	r1, #0
 80131d6:	4807      	ldr	r0, [pc, #28]	; (80131f4 <UTIL_ADV_TRACE_Init+0x24>)
 80131d8:	f000 f98f 	bl	80134fa <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 80131dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80131e0:	2100      	movs	r1, #0
 80131e2:	4805      	ldr	r0, [pc, #20]	; (80131f8 <UTIL_ADV_TRACE_Init+0x28>)
 80131e4:	f000 f989 	bl	80134fa <UTIL_MEM_set_8>
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 80131e8:	4b04      	ldr	r3, [pc, #16]	; (80131fc <UTIL_ADV_TRACE_Init+0x2c>)
 80131ea:	681b      	ldr	r3, [r3, #0]
 80131ec:	4804      	ldr	r0, [pc, #16]	; (8013200 <UTIL_ADV_TRACE_Init+0x30>)
 80131ee:	4798      	blx	r3
}
 80131f0:	bd08      	pop	{r3, pc}
 80131f2:	bf00      	nop
 80131f4:	200015f4 	.word	0x200015f4
 80131f8:	200011f4 	.word	0x200011f4
 80131fc:	080140ac 	.word	0x080140ac
 8013200:	08013385 	.word	0x08013385

08013204 <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
  ADV_TRACE_Ctx.timestamp_func = *cb;
 8013204:	4b01      	ldr	r3, [pc, #4]	; (801320c <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x8>)
 8013206:	6058      	str	r0, [r3, #4]
}
 8013208:	4770      	bx	lr
 801320a:	bf00      	nop
 801320c:	200015f4 	.word	0x200015f4

08013210 <UTIL_ADV_TRACE_SetVerboseLevel>:
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 8013210:	4b01      	ldr	r3, [pc, #4]	; (8013218 <UTIL_ADV_TRACE_SetVerboseLevel+0x8>)
 8013212:	7218      	strb	r0, [r3, #8]
}
 8013214:	4770      	bx	lr
 8013216:	bf00      	nop
 8013218:	200015f4 	.word	0x200015f4

0801321c <TRACE_Send>:
{
 801321c:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801321e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013222:	b672      	cpsid	i
  if(TRACE_IsLocked() == 0u)
 8013224:	f7ff ffcc 	bl	80131c0 <TRACE_IsLocked>
 8013228:	b118      	cbz	r0, 8013232 <TRACE_Send+0x16>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801322a:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801322e:	2000      	movs	r0, #0
}
 8013230:	bd70      	pop	{r4, r5, r6, pc}
    TRACE_Lock();
 8013232:	f7ff ffad 	bl	8013190 <TRACE_Lock>
    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 8013236:	4b1d      	ldr	r3, [pc, #116]	; (80132ac <TRACE_Send+0x90>)
 8013238:	8a1a      	ldrh	r2, [r3, #16]
 801323a:	8a5b      	ldrh	r3, [r3, #18]
 801323c:	429a      	cmp	r2, r3
 801323e:	d02e      	beq.n	801329e <TRACE_Send+0x82>
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 8013240:	491a      	ldr	r1, [pc, #104]	; (80132ac <TRACE_Send+0x90>)
 8013242:	7889      	ldrb	r1, [r1, #2]
 8013244:	2901      	cmp	r1, #1
 8013246:	d017      	beq.n	8013278 <TRACE_Send+0x5c>
      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 8013248:	4a18      	ldr	r2, [pc, #96]	; (80132ac <TRACE_Send+0x90>)
 801324a:	7892      	ldrb	r2, [r2, #2]
 801324c:	b932      	cbnz	r2, 801325c <TRACE_Send+0x40>
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801324e:	4a17      	ldr	r2, [pc, #92]	; (80132ac <TRACE_Send+0x90>)
 8013250:	8a12      	ldrh	r2, [r2, #16]
 8013252:	4293      	cmp	r3, r2
 8013254:	d91e      	bls.n	8013294 <TRACE_Send+0x78>
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 8013256:	1a9b      	subs	r3, r3, r2
 8013258:	4a14      	ldr	r2, [pc, #80]	; (80132ac <TRACE_Send+0x90>)
 801325a:	8293      	strh	r3, [r2, #20]
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801325c:	4e13      	ldr	r6, [pc, #76]	; (80132ac <TRACE_Send+0x90>)
 801325e:	8a33      	ldrh	r3, [r6, #16]
 8013260:	4d13      	ldr	r5, [pc, #76]	; (80132b0 <TRACE_Send+0x94>)
 8013262:	441d      	add	r5, r3
 8013264:	f384 8810 	msr	PRIMASK, r4
      UTIL_ADV_TRACE_PreSendHook();
 8013268:	f7ee fcf0 	bl	8001c4c <UTIL_ADV_TRACE_PreSendHook>
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801326c:	4b11      	ldr	r3, [pc, #68]	; (80132b4 <TRACE_Send+0x98>)
 801326e:	68db      	ldr	r3, [r3, #12]
 8013270:	8ab1      	ldrh	r1, [r6, #20]
 8013272:	4628      	mov	r0, r5
 8013274:	4798      	blx	r3
 8013276:	e7db      	b.n	8013230 <TRACE_Send+0x14>
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 8013278:	480c      	ldr	r0, [pc, #48]	; (80132ac <TRACE_Send+0x90>)
 801327a:	8801      	ldrh	r1, [r0, #0]
 801327c:	1a8a      	subs	r2, r1, r2
 801327e:	b292      	uxth	r2, r2
 8013280:	8282      	strh	r2, [r0, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8013282:	2102      	movs	r1, #2
 8013284:	7081      	strb	r1, [r0, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 8013286:	2100      	movs	r1, #0
 8013288:	8001      	strh	r1, [r0, #0]
        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801328a:	2a00      	cmp	r2, #0
 801328c:	d1dc      	bne.n	8013248 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801328e:	7081      	strb	r1, [r0, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 8013290:	8201      	strh	r1, [r0, #16]
 8013292:	e7d9      	b.n	8013248 <TRACE_Send+0x2c>
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 8013294:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 8013298:	4a04      	ldr	r2, [pc, #16]	; (80132ac <TRACE_Send+0x90>)
 801329a:	8293      	strh	r3, [r2, #20]
 801329c:	e7de      	b.n	801325c <TRACE_Send+0x40>
      TRACE_UnLock();
 801329e:	f7ff ff83 	bl	80131a8 <TRACE_UnLock>
 80132a2:	f384 8810 	msr	PRIMASK, r4
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 80132a6:	2000      	movs	r0, #0
}
 80132a8:	e7c2      	b.n	8013230 <TRACE_Send+0x14>
 80132aa:	bf00      	nop
 80132ac:	200015f4 	.word	0x200015f4
 80132b0:	200011f4 	.word	0x200011f4
 80132b4:	080140ac 	.word	0x080140ac

080132b8 <UTIL_ADV_TRACE_COND_FSend>:
{
 80132b8:	b408      	push	{r3}
 80132ba:	b530      	push	{r4, r5, lr}
 80132bc:	b086      	sub	sp, #24
 80132be:	9c09      	ldr	r4, [sp, #36]	; 0x24
  uint16_t timestamp_size = 0u;
 80132c0:	2300      	movs	r3, #0
 80132c2:	f8ad 3002 	strh.w	r3, [sp, #2]
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 80132c6:	4b2c      	ldr	r3, [pc, #176]	; (8013378 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80132c8:	7a1b      	ldrb	r3, [r3, #8]
 80132ca:	4283      	cmp	r3, r0
 80132cc:	d34d      	bcc.n	801336a <UTIL_ADV_TRACE_COND_FSend+0xb2>
  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 80132ce:	4b2a      	ldr	r3, [pc, #168]	; (8013378 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80132d0:	68db      	ldr	r3, [r3, #12]
 80132d2:	ea31 0303 	bics.w	r3, r1, r3
 80132d6:	d14b      	bne.n	8013370 <UTIL_ADV_TRACE_COND_FSend+0xb8>
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 80132d8:	4b27      	ldr	r3, [pc, #156]	; (8013378 <UTIL_ADV_TRACE_COND_FSend+0xc0>)
 80132da:	685b      	ldr	r3, [r3, #4]
 80132dc:	b123      	cbz	r3, 80132e8 <UTIL_ADV_TRACE_COND_FSend+0x30>
 80132de:	b11a      	cbz	r2, 80132e8 <UTIL_ADV_TRACE_COND_FSend+0x30>
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 80132e0:	f10d 0102 	add.w	r1, sp, #2
 80132e4:	a801      	add	r0, sp, #4
 80132e6:	4798      	blx	r3
  va_start( vaArgs, strFormat);
 80132e8:	ab0a      	add	r3, sp, #40	; 0x28
 80132ea:	9305      	str	r3, [sp, #20]
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 80132ec:	4622      	mov	r2, r4
 80132ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80132f2:	4822      	ldr	r0, [pc, #136]	; (801337c <UTIL_ADV_TRACE_COND_FSend+0xc4>)
 80132f4:	f000 fcd0 	bl	8013c98 <tiny_vsnprintf_like>
 80132f8:	b285      	uxth	r5, r0
  TRACE_Lock();
 80132fa:	f7ff ff49 	bl	8013190 <TRACE_Lock>
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 80132fe:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 8013302:	4428      	add	r0, r5
 8013304:	4669      	mov	r1, sp
 8013306:	b280      	uxth	r0, r0
 8013308:	f7ff fefe 	bl	8013108 <TRACE_AllocateBufer>
 801330c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013310:	d026      	beq.n	8013360 <UTIL_ADV_TRACE_COND_FSend+0xa8>
    for (idx = 0u; idx < timestamp_size; idx++)
 8013312:	2300      	movs	r3, #0
 8013314:	e00d      	b.n	8013332 <UTIL_ADV_TRACE_COND_FSend+0x7a>
      ADV_TRACE_Buffer[writepos] = buf[idx];
 8013316:	f8bd 2000 	ldrh.w	r2, [sp]
 801331a:	f103 0118 	add.w	r1, r3, #24
 801331e:	4469      	add	r1, sp
 8013320:	f811 0c14 	ldrb.w	r0, [r1, #-20]
 8013324:	4916      	ldr	r1, [pc, #88]	; (8013380 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8013326:	5488      	strb	r0, [r1, r2]
      writepos = writepos + 1u;
 8013328:	3201      	adds	r2, #1
 801332a:	f8ad 2000 	strh.w	r2, [sp]
    for (idx = 0u; idx < timestamp_size; idx++)
 801332e:	3301      	adds	r3, #1
 8013330:	b29b      	uxth	r3, r3
 8013332:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8013336:	429a      	cmp	r2, r3
 8013338:	d8ed      	bhi.n	8013316 <UTIL_ADV_TRACE_COND_FSend+0x5e>
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801333a:	f8bd 0000 	ldrh.w	r0, [sp]
 801333e:	9b05      	ldr	r3, [sp, #20]
 8013340:	4622      	mov	r2, r4
 8013342:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013346:	4c0e      	ldr	r4, [pc, #56]	; (8013380 <UTIL_ADV_TRACE_COND_FSend+0xc8>)
 8013348:	4420      	add	r0, r4
 801334a:	f000 fca5 	bl	8013c98 <tiny_vsnprintf_like>
    TRACE_UnLock();
 801334e:	f7ff ff2b 	bl	80131a8 <TRACE_UnLock>
    return TRACE_Send();
 8013352:	f7ff ff63 	bl	801321c <TRACE_Send>
}
 8013356:	b006      	add	sp, #24
 8013358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801335c:	b001      	add	sp, #4
 801335e:	4770      	bx	lr
  TRACE_UnLock();
 8013360:	f7ff ff22 	bl	80131a8 <TRACE_UnLock>
  return UTIL_ADV_TRACE_MEM_FULL;
 8013364:	f06f 0002 	mvn.w	r0, #2
 8013368:	e7f5      	b.n	8013356 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_GIVEUP;
 801336a:	f06f 0004 	mvn.w	r0, #4
 801336e:	e7f2      	b.n	8013356 <UTIL_ADV_TRACE_COND_FSend+0x9e>
    return UTIL_ADV_TRACE_REGIONMASKED;
 8013370:	f06f 0005 	mvn.w	r0, #5
 8013374:	e7ef      	b.n	8013356 <UTIL_ADV_TRACE_COND_FSend+0x9e>
 8013376:	bf00      	nop
 8013378:	200015f4 	.word	0x200015f4
 801337c:	2000160c 	.word	0x2000160c
 8013380:	200011f4 	.word	0x200011f4

08013384 <TRACE_TxCpltCallback>:
{
 8013384:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013386:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801338a:	b672      	cpsid	i
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801338c:	4b25      	ldr	r3, [pc, #148]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 801338e:	789b      	ldrb	r3, [r3, #2]
 8013390:	2b02      	cmp	r3, #2
 8013392:	d016      	beq.n	80133c2 <TRACE_TxCpltCallback+0x3e>
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 8013394:	4a23      	ldr	r2, [pc, #140]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 8013396:	8a13      	ldrh	r3, [r2, #16]
 8013398:	8a90      	ldrh	r0, [r2, #20]
 801339a:	4403      	add	r3, r0
 801339c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80133a0:	8213      	strh	r3, [r2, #16]
  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 80133a2:	4b20      	ldr	r3, [pc, #128]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133a4:	8a1a      	ldrh	r2, [r3, #16]
 80133a6:	8a5b      	ldrh	r3, [r3, #18]
 80133a8:	429a      	cmp	r2, r3
 80133aa:	d003      	beq.n	80133b4 <TRACE_TxCpltCallback+0x30>
 80133ac:	481d      	ldr	r0, [pc, #116]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133ae:	8ac0      	ldrh	r0, [r0, #22]
 80133b0:	2801      	cmp	r0, #1
 80133b2:	d00b      	beq.n	80133cc <TRACE_TxCpltCallback+0x48>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80133b4:	f381 8810 	msr	PRIMASK, r1
    UTIL_ADV_TRACE_PostSendHook();
 80133b8:	f7ee fc4e 	bl	8001c58 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 80133bc:	f7ff fef4 	bl	80131a8 <TRACE_UnLock>
}
 80133c0:	bd10      	pop	{r4, pc}
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 80133c2:	4b18      	ldr	r3, [pc, #96]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133c4:	2200      	movs	r2, #0
 80133c6:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 80133c8:	821a      	strh	r2, [r3, #16]
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
 80133ca:	e7ea      	b.n	80133a2 <TRACE_TxCpltCallback+0x1e>
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 80133cc:	4815      	ldr	r0, [pc, #84]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133ce:	7880      	ldrb	r0, [r0, #2]
 80133d0:	2801      	cmp	r0, #1
 80133d2:	d014      	beq.n	80133fe <TRACE_TxCpltCallback+0x7a>
    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 80133d4:	4a13      	ldr	r2, [pc, #76]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133d6:	7892      	ldrb	r2, [r2, #2]
 80133d8:	b932      	cbnz	r2, 80133e8 <TRACE_TxCpltCallback+0x64>
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 80133da:	4a12      	ldr	r2, [pc, #72]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133dc:	8a12      	ldrh	r2, [r2, #16]
 80133de:	4293      	cmp	r3, r2
 80133e0:	d91b      	bls.n	801341a <TRACE_TxCpltCallback+0x96>
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 80133e2:	1a9b      	subs	r3, r3, r2
 80133e4:	4a0f      	ldr	r2, [pc, #60]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133e6:	8293      	strh	r3, [r2, #20]
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 80133e8:	4b0e      	ldr	r3, [pc, #56]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 80133ea:	8a1a      	ldrh	r2, [r3, #16]
 80133ec:	480e      	ldr	r0, [pc, #56]	; (8013428 <TRACE_TxCpltCallback+0xa4>)
 80133ee:	4410      	add	r0, r2
 80133f0:	f381 8810 	msr	PRIMASK, r1
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 80133f4:	4a0d      	ldr	r2, [pc, #52]	; (801342c <TRACE_TxCpltCallback+0xa8>)
 80133f6:	68d2      	ldr	r2, [r2, #12]
 80133f8:	8a99      	ldrh	r1, [r3, #20]
 80133fa:	4790      	blx	r2
 80133fc:	e7e0      	b.n	80133c0 <TRACE_TxCpltCallback+0x3c>
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 80133fe:	4c09      	ldr	r4, [pc, #36]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 8013400:	8820      	ldrh	r0, [r4, #0]
 8013402:	1a82      	subs	r2, r0, r2
 8013404:	b292      	uxth	r2, r2
 8013406:	82a2      	strh	r2, [r4, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 8013408:	2002      	movs	r0, #2
 801340a:	70a0      	strb	r0, [r4, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801340c:	2000      	movs	r0, #0
 801340e:	8020      	strh	r0, [r4, #0]
      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 8013410:	2a00      	cmp	r2, #0
 8013412:	d1df      	bne.n	80133d4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 8013414:	70a0      	strb	r0, [r4, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 8013416:	8220      	strh	r0, [r4, #16]
 8013418:	e7dc      	b.n	80133d4 <TRACE_TxCpltCallback+0x50>
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801341a:	f5c2 6380 	rsb	r3, r2, #1024	; 0x400
 801341e:	4a01      	ldr	r2, [pc, #4]	; (8013424 <TRACE_TxCpltCallback+0xa0>)
 8013420:	8293      	strh	r3, [r2, #20]
 8013422:	e7e1      	b.n	80133e8 <TRACE_TxCpltCallback+0x64>
 8013424:	200015f4 	.word	0x200015f4
 8013428:	200011f4 	.word	0x200011f4
 801342c:	080140ac 	.word	0x080140ac

08013430 <UTIL_LPM_Init>:
/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8013430:	2300      	movs	r3, #0
 8013432:	4a02      	ldr	r2, [pc, #8]	; (801343c <UTIL_LPM_Init+0xc>)
 8013434:	6013      	str	r3, [r2, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8013436:	4a02      	ldr	r2, [pc, #8]	; (8013440 <UTIL_LPM_Init+0x10>)
 8013438:	6013      	str	r3, [r2, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 801343a:	4770      	bx	lr
 801343c:	20001810 	.word	0x20001810
 8013440:	2000180c 	.word	0x2000180c

08013444 <UTIL_LPM_SetStopMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013444:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013448:	b672      	cpsid	i

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch( state )
 801344a:	b141      	cbz	r1, 801345e <UTIL_LPM_SetStopMode+0x1a>
 801344c:	2901      	cmp	r1, #1
 801344e:	d103      	bne.n	8013458 <UTIL_LPM_SetStopMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8013450:	4906      	ldr	r1, [pc, #24]	; (801346c <UTIL_LPM_SetStopMode+0x28>)
 8013452:	680a      	ldr	r2, [r1, #0]
 8013454:	4310      	orrs	r0, r2
 8013456:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013458:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 801345c:	4770      	bx	lr
      StopModeDisable &= ( ~lpm_id_bm );
 801345e:	4903      	ldr	r1, [pc, #12]	; (801346c <UTIL_LPM_SetStopMode+0x28>)
 8013460:	680a      	ldr	r2, [r1, #0]
 8013462:	ea22 0000 	bic.w	r0, r2, r0
 8013466:	6008      	str	r0, [r1, #0]
      break;
 8013468:	e7f6      	b.n	8013458 <UTIL_LPM_SetStopMode+0x14>
 801346a:	bf00      	nop
 801346c:	20001810 	.word	0x20001810

08013470 <UTIL_LPM_SetOffMode>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013470:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013474:	b672      	cpsid	i

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
  
  switch(state)
 8013476:	b141      	cbz	r1, 801348a <UTIL_LPM_SetOffMode+0x1a>
 8013478:	2901      	cmp	r1, #1
 801347a:	d103      	bne.n	8013484 <UTIL_LPM_SetOffMode+0x14>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 801347c:	4906      	ldr	r1, [pc, #24]	; (8013498 <UTIL_LPM_SetOffMode+0x28>)
 801347e:	680a      	ldr	r2, [r1, #0]
 8013480:	4310      	orrs	r0, r2
 8013482:	6008      	str	r0, [r1, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013484:	f383 8810 	msr	PRIMASK, r3
      break;
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8013488:	4770      	bx	lr
      OffModeDisable &= ( ~lpm_id_bm );
 801348a:	4903      	ldr	r1, [pc, #12]	; (8013498 <UTIL_LPM_SetOffMode+0x28>)
 801348c:	680a      	ldr	r2, [r1, #0]
 801348e:	ea22 0000 	bic.w	r0, r2, r0
 8013492:	6008      	str	r0, [r1, #0]
      break;
 8013494:	e7f6      	b.n	8013484 <UTIL_LPM_SetOffMode+0x14>
 8013496:	bf00      	nop
 8013498:	2000180c 	.word	0x2000180c

0801349c <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 801349c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801349e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80134a2:	b672      	cpsid	i
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 80134a4:	4b0c      	ldr	r3, [pc, #48]	; (80134d8 <UTIL_LPM_EnterLowPower+0x3c>)
 80134a6:	681b      	ldr	r3, [r3, #0]
 80134a8:	b13b      	cbz	r3, 80134ba <UTIL_LPM_EnterLowPower+0x1e>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 80134aa:	4d0c      	ldr	r5, [pc, #48]	; (80134dc <UTIL_LPM_EnterLowPower+0x40>)
 80134ac:	682b      	ldr	r3, [r5, #0]
 80134ae:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 80134b0:	686b      	ldr	r3, [r5, #4]
 80134b2:	4798      	blx	r3
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134b4:	f384 8810 	msr	PRIMASK, r4
      UTIL_PowerDriver.ExitOffMode( );
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 80134b8:	bd38      	pop	{r3, r4, r5, pc}
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 80134ba:	4b09      	ldr	r3, [pc, #36]	; (80134e0 <UTIL_LPM_EnterLowPower+0x44>)
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	b12b      	cbz	r3, 80134cc <UTIL_LPM_EnterLowPower+0x30>
        UTIL_PowerDriver.EnterStopMode( );
 80134c0:	4d06      	ldr	r5, [pc, #24]	; (80134dc <UTIL_LPM_EnterLowPower+0x40>)
 80134c2:	68ab      	ldr	r3, [r5, #8]
 80134c4:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 80134c6:	68eb      	ldr	r3, [r5, #12]
 80134c8:	4798      	blx	r3
 80134ca:	e7f3      	b.n	80134b4 <UTIL_LPM_EnterLowPower+0x18>
      UTIL_PowerDriver.EnterOffMode( );
 80134cc:	4d03      	ldr	r5, [pc, #12]	; (80134dc <UTIL_LPM_EnterLowPower+0x40>)
 80134ce:	692b      	ldr	r3, [r5, #16]
 80134d0:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 80134d2:	696b      	ldr	r3, [r5, #20]
 80134d4:	4798      	blx	r3
 80134d6:	e7ed      	b.n	80134b4 <UTIL_LPM_EnterLowPower+0x18>
 80134d8:	20001810 	.word	0x20001810
 80134dc:	08014048 	.word	0x08014048
 80134e0:	2000180c 	.word	0x2000180c

080134e4 <UTIL_MEM_cpy_8>:
void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  uint8_t* src8= (uint8_t *) src;

  while( size-- )
 80134e4:	e004      	b.n	80134f0 <UTIL_MEM_cpy_8+0xc>
    {
        *dst8++ = *src8++;
 80134e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80134ea:	f800 2b01 	strb.w	r2, [r0], #1
  while( size-- )
 80134ee:	461a      	mov	r2, r3
 80134f0:	1e53      	subs	r3, r2, #1
 80134f2:	b29b      	uxth	r3, r3
 80134f4:	2a00      	cmp	r2, #0
 80134f6:	d1f6      	bne.n	80134e6 <UTIL_MEM_cpy_8+0x2>
    }
}
 80134f8:	4770      	bx	lr

080134fa <UTIL_MEM_set_8>:
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
  uint8_t* dst8= (uint8_t *) dst;
  while( size-- )
 80134fa:	e002      	b.n	8013502 <UTIL_MEM_set_8+0x8>
  {
    *dst8++ = value;
 80134fc:	f800 1b01 	strb.w	r1, [r0], #1
  while( size-- )
 8013500:	461a      	mov	r2, r3
 8013502:	1e53      	subs	r3, r2, #1
 8013504:	b29b      	uxth	r3, r3
 8013506:	2a00      	cmp	r2, #0
 8013508:	d1f8      	bne.n	80134fc <UTIL_MEM_set_8+0x2>
  }
}
 801350a:	4770      	bx	lr

0801350c <UTIL_SEQ_SetTask>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801350c:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013510:	b672      	cpsid	i

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );

  TaskSet |= TaskId_bm;
 8013512:	4a06      	ldr	r2, [pc, #24]	; (801352c <UTIL_SEQ_SetTask+0x20>)
 8013514:	6813      	ldr	r3, [r2, #0]
 8013516:	4303      	orrs	r3, r0
 8013518:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801351a:	4a05      	ldr	r2, [pc, #20]	; (8013530 <UTIL_SEQ_SetTask+0x24>)
 801351c:	f852 3031 	ldr.w	r3, [r2, r1, lsl #3]
 8013520:	4318      	orrs	r0, r3
 8013522:	f842 0031 	str.w	r0, [r2, r1, lsl #3]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013526:	f38c 8810 	msr	PRIMASK, ip

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
}
 801352a:	4770      	bx	lr
 801352c:	20001838 	.word	0x20001838
 8013530:	20001830 	.word	0x20001830

08013534 <UTIL_SEQ_PreIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013534:	4770      	bx	lr

08013536 <UTIL_SEQ_PostIdle>:
{
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
}
 8013536:	4770      	bx	lr

08013538 <SEQ_BitPosition>:
uint8_t SEQ_BitPosition(uint32_t Value)
{
uint8_t n = 0U;
uint32_t lvalue = Value;

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 8013538:	0c03      	lsrs	r3, r0, #16
 801353a:	041b      	lsls	r3, r3, #16
 801353c:	b9b3      	cbnz	r3, 801356c <SEQ_BitPosition+0x34>
 801353e:	0400      	lsls	r0, r0, #16
 8013540:	2310      	movs	r3, #16
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 8013542:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013546:	d102      	bne.n	801354e <SEQ_BitPosition+0x16>
 8013548:	3308      	adds	r3, #8
 801354a:	b2db      	uxtb	r3, r3
 801354c:	0200      	lsls	r0, r0, #8
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801354e:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013552:	d102      	bne.n	801355a <SEQ_BitPosition+0x22>
 8013554:	3304      	adds	r3, #4
 8013556:	b2db      	uxtb	r3, r3
 8013558:	0100      	lsls	r0, r0, #4

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801355a:	0f00      	lsrs	r0, r0, #28
 801355c:	4a04      	ldr	r2, [pc, #16]	; (8013570 <SEQ_BitPosition+0x38>)
 801355e:	5c10      	ldrb	r0, [r2, r0]
 8013560:	4418      	add	r0, r3
 8013562:	b2c0      	uxtb	r0, r0

  return (uint8_t)(31U-n);
 8013564:	f1c0 001f 	rsb	r0, r0, #31
}
 8013568:	b2c0      	uxtb	r0, r0
 801356a:	4770      	bx	lr
uint8_t n = 0U;
 801356c:	2300      	movs	r3, #0
 801356e:	e7e8      	b.n	8013542 <SEQ_BitPosition+0xa>
 8013570:	08014eb8 	.word	0x08014eb8

08013574 <UTIL_SEQ_Run>:
{
 8013574:	b538      	push	{r3, r4, r5, lr}
  super_mask_backup = SuperMask;
 8013576:	4b43      	ldr	r3, [pc, #268]	; (8013684 <UTIL_SEQ_Run+0x110>)
 8013578:	681c      	ldr	r4, [r3, #0]
  SuperMask &= Mask_bm;
 801357a:	4020      	ands	r0, r4
 801357c:	6018      	str	r0, [r3, #0]
  local_taskset = TaskSet;
 801357e:	4b42      	ldr	r3, [pc, #264]	; (8013688 <UTIL_SEQ_Run+0x114>)
 8013580:	6819      	ldr	r1, [r3, #0]
  local_evtset = EvtSet;
 8013582:	4b42      	ldr	r3, [pc, #264]	; (801368c <UTIL_SEQ_Run+0x118>)
 8013584:	681b      	ldr	r3, [r3, #0]
  local_taskmask = TaskMask;
 8013586:	4a42      	ldr	r2, [pc, #264]	; (8013690 <UTIL_SEQ_Run+0x11c>)
 8013588:	6810      	ldr	r0, [r2, #0]
  local_evtwaited =  EvtWaited;
 801358a:	4a42      	ldr	r2, [pc, #264]	; (8013694 <UTIL_SEQ_Run+0x120>)
 801358c:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801358e:	e030      	b.n	80135f2 <UTIL_SEQ_Run+0x7e>
      counter++;
 8013590:	3301      	adds	r3, #1
 8013592:	e035      	b.n	8013600 <UTIL_SEQ_Run+0x8c>
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 8013594:	4d40      	ldr	r5, [pc, #256]	; (8013698 <UTIL_SEQ_Run+0x124>)
 8013596:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 801359a:	6868      	ldr	r0, [r5, #4]
 801359c:	4010      	ands	r0, r2
 801359e:	f7ff ffcb 	bl	8013538 <SEQ_BitPosition>
 80135a2:	493e      	ldr	r1, [pc, #248]	; (801369c <UTIL_SEQ_Run+0x128>)
 80135a4:	6008      	str	r0, [r1, #0]
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 80135a6:	686a      	ldr	r2, [r5, #4]
 80135a8:	2301      	movs	r3, #1
 80135aa:	fa03 f000 	lsl.w	r0, r3, r0
 80135ae:	ea22 0000 	bic.w	r0, r2, r0
 80135b2:	6068      	str	r0, [r5, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80135b4:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80135b8:	b672      	cpsid	i
    TaskSet &= ~(1U << CurrentTaskIdx);
 80135ba:	680a      	ldr	r2, [r1, #0]
 80135bc:	fa03 f202 	lsl.w	r2, r3, r2
 80135c0:	ea6f 0c02 	mvn.w	ip, r2
 80135c4:	4830      	ldr	r0, [pc, #192]	; (8013688 <UTIL_SEQ_Run+0x114>)
 80135c6:	6801      	ldr	r1, [r0, #0]
 80135c8:	ea21 0202 	bic.w	r2, r1, r2
 80135cc:	6002      	str	r2, [r0, #0]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 80135ce:	2b00      	cmp	r3, #0
 80135d0:	d12d      	bne.n	801362e <UTIL_SEQ_Run+0xba>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80135d2:	f385 8810 	msr	PRIMASK, r5
    TaskCb[CurrentTaskIdx]( );
 80135d6:	4b31      	ldr	r3, [pc, #196]	; (801369c <UTIL_SEQ_Run+0x128>)
 80135d8:	681a      	ldr	r2, [r3, #0]
 80135da:	4b31      	ldr	r3, [pc, #196]	; (80136a0 <UTIL_SEQ_Run+0x12c>)
 80135dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80135e0:	4798      	blx	r3
    local_taskset = TaskSet;
 80135e2:	4b29      	ldr	r3, [pc, #164]	; (8013688 <UTIL_SEQ_Run+0x114>)
 80135e4:	6819      	ldr	r1, [r3, #0]
    local_evtset = EvtSet;
 80135e6:	4b29      	ldr	r3, [pc, #164]	; (801368c <UTIL_SEQ_Run+0x118>)
 80135e8:	681b      	ldr	r3, [r3, #0]
    local_taskmask = TaskMask;
 80135ea:	4a29      	ldr	r2, [pc, #164]	; (8013690 <UTIL_SEQ_Run+0x11c>)
 80135ec:	6810      	ldr	r0, [r2, #0]
    local_evtwaited = EvtWaited;
 80135ee:	4a29      	ldr	r2, [pc, #164]	; (8013694 <UTIL_SEQ_Run+0x120>)
 80135f0:	6812      	ldr	r2, [r2, #0]
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 80135f2:	4001      	ands	r1, r0
 80135f4:	4d23      	ldr	r5, [pc, #140]	; (8013684 <UTIL_SEQ_Run+0x110>)
 80135f6:	682d      	ldr	r5, [r5, #0]
 80135f8:	4229      	tst	r1, r5
 80135fa:	d021      	beq.n	8013640 <UTIL_SEQ_Run+0xcc>
 80135fc:	4013      	ands	r3, r2
 80135fe:	d11f      	bne.n	8013640 <UTIL_SEQ_Run+0xcc>
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 8013600:	4a25      	ldr	r2, [pc, #148]	; (8013698 <UTIL_SEQ_Run+0x124>)
 8013602:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8013606:	4002      	ands	r2, r0
 8013608:	422a      	tst	r2, r5
 801360a:	d0c1      	beq.n	8013590 <UTIL_SEQ_Run+0x1c>
    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801360c:	4922      	ldr	r1, [pc, #136]	; (8013698 <UTIL_SEQ_Run+0x124>)
 801360e:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8013612:	4002      	ands	r2, r0
 8013614:	402a      	ands	r2, r5
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 8013616:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 801361a:	6849      	ldr	r1, [r1, #4]
 801361c:	4211      	tst	r1, r2
 801361e:	d1b9      	bne.n	8013594 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 8013620:	491d      	ldr	r1, [pc, #116]	; (8013698 <UTIL_SEQ_Run+0x124>)
 8013622:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8013626:	f04f 30ff 	mov.w	r0, #4294967295
 801362a:	6048      	str	r0, [r1, #4]
 801362c:	e7b2      	b.n	8013594 <UTIL_SEQ_Run+0x20>
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801362e:	3b01      	subs	r3, #1
 8013630:	4919      	ldr	r1, [pc, #100]	; (8013698 <UTIL_SEQ_Run+0x124>)
 8013632:	f851 2033 	ldr.w	r2, [r1, r3, lsl #3]
 8013636:	ea0c 0202 	and.w	r2, ip, r2
 801363a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801363e:	e7c6      	b.n	80135ce <UTIL_SEQ_Run+0x5a>
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 8013640:	4b16      	ldr	r3, [pc, #88]	; (801369c <UTIL_SEQ_Run+0x128>)
 8013642:	f04f 32ff 	mov.w	r2, #4294967295
 8013646:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 8013648:	f7ff ff74 	bl	8013534 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801364c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013650:	b672      	cpsid	i
  local_taskset = TaskSet;
 8013652:	4b0d      	ldr	r3, [pc, #52]	; (8013688 <UTIL_SEQ_Run+0x114>)
 8013654:	681b      	ldr	r3, [r3, #0]
  local_evtset = EvtSet;
 8013656:	4a0d      	ldr	r2, [pc, #52]	; (801368c <UTIL_SEQ_Run+0x118>)
 8013658:	6811      	ldr	r1, [r2, #0]
  local_taskmask = TaskMask;
 801365a:	4a0d      	ldr	r2, [pc, #52]	; (8013690 <UTIL_SEQ_Run+0x11c>)
 801365c:	6812      	ldr	r2, [r2, #0]
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801365e:	4013      	ands	r3, r2
 8013660:	4a08      	ldr	r2, [pc, #32]	; (8013684 <UTIL_SEQ_Run+0x110>)
 8013662:	6812      	ldr	r2, [r2, #0]
 8013664:	4213      	tst	r3, r2
 8013666:	d103      	bne.n	8013670 <UTIL_SEQ_Run+0xfc>
    if ((local_evtset & EvtWaited)== 0U)
 8013668:	4b0a      	ldr	r3, [pc, #40]	; (8013694 <UTIL_SEQ_Run+0x120>)
 801366a:	681b      	ldr	r3, [r3, #0]
 801366c:	420b      	tst	r3, r1
 801366e:	d006      	beq.n	801367e <UTIL_SEQ_Run+0x10a>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013670:	f385 8810 	msr	PRIMASK, r5
  UTIL_SEQ_PostIdle( );
 8013674:	f7ff ff5f 	bl	8013536 <UTIL_SEQ_PostIdle>
  SuperMask = super_mask_backup;
 8013678:	4b02      	ldr	r3, [pc, #8]	; (8013684 <UTIL_SEQ_Run+0x110>)
 801367a:	601c      	str	r4, [r3, #0]
}
 801367c:	bd38      	pop	{r3, r4, r5, pc}
      UTIL_SEQ_Idle( );
 801367e:	f7ee fa6b 	bl	8001b58 <UTIL_SEQ_Idle>
 8013682:	e7f5      	b.n	8013670 <UTIL_SEQ_Run+0xfc>
 8013684:	20000108 	.word	0x20000108
 8013688:	20001838 	.word	0x20001838
 801368c:	20001818 	.word	0x20001818
 8013690:	2000010c 	.word	0x2000010c
 8013694:	2000181c 	.word	0x2000181c
 8013698:	20001830 	.word	0x20001830
 801369c:	20001814 	.word	0x20001814
 80136a0:	20001820 	.word	0x20001820

080136a4 <UTIL_SEQ_RegTask>:
{
 80136a4:	b538      	push	{r3, r4, r5, lr}
 80136a6:	4614      	mov	r4, r2
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80136a8:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80136ac:	b672      	cpsid	i
  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 80136ae:	f7ff ff43 	bl	8013538 <SEQ_BitPosition>
 80136b2:	4b03      	ldr	r3, [pc, #12]	; (80136c0 <UTIL_SEQ_RegTask+0x1c>)
 80136b4:	f843 4020 	str.w	r4, [r3, r0, lsl #2]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80136b8:	f385 8810 	msr	PRIMASK, r5
}
 80136bc:	bd38      	pop	{r3, r4, r5, pc}
 80136be:	bf00      	nop
 80136c0:	20001820 	.word	0x20001820

080136c4 <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 80136c4:	b082      	sub	sp, #8
 80136c6:	b082      	sub	sp, #8
 80136c8:	f10d 0c08 	add.w	ip, sp, #8
 80136cc:	e90c 0006 	stmdb	ip, {r1, r2}
 80136d0:	9303      	str	r3, [sp, #12]
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 80136d2:	2200      	movs	r2, #0
 80136d4:	6002      	str	r2, [r0, #0]
 80136d6:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds + b.Seconds;
 80136d8:	440b      	add	r3, r1
 80136da:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 80136dc:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80136e0:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 80136e4:	440a      	add	r2, r1
 80136e6:	b291      	uxth	r1, r2
 80136e8:	b212      	sxth	r2, r2
 80136ea:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds >= 1000 )
 80136ec:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
 80136f0:	db04      	blt.n	80136fc <SysTimeAdd+0x38>
  {
    c.Seconds++;
 80136f2:	3301      	adds	r3, #1
 80136f4:	6003      	str	r3, [r0, #0]
    c.SubSeconds -= 1000;
 80136f6:	f5a1 717a 	sub.w	r1, r1, #1000	; 0x3e8
 80136fa:	8081      	strh	r1, [r0, #4]
  }
  return c;
}
 80136fc:	b002      	add	sp, #8
 80136fe:	b002      	add	sp, #8
 8013700:	4770      	bx	lr

08013702 <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 8013702:	b082      	sub	sp, #8
 8013704:	b082      	sub	sp, #8
 8013706:	f10d 0c08 	add.w	ip, sp, #8
 801370a:	e90c 0006 	stmdb	ip, {r1, r2}
 801370e:	9303      	str	r3, [sp, #12]
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 8013710:	2200      	movs	r2, #0
 8013712:	6002      	str	r2, [r0, #0]
 8013714:	8082      	strh	r2, [r0, #4]

  c.Seconds = a.Seconds - b.Seconds;
 8013716:	1acb      	subs	r3, r1, r3
 8013718:	6003      	str	r3, [r0, #0]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801371a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 801371e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
 8013722:	1a52      	subs	r2, r2, r1
 8013724:	b291      	uxth	r1, r2
 8013726:	b212      	sxth	r2, r2
 8013728:	8082      	strh	r2, [r0, #4]
  if( c.SubSeconds < 0 )
 801372a:	2a00      	cmp	r2, #0
 801372c:	db02      	blt.n	8013734 <SysTimeSub+0x32>
  {
    c.Seconds--;
    c.SubSeconds += 1000;
  }
  return c;
}
 801372e:	b002      	add	sp, #8
 8013730:	b002      	add	sp, #8
 8013732:	4770      	bx	lr
    c.Seconds--;
 8013734:	3b01      	subs	r3, #1
 8013736:	6003      	str	r3, [r0, #0]
    c.SubSeconds += 1000;
 8013738:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 801373c:	8081      	strh	r1, [r0, #4]
  return c;
 801373e:	e7f6      	b.n	801372e <SysTimeSub+0x2c>

08013740 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 8013740:	b530      	push	{r4, r5, lr}
 8013742:	b089      	sub	sp, #36	; 0x24
 8013744:	ac02      	add	r4, sp, #8
 8013746:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801374a:	2300      	movs	r3, #0
 801374c:	9304      	str	r3, [sp, #16]
 801374e:	f8ad 3014 	strh.w	r3, [sp, #20]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013752:	4d0b      	ldr	r5, [pc, #44]	; (8013780 <SysTimeSet+0x40>)
 8013754:	692b      	ldr	r3, [r5, #16]
 8013756:	a805      	add	r0, sp, #20
 8013758:	4798      	blx	r3
 801375a:	4603      	mov	r3, r0
 801375c:	9004      	str	r0, [sp, #16]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801375e:	9a05      	ldr	r2, [sp, #20]
 8013760:	9200      	str	r2, [sp, #0]
 8013762:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013766:	a806      	add	r0, sp, #24
 8013768:	f7ff ffcb 	bl	8013702 <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801376c:	682b      	ldr	r3, [r5, #0]
 801376e:	9806      	ldr	r0, [sp, #24]
 8013770:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 8013772:	68ab      	ldr	r3, [r5, #8]
 8013774:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013778:	4798      	blx	r3
}
 801377a:	b009      	add	sp, #36	; 0x24
 801377c:	bd30      	pop	{r4, r5, pc}
 801377e:	bf00      	nop
 8013780:	0801406c 	.word	0x0801406c

08013784 <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 8013784:	b530      	push	{r4, r5, lr}
 8013786:	b087      	sub	sp, #28
 8013788:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801378a:	2300      	movs	r3, #0
 801378c:	9304      	str	r3, [sp, #16]
 801378e:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 8013792:	6003      	str	r3, [r0, #0]
 8013794:	8083      	strh	r3, [r0, #4]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 8013796:	4d0b      	ldr	r5, [pc, #44]	; (80137c4 <SysTimeGet+0x40>)
 8013798:	692b      	ldr	r3, [r5, #16]
 801379a:	a805      	add	r0, sp, #20
 801379c:	4798      	blx	r3
 801379e:	9004      	str	r0, [sp, #16]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80137a0:	68eb      	ldr	r3, [r5, #12]
 80137a2:	4798      	blx	r3
 80137a4:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 80137a8:	686b      	ldr	r3, [r5, #4]
 80137aa:	4798      	blx	r3
 80137ac:	9002      	str	r0, [sp, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 80137ae:	9b05      	ldr	r3, [sp, #20]
 80137b0:	9300      	str	r3, [sp, #0]
 80137b2:	9b04      	ldr	r3, [sp, #16]
 80137b4:	aa02      	add	r2, sp, #8
 80137b6:	ca06      	ldmia	r2, {r1, r2}
 80137b8:	4620      	mov	r0, r4
 80137ba:	f7ff ff83 	bl	80136c4 <SysTimeAdd>

  return sysTime;
}
 80137be:	4620      	mov	r0, r4
 80137c0:	b007      	add	sp, #28
 80137c2:	bd30      	pop	{r4, r5, pc}
 80137c4:	0801406c 	.word	0x0801406c

080137c8 <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 80137c8:	b530      	push	{r4, r5, lr}
 80137ca:	b083      	sub	sp, #12
 80137cc:	4604      	mov	r4, r0
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 80137ce:	2300      	movs	r3, #0
 80137d0:	9300      	str	r3, [sp, #0]
 80137d2:	f8ad 3004 	strh.w	r3, [sp, #4]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 80137d6:	4b06      	ldr	r3, [pc, #24]	; (80137f0 <SysTimeGetMcuTime+0x28>)
 80137d8:	691b      	ldr	r3, [r3, #16]
 80137da:	466d      	mov	r5, sp
 80137dc:	a801      	add	r0, sp, #4
 80137de:	4798      	blx	r3
 80137e0:	9000      	str	r0, [sp, #0]

  return calendarTime;
 80137e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80137e6:	e884 0003 	stmia.w	r4, {r0, r1}
}
 80137ea:	4620      	mov	r0, r4
 80137ec:	b003      	add	sp, #12
 80137ee:	bd30      	pop	{r4, r5, pc}
 80137f0:	0801406c 	.word	0x0801406c

080137f4 <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 80137f4:	b530      	push	{r4, r5, lr}
 80137f6:	b089      	sub	sp, #36	; 0x24
 80137f8:	ac02      	add	r4, sp, #8
 80137fa:	e884 0003 	stmia.w	r4, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 80137fe:	4d0c      	ldr	r5, [pc, #48]	; (8013830 <SysTimeToMs+0x3c>)
 8013800:	68eb      	ldr	r3, [r5, #12]
 8013802:	4798      	blx	r3
 8013804:	f8ad 001c 	strh.w	r0, [sp, #28]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013808:	686b      	ldr	r3, [r5, #4]
 801380a:	4798      	blx	r3
 801380c:	4603      	mov	r3, r0
 801380e:	9006      	str	r0, [sp, #24]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 8013810:	9a07      	ldr	r2, [sp, #28]
 8013812:	9200      	str	r2, [sp, #0]
 8013814:	e894 0006 	ldmia.w	r4, {r1, r2}
 8013818:	a804      	add	r0, sp, #16
 801381a:	f7ff ff72 	bl	8013702 <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801381e:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
}
 8013822:	9a04      	ldr	r2, [sp, #16]
 8013824:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8013828:	fb00 3002 	mla	r0, r0, r2, r3
 801382c:	b009      	add	sp, #36	; 0x24
 801382e:	bd30      	pop	{r4, r5, pc}
 8013830:	0801406c 	.word	0x0801406c

08013834 <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 8013834:	b530      	push	{r4, r5, lr}
 8013836:	b087      	sub	sp, #28
 8013838:	4604      	mov	r4, r0
  uint32_t seconds = timeMs / 1000;
 801383a:	4b12      	ldr	r3, [pc, #72]	; (8013884 <SysTimeFromMs+0x50>)
 801383c:	fba3 2301 	umull	r2, r3, r3, r1
 8013840:	099b      	lsrs	r3, r3, #6
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 8013842:	9304      	str	r3, [sp, #16]
 8013844:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
 8013848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801384c:	eba1 03c3 	sub.w	r3, r1, r3, lsl #3
 8013850:	f8ad 3014 	strh.w	r3, [sp, #20]
  SysTime_t DeltaTime = { 0 };
 8013854:	2300      	movs	r3, #0
 8013856:	9302      	str	r3, [sp, #8]
 8013858:	9303      	str	r3, [sp, #12]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801385a:	4d0b      	ldr	r5, [pc, #44]	; (8013888 <SysTimeFromMs+0x54>)
 801385c:	68eb      	ldr	r3, [r5, #12]
 801385e:	4798      	blx	r3
 8013860:	f8ad 000c 	strh.w	r0, [sp, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 8013864:	686b      	ldr	r3, [r5, #4]
 8013866:	4798      	blx	r3
 8013868:	4603      	mov	r3, r0
 801386a:	9002      	str	r0, [sp, #8]
  return SysTimeAdd( sysTime, DeltaTime );
 801386c:	9a03      	ldr	r2, [sp, #12]
 801386e:	9200      	str	r2, [sp, #0]
 8013870:	aa06      	add	r2, sp, #24
 8013872:	e912 0006 	ldmdb	r2, {r1, r2}
 8013876:	4620      	mov	r0, r4
 8013878:	f7ff ff24 	bl	80136c4 <SysTimeAdd>
}
 801387c:	4620      	mov	r0, r4
 801387e:	b007      	add	sp, #28
 8013880:	bd30      	pop	{r4, r5, pc}
 8013882:	bf00      	nop
 8013884:	10624dd3 	.word	0x10624dd3
 8013888:	0801406c 	.word	0x0801406c

0801388c <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801388c:	b508      	push	{r3, lr}
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801388e:	4b03      	ldr	r3, [pc, #12]	; (801389c <UTIL_TIMER_Init+0x10>)
 8013890:	2200      	movs	r2, #0
 8013892:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 8013894:	4b02      	ldr	r3, [pc, #8]	; (80138a0 <UTIL_TIMER_Init+0x14>)
 8013896:	681b      	ldr	r3, [r3, #0]
 8013898:	4798      	blx	r3
}
 801389a:	bd08      	pop	{r3, pc}
 801389c:	2000183c 	.word	0x2000183c
 80138a0:	08014080 	.word	0x08014080

080138a4 <UTIL_TIMER_Create>:
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
  if((TimerObject != NULL) && (Callback != NULL))
 80138a4:	b1a8      	cbz	r0, 80138d2 <UTIL_TIMER_Create+0x2e>
{
 80138a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80138a8:	4617      	mov	r7, r2
 80138aa:	461e      	mov	r6, r3
 80138ac:	4604      	mov	r4, r0
  if((TimerObject != NULL) && (Callback != NULL))
 80138ae:	b193      	cbz	r3, 80138d6 <UTIL_TIMER_Create+0x32>
  {
    TimerObject->Timestamp = 0U;
 80138b0:	2500      	movs	r5, #0
 80138b2:	6005      	str	r5, [r0, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 80138b4:	4b09      	ldr	r3, [pc, #36]	; (80138dc <UTIL_TIMER_Create+0x38>)
 80138b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138b8:	4608      	mov	r0, r1
 80138ba:	4798      	blx	r3
 80138bc:	6060      	str	r0, [r4, #4]
    TimerObject->IsPending = 0U;
 80138be:	7225      	strb	r5, [r4, #8]
    TimerObject->IsRunning = 0U;
 80138c0:	7265      	strb	r5, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 80138c2:	72a5      	strb	r5, [r4, #10]
    TimerObject->Callback = Callback;
 80138c4:	60e6      	str	r6, [r4, #12]
    TimerObject->argument = Argument;
 80138c6:	9b06      	ldr	r3, [sp, #24]
 80138c8:	6123      	str	r3, [r4, #16]
    TimerObject->Mode = Mode;
 80138ca:	72e7      	strb	r7, [r4, #11]
    TimerObject->Next = NULL;
 80138cc:	6165      	str	r5, [r4, #20]
    return UTIL_TIMER_OK;
 80138ce:	4628      	mov	r0, r5
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
  }
}
 80138d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return UTIL_TIMER_INVALID_PARAM;
 80138d2:	2001      	movs	r0, #1
}
 80138d4:	4770      	bx	lr
    return UTIL_TIMER_INVALID_PARAM;
 80138d6:	2001      	movs	r0, #1
 80138d8:	e7fa      	b.n	80138d0 <UTIL_TIMER_Create+0x2c>
 80138da:	bf00      	nop
 80138dc:	08014080 	.word	0x08014080

080138e0 <UTIL_TIMER_GetCurrentTime>:
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 80138e0:	b510      	push	{r4, lr}
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 80138e2:	4c03      	ldr	r4, [pc, #12]	; (80138f0 <UTIL_TIMER_GetCurrentTime+0x10>)
 80138e4:	69e3      	ldr	r3, [r4, #28]
 80138e6:	4798      	blx	r3
  return  UTIL_TimerDriver.Tick2ms(now);
 80138e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80138ea:	4798      	blx	r3
}
 80138ec:	bd10      	pop	{r4, pc}
 80138ee:	bf00      	nop
 80138f0:	08014080 	.word	0x08014080

080138f4 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 80138f4:	b570      	push	{r4, r5, r6, lr}
 80138f6:	4606      	mov	r6, r0
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 80138f8:	4d05      	ldr	r5, [pc, #20]	; (8013910 <UTIL_TIMER_GetElapsedTime+0x1c>)
 80138fa:	69eb      	ldr	r3, [r5, #28]
 80138fc:	4798      	blx	r3
 80138fe:	4604      	mov	r4, r0
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 8013900:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013902:	4630      	mov	r0, r6
 8013904:	4798      	blx	r3
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 8013906:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8013908:	1a20      	subs	r0, r4, r0
 801390a:	4798      	blx	r3
}
 801390c:	bd70      	pop	{r4, r5, r6, pc}
 801390e:	bf00      	nop
 8013910:	08014080 	.word	0x08014080

08013914 <TimerExists>:
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 8013914:	4b05      	ldr	r3, [pc, #20]	; (801392c <TimerExists+0x18>)
 8013916:	681b      	ldr	r3, [r3, #0]

  while( cur != NULL )
 8013918:	e000      	b.n	801391c <TimerExists+0x8>
  {
    if( cur == TimerObject )
    {
      return true;
    }
    cur = cur->Next;
 801391a:	695b      	ldr	r3, [r3, #20]
  while( cur != NULL )
 801391c:	b11b      	cbz	r3, 8013926 <TimerExists+0x12>
    if( cur == TimerObject )
 801391e:	4283      	cmp	r3, r0
 8013920:	d1fb      	bne.n	801391a <TimerExists+0x6>
      return true;
 8013922:	2001      	movs	r0, #1
  }
  return false;
}
 8013924:	4770      	bx	lr
  return false;
 8013926:	2000      	movs	r0, #0
 8013928:	4770      	bx	lr
 801392a:	bf00      	nop
 801392c:	2000183c 	.word	0x2000183c

08013930 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 8013930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013932:	4604      	mov	r4, r0
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 8013934:	4e09      	ldr	r6, [pc, #36]	; (801395c <TimerSetTimeout+0x2c>)
 8013936:	6a33      	ldr	r3, [r6, #32]
 8013938:	4798      	blx	r3
 801393a:	4605      	mov	r5, r0
  TimerObject->IsPending = 1;
 801393c:	2301      	movs	r3, #1
 801393e:	7223      	strb	r3, [r4, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 8013940:	6827      	ldr	r7, [r4, #0]
 8013942:	69b6      	ldr	r6, [r6, #24]
 8013944:	47b0      	blx	r6
 8013946:	4428      	add	r0, r5
 8013948:	4287      	cmp	r7, r0
 801394a:	d202      	bcs.n	8013952 <TimerSetTimeout+0x22>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801394c:	47b0      	blx	r6
 801394e:	4405      	add	r5, r0
 8013950:	6025      	str	r5, [r4, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 8013952:	4b02      	ldr	r3, [pc, #8]	; (801395c <TimerSetTimeout+0x2c>)
 8013954:	689b      	ldr	r3, [r3, #8]
 8013956:	6820      	ldr	r0, [r4, #0]
 8013958:	4798      	blx	r3
}
 801395a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801395c:	08014080 	.word	0x08014080

08013960 <UTIL_TIMER_Stop>:
  if (NULL != TimerObject)
 8013960:	b368      	cbz	r0, 80139be <UTIL_TIMER_Stop+0x5e>
{
 8013962:	b510      	push	{r4, lr}
 8013964:	4602      	mov	r2, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013966:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 801396a:	b672      	cpsid	i
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801396c:	4b15      	ldr	r3, [pc, #84]	; (80139c4 <UTIL_TIMER_Stop+0x64>)
 801396e:	6819      	ldr	r1, [r3, #0]
    TimerObject->IsReloadStopped = 1U;
 8013970:	2301      	movs	r3, #1
 8013972:	7283      	strb	r3, [r0, #10]
    if(NULL != TimerListHead)
 8013974:	b1e1      	cbz	r1, 80139b0 <UTIL_TIMER_Stop+0x50>
      TimerObject->IsRunning = 0U;
 8013976:	2300      	movs	r3, #0
 8013978:	7243      	strb	r3, [r0, #9]
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801397a:	4288      	cmp	r0, r1
 801397c:	d006      	beq.n	801398c <UTIL_TIMER_Stop+0x2c>
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801397e:	460b      	mov	r3, r1
        while( cur != NULL )
 8013980:	b1b3      	cbz	r3, 80139b0 <UTIL_TIMER_Stop+0x50>
          if( cur == TimerObject )
 8013982:	4293      	cmp	r3, r2
 8013984:	d011      	beq.n	80139aa <UTIL_TIMER_Stop+0x4a>
            prev = cur;
 8013986:	4619      	mov	r1, r3
            cur = cur->Next;
 8013988:	695b      	ldr	r3, [r3, #20]
 801398a:	e7f9      	b.n	8013980 <UTIL_TIMER_Stop+0x20>
          TimerListHead->IsPending = 0;
 801398c:	720b      	strb	r3, [r1, #8]
          if( TimerListHead->Next != NULL )
 801398e:	6948      	ldr	r0, [r1, #20]
 8013990:	b120      	cbz	r0, 801399c <UTIL_TIMER_Stop+0x3c>
            TimerListHead = TimerListHead->Next;
 8013992:	4b0c      	ldr	r3, [pc, #48]	; (80139c4 <UTIL_TIMER_Stop+0x64>)
 8013994:	6018      	str	r0, [r3, #0]
            TimerSetTimeout( TimerListHead );
 8013996:	f7ff ffcb 	bl	8013930 <TimerSetTimeout>
 801399a:	e009      	b.n	80139b0 <UTIL_TIMER_Stop+0x50>
            UTIL_TimerDriver.StopTimerEvt( );
 801399c:	4b0a      	ldr	r3, [pc, #40]	; (80139c8 <UTIL_TIMER_Stop+0x68>)
 801399e:	68db      	ldr	r3, [r3, #12]
 80139a0:	4798      	blx	r3
            TimerListHead = NULL;
 80139a2:	4b08      	ldr	r3, [pc, #32]	; (80139c4 <UTIL_TIMER_Stop+0x64>)
 80139a4:	2200      	movs	r2, #0
 80139a6:	601a      	str	r2, [r3, #0]
 80139a8:	e002      	b.n	80139b0 <UTIL_TIMER_Stop+0x50>
            if( cur->Next != NULL )
 80139aa:	695b      	ldr	r3, [r3, #20]
 80139ac:	b123      	cbz	r3, 80139b8 <UTIL_TIMER_Stop+0x58>
              prev->Next = cur;
 80139ae:	614b      	str	r3, [r1, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139b0:	f384 8810 	msr	PRIMASK, r4
}
 80139b4:	2000      	movs	r0, #0
}
 80139b6:	bd10      	pop	{r4, pc}
              prev->Next = cur;
 80139b8:	2300      	movs	r3, #0
 80139ba:	614b      	str	r3, [r1, #20]
 80139bc:	e7f8      	b.n	80139b0 <UTIL_TIMER_Stop+0x50>
    ret = UTIL_TIMER_INVALID_PARAM;
 80139be:	2001      	movs	r0, #1
}
 80139c0:	4770      	bx	lr
 80139c2:	bf00      	nop
 80139c4:	2000183c 	.word	0x2000183c
 80139c8:	08014080 	.word	0x08014080

080139cc <TimerInsertTimer>:
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80139cc:	4b09      	ldr	r3, [pc, #36]	; (80139f4 <TimerInsertTimer+0x28>)
 80139ce:	681a      	ldr	r2, [r3, #0]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 80139d0:	6953      	ldr	r3, [r2, #20]

  while (cur->Next != NULL )
 80139d2:	e001      	b.n	80139d8 <TimerInsertTimer+0xc>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
    {
        cur = next;
 80139d4:	461a      	mov	r2, r3
        next = next->Next;
 80139d6:	695b      	ldr	r3, [r3, #20]
  while (cur->Next != NULL )
 80139d8:	6951      	ldr	r1, [r2, #20]
 80139da:	b139      	cbz	r1, 80139ec <TimerInsertTimer+0x20>
    if( TimerObject->Timestamp  > next->Timestamp )
 80139dc:	6819      	ldr	r1, [r3, #0]
 80139de:	f8d0 c000 	ldr.w	ip, [r0]
 80139e2:	458c      	cmp	ip, r1
 80139e4:	d8f6      	bhi.n	80139d4 <TimerInsertTimer+0x8>
    }
    else
    {
        cur->Next = TimerObject;
 80139e6:	6150      	str	r0, [r2, #20]
        TimerObject->Next = next;
 80139e8:	6143      	str	r3, [r0, #20]
        return;
 80139ea:	4770      	bx	lr

    }
  }
  cur->Next = TimerObject;
 80139ec:	6150      	str	r0, [r2, #20]
  TimerObject->Next = NULL;
 80139ee:	2300      	movs	r3, #0
 80139f0:	6143      	str	r3, [r0, #20]
}
 80139f2:	4770      	bx	lr
 80139f4:	2000183c 	.word	0x2000183c

080139f8 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 80139f8:	b508      	push	{r3, lr}
  UTIL_TIMER_Object_t* cur = TimerListHead;
 80139fa:	4b05      	ldr	r3, [pc, #20]	; (8013a10 <TimerInsertNewHeadTimer+0x18>)
 80139fc:	681b      	ldr	r3, [r3, #0]

  if( cur != NULL )
 80139fe:	b10b      	cbz	r3, 8013a04 <TimerInsertNewHeadTimer+0xc>
  {
    cur->IsPending = 0;
 8013a00:	2200      	movs	r2, #0
 8013a02:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 8013a04:	6143      	str	r3, [r0, #20]
  TimerListHead = TimerObject;
 8013a06:	4b02      	ldr	r3, [pc, #8]	; (8013a10 <TimerInsertNewHeadTimer+0x18>)
 8013a08:	6018      	str	r0, [r3, #0]
  TimerSetTimeout( TimerListHead );
 8013a0a:	f7ff ff91 	bl	8013930 <TimerSetTimeout>
}
 8013a0e:	bd08      	pop	{r3, pc}
 8013a10:	2000183c 	.word	0x2000183c

08013a14 <UTIL_TIMER_Start>:
{
 8013a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 8013a16:	2800      	cmp	r0, #0
 8013a18:	d036      	beq.n	8013a88 <UTIL_TIMER_Start+0x74>
 8013a1a:	4604      	mov	r4, r0
 8013a1c:	f7ff ff7a 	bl	8013914 <TimerExists>
 8013a20:	2800      	cmp	r0, #0
 8013a22:	d134      	bne.n	8013a8e <UTIL_TIMER_Start+0x7a>
 8013a24:	7a65      	ldrb	r5, [r4, #9]
 8013a26:	2d00      	cmp	r5, #0
 8013a28:	d133      	bne.n	8013a92 <UTIL_TIMER_Start+0x7e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013a2a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013a2e:	b672      	cpsid	i
    ticks = TimerObject->ReloadValue;
 8013a30:	6867      	ldr	r7, [r4, #4]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 8013a32:	4b19      	ldr	r3, [pc, #100]	; (8013a98 <UTIL_TIMER_Start+0x84>)
 8013a34:	6a1b      	ldr	r3, [r3, #32]
 8013a36:	4798      	blx	r3
    if( ticks < minValue )
 8013a38:	4287      	cmp	r7, r0
 8013a3a:	d300      	bcc.n	8013a3e <UTIL_TIMER_Start+0x2a>
    ticks = TimerObject->ReloadValue;
 8013a3c:	4638      	mov	r0, r7
    TimerObject->Timestamp = ticks;
 8013a3e:	6020      	str	r0, [r4, #0]
    TimerObject->IsPending = 0U;
 8013a40:	2300      	movs	r3, #0
 8013a42:	7223      	strb	r3, [r4, #8]
    TimerObject->IsRunning = 1U;
 8013a44:	2201      	movs	r2, #1
 8013a46:	7262      	strb	r2, [r4, #9]
    TimerObject->IsReloadStopped = 0U;
 8013a48:	72a3      	strb	r3, [r4, #10]
    if( TimerListHead == NULL )
 8013a4a:	4b14      	ldr	r3, [pc, #80]	; (8013a9c <UTIL_TIMER_Start+0x88>)
 8013a4c:	681b      	ldr	r3, [r3, #0]
 8013a4e:	b183      	cbz	r3, 8013a72 <UTIL_TIMER_Start+0x5e>
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 8013a50:	4b11      	ldr	r3, [pc, #68]	; (8013a98 <UTIL_TIMER_Start+0x84>)
 8013a52:	699b      	ldr	r3, [r3, #24]
 8013a54:	4798      	blx	r3
      TimerObject->Timestamp += elapsedTime;
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	4418      	add	r0, r3
 8013a5a:	6020      	str	r0, [r4, #0]
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 8013a5c:	4b0f      	ldr	r3, [pc, #60]	; (8013a9c <UTIL_TIMER_Start+0x88>)
 8013a5e:	681b      	ldr	r3, [r3, #0]
 8013a60:	681b      	ldr	r3, [r3, #0]
 8013a62:	4298      	cmp	r0, r3
 8013a64:	d20c      	bcs.n	8013a80 <UTIL_TIMER_Start+0x6c>
        TimerInsertNewHeadTimer( TimerObject);
 8013a66:	4620      	mov	r0, r4
 8013a68:	f7ff ffc6 	bl	80139f8 <TimerInsertNewHeadTimer>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a6c:	f386 8810 	msr	PRIMASK, r6
}
 8013a70:	e00b      	b.n	8013a8a <UTIL_TIMER_Start+0x76>
      UTIL_TimerDriver.SetTimerContext();
 8013a72:	4b09      	ldr	r3, [pc, #36]	; (8013a98 <UTIL_TIMER_Start+0x84>)
 8013a74:	691b      	ldr	r3, [r3, #16]
 8013a76:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 8013a78:	4620      	mov	r0, r4
 8013a7a:	f7ff ffbd 	bl	80139f8 <TimerInsertNewHeadTimer>
 8013a7e:	e7f5      	b.n	8013a6c <UTIL_TIMER_Start+0x58>
        TimerInsertTimer( TimerObject);
 8013a80:	4620      	mov	r0, r4
 8013a82:	f7ff ffa3 	bl	80139cc <TimerInsertTimer>
 8013a86:	e7f1      	b.n	8013a6c <UTIL_TIMER_Start+0x58>
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013a88:	2501      	movs	r5, #1
}
 8013a8a:	4628      	mov	r0, r5
 8013a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret =  UTIL_TIMER_INVALID_PARAM;
 8013a8e:	2501      	movs	r5, #1
 8013a90:	e7fb      	b.n	8013a8a <UTIL_TIMER_Start+0x76>
 8013a92:	2501      	movs	r5, #1
 8013a94:	e7f9      	b.n	8013a8a <UTIL_TIMER_Start+0x76>
 8013a96:	bf00      	nop
 8013a98:	08014080 	.word	0x08014080
 8013a9c:	2000183c 	.word	0x2000183c

08013aa0 <UTIL_TIMER_SetPeriod>:
  if(NULL == TimerObject)
 8013aa0:	b198      	cbz	r0, 8013aca <UTIL_TIMER_SetPeriod+0x2a>
{
 8013aa2:	b510      	push	{r4, lr}
 8013aa4:	4604      	mov	r4, r0
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 8013aa6:	4b0a      	ldr	r3, [pc, #40]	; (8013ad0 <UTIL_TIMER_SetPeriod+0x30>)
 8013aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013aaa:	4608      	mov	r0, r1
 8013aac:	4798      	blx	r3
 8013aae:	6060      	str	r0, [r4, #4]
    if(TimerExists(TimerObject))
 8013ab0:	4620      	mov	r0, r4
 8013ab2:	f7ff ff2f 	bl	8013914 <TimerExists>
 8013ab6:	b908      	cbnz	r0, 8013abc <UTIL_TIMER_SetPeriod+0x1c>
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 8013ab8:	2000      	movs	r0, #0
}
 8013aba:	bd10      	pop	{r4, pc}
      (void)UTIL_TIMER_Stop(TimerObject);
 8013abc:	4620      	mov	r0, r4
 8013abe:	f7ff ff4f 	bl	8013960 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 8013ac2:	4620      	mov	r0, r4
 8013ac4:	f7ff ffa6 	bl	8013a14 <UTIL_TIMER_Start>
 8013ac8:	e7f7      	b.n	8013aba <UTIL_TIMER_SetPeriod+0x1a>
	  ret = UTIL_TIMER_INVALID_PARAM;
 8013aca:	2001      	movs	r0, #1
}
 8013acc:	4770      	bx	lr
 8013ace:	bf00      	nop
 8013ad0:	08014080 	.word	0x08014080

08013ad4 <UTIL_TIMER_IRQ_Handler>:
{
 8013ad4:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ad6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 8013ada:	b672      	cpsid	i
  old  =  UTIL_TimerDriver.GetTimerContext( );
 8013adc:	4c1e      	ldr	r4, [pc, #120]	; (8013b58 <UTIL_TIMER_IRQ_Handler+0x84>)
 8013ade:	6963      	ldr	r3, [r4, #20]
 8013ae0:	4798      	blx	r3
 8013ae2:	4606      	mov	r6, r0
  now  =  UTIL_TimerDriver.SetTimerContext( );
 8013ae4:	6923      	ldr	r3, [r4, #16]
 8013ae6:	4798      	blx	r3
  DeltaContext = now  - old; /*intentional wrap around */
 8013ae8:	1b84      	subs	r4, r0, r6
  if ( TimerListHead != NULL )
 8013aea:	4b1c      	ldr	r3, [pc, #112]	; (8013b5c <UTIL_TIMER_IRQ_Handler+0x88>)
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	b923      	cbnz	r3, 8013afa <UTIL_TIMER_IRQ_Handler+0x26>
 8013af0:	e018      	b.n	8013b24 <UTIL_TIMER_IRQ_Handler+0x50>
        cur->Timestamp = 0;
 8013af2:	2200      	movs	r2, #0
 8013af4:	601a      	str	r2, [r3, #0]
      cur = cur->Next;
 8013af6:	695b      	ldr	r3, [r3, #20]
    } while(cur != NULL);
 8013af8:	b1a3      	cbz	r3, 8013b24 <UTIL_TIMER_IRQ_Handler+0x50>
      if (cur->Timestamp > DeltaContext)
 8013afa:	681a      	ldr	r2, [r3, #0]
 8013afc:	42a2      	cmp	r2, r4
 8013afe:	d9f8      	bls.n	8013af2 <UTIL_TIMER_IRQ_Handler+0x1e>
        cur->Timestamp -= DeltaContext;
 8013b00:	1a31      	subs	r1, r6, r0
 8013b02:	440a      	add	r2, r1
 8013b04:	601a      	str	r2, [r3, #0]
 8013b06:	e7f6      	b.n	8013af6 <UTIL_TIMER_IRQ_Handler+0x22>
      cur = TimerListHead;
 8013b08:	4b14      	ldr	r3, [pc, #80]	; (8013b5c <UTIL_TIMER_IRQ_Handler+0x88>)
 8013b0a:	681c      	ldr	r4, [r3, #0]
      TimerListHead = TimerListHead->Next;
 8013b0c:	6962      	ldr	r2, [r4, #20]
 8013b0e:	601a      	str	r2, [r3, #0]
      cur->IsPending = 0;
 8013b10:	2300      	movs	r3, #0
 8013b12:	7223      	strb	r3, [r4, #8]
      cur->IsRunning = 0;
 8013b14:	7263      	strb	r3, [r4, #9]
      cur->Callback(cur->argument);
 8013b16:	68e3      	ldr	r3, [r4, #12]
 8013b18:	6920      	ldr	r0, [r4, #16]
 8013b1a:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 8013b1c:	8963      	ldrh	r3, [r4, #10]
 8013b1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013b22:	d012      	beq.n	8013b4a <UTIL_TIMER_IRQ_Handler+0x76>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 8013b24:	4b0d      	ldr	r3, [pc, #52]	; (8013b5c <UTIL_TIMER_IRQ_Handler+0x88>)
 8013b26:	681b      	ldr	r3, [r3, #0]
 8013b28:	b13b      	cbz	r3, 8013b3a <UTIL_TIMER_IRQ_Handler+0x66>
 8013b2a:	681c      	ldr	r4, [r3, #0]
 8013b2c:	2c00      	cmp	r4, #0
 8013b2e:	d0eb      	beq.n	8013b08 <UTIL_TIMER_IRQ_Handler+0x34>
 8013b30:	4b09      	ldr	r3, [pc, #36]	; (8013b58 <UTIL_TIMER_IRQ_Handler+0x84>)
 8013b32:	699b      	ldr	r3, [r3, #24]
 8013b34:	4798      	blx	r3
 8013b36:	4284      	cmp	r4, r0
 8013b38:	d3e6      	bcc.n	8013b08 <UTIL_TIMER_IRQ_Handler+0x34>
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 8013b3a:	4b08      	ldr	r3, [pc, #32]	; (8013b5c <UTIL_TIMER_IRQ_Handler+0x88>)
 8013b3c:	6818      	ldr	r0, [r3, #0]
 8013b3e:	b108      	cbz	r0, 8013b44 <UTIL_TIMER_IRQ_Handler+0x70>
 8013b40:	7a03      	ldrb	r3, [r0, #8]
 8013b42:	b133      	cbz	r3, 8013b52 <UTIL_TIMER_IRQ_Handler+0x7e>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013b44:	f385 8810 	msr	PRIMASK, r5
}
 8013b48:	bd70      	pop	{r4, r5, r6, pc}
        (void)UTIL_TIMER_Start(cur);
 8013b4a:	4620      	mov	r0, r4
 8013b4c:	f7ff ff62 	bl	8013a14 <UTIL_TIMER_Start>
 8013b50:	e7e8      	b.n	8013b24 <UTIL_TIMER_IRQ_Handler+0x50>
    TimerSetTimeout( TimerListHead );
 8013b52:	f7ff feed 	bl	8013930 <TimerSetTimeout>
 8013b56:	e7f5      	b.n	8013b44 <UTIL_TIMER_IRQ_Handler+0x70>
 8013b58:	08014080 	.word	0x08014080
 8013b5c:	2000183c 	.word	0x2000183c

08013b60 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 8013b60:	4601      	mov	r1, r0
  int i = 0;
 8013b62:	2000      	movs	r0, #0
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 8013b64:	e007      	b.n	8013b76 <ee_skip_atoi+0x16>
 8013b66:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8013b6a:	1c53      	adds	r3, r2, #1
 8013b6c:	600b      	str	r3, [r1, #0]
 8013b6e:	7813      	ldrb	r3, [r2, #0]
 8013b70:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8013b74:	3830      	subs	r0, #48	; 0x30
 8013b76:	680a      	ldr	r2, [r1, #0]
 8013b78:	7813      	ldrb	r3, [r2, #0]
 8013b7a:	3b30      	subs	r3, #48	; 0x30
 8013b7c:	b2db      	uxtb	r3, r3
 8013b7e:	2b09      	cmp	r3, #9
 8013b80:	d9f1      	bls.n	8013b66 <ee_skip_atoi+0x6>
  return i;
}
 8013b82:	4770      	bx	lr

08013b84 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 8013b84:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
 8013b88:	b093      	sub	sp, #76	; 0x4c
 8013b8a:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8013b8c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 8013b8e:	f016 0f40 	tst.w	r6, #64	; 0x40
 8013b92:	d110      	bne.n	8013bb6 <ee_number+0x32>
  char *dig = lower_digits;
 8013b94:	f8df a0f8 	ldr.w	sl, [pc, #248]	; 8013c90 <ee_number+0x10c>
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 8013b98:	1e9f      	subs	r7, r3, #2
 8013b9a:	2f22      	cmp	r7, #34	; 0x22
 8013b9c:	d875      	bhi.n	8013c8a <ee_number+0x106>

  c = (type & ZEROPAD) ? '0' : ' ';
 8013b9e:	f016 0401 	ands.w	r4, r6, #1
 8013ba2:	d00b      	beq.n	8013bbc <ee_number+0x38>
 8013ba4:	f04f 0e30 	mov.w	lr, #48	; 0x30
  sign = 0;
  if (type & SIGN)
 8013ba8:	f016 0f02 	tst.w	r6, #2
 8013bac:	d00f      	beq.n	8013bce <ee_number+0x4a>
  {
    if (num < 0)
 8013bae:	2a00      	cmp	r2, #0
 8013bb0:	db07      	blt.n	8013bc2 <ee_number+0x3e>
  sign = 0;
 8013bb2:	2700      	movs	r7, #0
 8013bb4:	e00c      	b.n	8013bd0 <ee_number+0x4c>
  if (type & UPPERCASE)  dig = upper_digits;
 8013bb6:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 8013c94 <ee_number+0x110>
 8013bba:	e7ed      	b.n	8013b98 <ee_number+0x14>
  c = (type & ZEROPAD) ? '0' : ' ';
 8013bbc:	f04f 0e20 	mov.w	lr, #32
 8013bc0:	e7f2      	b.n	8013ba8 <ee_number+0x24>
    {
      sign = '-';
      num = -num;
 8013bc2:	4252      	negs	r2, r2
      size--;
 8013bc4:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8013bc6:	3e01      	subs	r6, #1
 8013bc8:	961a      	str	r6, [sp, #104]	; 0x68
      sign = '-';
 8013bca:	272d      	movs	r7, #45	; 0x2d
 8013bcc:	e000      	b.n	8013bd0 <ee_number+0x4c>
  sign = 0;
 8013bce:	2700      	movs	r7, #0
  }
#endif

  i = 0;

  if (num == 0)
 8013bd0:	bb5a      	cbnz	r2, 8013c2a <ee_number+0xa6>
    tmp[i++] = '0';
 8013bd2:	2330      	movs	r3, #48	; 0x30
 8013bd4:	f88d 3004 	strb.w	r3, [sp, #4]
 8013bd8:	f04f 0c01 	mov.w	ip, #1
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
      num = ((unsigned long) num) / (unsigned) base;
    }
  }

  if (i > precision) precision = i;
 8013bdc:	45ac      	cmp	ip, r5
 8013bde:	dd00      	ble.n	8013be2 <ee_number+0x5e>
 8013be0:	4665      	mov	r5, ip
  size -= precision;
 8013be2:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8013be4:	1b5b      	subs	r3, r3, r5
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013be6:	b31c      	cbz	r4, 8013c30 <ee_number+0xac>
  if (sign) ASSIGN_STR(sign);
 8013be8:	b11f      	cbz	r7, 8013bf2 <ee_number+0x6e>
 8013bea:	f800 7b01 	strb.w	r7, [r0], #1
 8013bee:	3901      	subs	r1, #1
 8013bf0:	d007      	beq.n	8013c02 <ee_number+0x7e>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 8013bf2:	2b00      	cmp	r3, #0
 8013bf4:	f103 33ff 	add.w	r3, r3, #4294967295
 8013bf8:	dd24      	ble.n	8013c44 <ee_number+0xc0>
 8013bfa:	f800 eb01 	strb.w	lr, [r0], #1
 8013bfe:	3901      	subs	r1, #1
 8013c00:	d1f7      	bne.n	8013bf2 <ee_number+0x6e>
  while (i < precision--) ASSIGN_STR('0');
  while (i-- > 0) ASSIGN_STR(tmp[i]);
  while (size-- > 0) ASSIGN_STR(' ');

  return str;
}
 8013c02:	b013      	add	sp, #76	; 0x4c
 8013c04:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013c08:	fbb2 f6f3 	udiv	r6, r2, r3
 8013c0c:	fb03 2216 	mls	r2, r3, r6, r2
 8013c10:	f81a 8002 	ldrb.w	r8, [sl, r2]
 8013c14:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013c18:	446a      	add	r2, sp
 8013c1a:	f802 8c44 	strb.w	r8, [r2, #-68]
      num = ((unsigned long) num) / (unsigned) base;
 8013c1e:	4632      	mov	r2, r6
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 8013c20:	f10c 0c01 	add.w	ip, ip, #1
    while (num != 0)
 8013c24:	2a00      	cmp	r2, #0
 8013c26:	d1ef      	bne.n	8013c08 <ee_number+0x84>
 8013c28:	e7d8      	b.n	8013bdc <ee_number+0x58>
  i = 0;
 8013c2a:	f04f 0c00 	mov.w	ip, #0
 8013c2e:	e7f9      	b.n	8013c24 <ee_number+0xa0>
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f103 33ff 	add.w	r3, r3, #4294967295
 8013c36:	ddd7      	ble.n	8013be8 <ee_number+0x64>
 8013c38:	2220      	movs	r2, #32
 8013c3a:	f800 2b01 	strb.w	r2, [r0], #1
 8013c3e:	3901      	subs	r1, #1
 8013c40:	d1f6      	bne.n	8013c30 <ee_number+0xac>
 8013c42:	e7de      	b.n	8013c02 <ee_number+0x7e>
  while (i < precision--) ASSIGN_STR('0');
 8013c44:	4565      	cmp	r5, ip
 8013c46:	f105 35ff 	add.w	r5, r5, #4294967295
 8013c4a:	dd05      	ble.n	8013c58 <ee_number+0xd4>
 8013c4c:	2230      	movs	r2, #48	; 0x30
 8013c4e:	f800 2b01 	strb.w	r2, [r0], #1
 8013c52:	3901      	subs	r1, #1
 8013c54:	d1f6      	bne.n	8013c44 <ee_number+0xc0>
 8013c56:	e7d4      	b.n	8013c02 <ee_number+0x7e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 8013c58:	4662      	mov	r2, ip
 8013c5a:	2a00      	cmp	r2, #0
 8013c5c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8013c60:	dd09      	ble.n	8013c76 <ee_number+0xf2>
 8013c62:	f10c 0248 	add.w	r2, ip, #72	; 0x48
 8013c66:	446a      	add	r2, sp
 8013c68:	f812 2c44 	ldrb.w	r2, [r2, #-68]
 8013c6c:	f800 2b01 	strb.w	r2, [r0], #1
 8013c70:	3901      	subs	r1, #1
 8013c72:	d1f1      	bne.n	8013c58 <ee_number+0xd4>
 8013c74:	e7c5      	b.n	8013c02 <ee_number+0x7e>
  while (size-- > 0) ASSIGN_STR(' ');
 8013c76:	2b00      	cmp	r3, #0
 8013c78:	f103 33ff 	add.w	r3, r3, #4294967295
 8013c7c:	ddc1      	ble.n	8013c02 <ee_number+0x7e>
 8013c7e:	2220      	movs	r2, #32
 8013c80:	f800 2b01 	strb.w	r2, [r0], #1
 8013c84:	3901      	subs	r1, #1
 8013c86:	d1f6      	bne.n	8013c76 <ee_number+0xf2>
 8013c88:	e7bb      	b.n	8013c02 <ee_number+0x7e>
  if (base < 2 || base > 36) return 0;
 8013c8a:	2000      	movs	r0, #0
 8013c8c:	e7b9      	b.n	8013c02 <ee_number+0x7e>
 8013c8e:	bf00      	nop
 8013c90:	08014ef0 	.word	0x08014ef0
 8013c94:	08014ec8 	.word	0x08014ec8

08013c98 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 8013c98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c9c:	b087      	sub	sp, #28
 8013c9e:	9205      	str	r2, [sp, #20]
 8013ca0:	9304      	str	r3, [sp, #16]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 8013ca2:	1e0f      	subs	r7, r1, #0
 8013ca4:	f340 80b8 	ble.w	8013e18 <tiny_vsnprintf_like+0x180>
 8013ca8:	4606      	mov	r6, r0
  {
    return 0;
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013caa:	4604      	mov	r4, r0
 8013cac:	e004      	b.n	8013cb8 <tiny_vsnprintf_like+0x20>
  {
    CHECK_STR_SIZE(buf, str, size);

    if (*fmt != '%')
    {
      *str++ = *fmt;
 8013cae:	f804 2b01 	strb.w	r2, [r4], #1
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 8013cb2:	9b05      	ldr	r3, [sp, #20]
 8013cb4:	3301      	adds	r3, #1
 8013cb6:	9305      	str	r3, [sp, #20]
 8013cb8:	9905      	ldr	r1, [sp, #20]
 8013cba:	780a      	ldrb	r2, [r1, #0]
 8013cbc:	b922      	cbnz	r2, 8013cc8 <tiny_vsnprintf_like+0x30>
 8013cbe:	1ba3      	subs	r3, r4, r6
 8013cc0:	1e78      	subs	r0, r7, #1
 8013cc2:	4283      	cmp	r3, r0
 8013cc4:	f2c0 80a2 	blt.w	8013e0c <tiny_vsnprintf_like+0x174>
    CHECK_STR_SIZE(buf, str, size);
 8013cc8:	1ba3      	subs	r3, r4, r6
 8013cca:	f107 38ff 	add.w	r8, r7, #4294967295
 8013cce:	4543      	cmp	r3, r8
 8013cd0:	f280 809c 	bge.w	8013e0c <tiny_vsnprintf_like+0x174>
    if (*fmt != '%')
 8013cd4:	2a25      	cmp	r2, #37	; 0x25
 8013cd6:	d1ea      	bne.n	8013cae <tiny_vsnprintf_like+0x16>

    // Process flags
    flags = 0;
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 8013cd8:	1c4b      	adds	r3, r1, #1
 8013cda:	9305      	str	r3, [sp, #20]
    if (*fmt == '0')
 8013cdc:	784b      	ldrb	r3, [r1, #1]
 8013cde:	2b30      	cmp	r3, #48	; 0x30
 8013ce0:	d020      	beq.n	8013d24 <tiny_vsnprintf_like+0x8c>
    flags = 0;
 8013ce2:	f04f 0900 	mov.w	r9, #0
    }
#endif

    // Get field width
    field_width = -1;
    if (is_digit(*fmt))
 8013ce6:	3b30      	subs	r3, #48	; 0x30
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	2b09      	cmp	r3, #9
 8013cec:	d91d      	bls.n	8013d2a <tiny_vsnprintf_like+0x92>
    field_width = -1;
 8013cee:	f04f 35ff 	mov.w	r5, #4294967295
#endif

    // Default base
    base = 10;

    switch (*fmt)
 8013cf2:	9b05      	ldr	r3, [sp, #20]
 8013cf4:	781a      	ldrb	r2, [r3, #0]
 8013cf6:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
 8013cfa:	2b20      	cmp	r3, #32
 8013cfc:	d867      	bhi.n	8013dce <tiny_vsnprintf_like+0x136>
 8013cfe:	e8df f003 	tbb	[pc, r3]
 8013d02:	664a      	.short	0x664a
 8013d04:	66666666 	.word	0x66666666
 8013d08:	66666666 	.word	0x66666666
 8013d0c:	66621e66 	.word	0x66621e66
 8013d10:	62666666 	.word	0x62666666
 8013d14:	66666666 	.word	0x66666666
 8013d18:	66666666 	.word	0x66666666
 8013d1c:	19662866 	.word	0x19662866
 8013d20:	6666      	.short	0x6666
 8013d22:	7c          	.byte	0x7c
 8013d23:	00          	.byte	0x00
      flags |= ZEROPAD;
 8013d24:	f04f 0901 	mov.w	r9, #1
 8013d28:	e7dd      	b.n	8013ce6 <tiny_vsnprintf_like+0x4e>
      field_width = ee_skip_atoi(&fmt);
 8013d2a:	a805      	add	r0, sp, #20
 8013d2c:	f7ff ff18 	bl	8013b60 <ee_skip_atoi>
 8013d30:	4605      	mov	r5, r0
 8013d32:	e7de      	b.n	8013cf2 <tiny_vsnprintf_like+0x5a>
    switch (*fmt)
 8013d34:	230a      	movs	r3, #10
 8013d36:	e031      	b.n	8013d9c <tiny_vsnprintf_like+0x104>
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 8013d38:	2320      	movs	r3, #32
 8013d3a:	f804 3b01 	strb.w	r3, [r4], #1
 8013d3e:	3d01      	subs	r5, #1
 8013d40:	2d00      	cmp	r5, #0
 8013d42:	dcf9      	bgt.n	8013d38 <tiny_vsnprintf_like+0xa0>
        *str++ = (unsigned char) va_arg(args, int);
 8013d44:	9b04      	ldr	r3, [sp, #16]
 8013d46:	1d1a      	adds	r2, r3, #4
 8013d48:	9204      	str	r2, [sp, #16]
 8013d4a:	781b      	ldrb	r3, [r3, #0]
 8013d4c:	f804 3b01 	strb.w	r3, [r4], #1
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 8013d50:	e7af      	b.n	8013cb2 <tiny_vsnprintf_like+0x1a>

      case 's':
        s = va_arg(args, char *);
 8013d52:	9b04      	ldr	r3, [sp, #16]
 8013d54:	1d1a      	adds	r2, r3, #4
 8013d56:	9204      	str	r2, [sp, #16]
 8013d58:	f8d3 8000 	ldr.w	r8, [r3]
        if (!s) s = "<NULL>";
 8013d5c:	f1b8 0f00 	cmp.w	r8, #0
 8013d60:	d003      	beq.n	8013d6a <tiny_vsnprintf_like+0xd2>
#ifdef TINY_PRINTF
        len = strlen(s);
 8013d62:	4640      	mov	r0, r8
 8013d64:	f7ec fa08 	bl	8000178 <strlen>
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 8013d68:	e006      	b.n	8013d78 <tiny_vsnprintf_like+0xe0>
        if (!s) s = "<NULL>";
 8013d6a:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 8013e1c <tiny_vsnprintf_like+0x184>
 8013d6e:	e7f8      	b.n	8013d62 <tiny_vsnprintf_like+0xca>
          while (len < field_width--) *str++ = ' ';
 8013d70:	2220      	movs	r2, #32
 8013d72:	f804 2b01 	strb.w	r2, [r4], #1
 8013d76:	461d      	mov	r5, r3
 8013d78:	1e6b      	subs	r3, r5, #1
 8013d7a:	4285      	cmp	r5, r0
 8013d7c:	dcf8      	bgt.n	8013d70 <tiny_vsnprintf_like+0xd8>
        for (i = 0; i < len; ++i) *str++ = *s++;
 8013d7e:	2200      	movs	r2, #0
 8013d80:	e006      	b.n	8013d90 <tiny_vsnprintf_like+0xf8>
 8013d82:	4643      	mov	r3, r8
 8013d84:	f813 1b01 	ldrb.w	r1, [r3], #1
 8013d88:	f804 1b01 	strb.w	r1, [r4], #1
 8013d8c:	3201      	adds	r2, #1
 8013d8e:	4698      	mov	r8, r3
 8013d90:	4282      	cmp	r2, r0
 8013d92:	dbf6      	blt.n	8013d82 <tiny_vsnprintf_like+0xea>
 8013d94:	e78d      	b.n	8013cb2 <tiny_vsnprintf_like+0x1a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 8013d96:	f049 0940 	orr.w	r9, r9, #64	; 0x40

      case 'x':
        base = 16;
 8013d9a:	2310      	movs	r3, #16
        continue;
    }

    if (qualifier == 'l')
      num = va_arg(args, unsigned long);
    else if (flags & SIGN)
 8013d9c:	f019 0f02 	tst.w	r9, #2
 8013da0:	d02f      	beq.n	8013e02 <tiny_vsnprintf_like+0x16a>
      num = va_arg(args, int);
 8013da2:	9a04      	ldr	r2, [sp, #16]
 8013da4:	1d11      	adds	r1, r2, #4
 8013da6:	9104      	str	r1, [sp, #16]
 8013da8:	6812      	ldr	r2, [r2, #0]
    else
      num = va_arg(args, unsigned int);

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 8013daa:	1ba1      	subs	r1, r4, r6
 8013dac:	f8cd 9008 	str.w	r9, [sp, #8]
 8013db0:	f04f 30ff 	mov.w	r0, #4294967295
 8013db4:	9001      	str	r0, [sp, #4]
 8013db6:	9500      	str	r5, [sp, #0]
 8013db8:	eba8 0101 	sub.w	r1, r8, r1
 8013dbc:	4620      	mov	r0, r4
 8013dbe:	f7ff fee1 	bl	8013b84 <ee_number>
 8013dc2:	4604      	mov	r4, r0
 8013dc4:	e775      	b.n	8013cb2 <tiny_vsnprintf_like+0x1a>
        flags |= SIGN;
 8013dc6:	f049 0902 	orr.w	r9, r9, #2
    base = 10;
 8013dca:	230a      	movs	r3, #10
 8013dcc:	e7e6      	b.n	8013d9c <tiny_vsnprintf_like+0x104>
        if (*fmt != '%') *str++ = '%';
 8013dce:	2a25      	cmp	r2, #37	; 0x25
 8013dd0:	d002      	beq.n	8013dd8 <tiny_vsnprintf_like+0x140>
 8013dd2:	2325      	movs	r3, #37	; 0x25
 8013dd4:	f804 3b01 	strb.w	r3, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013dd8:	1ba3      	subs	r3, r4, r6
 8013dda:	4598      	cmp	r8, r3
 8013ddc:	dd0f      	ble.n	8013dfe <tiny_vsnprintf_like+0x166>
        if (*fmt)
 8013dde:	9b05      	ldr	r3, [sp, #20]
 8013de0:	781a      	ldrb	r2, [r3, #0]
 8013de2:	b13a      	cbz	r2, 8013df4 <tiny_vsnprintf_like+0x15c>
          *str++ = *fmt;
 8013de4:	f804 2b01 	strb.w	r2, [r4], #1
        CHECK_STR_SIZE(buf, str, size);
 8013de8:	1ba3      	subs	r3, r4, r6
 8013dea:	4598      	cmp	r8, r3
 8013dec:	f73f af61 	bgt.w	8013cb2 <tiny_vsnprintf_like+0x1a>
    base = 10;
 8013df0:	230a      	movs	r3, #10
    if (qualifier == 'l')
 8013df2:	e7d3      	b.n	8013d9c <tiny_vsnprintf_like+0x104>
          --fmt;
 8013df4:	3b01      	subs	r3, #1
 8013df6:	9305      	str	r3, [sp, #20]
 8013df8:	e7f6      	b.n	8013de8 <tiny_vsnprintf_like+0x150>
        base = 16;
 8013dfa:	2310      	movs	r3, #16
 8013dfc:	e7ce      	b.n	8013d9c <tiny_vsnprintf_like+0x104>
    base = 10;
 8013dfe:	230a      	movs	r3, #10
 8013e00:	e7cc      	b.n	8013d9c <tiny_vsnprintf_like+0x104>
      num = va_arg(args, unsigned int);
 8013e02:	9a04      	ldr	r2, [sp, #16]
 8013e04:	1d11      	adds	r1, r2, #4
 8013e06:	9104      	str	r1, [sp, #16]
 8013e08:	6812      	ldr	r2, [r2, #0]
 8013e0a:	e7ce      	b.n	8013daa <tiny_vsnprintf_like+0x112>
  }

  *str = '\0';
 8013e0c:	2300      	movs	r3, #0
 8013e0e:	7023      	strb	r3, [r4, #0]
  return str - buf;
 8013e10:	1ba0      	subs	r0, r4, r6
}
 8013e12:	b007      	add	sp, #28
 8013e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return 0;
 8013e18:	2000      	movs	r0, #0
 8013e1a:	e7fa      	b.n	8013e12 <tiny_vsnprintf_like+0x17a>
 8013e1c:	08014f18 	.word	0x08014f18

08013e20 <__libc_init_array>:
 8013e20:	b570      	push	{r4, r5, r6, lr}
 8013e22:	4d0d      	ldr	r5, [pc, #52]	; (8013e58 <__libc_init_array+0x38>)
 8013e24:	4c0d      	ldr	r4, [pc, #52]	; (8013e5c <__libc_init_array+0x3c>)
 8013e26:	1b64      	subs	r4, r4, r5
 8013e28:	10a4      	asrs	r4, r4, #2
 8013e2a:	2600      	movs	r6, #0
 8013e2c:	42a6      	cmp	r6, r4
 8013e2e:	d109      	bne.n	8013e44 <__libc_init_array+0x24>
 8013e30:	4d0b      	ldr	r5, [pc, #44]	; (8013e60 <__libc_init_array+0x40>)
 8013e32:	4c0c      	ldr	r4, [pc, #48]	; (8013e64 <__libc_init_array+0x44>)
 8013e34:	f000 f8a0 	bl	8013f78 <_init>
 8013e38:	1b64      	subs	r4, r4, r5
 8013e3a:	10a4      	asrs	r4, r4, #2
 8013e3c:	2600      	movs	r6, #0
 8013e3e:	42a6      	cmp	r6, r4
 8013e40:	d105      	bne.n	8013e4e <__libc_init_array+0x2e>
 8013e42:	bd70      	pop	{r4, r5, r6, pc}
 8013e44:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e48:	4798      	blx	r3
 8013e4a:	3601      	adds	r6, #1
 8013e4c:	e7ee      	b.n	8013e2c <__libc_init_array+0xc>
 8013e4e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013e52:	4798      	blx	r3
 8013e54:	3601      	adds	r6, #1
 8013e56:	e7f2      	b.n	8013e3e <__libc_init_array+0x1e>
 8013e58:	08014f28 	.word	0x08014f28
 8013e5c:	08014f28 	.word	0x08014f28
 8013e60:	08014f28 	.word	0x08014f28
 8013e64:	08014f2c 	.word	0x08014f2c

08013e68 <memset>:
 8013e68:	4402      	add	r2, r0
 8013e6a:	4603      	mov	r3, r0
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d100      	bne.n	8013e72 <memset+0xa>
 8013e70:	4770      	bx	lr
 8013e72:	f803 1b01 	strb.w	r1, [r3], #1
 8013e76:	e7f9      	b.n	8013e6c <memset+0x4>

08013e78 <floor>:
 8013e78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013e7c:	f3c1 580a 	ubfx	r8, r1, #20, #11
 8013e80:	f2a8 36ff 	subw	r6, r8, #1023	; 0x3ff
 8013e84:	2e13      	cmp	r6, #19
 8013e86:	4602      	mov	r2, r0
 8013e88:	460b      	mov	r3, r1
 8013e8a:	4607      	mov	r7, r0
 8013e8c:	460c      	mov	r4, r1
 8013e8e:	4605      	mov	r5, r0
 8013e90:	dc33      	bgt.n	8013efa <floor+0x82>
 8013e92:	2e00      	cmp	r6, #0
 8013e94:	da14      	bge.n	8013ec0 <floor+0x48>
 8013e96:	a334      	add	r3, pc, #208	; (adr r3, 8013f68 <floor+0xf0>)
 8013e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e9c:	f7ec f97a 	bl	8000194 <__adddf3>
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	f7ec fbaa 	bl	80005fc <__aeabi_dcmpgt>
 8013ea8:	b138      	cbz	r0, 8013eba <floor+0x42>
 8013eaa:	2c00      	cmp	r4, #0
 8013eac:	da58      	bge.n	8013f60 <floor+0xe8>
 8013eae:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8013eb2:	431d      	orrs	r5, r3
 8013eb4:	d001      	beq.n	8013eba <floor+0x42>
 8013eb6:	4c2e      	ldr	r4, [pc, #184]	; (8013f70 <floor+0xf8>)
 8013eb8:	2500      	movs	r5, #0
 8013eba:	4623      	mov	r3, r4
 8013ebc:	462f      	mov	r7, r5
 8013ebe:	e025      	b.n	8013f0c <floor+0x94>
 8013ec0:	4a2c      	ldr	r2, [pc, #176]	; (8013f74 <floor+0xfc>)
 8013ec2:	fa42 f806 	asr.w	r8, r2, r6
 8013ec6:	ea01 0208 	and.w	r2, r1, r8
 8013eca:	4302      	orrs	r2, r0
 8013ecc:	d01e      	beq.n	8013f0c <floor+0x94>
 8013ece:	a326      	add	r3, pc, #152	; (adr r3, 8013f68 <floor+0xf0>)
 8013ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013ed4:	f7ec f95e 	bl	8000194 <__adddf3>
 8013ed8:	2200      	movs	r2, #0
 8013eda:	2300      	movs	r3, #0
 8013edc:	f7ec fb8e 	bl	80005fc <__aeabi_dcmpgt>
 8013ee0:	2800      	cmp	r0, #0
 8013ee2:	d0ea      	beq.n	8013eba <floor+0x42>
 8013ee4:	2c00      	cmp	r4, #0
 8013ee6:	bfbe      	ittt	lt
 8013ee8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8013eec:	fa43 f606 	asrlt.w	r6, r3, r6
 8013ef0:	19a4      	addlt	r4, r4, r6
 8013ef2:	ea24 0408 	bic.w	r4, r4, r8
 8013ef6:	2500      	movs	r5, #0
 8013ef8:	e7df      	b.n	8013eba <floor+0x42>
 8013efa:	2e33      	cmp	r6, #51	; 0x33
 8013efc:	dd0a      	ble.n	8013f14 <floor+0x9c>
 8013efe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8013f02:	d103      	bne.n	8013f0c <floor+0x94>
 8013f04:	f7ec f946 	bl	8000194 <__adddf3>
 8013f08:	4607      	mov	r7, r0
 8013f0a:	460b      	mov	r3, r1
 8013f0c:	4638      	mov	r0, r7
 8013f0e:	4619      	mov	r1, r3
 8013f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f14:	f2a8 4813 	subw	r8, r8, #1043	; 0x413
 8013f18:	f04f 32ff 	mov.w	r2, #4294967295
 8013f1c:	fa22 f808 	lsr.w	r8, r2, r8
 8013f20:	ea18 0f00 	tst.w	r8, r0
 8013f24:	d0f2      	beq.n	8013f0c <floor+0x94>
 8013f26:	a310      	add	r3, pc, #64	; (adr r3, 8013f68 <floor+0xf0>)
 8013f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013f2c:	f7ec f932 	bl	8000194 <__adddf3>
 8013f30:	2200      	movs	r2, #0
 8013f32:	2300      	movs	r3, #0
 8013f34:	f7ec fb62 	bl	80005fc <__aeabi_dcmpgt>
 8013f38:	2800      	cmp	r0, #0
 8013f3a:	d0be      	beq.n	8013eba <floor+0x42>
 8013f3c:	2c00      	cmp	r4, #0
 8013f3e:	da02      	bge.n	8013f46 <floor+0xce>
 8013f40:	2e14      	cmp	r6, #20
 8013f42:	d103      	bne.n	8013f4c <floor+0xd4>
 8013f44:	3401      	adds	r4, #1
 8013f46:	ea25 0508 	bic.w	r5, r5, r8
 8013f4a:	e7b6      	b.n	8013eba <floor+0x42>
 8013f4c:	2301      	movs	r3, #1
 8013f4e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8013f52:	fa03 f606 	lsl.w	r6, r3, r6
 8013f56:	4435      	add	r5, r6
 8013f58:	42bd      	cmp	r5, r7
 8013f5a:	bf38      	it	cc
 8013f5c:	18e4      	addcc	r4, r4, r3
 8013f5e:	e7f2      	b.n	8013f46 <floor+0xce>
 8013f60:	2500      	movs	r5, #0
 8013f62:	462c      	mov	r4, r5
 8013f64:	e7a9      	b.n	8013eba <floor+0x42>
 8013f66:	bf00      	nop
 8013f68:	8800759c 	.word	0x8800759c
 8013f6c:	7e37e43c 	.word	0x7e37e43c
 8013f70:	bff00000 	.word	0xbff00000
 8013f74:	000fffff 	.word	0x000fffff

08013f78 <_init>:
 8013f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f7a:	bf00      	nop
 8013f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f7e:	bc08      	pop	{r3}
 8013f80:	469e      	mov	lr, r3
 8013f82:	4770      	bx	lr

08013f84 <_fini>:
 8013f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f86:	bf00      	nop
 8013f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f8a:	bc08      	pop	{r3}
 8013f8c:	469e      	mov	lr, r3
 8013f8e:	4770      	bx	lr
